[
    {
        "text": "preflight doesn't correctly parse pdf if obj identifier not followed by line terminator for some test files on the adobe acrobat engineering website, preflight output looks like this: <preflight name=\"disney-flash.pdf\"> <executiontimems>210</executiontimems> <isvalid type=\"\">false</isvalid> <errors count=\"3\"> <error count=\"1\"> <code>1.0</code> <details>syntax error, expected pattern 'obj but missed at character 'o'</details> </error> <error count=\"1\"> <code>1.2.1</code> <details>body syntax error, expected pattern 'obj but missed at character 'o'</details> </error> <error count=\"1\"> <code>1.2.1</code> <details>body syntax error, single space expected</details> </error> </errors> </preflight> which suggests that preflight doesn't correctly parse the objects. this is confirmed by a look at some of the offending pdfs in a hex editor, which reveals that the object identifiers in them are not terminated by any eol character(s). afaik this is allowed in both pdf and pdf/a-1. more details + links to test files here ('multimedia' table and below): http://www.openplanetsfoundation.org/blogs/2013-07-25-identification-pdf-preservation-risks-sequel",
        "label": 3
    },
    {
        "text": "org apache jempbox impl dateconverter unable to parse correct date value in a pdf i have found the following xmp field: xmp:createdate=\"2012-01-31t10:33+01:00\" when jempbox try to access this field i received the following error : \"error converting date:201201311033+0100\" if we read the xmp specification part 1 (http://www.adobe.com/devnet/xmp.html) in chapter \"8.2.1.2 date\" the value is correct, it respect the format : yyyy-mm-ddthh:mmtzd but the dateconverter class is not able to read it. after a quick view of the class the complete parsing method need to be rewritten. best regards, pierre huttin",
        "label": 1
    },
    {
        "text": "convert to image makes blank image the attached file when run through converttoimage is white (doesn't render anything when it should).",
        "label": 1
    },
    {
        "text": "character widths incorrect in a loaded font @test testrelativewidth() { pdfont font = pdtype0font.load(document, this.getclass().getresourceasstream(\"/liberationsans-regular.ttf\")); float wo = font.getstringwidth(\"o\"); float wp = font.getstringwidth(\"p\"); float wn = font.getstringwidth(\"n\"); assert.asserttrue(\"o must be wider than p\", wo>wp); assert.asserttrue(\"o must be wider than n\", wo>wn); } i can see that there is a confusion in the process between gid and cid values. the reason may not be entirely clear to me, but pdcidfonttype2embedder.buildwidths(cosdictionary cidfont) seems to name \"cid\" something that in my opinion is still a glyph id. and when it comes to pdcidfont.getwidth(int), the \"widths\" map that should presumably contain cid->width values in reality contains git->width.",
        "label": 6
    },
    {
        "text": "pdpage converttoimage partially generates image file and throws exception converting a pdpage to an image results in an image file only being partially generated. some text at the top of the file is created, but the majority of the page is not and an exception is thrown: [error] java.io.ioexception: unknown stream filter:cosname {jbig2decode} java.io.ioexception: unknown stream filter:cosname{jbig2decode} at org.apache.pdfbox.filter.filtermanager.getfilter(filtermanager.java:103) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:249) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:221) at org.apache.pdfbox.cos.cosstream.getunfilteredstream(cosstream.java:156) at org.apache.pdfbox.pdmodel.common.pdstream.createinputstream(pdstream.java:211) at org.apache.pdfbox.pdmodel.common.pdstream.getbytearray(pdstream.java:465) at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdpixelmap.java:141) at org.apache.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:74) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:567) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:250) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:208) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:112) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:718) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:689) is jbig2decode not a supported cosstream encoding?",
        "label": 1
    },
    {
        "text": "read images from byte array when we create several pdf files with the same images, a lot of time spend to read image's files. i added possibility to create image from byte array, which user can keep in memory.",
        "label": 11
    },
    {
        "text": "expected 'endstream' actual '' failure to parse following exception thrown when parsing attached pdf caused by: java.io.ioexception: expected='endstream' actual='' org.apache.pdfbox.io.pushbackinputstream@2a789924 at org.apache.pdfbox.pdfparser.baseparser.parsecosstream(baseparser.java:597) at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:575) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:187)",
        "label": 1
    },
    {
        "text": "rendering of type3 string fails with npe rendering of the attached pdf fails with a npe in pdfstreamengine at the line 395 (float spacewidthdisp = ...) because the textmatrix field is null. the reason is that the textmatrix gets reset while processing the first character of the string in pagedrawer#drawtype3string(). the attached patch fixes the problem, but i am not quite sure whether it is the right solution. to debug this, set a breakpoint in pdfstreamengine#processencodedtext() with the condition \"string.length == 2 && string[1] == 67\" and watch the textmatrix field vanish after the first character has been processed.",
        "label": 1
    },
    {
        "text": "overlay class does not work with in memory pdfs the class org.apache.pdfbox.multipdf.overlay has no possibility to perform the overlay only in memory (using a custom outputstream). it is currently fixed to work with files only. a suggestion would be to add an overload public void overlay(map<integer, string> specificpageoverlayfile, outputstream outstream) throws ioexception which uses the outstream if supplied and falls back to outputfilename if null is passed (would be an easy solution)",
        "label": 1
    },
    {
        "text": "modify pdfbox builds f\u00fcr apache jbig2 plugin replace jbig2 in pom.xml include/integrate jbig2 plugin to app",
        "label": 11
    },
    {
        "text": "miscellaneous errors on valid files [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1570311 originally submitted by renaudw on 2006-10-03 15:04. as far as i can tell these files are valid. some generate a warning in acrobat reader, some don't. i'm reporting them in case you want to have a look at the errors they generate. all files are accessible online by replacing /web/gfdocs with http://bat.library.ucsf.edu/data. /web/gfdocs/p/b/x/pbx00a99/pbx00a99.pdf skipped due to: java.io.ioexception: error: expected an integer type, actual='bc3c#c3???' (stacktrace follows) java.io.ioexception: error: expected an integer type, actual='bc3c#c3???' at org.pdfbox.pdfparser.baseparser.readint (baseparser.java:1335) at org.pdfbox.pdfparser.pdfparser.parseobject (pdfparser.java:415) at org.pdfbox.pdfparser.pdfparser.parse (pdfparser.java:176) at edu.ucsf.library.utils.textoverimagedocumentdetector.pa rsedocument(textoverimagedocumentdetector.java:210) at edu.ucsf.library.utils.textoverimagedocumentdetector.de tect(textoverimagedocumentdetector.java:102) at edu.ucsf.library.utils.textoverimagedocumentdetector.ma in(textoverimagedocumentdetector.java:77) /web/gfdocs/p/e/b/peb40a99/peb40a99.pdf skipped due to: java.io.streamcorruptedexception: error: data is null (stacktrace follows) java.io.streamcorruptedexception: error: data is null at org.pdfbox.filter.lzwfilter.decode (lzwfilter.java:101) at org.pdfbox.cos.cosstream.dodecode (cosstream.java:319) at org.pdfbox.cos.cosstream.dodecode (cosstream.java:249) at org.pdfbox.cos.cosstream.getunfilteredstream (cosstream.java:173) at org.pdfbox.pdmodel.common.cosstreamarray.getunfiltereds tream(cosstreamarray.java:200) at org.pdfbox.pdfparser.pdfstreamparser.<init> (pdfstreamparser.java:91) at org.pdfbox.pdmodel.common.cosstreamarray.getstreamtoken s(cosstreamarray.java:141) at org.pdfbox.util.pdfstreamengine.processsubstream (pdfstreamengine.java:189) at org.pdfbox.util.pdfstreamengine.processstream (pdfstreamengine.java:160) at edu.ucsf.library.utils.textoverimagedocumentdetector.co llecttextrenderingmodes (textoverimagedocumentdetector.java:153) at edu.ucsf.library.utils.textoverimagedocumentdetector.de tect(textoverimagedocumentdetector.java:125) at edu.ucsf.library.utils.textoverimagedocumentdetector.de tect(textoverimagedocumentdetector.java:103) at edu.ucsf.library.utils.textoverimagedocumentdetector.ma in(textoverimagedocumentdetector.java:77) /web/gfdocs/q/l/n/qln20a99/qln20a99.pdf skipped due to: java.io.streamcorruptedexception: error: data is null (stacktrace follows) java.io.streamcorruptedexception: error: data is null at org.pdfbox.filter.lzwfilter.decode (lzwfilter.java:101) at org.pdfbox.cos.cosstream.dodecode (cosstream.java:319) at org.pdfbox.cos.cosstream.dodecode (cosstream.java:249) at org.pdfbox.cos.cosstream.getunfilteredstream (cosstream.java:173) at org.pdfbox.pdmodel.common.cosstreamarray.getunfiltereds tream(cosstreamarray.java:200) at org.pdfbox.pdfparser.pdfstreamparser.<init> (pdfstreamparser.java:91) at org.pdfbox.pdmodel.common.cosstreamarray.getstreamtoken s(cosstreamarray.java:141) at org.pdfbox.util.pdfstreamengine.processsubstream (pdfstreamengine.java:189) at org.pdfbox.util.pdfstreamengine.processstream (pdfstreamengine.java:160) at edu.ucsf.library.utils.textoverimagedocumentdetector.co llecttextrenderingmodes (textoverimagedocumentdetector.java:153) at edu.ucsf.library.utils.textoverimagedocumentdetector.de tect(textoverimagedocumentdetector.java:125) at edu.ucsf.library.utils.textoverimagedocumentdetector.de tect(textoverimagedocumentdetector.java:103) at edu.ucsf.library.utils.textoverimagedocumentdetector.ma in(textoverimagedocumentdetector.java:77) /web/gfdocs/q/p/e/qpe20a99/qpe20a99.pdf skipped due to: java.io.streamcorruptedexception: error: data is null (stacktrace follows) java.io.streamcorruptedexception: error: data is null at org.pdfbox.filter.lzwfilter.decode (lzwfilter.java:101) at org.pdfbox.cos.cosstream.dodecode (cosstream.java:319) at org.pdfbox.cos.cosstream.dodecode (cosstream.java:249) at org.pdfbox.cos.cosstream.getunfilteredstream (cosstream.java:173) at org.pdfbox.pdmodel.common.cosstreamarray.getunfiltereds tream(cosstreamarray.java:200) at org.pdfbox.pdfparser.pdfstreamparser.<init> (pdfstreamparser.java:91) at org.pdfbox.pdmodel.common.cosstreamarray.getstreamtoken s(cosstreamarray.java:141) at org.pdfbox.util.pdfstreamengine.processsubstream (pdfstreamengine.java:189) at org.pdfbox.util.pdfstreamengine.processstream (pdfstreamengine.java:160) at edu.ucsf.library.utils.textoverimagedocumentdetector.co llecttextrenderingmodes (textoverimagedocumentdetector.java:153) at edu.ucsf.library.utils.textoverimagedocumentdetector.de tect(textoverimagedocumentdetector.java:125) at edu.ucsf.library.utils.textoverimagedocumentdetector.de tect(textoverimagedocumentdetector.java:103) at edu.ucsf.library.utils.textoverimagedocumentdetector.ma in(textoverimagedocumentdetector.java:77)",
        "label": 11
    },
    {
        "text": "an interesting exception error ./non-pfda/a7060f.pdf :: exception in thread \"main\" org.apache.pdfbox.preflight.exception.validationexception: failed while validating at org.apache.pdfbox.preflight.process.metadatavalidationprocess.validate(metadatavalidationprocess.java:154) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168) at org.apache.pdfbox.preflight.validator_a1b.runsimple(validator_a1b.java:158) at org.apache.pdfbox.preflight.validator_a1b.main(validator_a1b.java:125) caused by: org.apache.pdfbox.preflight.exception.validationexception: cannot treat document information creationdate property at org.apache.pdfbox.preflight.metadata.synchronizedmetadatavalidation.formataccessexception(synchronizedmetadatavalidation.java:525) at org.apache.pdfbox.preflight.metadata.synchronizedmetadatavalidation.analyzecreationdateproperty(synchronizedmetadatavalidation.java:352) at org.apache.pdfbox.preflight.metadata.synchronizedmetadatavalidation.validatemetadatasynchronization(synchronizedmetadatavalidation.java:482) at org.apache.pdfbox.preflight.process.metadatavalidationprocess.validate(metadatavalidationprocess.java:82) ... 5 more caused by: java.io.ioexception: error converting date:\u00e3\u00aa\u00e3\u009d\u00e2\u00b7\u00e2\u00b5{\u00e3\u00a1\u00e3\u0161m\u00e3\u2018\u00e3\u20ac\u00eb\u0153h\u00e5\u201a\u00e2\u20ac \u00e3\u008d at org.apache.pdfbox.util.dateconverter.tocalendar(dateconverter.java:294) at org.apache.pdfbox.util.dateconverter.tocalendar(dateconverter.java:168) at org.apache.pdfbox.cos.cosdictionary.getdate(cosdictionary.java:797) at org.apache.pdfbox.pdmodel.pddocumentinformation.getcreationdate(pddocumentinformation.java:210) at org.apache.pdfbox.preflight.metadata.synchronizedmetadatavalidation.analyzecreationdateproperty(synchronizedmetadatavalidation.java:347) ... 7 more",
        "label": 3
    },
    {
        "text": "font being changed after form field is set we have encounter a problem when using pdfbox. we have a pdf form with fields and font set to courier (please see attached pdf file prp.pdf). after running the program testbed1.java which tries to set the value of one of the fields, font was being changed to helvetica (please see attached pdf file forms26916.pdf). is there any way we can set the values and retain the original font?",
        "label": 3
    },
    {
        "text": "unicode characters displayed with wrong advance the file annahmereport_mitrussischtest.pdf is not displayed correctly. the advance of the characters is calculated wrong. the document is displayed correctly in adobe reader. in pdcidfont.java the method extractwidths() fills widthcache with the character widths based on the array in the \"w\" dictionary. the widthcache seems to translate from from unicode to character width but the \"w\" dictionary translates from cid-code to character width. in this pdf file the ttf font is embedded and the cid code is identical to the glyph code in the ttf font. a cmap maps from unicode directly to the cid/gid in the ttf font. so this cache is filled in the wrong way or when accessing the cache it is not taken into account that this array containes the widths based on the cid/gid. the cmap encoding has to be used when filling the cache or when reading the values from the cache i checked if adobe reader uses the values in /w to determine the widths to rule out the case that the pdf file is faulty and adobe reader just ignores the faulty /w array. when changing the entries for the glyphs number 20..23 in the /w array of the bold font (first 4 values in the second line of the array which match to characters '1'..'4') then the numbers are displayed with wrong widths in adobereader while nothing changes in pdfbox. (file annahmereport_mitrussischtest_modified.pdf)",
        "label": 1
    },
    {
        "text": "please correct the setfield example [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1182270 originally submitted by nobody on 2005-04-13 07:51. hi, at last i understand what is wrong with org.pdfbox.examples.fdf.setfield example - my file is encripted but there wasn't code for decryption please add it there for the other developers. ilya private void setfield( string[] args ) throws ioexception, cosvisitorexception { pddocument pdf = null; try { if( args.length != 3 ) { usage(); } else { setfield example = new setfield(); pdf = pddocument.load( args[0] ); printfields exporter = new printfields(); if( pdf.isencrypted() ) { try { pdf.decrypt( \"\" ); } catch ( cryptographyexception e ) { system.err.println( \"error: the document is encrypted.\" ); usage(); } catch( invalidpasswordexception e ) { system.err.println( \"error: the document is encrypted.\" ); usage(); } } example.setfield( pdf, args[1], args[2] ); pdf.save( args[0] ); } } finally { if( pdf != null ) { pdf.close(); } } }",
        "label": 11
    },
    {
        "text": "document with  embedded subset  fonts is displayed incorrect hi. i am trying use pdfreader to display a pdf file produced with openoffice.org, but the output contains lots of grabbled characters. i thought the problem was that the font was not embedded (tahoma in this case), but after inspecting the file, tahoma is listed as \"embedded subset\". however, lots of \"changing font on <> from <tahoma> to the default font\" messages are logged. the file is correctly displayed by other readers, could you please help me to determine what is wrong? thanks in advance.",
        "label": 1
    },
    {
        "text": "text extraction of pdf fails using trunk this exception occurs when extracting text of attached pdf. [warn] pdfparser - invalid xref line: 0 java.io.ioexception: cannot create font if /type is not /font. actual=cosname {fontdescriptor} at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:95) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:68) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:117) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:206) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:188) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247)",
        "label": 1
    },
    {
        "text": "pddocument removepage  deletes the last page regardless of parameter passed this can be easily reproduced using provided example org.apache.pdfbox.examples.pdmodel.removefirstpage that will delete the last page from document instead the first one. i think this bug was introduced within the last 3 months as my older snapshot build worked fine.",
        "label": 11
    },
    {
        "text": "prevent calling addsignature twice see linked so question, we need to prevent addsignature from being called twice because we can only one do signing in coswriter; and addsignaturefield should be deprecated in 2.0 and deleted in 3.0.",
        "label": 11
    },
    {
        "text": "could not initialize class org apache pdfbox pdmodel font pdtype0font i update pdfbox to latest from svn trunk. now i get error \"could not initialize class org.apache.pdfbox.pdmodel.font.pdtype0font\" when calling method dpage.converttoimage(bufferedimage.type_int_rgb, 96). in 1.8.2 i don't get this error but get error that embeded font could not read.",
        "label": 1
    },
    {
        "text": "illegalargumentexception in pdpagetree constructor  root cannot be null exception in thread \"main\" java.lang.illegalargumentexception: root cannot be null         at org.apache.pdfbox.pdmodel.pdpagetree.<init>(pdpagetree.java:62)         at org.apache.pdfbox.pdmodel.pddocumentcatalog.getpages(pddocumentcatalog.java:125)         at org.apache.pdfbox.pdmodel.pddocument.getpages(pddocument.java:970)         at org.apache.pdfbox.tools.pdfreader.openpdffile(pdfreader.java:341)         at org.apache.pdfbox.tools.pdfreader.main(pdfreader.java:326)         at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:80)",
        "label": 1
    },
    {
        "text": "fix pdfbox eating up big chunks of memory for identical cid mappings pdfbox currently handles the pdf beginbfrange command (which creates a character mapping for a range of cids to unicode characters) in a very inefficient way. if a pdf document contains a range of cid 0 to cid 65535 with a mapping offset of 0 (which translates to \"cid values map 1:1 to unicode characters\", pdfbox would nevertheless map each and every cid. there apparently are pdfs with a lot of these 0-65535 mappings, and such a single pdf may cause an outofmemoryerror. this patch detects zero-offset ranges and basically just skips them from an explicit mapping. there is some special handling for the space character included in the patch, which might or might not be relevant.",
        "label": 1
    },
    {
        "text": "the addsignature  method always set the visual signature on the last page of the pdf the addsignature() method always set the visual signature on the last page of the pdf. this is certainly due to the following lines in pddocument class : pddocument.java ... int startindex = math.max(math.min(options.getpage(), 0), pagecount - 1); pdpage page = catalog.getpages().get(startindex); ... i think math.min and math.max have been inverted.",
        "label": 8
    },
    {
        "text": "corruption in scratchfilebuffer under some specific circumstances, scratchfilebuffer can get corrupted when reading. these circumstances are, when the completely written buffer length is a multiple of 4080, and the read(byte[], int, int) method is used to read till the end of the buffer. each page contains 4080 bytes. the last 8 bytes are a pointer to the next page. this next page pointer is only written if the next page is needed, not if the page is full but no further pages are needed. the bug is in the read(byte[], int, int) method which, after reading all bytes from a page, tries to move to the next page, regardless of whether or not there is actually a next page. the read(byte[], int, int) method must be changed to only read the next page pointer if the end of buffer is not reached.",
        "label": 1
    },
    {
        "text": "unknown encoding for 'gbk euc h' unknown encoding for 'gbk-euc-h' for chinese pdf document. to fix it. 1.add method to org.apache.pdfbox.pdmodel.font.pdfont.java public string getencodingname() { cosbase encoding = font.getdictionaryobject(cosname.encoding); if (encoding != null) { if (encoding instanceof cosname) { return ((cosname) encoding).getname(); } } return null; } 2.modify encode method. from if( retval == null && cmap != null ) { retval = cmap.lookup( c, offset, length ); } //if we havn't found a value yet and //we are still on the first byte and //there is no cmap or the cmap does not have 2 byte mappings then try to encode //using fallback methods. to if( retval == null && cmap != null ) { string encodingstr = getencodingname(); if (encodingstr != null) { encodingconverter converter = encodingconversionmanager.getconverter(encodingstr); if (converter != null) { if (length == 1) return null; retval = converter.convertbytes(c, offset, length, cmap); } else { retval = cmap.lookup( c, offset, length ); } } else { retval = cmap.lookup( c, offset, length ); } } //if we havn't found a value yet and //we are still on the first byte and //there is no cmap or the cmap does not have 2 byte mappings then try to encode //using fallback methods.",
        "label": 1
    },
    {
        "text": "cmapparser nullpointerexception we came accross a document that results in a npe if opened with the debugger: caused by: java.lang.nullpointerexception: null    org.apache.fontbox.cmap.cmapparser.parsebeginbfrange(cmapparser.java:370) org.apache.fontbox.cmap.cmapparser.parse(cmapparser.java:136)  org.apache.pdfbox.pdmodel.font.cmapmanager.parsecmap(cmapmanager.java:73) org.apache.pdfbox.pdmodel.font.pdfont.readcmap(pdfont.java:197) org.apache.pdfbox.pdmodel.font.pdfont.<init>(pdfont.java:137) org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:119)    org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:83)  org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:143)    org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60)   org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:838)   org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:495)   org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:469)   org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150)   org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:206)   org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:145)   org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:68)",
        "label": 11
    },
    {
        "text": "org apache pdfbox cos cosdictionary cannot be cast to org apache pdfbox cos cosstream the attached pdf document produces an exception in rendering or text extraction. stacktrace: java.lang.classcastexception: org.apache.pdfbox.cos.cosdictionary cannot be cast to org.apache.pdfbox.cos.cosstream at org.apache.pdfbox.pdmodel.pdpage.getcontents(pdpage.java:157) at org.apache.pdfbox.pdfparser.pdfstreamparser.<init>(pdfstreamparser.java:92) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:485) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:469) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150) at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:206) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:145) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:68) at biz.pinnau.rcp.pdf.java.pdfboxhandler.rendercurrentimage(pdfboxhandler.java:52) at biz.pinnau.rcp.pdf.swtpdfpositionchooser$12.run(swtpdfpositionchooser.java:403)",
        "label": 11
    },
    {
        "text": "pdfbox creates corrupt pdf files in some cases, when a pdf document is splitted page by page and then merged again into one or several pdf files, acrobat reader produces an \"error 14 - a problem occured when reading the document\" message. the message is not shown when opening the document, but when scrolling downwards from the first page to the second. this happens on different machines. the original pdf files do not cause the error to be displayed. acrobat reader continues working, but doesn't display some pages (see screenshot). in the specific case, page 1 and 4 are displayed, page 2 and 3 remain undisplayed. additionally, i was unable to find out what's the case when \"error 14\" is displayed. when browsing for the problem you'll find people saying that this happens when the file isn't standard-conform, but i found no reliable source for this explanation. at the moment i cannot provide a file to reproduce as those files are confidential, but i'll try to provide an anonymized version.",
        "label": 1
    },
    {
        "text": "cosvisitorexception  the handle is invalid if i save a pdf document in a method of an application class, i get a cosvisitorexception: the handle is invalid. -------------------------------------------------------------------------------------------------- i found that i no longer get this exception if i do not close the pddocument \"drawingdoc\" in the method \"adddrawing\". however, i do get a warning: java.lang.throwable: warning: you did not close the pdf document at org.apache.pdfbox.cos.cosdocument.finalize(cosdocument.java:391) at java.lang.ref.finalizer.invokefinalizemethod(native method) at java.lang.ref.finalizer.runfinalizer(finalizer.java:83) at java.lang.ref.finalizer.access$100(finalizer.java:14) at java.lang.ref.finalizer$finalizerthread.run(finalizer.java:160) alan -------------------------------------------------- from: \"alan thomas\" <jalanthomas@verizon.net> sent: monday, july 27, 2009 6:13 am to: <pdfbox-users@incubator.apache.org> subject: re: cosvisitorexception: the handle is invalid > it was created by adding pages from other pdf documents, like below. > > is there anything wrong with returning a pddocument from the method > adddrawing like i am doing? > > > alan > > pddocument outputdoc = null; > . . . > > outputdoc = new pddocument(); > . . . > copypage(outputdoc, page); > . . . > outputdoc = adddrawing(outputdoc, > drawingsdir.getname(), barcode); > . . . > finally > { > try > { > // save and close the output file > if (outputdoc != null) > { > system.out.println(\"outpath = \" + outpath); > outputdoc.save(outpath); > } > outputdoc.close(); > . . . > > using these methods i created: > > private void copypage( pddocument doc, pdpage page) throws exception > { > pdpage imported = doc.importpage(page); > imported.setcropbox(page.findcropbox()); > imported.setmediabox(page.findmediabox()); > imported.setresources(page.findresources()); > imported.setrotation(page.findrotation()); > } > > private pddocument adddrawing( pddocument outdoc, string > drawingsdirname, > string barcode) > { > pddocument drawingdoc = null; > > try > { > . . . > list pages = drawingdoc.getdocumentcatalog().getallpages(); > > for (object obj : pages) > { > pdpage page = (pdpage)obj; > copypage(outdoc, page); > } > } > catch (exception e) > { > e.printstacktrace(); > } > finally > { > try > { > drawingdoc.close(); > return outdoc; > } > catch (exception e) > { > return outdoc; > } > } > } > > > -------------------------------------------------- > from: \"andreas lehmk\u00fchler\" <andreas@lehmi.de> > sent: monday, july 27, 2009 5:15 am > to: <pdfbox-users@incubator.apache.org> > subject: re: cosvisitorexception: the handle is invalid > >> hi alan, >> >> how did you create your pdf? >> >> br >> andreas lehmk\u00fchler >> >> ----- original nachricht -------- >> >> betreff: cosvisitorexception: the handle is invalid >> gesendet: mo, 27. jul 2009 >> von: alan thomas<jalanthomas@verizon.net> >> >>> hi. when i save a pdf document in my application, i get a >>> cosvisitorexception: \"the handle is invalid\". >>> >>> however, i do not see anything wrong with it. i show the error, >>> the >>> string i am giving the pddocument.save() method, and the code that >>> attempts >>> to save the file. >>> >>> any idea what i am doing wrong? thanks, alan >>> >>> outpath = c:\\users\\alan\\documents\\my stuff\\x y z stuff\\application\\java >>> app >>> test\\new folder\\insertedpages 2.pdf >>> >>> org.apache.pdfbox.exceptions.cosvisitorexception: the handle is invalid >>> at >>> org.apache.pdfbox.pdfwriter.coswriter.visitfromstream(coswriter.java:939) >>> at org.apache.pdfbox.cos.cosstream.accept(cosstream.java:201) >>> at org.apache.pdfbox.cos.cosobject.accept(cosobject.java:206) >>> at >>> org.apache.pdfbox.pdfwriter.coswriter.dowriteobject(coswriter.java:430) >>> at >>> org.apache.pdfbox.pdfwriter.coswriter.dowritebody(coswriter.java:361) >>> at >>> org.apache.pdfbox.pdfwriter.coswriter.visitfromdocument(coswriter.java:768) >>> at >>> org.apache.pdfbox.cos.cosdocument.accept(cosdocument.java:361) >>> at >>> org.apache.pdfbox.pdfwriter.coswriter.write(coswriter.java:1070) >>> at >>> org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:787) >>> at >>> org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:768) >>> >>> >>> // save and close the output file >>> if (outputdoc != null) >>> { >>> system.out.println(\"outpath = \" + outpath); >>> outputdoc.save(outpath); >>> } >>> outputdoc.close(); >>> >> >> \u2014 original nachricht ende ---- >> >> >",
        "label": 1
    },
    {
        "text": "lines not showing in printpdf print out  table borders and svg figures  i am generating a single-page pdf file via xslt/fop, consisting of multiple tables of varying complexity and consisting of several figures created via svg primitives (rect, path, text) in the used stylesheet. after generating and exporting the document to the file system, i want to print it programmatically via pdfbox's printpdf class. this succeeds apparently, but the resulting print-out lacks all of the lines in the document: all table borders (of various sizes) are missing, and all figures are missing too (a large diagram and several small symbols within the text). all texts are printed correctly, except for the heading of the document, which is written in a bold and bigger font. this problem occurs on every printer at my disposal (two physical laser printers and one virtual pdf printer). the problem does not occur when opening and/or printing the originally exported document via adobe reader - the document shows and prints perfectly. the problem is always reproducible. i am using the (as of now) latest pdfbox version 1.1.0 on a jdk 1.5.0u18 on windows xp professional sp3. when converting the pdf with pdfbox's pdftoimage class, the problem becomes smaller, but persists nonetheless: the resulting jpg lacks a good third of the table borders, but shows all of the svg-based lines correctly. i searched the bug tracker and the mailinglist archives but could not find a recent matching discussion or tracker item. pdfbox seems to have had problems with table borders already (i remember reading about line styles and weights not being rendered correctly), but all of those seem to date back to version numbers around version 0.8. i posted this problem to the user list ( http://pdfbox.markmail.org/message/a75wdvtk52xbxvjk?page=1 ) after searching the archives and this tracker and was told to open an issue on this tracker. i'll follow up with the mentioned samples in a minute. any help would be appreciated! many thanks in advance and have a good day, --christoph schmidt",
        "label": 1
    },
    {
        "text": "when create images from pdf file with characters from pt br it\u00b4s printing wrong ",
        "label": 1
    },
    {
        "text": "regression  type fonts are not processed by renderutil converttoimage i have a (confidential) pdf file that i wanted to check and it comes up mostly empty. it has type3 fonts. luckily, i found two closed issues (pdfbox-31 and pdfbox-1628) with test images that render mostly empty.",
        "label": 1
    },
    {
        "text": "exception access violation with pdf file and image conversion hello, i do receive an unhandled exception during image conversion of the attached pdf file. for image conversion i've used the pdftoimage.java example. the pdf file has been created with foxit pdf-printer. every generated pdf file will crash the whole jre, so my whole application crashes with the following trace. the affected pdf file has been attached. the error report file has been attached. hopefully this error can be handled that the jre won't crash anymore. thanks # a fatal error has been detected by the java runtime environment: # exception_access_violation (0xc0000005) at pc=0x720c2d77, pid=3532, tid=2620 # jre version: 7.0_21-b11 java vm: java hotspot(tm) client vm (23.21-b01 mixed mode windows-x86 ) problematic frame: c [t2k.dll+0x12d77] # failed to write core dump. minidumps are not enabled by default on client versions of windows # an error report file with more information is saved as: u:\\eclipse-workspace\\de.vlh.notes.tools\\hs_err_pid3532.log # if you would like to submit a bug report, please visit: http://bugreport.sun.com/bugreport/crash.jsp the crash happened outside the java virtual machine in native code. see problematic frame for where to report the bug. #",
        "label": 1
    },
    {
        "text": "jlink loading police afm files hello everybody,   i've got a problem with this trace on jlink on java11 (it works without jlink)   // exception in thread \"javafx application thread\" java.lang.exceptionininitializererror         at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.pdfont.<init>(pdfont.java:112)         at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:176)         at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:83)         at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:146)         at pdfbox@2.0.13/org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60)         at pdfbox@2.0.13/org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:848)         at pdfbox@2.0.13/org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:503)         at pdfbox@2.0.13/org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:477)         at pdfbox@2.0.13/org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150)         at pdfbox@2.0.13/org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:254)         at pdfbox@2.0.13/org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:245)         at pdfbox@2.0.13/org.apache.pdfbox.rendering.pdfrenderer.renderimagewithdpi(pdfrenderer.java:179)        caused by: java.lang.runtimeexception: java.io.ioexception: org/apache/pdfbox/resources/afm/courier-bold.afm not found         at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.standard14fonts.<clinit>(standard14fonts.java:97)         ... 36 more caused by: java.io.ioexception: org/apache/pdfbox/resources/afm/courier-bold.afm not found         at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.standard14fonts.addafm(standard14fonts.java:134)         at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.standard14fonts.addafm(standard14fonts.java:103)         at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.standard14fonts.<clinit>(standard14fonts.java:50)         ... 36 more   i think the problem comes from the fact that while using jlink the classpath does not exist and it need to be loaded by an another way that the classpath one.   the path should look like something like : // path path = paths.get(uri.create(\"jrt:/pdfbox/org/apache/resources/afm/police.afm\")); modules here is managed by moditect (maven plugin to help creating module-info descriptor) and contain all dependancies of the project",
        "label": 11
    },
    {
        "text": "arrayindexoutofboundsexception at org apache fontbox cmap cmapparser increment apache tika 1.14-snapshot (pdf box 2.0.2) throws following exception on text extraction from valid pdf document: org.apache.tika.exception.tikaexception: unexpected runtimeexception from org.apache.tika.parser.pdf.pdfparser@349c1daf at org.apache.tika.parser.compositeparser.parse(compositeparser.java:282) at org.apache.tika.parser.parserdecorator.parse(parserdecorator.java:188) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:120) at com.wolterskluwer.atlas.transformer.processfileresources.documentstextextractor.extracttext(documentstextextractor.java:44) at com.wolterskluwer.atlas.transformer.processfileresources.documentstextextractor.main(documentstextextractor.java:134) caused by: java.lang.arrayindexoutofboundsexception: -1 at org.apache.fontbox.cmap.cmapparser.increment(cmapparser.java:684) at org.apache.fontbox.cmap.cmapparser.increment(cmapparser.java:672) at org.apache.fontbox.cmap.cmapparser.parsebeginbfrange(cmapparser.java:393) at org.apache.fontbox.cmap.cmapparser.parse(cmapparser.java:136) at org.apache.pdfbox.pdmodel.font.cmapmanager.parsecmap(cmapmanager.java:73) at org.apache.pdfbox.pdmodel.font.pdfont.readcmap(pdfont.java:178) at org.apache.pdfbox.pdmodel.font.pdfont.<init>(pdfont.java:122) at org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:119) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:83) at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:123) at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:815) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:472) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:446) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149) at org.apache.pdfbox.text.pdftextstreamengine.processpage(pdftextstreamengine.java:136) at org.apache.pdfbox.text.pdftextstripper.processpage(pdftextstripper.java:391) at org.apache.tika.parser.pdf.pdf2xhtml.processpage(pdf2xhtml.java:144) at org.apache.pdfbox.text.pdftextstripper.processpages(pdftextstripper.java:319) at org.apache.pdfbox.text.pdftextstripper.writetext(pdftextstripper.java:266) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:112) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:151) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280) ... 6 more please, find failing document and log with stacktrace in attachments.",
        "label": 11
    },
    {
        "text": "pdfont issymbolic  has unexpected return value from the mailing list: hello, i believe the following lines should fallback to false instead of true. https://github.com/apache/pdfbox/blob/trunk/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/pdfont.java#l401-l402 { // unless we can prove that the font is symbolic, we assume that it is not issymbolic = true; } thought to let you know. best regards, hisham either the comment or the return value is wrong, but this code is very brittle so we'll need to do lots of regression testing if any changes are made.",
        "label": 6
    },
    {
        "text": "metadata extraction broken on some pdf files on certain pdf files (examples attached), the metadata extraction seems to be broken. preview (on mac os x) and acrobat reader is able to read the metadata, but pdfbox gives complete jibberish: author=\u00e8'\u00ff\u00e6??k\u00f47??\u00f5\u00aag? i've tried both the version included in tika 0.7 (1.0.0 i believe) and r1021264 from svn.",
        "label": 1
    },
    {
        "text": "classcastexception caused by unhandled markup annotations  got a classcastexception in the getparent() method of pdannotationpopup because some markup annotations are not handled fully by pdfbox and become pdannotationunknown solution to make them generic pdannotationmarkup instead. eclipse workspace patch 1.0 #p pdfbox index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/pdannotation.java =================================================================== pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/pdannotation.java (revision 1026306) +++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/pdannotation.java (working copy) @@ -138,6 +138,15 @@ { annot = new pdannotationwidget( annotdic ); } + else if( subtype.equals( pdannotationmarkup.sub_type_freetext ) || + subtype.equals( pdannotationmarkup.sub_type_polygon ) || + subtype.equals( pdannotationmarkup.sub_type_polyline ) || + subtype.equals( pdannotationmarkup.sub_type_caret ) || + subtype.equals( pdannotationmarkup.sub_type_ink ) || + subtype.equals( pdannotationmarkup.sub_type_sound )) + { + annot = new pdannotationmarkup( annotdic ); + } else { annot = new pdannotationunknown( annotdic ); index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/pdannotationmarkup.java =================================================================== pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/pdannotationmarkup.java (revision 1026306) +++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/pdannotationmarkup.java (working copy) @@ -32,8 +32,32 @@ @author paul king @version $revision: 1.1 $ */ -public abstract class pdannotationmarkup extends pdannotation +public class pdannotationmarkup extends pdannotation { + /** + * constant for a freetext type of annotation. + */ + public static final string sub_type_freetext = \"freetext\"; + /** + * constant for an polygon type of annotation. + */ + public static final string sub_type_polygon = \"polygon\"; + /** + * constant for an polyline type of annotation. + */ + public static final string sub_type_polyline = \"polyline\"; + /** + * constant for an caret type of annotation. + */ + public static final string sub_type_caret = \"caret\"; + /** + * constant for an ink type of annotation. + */ + public static final string sub_type_ink = \"ink\"; + /** + * constant for an sound type of annotation. + */ + public static final string sub_type_sound = \"sound\"; /* the various values of the reply type as defined in the pdf 1.7 reference",
        "label": 0
    },
    {
        "text": "wasted work in xmpschema merge  the problem appears in version 1.8.2 and in revision 1493964. i attached a two-line patch that fixes it. this problem and the attached patch are similar the previously fixed pdfbox-1456, pdfbox-1457, and pdfbox-1583, and their patches. in method \"org.apache.xmpbox.schema.xmpschema.merge\", the loops over \"itnewvalues\" and \"itactualembeddedproperties\" should break immediately after \"alreadypresent\" is set to \"true\". all the iterations after \"alreadypresent\" is set to \"true\" do not perform any useful work because the only side effect is: \"((arrayproperty)tmpembeddedproperty).getcontainer().addproperty(tmpnewvalue);\", which is executed only when \"if (!alreadypresent)\" is \"true\", i.e., it is never executed once \"alreadypresent\" is set to \"true\" because \"alreadypresent\" cannot become \"false\" again.",
        "label": 4
    },
    {
        "text": "setfield is not working in acrobat [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1572315 originally submitted by nobody on 2006-10-06 11:30. hello, i created a acrobat form in version 7.0 and used setfield to bind the variables but i am unable to see the values when i view online. i am using pdfbox_7.0.2. here is code that i am using in peoplesoft: ______________________________________ &pdf_file = createjavaobject (\"org.pdfbox.pdmodel.pddocument\"); &source_file = &pdf_file.load (\"service_terms_mstr.pdf\"); &jo = createjavaobject (\"org.pdfbox.examples.fdf.setfield\"); if &target_field = \"company\" then &field_value = &name; end-if; &jo.setfield(&source_file, &target_field, &field_value); &source_file.save(&path | %userid | \".pdf\"); viewurl(\"http://\" | &servername | \"/\" | &dbname | \"/\" %userid \".pdf\", true); _________________________________________________ i am able to view the whole page except the form fields that need to updated using setfield ,they are blank. i read somewhere that using version 6.0 would help. please guide me. thanks a lot.",
        "label": 8
    },
    {
        "text": "share functionality between page tree and field tree the pdfs page tree and acroforms field tree share some common functionality e.g. resolving inheritable attributes, iterating through leafs and such which could be combined into a pdtree class.",
        "label": 6
    },
    {
        "text": "image quality improvements the quality of the images inserted in a pdf documents could be improved by changing pdjpeg.java in the api public pdjpeg(pddocument doc, bufferedimage bi) throws ioexception imageio.write(bi, \"jpeg\", os); could be replaced by : imagewriter writer = null; iterator iter = imageio.getimagewritersbyformatname(\"jpg\"); if (iter.hasnext()) { writer = (imagewriter) iter.next(); } imageoutputstream ios = imageio.createimageoutputstream(os); writer.setoutput(ios); // set the compression quality jpegimagewriteparam iwparam = new jpegimagewriteparam(locale.getdefault()); iwparam.setcompressionmode(imagewriteparam.mode_explicit); iwparam.setcompressionquality(1.0f); // write the image writer.write(null, new iioimage(bi, null, null), iwparam); writer.dispose(); this increase the size of the generated pdf. by default the jpeg quality is 0.75, in the patch i use 1.0, the maximum quality as a suggestion the quality of the jpeg could be a global variable since it affect the size of the pdf",
        "label": 1
    },
    {
        "text": "support for adobe cff type2 fonts pdfbox should support embedded font types, most prominently the adobe cff/type2 (aka type1c) font type. the desired functionality includes both glyph metrics (for pdf text extraction using org.apache.pdfbox.util.pdftextstripper) and glyph painting (for pdf rendering using org.apache.pdfbox.pdfviewer.pagedrawer). i have implemented the basics of adobe cff/type2 font specification. if the other project members find my work substantial, i would like to see it incorporated into fontbox/pdfbox projects. please see the attached patch files. design considerations. a pdf fontfile3 stream can be parsed into cfffont objects by class cffparser. cfffont contains a map of glyph names to type2 charstrings, which can be converted to type1 charstrings by class charstringconverter and rendered by class charstringrenderer. glyph metrics is attained by formatting the result as afm by class afmformatter, which plugs nicely with existing pdfbox infrastructure. glyph painting is attained by formatting the result as postscript type1 font by class type1fontformatter, which can be loaded via java.awt.font#createfont(int, inputstream). the current implementation does not support synthetic cff fonts nor cid-keyed cff fonts. also, the conversion of certain type2 features (stemming, hinting, flex) is missing.",
        "label": 1
    },
    {
        "text": "illegal characters in xml output when running preflight in xml mode, the latest preflight version (i used the jar from build #747) sometimes produces output that contains characters that are illegal in xml. this can cause unexpected behavior if such files are further processed with tools that expect well-formed xml. see attached pdfs, which all result in illegal characters in the description of a 1.0 syntax error, error: expected a long type. output of older versions of preflight didn't contain these illegal characters; instead they would give something like actual='/o', actual='pages'. etc. so i suppose this must have been caused by a fairly recent change. see attachments below.",
        "label": 1
    },
    {
        "text": "java lang illegalargumentexception in sampledimagereader getrgbimage  the file from pdfbox-1207 has the above exception when calling readbits() on page 21 and others. note that it must be opened with load() and not with loadnonseq(). its also unclear whether the exception is a caused by the broken pdf or if it is a real bug.",
        "label": 6
    },
    {
        "text": "fdfdictionary parses fields in xfdf incorrectly fdfdictionary finds \"fields\" tag and then parses all of it's descendants which tag name is \"field\". but that is wrong, because only direct children of \"fields\" tag should be handled by fdfdictionary. all the other fields are handled recursively by fdffield constructor.",
        "label": 1
    },
    {
        "text": "xmpschemabasic getlabel  always returns null it seems that while the label is being saved correctly with setlabel() it is impossible to read it back. looking at the source     public void setlabel( string label )     {         settextproperty( prefix + \":label\", label );     }          public string getlabel()     {         return gettextproperty( prefix + \"p:label\" );     } it is quite obvious that the problem is the p in \"p:label\" .",
        "label": 11
    },
    {
        "text": "when i try to convert certain pages of certain pdf to images i am getting error java lang classcastexception  org apache pdfbox cos cosnull cannot be cast to org apache pdfbox cos cosdictionary unable to convert certain pages to images for certain pdf documents. getting error: java.lang.classcastexception: org.apache.pdfbox.cos.cosnull cannot be cast to org.apache.pdfbox.cos.cosdictionary method for converting page is called this way: bufferedimage image = page.converttoimage(bufferedimage.type_3byte_bgr, 300); // where page is of type org.apache.pdfbox.pdmodel.pdpage full stacktrace (of relevant part): java.lang.classcastexception: org.apache.pdfbox.cos.cosnull cannot be cast to org.apache.pdfbox.cos.cosdictionary at org.apache.pdfbox.pdmodel.graphics.xobject.pdccitt.getrgbimage(pdccitt.java:119) at org.apache.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:78) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:130) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at eu.eudml.enhancement.pdf2textviaocr.pdfimageextractor.extractimagesusingpdfparser(pdfimageextractor.java:236)",
        "label": 1
    },
    {
        "text": "wasted work in abstracttestaction valid  the problem appears in revision 1414788. i attached a one-line patch that fixes it. this problem and the attached patch are similar the previously fixed pdfbox-1447 and its patch. in method \"abstracttestaction.valid\", the loop over \"errors\" should break immediately after \"found\" is set to \"true\". all the iterations after \"found\" is set to \"true\" do not perform any useful work, at best they just set \"found\" again to \"true\".",
        "label": 4
    },
    {
        "text": "npe in new domxmpparser when no type is found discovered this bug while trying to sync both tika and pdfbox to their current snapshot builds. issue came to light when running tika's jpegparsertest.testjpegemptyexifdatetime() junit test case since the test file contains the following property photoshop:legacyiptcdigest which is a non defined property in the photoshopschema. this causes a null type to be created in domxmpparser.parsedescriptionroot(). the solution in my patch is to default to text for any undefined types. it may be beneficial to also log a warning about such types so that the schema files can be properly amended. (currently the legacyiptcdigest has not been added to the schema in this patch) relates to work done via tika in tika-1285",
        "label": 1
    },
    {
        "text": "irregular npe in imageioutils addresolution we're having an issue with pdfbox within out test suite where it sometimes throws an npe and sometimes does not. background we have a pdf file within our test suite that has jbig2 encoded images. we have the jai and jai-imageio extensions installed with java, but do not have a jbig2 extension installed as discussed in pdfbox-1067 as we need to keep with an apache 2.0 license and cannot include the gpl3.0 jbig2-imageio. issue our issue, to be clear is not that we cannot handle the jbig2 encoded images, but instead, that we're sometimes getting npes thrown by the system and sometimes not. (which makes it seem like it's possibly a race condition). the npe we're seeing is: build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,752 0    [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{q} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,762 10   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{q} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,762 10   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{q} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,763 11   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,763 11   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,763 11   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{622} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,765 13   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{800} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,766 14   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{re} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,766 14   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{w} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,766 14   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{n} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,769 17   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{q} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,769 17   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{622.8001} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,770 18   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,770 18   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,770 18   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{800.6401} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,770 18   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,772 20   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,772 20   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{cm} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,772 20   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{im1} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,778 26   [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{do} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,806 54   [main ] (pdpixelmap.java:309) org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap - colormodel: indexcolormodel: #pixelbits = 1 numcomponents = 3 color space = java.awt.color.icc_colorspace@3b568fbc transparency = 1 transindex   = -1 has alpha = false isalphapre = false build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,808 56   [main ] (invoke.java:93) org.apache.pdfbox.util.operator.pagedrawer.invoke - imagewidth: 1730  imageheight: 2224 build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,874 122  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{q} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,874 122  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{3} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,875 123  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tr} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,875 123  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,875 123  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.05} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,875 123  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,876 124  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{35.7233} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,876 124  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,876 124  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,876 124  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{32.6} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,877 125  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{137.14} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,877 125  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{572.41} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,877 125  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,877 125  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt1} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,878 126  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:32 debug 2014-01-11 16:24:32,878 126  [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:33 debug 2014-01-11 16:24:33,774 1022 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{the } build 11-jan-2014 16:24:33 debug 2014-01-11 16:24:33,775 1023 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:33 info  2014-01-11 16:24:33,994 1242 [main ] (pdtruetypefont.java:474) org.apache.pdfbox.pdmodel.font.pdtruetypefont - using font serif.bold instead build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,033 1281 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,033 1281 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,038 1286 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,038 1286 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,038 1286 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.0396} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,038 1286 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,039 1287 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{32.6} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,039 1287 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,039 1287 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,039 1287 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{32.6} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,039 1287 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{208.37} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,040 1288 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{572.41} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,040 1288 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,040 1288 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,047 1295 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,048 1296 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,048 1296 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{archeology } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,048 1296 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,079 1327 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,080 1328 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,080 1328 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,080 1328 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,080 1328 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.05} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,083 1331 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,083 1331 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{38.8128} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,084 1332 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,084 1332 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,084 1332 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{35.1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,084 1332 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{139.29} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,085 1333 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{514.45} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,085 1333 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,085 1333 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,085 1333 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,088 1336 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,089 1337 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{of } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,091 1339 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 info  2014-01-11 16:24:34,093 1341 [main ] (pdtruetypefont.java:474) org.apache.pdfbox.pdmodel.font.pdtruetypefont - using font serif.plain instead build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,098 1346 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,107 1355 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,108 1356 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,108 1356 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,108 1356 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.0191} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,108 1356 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,108 1356 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{35.1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,111 1359 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,111 1359 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,112 1360 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{35.1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,112 1360 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{178.71} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,112 1360 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{514.45} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,112 1360 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,113 1361 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,113 1361 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,113 1361 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,113 1361 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{lake } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,115 1363 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,117 1365 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,120 1368 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,120 1368 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,120 1368 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,120 1368 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.0213} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,121 1369 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,121 1369 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{35.1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,121 1369 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,121 1369 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,121 1369 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{35.1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,122 1370 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{260.4579} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,122 1370 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{514.45} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,122 1370 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,122 1370 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,122 1370 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,123 1371 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,123 1371 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{mead } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,123 1371 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,125 1373 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,125 1373 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,126 1374 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,126 1374 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,126 1374 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.0223} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,126 1374 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,127 1375 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{32.6} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,127 1375 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,127 1375 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,127 1375 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{32.6} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,127 1375 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{137.39} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,128 1376 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{456.13} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,128 1376 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,128 1376 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,128 1376 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,128 1376 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,129 1377 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{national } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,129 1377 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,132 1380 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,132 1380 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,133 1381 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,133 1381 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,133 1381 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.0138} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,133 1381 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,133 1381 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{32.6} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,134 1382 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,134 1382 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,134 1382 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{32.6} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,134 1382 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{269.8112} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,134 1382 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{456.13} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,135 1383 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,135 1383 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,135 1383 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,135 1383 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,135 1383 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{recreation } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,136 1384 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,139 1387 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,141 1389 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,142 1390 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,142 1390 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,142 1390 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.05} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,142 1390 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,142 1390 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{32.9266} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,143 1391 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,143 1391 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,143 1391 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{32.6} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,143 1391 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{137.81} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,143 1391 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{404.29} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,144 1392 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,144 1392 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,144 1392 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,144 1392 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,144 1392 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{area } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,145 1393 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,153 1401 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,159 1407 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,160 1408 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,160 1408 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,160 1408 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.05} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,160 1408 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,160 1408 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{24.4513} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,160 1408 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,161 1409 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,161 1409 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,161 1409 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{136.75} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,161 1409 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{319.68} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,161 1409 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,162 1410 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,162 1410 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,162 1410 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,162 1410 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{an } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,162 1410 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,164 1412 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,164 1412 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,164 1412 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,165 1413 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,165 1413 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.0234} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,165 1413 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,165 1413 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,165 1413 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,166 1414 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,166 1414 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,166 1414 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{173.11} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,166 1414 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{319.68} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,166 1414 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,167 1415 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,171 1419 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,171 1419 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,172 1420 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{assessment } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,172 1420 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,176 1424 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,179 1427 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,179 1427 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,180 1428 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,180 1428 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.023} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,180 1428 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,180 1428 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,180 1428 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,181 1429 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,181 1429 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,181 1429 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{132.2302} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,181 1429 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{94.689} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,181 1429 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,182 1430 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,182 1430 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,182 1430 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,182 1430 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{national } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,182 1430 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,189 1437 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,189 1437 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,189 1437 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,194 1442 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,194 1442 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.05} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,195 1443 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,195 1443 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.7968} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,195 1443 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,195 1443 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,195 1443 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,195 1443 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{222.01} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,196 1444 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{94.68} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,196 1444 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,196 1444 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,196 1444 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,196 1444 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,197 1445 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{park } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,197 1445 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,199 1447 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,203 1451 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,203 1451 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,204 1452 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,204 1452 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.004} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,204 1452 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,204 1452 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,204 1452 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,205 1453 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,205 1453 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,205 1453 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{273.89} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,205 1453 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{94.68} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,205 1453 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,206 1454 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,206 1454 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,206 1454 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,206 1454 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{service } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,206 1454 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,209 1457 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,215 1463 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,215 1463 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,216 1464 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,216 1464 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{-0.035} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,216 1464 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,216 1464 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{21.2481} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,216 1464 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,217 1465 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,217 1465 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,217 1465 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{131.37} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,217 1465 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{69.13} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,217 1465 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,218 1466 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,218 1466 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,218 1466 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,218 1466 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{u. } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,218 1466 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,220 1468 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,223 1471 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,223 1471 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,224 1472 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,224 1472 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{-0.035} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,224 1472 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,224 1472 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{21.9974} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,224 1472 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,225 1473 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,225 1473 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,225 1473 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{154.03} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,225 1473 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{69.13} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,225 1473 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,226 1474 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,226 1474 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,226 1474 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,226 1474 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{s. } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,231 1479 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,233 1481 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,233 1481 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,233 1481 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,233 1481 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,233 1481 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.05} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,234 1482 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,234 1482 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.7742} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,234 1482 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,234 1482 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,234 1482 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,235 1483 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{178.08} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,235 1483 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{69.13} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,235 1483 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,235 1483 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,235 1483 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,236 1484 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,236 1484 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{department } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,236 1484 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,245 1493 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,245 1493 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,245 1493 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,245 1493 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,246 1494 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.05} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,246 1494 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,246 1494 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{25.4579} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,246 1494 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,250 1498 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,251 1499 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,251 1499 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{306.47} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,251 1499 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{69.13} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,251 1499 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,251 1499 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,252 1500 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,252 1500 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,252 1500 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{of } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,252 1500 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,254 1502 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,254 1502 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,254 1502 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,254 1502 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,254 1502 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.0373} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,255 1503 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,259 1507 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,259 1507 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,263 1511 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,263 1511 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,263 1511 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{332.58} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,263 1511 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{69.13} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,263 1511 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,264 1512 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,264 1512 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,264 1512 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,264 1512 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{the } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,264 1512 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,266 1514 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,266 1514 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,270 1518 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,270 1518 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{bt} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,270 1518 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{0.05} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,275 1523 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,275 1523 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.5584} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,276 1524 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,276 1524 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,276 1524 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{23.4} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,276 1524 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{369.19} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,276 1524 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosfloat{69.13} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,277 1525 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tm} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,277 1525 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosname{tt2} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,277 1525 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{1} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,277 1525 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tf} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,277 1525 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosstring{interior } build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,278 1526 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tj} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,281 1529 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: cosint{0} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,281 1529 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{tc} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,282 1530 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{et} build 11-jan-2014 16:24:34 debug 2014-01-11 16:24:34,282 1530 [main ] (pdfstreamengine.java:260) org.apache.pdfbox.util.pdfstreamengine - processing substream token: pdfoperator{q} build 11-jan-2014 16:24:34 info  2014-01-11 16:24:34,282 1530 [main ] (pdfimagewriter.java:135) org.apache.pdfbox.util.pdfimagewriter - writing: /home/bamboo/current/temp/tdar-trunk3-job1/pia-09-lame-1980-small1.jpg build 11-jan-2014 16:24:34 error 2014-01-11 16:24:34,291 1539 [main ] (pdfjbig2testcase.java:55) org.tdar.utils.pdfjbig2testcase - encountered npe build 11-jan-2014 16:24:34 java.lang.nullpointerexception build 11-jan-2014 16:24:34  at org.apache.pdfbox.util.imageioutil.addresolution(imageioutil.java:211) build 11-jan-2014 16:24:34  at org.apache.pdfbox.util.imageioutil.createmetadata(imageioutil.java:204) build 11-jan-2014 16:24:34  at org.apache.pdfbox.util.imageioutil.writeimage(imageioutil.java:158) build 11-jan-2014 16:24:34  at org.apache.pdfbox.util.imageioutil.writeimage(imageioutil.java:114) build 11-jan-2014 16:24:34  at org.apache.pdfbox.util.imageioutil.writeimage(imageioutil.java:81) build 11-jan-2014 16:24:34  at org.apache.pdfbox.util.pdfimagewriter.writeimage(pdfimagewriter.java:136) build 11-jan-2014 16:24:34  at org.tdar.utils.pdfjbig2testcase.testjbig2(pdfjbig2testcase.java:50) build 11-jan-2014 16:24:34  at sun.reflect.nativemethodaccessorimpl.invoke0(native method) build 11-jan-2014 16:24:34  at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) build 11-jan-2014 16:24:34  at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) build 11-jan-2014 16:24:34  at java.lang.reflect.method.invoke(method.java:606) build 11-jan-2014 16:24:34  at org.junit.runners.model.frameworkmethod$1.runreflectivecall(frameworkmethod.java:47) build 11-jan-2014 16:24:34  at org.junit.internal.runners.model.reflectivecallable.run(reflectivecallable.java:12) build 11-jan-2014 16:24:34  at org.junit.runners.model.frameworkmethod.invokeexplosively(frameworkmethod.java:44) build 11-jan-2014 16:24:34  at org.junit.internal.runners.statements.invokemethod.evaluate(invokemethod.java:17) build 11-jan-2014 16:24:34  at org.junit.runners.parentrunner.runleaf(parentrunner.java:271) build 11-jan-2014 16:24:34  at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:70) build 11-jan-2014 16:24:34  at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:50) build 11-jan-2014 16:24:34  at org.junit.runners.parentrunner$3.run(parentrunner.java:238) build 11-jan-2014 16:24:34  at org.junit.runners.parentrunner$1.schedule(parentrunner.java:63) build 11-jan-2014 16:24:34  at org.junit.runners.parentrunner.runchildren(parentrunner.java:236) build 11-jan-2014 16:24:34  at org.junit.runners.parentrunner.access$000(parentrunner.java:53) build 11-jan-2014 16:24:34  at org.junit.runners.parentrunner$2.evaluate(parentrunner.java:229) build 11-jan-2014 16:24:34  at org.junit.runners.parentrunner.run(parentrunner.java:309) build 11-jan-2014 16:24:34  at org.apache.maven.surefire.junit4.junit4provider.execute(junit4provider.java:264) build 11-jan-2014 16:24:34  at org.apache.maven.surefire.junit4.junit4provider.executetestset(junit4provider.java:153) build 11-jan-2014 16:24:34  at org.apache.maven.surefire.junit4.junit4provider.invoke(junit4provider.java:124) build 11-jan-2014 16:24:34  at sun.reflect.nativemethodaccessorimpl.invoke0(native method) build 11-jan-2014 16:24:34  at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) build 11-jan-2014 16:24:34  at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) build 11-jan-2014 16:24:34  at java.lang.reflect.method.invoke(method.java:606) build 11-jan-2014 16:24:34  at org.apache.maven.surefire.util.reflectionutils.invokemethodwitharray2(reflectionutils.java:208) build 11-jan-2014 16:24:34  at org.apache.maven.surefire.booter.providerfactory$providerproxy.invoke(providerfactory.java:156) build 11-jan-2014 16:24:34  at org.apache.maven.surefire.booter.providerfactory.invokeprovider(providerfactory.java:82) build 11-jan-2014 16:24:34  at org.apache.maven.plugin.surefire.inpluginvmsurefirestarter.runsuitesinprocess(inpluginvmsurefirestarter.java:82) build 11-jan-2014 16:24:34  at org.apache.maven.plugin.surefire.abstractsurefiremojo.executeprovider(abstractsurefiremojo.java:942) build 11-jan-2014 16:24:34  at org.apache.maven.plugin.surefire.abstractsurefiremojo.executeafterpreconditionschecked(abstractsurefiremojo.java:822) build 11-jan-2014 16:24:34  at org.apache.maven.plugin.surefire.abstractsurefiremojo.execute(abstractsurefiremojo.java:720) build 11-jan-2014 16:24:34  at org.apache.maven.plugin.defaultbuildpluginmanager.executemojo(defaultbuildpluginmanager.java:106) build 11-jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.mojoexecutor.execute(mojoexecutor.java:208) build 11-jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.mojoexecutor.execute(mojoexecutor.java:153) build 11-jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.mojoexecutor.execute(mojoexecutor.java:145) build 11-jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.lifecyclemodulebuilder.buildproject(lifecyclemodulebuilder.java:84) build 11-jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.lifecyclemodulebuilder.buildproject(lifecyclemodulebuilder.java:59) build 11-jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.lifecyclestarter.singlethreadedbuild(lifecyclestarter.java:183) build 11-jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.lifecyclestarter.execute(lifecyclestarter.java:161) build 11-jan-2014 16:24:34  at org.apache.maven.defaultmaven.doexecute(defaultmaven.java:317) build 11-jan-2014 16:24:34  at org.apache.maven.defaultmaven.execute(defaultmaven.java:152) build 11-jan-2014 16:24:34  at org.apache.maven.cli.mavencli.execute(mavencli.java:555) build 11-jan-2014 16:24:34  at org.apache.maven.cli.mavencli.domain(mavencli.java:214) build 11-jan-2014 16:24:34  at org.apache.maven.cli.mavencli.main(mavencli.java:158) build 11-jan-2014 16:24:34  at sun.reflect.nativemethodaccessorimpl.invoke0(native method) build 11-jan-2014 16:24:34  at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) build 11-jan-2014 16:24:34  at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) build 11-jan-2014 16:24:34  at java.lang.reflect.method.invoke(method.java:606) build 11-jan-2014 16:24:34  at org.codehaus.plexus.classworlds.launcher.launcher.launchenhanced(launcher.java:289) build 11-jan-2014 16:24:34  at org.codehaus.plexus.classworlds.launcher.launcher.launch(launcher.java:229) build 11-jan-2014 16:24:34  at org.codehaus.plexus.classworlds.launcher.launcher.mainwithexitcode(launcher.java:415) build 11-jan-2014 16:24:34  at org.codehaus.plexus.classworlds.launcher.launcher.main(launcher.java:356) build 11-jan-2014 16:24:34 tests run: 1, failures: 1, errors: 0, skipped: 0, time elapsed: 2.664 sec <<< failure! - in org.tdar.utils.pdfjbig2testcase build 11-jan-2014 16:24:34 testjbig2(org.tdar.utils.pdfjbig2testcase)  time elapsed: 2.438 sec  <<< failure! build 11-jan-2014 16:24:34 java.lang.assertionerror: encountered npe in proccessing jbig2 file build 11-jan-2014 16:24:34  at org.junit.assert.fail(assert.java:88) build 11-jan-2014 16:24:34  at org.tdar.utils.pdfjbig2testcase.testjbig2(pdfjbig2testcase.java:56) build 11-jan-2014 16:24:34  i'm attaching the pdf that's causing the issue.",
        "label": 1
    },
    {
        "text": "incorrect handling of opentype fonts there is embedded font in this pdf which pdfbox/fontbox does not handle properly. this opentype font contains cff data.",
        "label": 1
    },
    {
        "text": "excetion while extracting images [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1259747 originally submitted by guzzil on 2005-08-15 02:40. when trying to extract images from i pdf, i get exceptions like exception in thread \"main\" java.io.ioexception: unknown stream filter:cosname {jbig2decode} at org.pdfbox.filter.filtermanager.getfilter(filtermanager.java:116) at org.pdfbox.cos.cosstream.dodecode(cosstream.java:276) at org.pdfbox.cos.cosstream.dodecode(cosstream.java:240) at org.pdfbox.cos.cosstream.getunfilteredstream(cosstream.java:173) at org.pdfbox.pdmodel.common.pdstream.createinputstream(pdstream.java:205) at org.pdfbox.pdmodel.common.pdstream.getbytearray(pdstream.java:458) at org.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdpixelmap.java:131) at org.pdfbox.pdmodel.graphics.xobject.pdpixelmap.write2outputstream(pdpixelmap.java:153) at org.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.write2file(pdxobjectimage.java:117) at org.pdfbox.extractimages.extractimages(extractimages.java:169) at org.pdfbox.extractimages.main(extractimages.java:73) the pdfs are scanned images, which are afterwards optimized with adobe acrobats \"optimize\" function. pdfimages from xpdf can extract the images. i can send you a pdf with this error (it is to big for an upload). [comment on sourceforge] originally sent by benlitchfield. logged in: yes user_id=601708 yes please upload the pdf to ftp.pdfbox.org and i will take a look at it. ben litchfield",
        "label": 1
    },
    {
        "text": "eofexception parsing pdfs with invalid xref offsets scratchfilebuffer does not allow seeking past the end of file. if the xref table claims an object offset past the end of file an ioexception is incorrectly thrown. cosparser.checkobjectkeys() seeks to the offset claimed in the xref table and looks for a valid object number and generation number there. if there is an ioexception while trying to read in cosparser.checkobjectkeys(), the exception is caught and the parser falls back to brute force searching for objects offsets. the problem is that ioexceptions are not caught when attempting to seek to the offset claimed in the xref table. solution: move the seek operation inside the try {} block.",
        "label": 1
    },
    {
        "text": "pddocument close  might ignore throwing an exception as discussed on the mailing list: i had a look at ioutils.closeandlogexception() and pddocument.close() and if initialexception is not null, then null is returned if a new exception is thrown, or if everything goes well. this means that at the end of pddocument.close(), no exception would be thrown, right? was this intended?",
        "label": 8
    },
    {
        "text": "rotated images aren't placed and rendered correctly while converting pdf pages to images rotated images are misplaced and incorrectly clipped when converting a pdf page to an image. see attached images and pdf for an example.",
        "label": 1
    },
    {
        "text": "nullpointerexception pdffont getencodingfromfont with a pdf book because type1encoding is null a nullpointerexception was thrown while extracting text from a pdf ebook. the exception was thrown in pdffont#getencodingfromfont line: [snip] encoding.addcharacterencoding(index, name.replace(\"/\", \"\")); [snip] encoding was null. the line that was scanned was \"/encoding 256 array 0 1 255 {1 index exch /.notdef put} for\". the array check however only checks for line.endswith(\"array\"). the npe was fixed when using line.contains(\"array\") instead. i have added a patch. the pdf is a pdf book with copyright so it cannot be attached as an example. the meta data of the document was: acrobat distiller 7.0 (windows) pscript5.dll version 5.2.2 pdf-1.6",
        "label": 0
    },
    {
        "text": "textextraction mixes case of text using text extraction on a file like this, http://www.organictogo.com/pdf/catering/menu_wa_032509.pdf, the text (in all caps) \"thai veggie wrap\" is extracted as: \"thai veggie wrap\". however, examining the pdf, shows that it looks like this: \"thai v eggi e wrap\". the related text on the next lines, such as \"crisp red cabbage, cucumbers, carrots and lettuce with thai\" parse in just fine. we are using this code to get the text in c#: byte[] pdfdata = mywebclient.downloaddata(pdfurl); string text = string.empty; bytearrayinputstream stream = new bytearrayinputstream(pdfdata); pddocument doc = pddocument.load(stream); pdftextstripper stripper = new pdftextstripper(); text = stripper.gettext(doc); doc.close();",
        "label": 1
    },
    {
        "text": "cosparser parsexref failing if startxrefoffset over pdf size any pdf which had wrong startxref was parsed with warning in pdfbox 1.8 thanks to self healing mechanism. in version 2.0 the cosparser.parsexref (called from pdfparser) tries to seek to the startxref position. if the position is wrong, but within the file size, the pdf is parsed with warning. but when the startxref is over the file size, the parsing ended with exception. we could either test if startxref is not over source.length(), or catch the exception.",
        "label": 1
    },
    {
        "text": "tiff image problems [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1559168 originally submitted by wolf12 on 2006-09-15 02:02. hi everyone!!! pdfbox doesn't write tiff images propertly. in tiff documentation there are many fields that are not suported by this library. 1. dpi (xresolution, yresolution, resoulutionunit) xresolution and yresolution ifdfields are hardcoded (300 dpi value for both), resolutionunit is not even taken into account. user is forced to write those values by hisself. 2. fillorder it is a logical order of bits within a byte (ref. tiff6.pdf document page 32). in pdfbox this entry is allways 1 (because of lack it in library this field has default value 1 - available are 1 and 2). the efect of this is that the data is not properly recognized by pdf viewers - error shown: \"no sufficient data for the image\". here is code for creating pdf page with tiff image: 1. >>>>>>>>>>> create cosdictionary <<<<<<<<<<< ifdentry columns = ifd.directoryentries.get(ifdname.imagewidth); ifdentry rows = ifd.directoryentries.get(ifdname.imagelength); ifdentry t4compression = ifd.directoryentries.get(ifdname.compression); ifdentry blackis1 = ifd.directoryentries.get(ifdname.photometricinterpretation); ifdentry t42d = ifd.directoryentries.get(ifdname.t4options); int k = -1000; if (t4compression != null) { if (t4compression.getvalue() == 4) { k = -1; } if (t4compression.getvalue() == 3) { k = 0; } } if (t42d != null && t42d.getvalue() == 1) { k = 50; } if (k == -1000) { throw new ioexception(\"first image in tiff is not ccitt t4 or t6 compressed\"); } boolean bi1 = (blackis1.getvalue() == 1) ? true : false; cosdictparms.setint(columns, columns.getvalue()); cosdictparms.setint(rows, rows.getvalue()); if (bi1) { cosdictparms.setboolean(\"blackis1\", true); } cosdictparms.setint(\"k\", k); cosdictparms.setfloat(\"xres\", this.getxres()); cosdictparms.setfloat(\"yres\", this.getyres()); this.checkcosdictionary = true; 2. >>>>>>>>>>> create pdstream <<<<<<<<<<< pdstream stream = new pdstream(doc); cosstream dic = stream.getstream(); cosdictionary decodeparms = tiffimage.getcosdictionaryparams(); outputstream os = null; try { os = dic.createfilteredstream(); os.write(tiffimage.getstripsbyte()); } finally { try { if (os != null) { os.close(); } } catch (ioexception e) { // ignore error } } dic.setitem(cosname.filter, cosname.ccittfax_decode); dic.setitem(cosname.subtype, cosname.image); dic.setitem(cosname.type, cosname.getpdfname(\"xobject\")); dic.setitem(\"decodeparms\", decodeparms); 3. >>>>>>>>>>> create pdxobjectimage <<<<<<<<<<< cosdictionary decodeparms = tiffimage.getcosdictionaryparams(); pdccitt ccitt = new pdccitt(stream); ccitt.setbitspercomponent(1); ccitt.setcolorspace(new pddevicegray()); ccitt.setwidth(decodeparms.getint(tiffimage.columns)); ccitt.setheight(decodeparms.getint(tiffimage.rows)); 4. >>>>>>>>>> create pdf page with image <<<<<<<<< pdpagecontentstream contentstream = new pdpagecontentstream(document, page); pdfpageimageformat pdfformat = pdfpageimageformat.newpdfpageimageformat(0, 0, pdfpageimageformat.fit_to_image, imageobject); page.setmediabox(new pdrectangle(tiffimage.getoryginalwidth(), tiffimage.getoryginalheight())); contentstream.drawimage(imageobject, pdfformat.getx(), pdfformat.gety(), (int)tiffimage.getoryginalwidth(),/pdfformat.getwidth(),/ (int)tiffimage.getoryginalheight()/pdfformat.getheight()/); bos.write(tiffimage.tobytearray()); >>>>>>>>>>>>> end source code <<<<<<<<< i cannot attach any example of pdf file because of security. i have my own tiff wraper which reads also multipage tiff image.",
        "label": 7
    },
    {
        "text": "issue while merging pdf with hidden layers we are using the software pdfbox-app-1.8.9.jar to merge pdf files. the issue is the merged file shows hidden layers which are sent as hidden in the original file used for merging. as of a result of this when we try to print the file out of sap the hidden layers show up in the print out.",
        "label": 11
    },
    {
        "text": "missing stemv font descriptor entry when embedding afm fonts when embedding an afm font the stemv field is missing in the pdf which renders it not pdf/a-1b compliant. as the stemv value is not included in afm files it seems to be ok to simply set it to 0. a quick test in firefox, chrome, osx preview and acrobat reader indicates having stemv set to 0 does not impact font rendering in any obvious way. fop computes stemv from other values stored in pfm files but the fields are optional so can't be relied upon [1] (hence results are often 0 anyway) and word [2] and ios [3] seem to use 0 by default. verified in svn trunk 1504502 (2013.07.18) [1] http://xmlgraphics.apache.org/fop/1.1/fonts.html [2] http://tracker.luatex.org/view.php?id=32 [3] http://blog.nomzit.com/2010/08/18/annoying-bug-in-quartz-pdfcontext-font-handling/ \u2013 just a link to a ios-originating pdf dissected, nothing to do with the bug the article is about",
        "label": 6
    },
    {
        "text": "pdfmerger failed with the following exception  java lang nullpointerexception merging 2 pdf documents leads to a null pointer exception: from my point of view the pdf document misses the xref and startxref tag. java -jar pdfbox-app-1.8.1.jar pdfmerger \"bid.pdf\" \"2nd testfile.pdf\" output.pdf mai 08, 2013 12:52:03 pm org.apache.pdfbox.pdfparser.xreftrailerresolver settrailer warning: cannot add trailer because xref start was not signalled. mai 08, 2013 12:52:03 pm org.apache.pdfbox.pdfparser.xreftrailerresolver setstartxref warning: did not found xref object at specified startxref position 0 pdfmerger failed with the following exception: java.lang.nullpointerexception at org.apache.pdfbox.util.pdfmergerutility.appenddocument(pdfmergerutility.java:257) at org.apache.pdfbox.util.pdfmergerutility.mergedocuments(pdfmergerutility.java:188) at org.apache.pdfbox.pdfmerger.merge(pdfmerger.java:68) at org.apache.pdfbox.pdfmerger.main(pdfmerger.java:44) at org.apache.pdfbox.pdfbox.main(pdfbox.java:83)",
        "label": 1
    },
    {
        "text": "elements in the structure tree are not removed or corrected when flattening when flattening, the elements in the structure tree are not removed nor adjusted (to the form xobject). an example can be found at root/structtreeroot/parenttree/nums/[31]/k/obj in the file govformpreflattened.pdf . this links to something that does not really exist anymore.",
        "label": 8
    },
    {
        "text": "pdpattern getcosobject  always returns null as reported by clifford in the mailing list: pdpage page = new pdpage(); pdcolorspace cs = pdcolorspace.create(cosname.pattern,page.getresources()); system.out.println(cs.getcosobject()); this outputs null because the array field is not initialized. the pdf specification has this: a colour space shall be defined by an array object whose first element is a name object identifying the colour space family. the remaining array elements, if any, are parameters that further characterize the colour space; their number and types vary according to the particular family. for families that do not require parameters, the colour space may be specified simply by the family name itself instead of an array.",
        "label": 11
    },
    {
        "text": "pdfmergerutility exception using  net [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1506092 originally submitted by sajitjacob on 2006-06-14 07:37. invalid refereance exception using build pdfbox-0.7.3- dev-20060614 against ikvm-0.28.0.0. the following c# code causes an invalid referance exception somewhere in the pdfbox dll pdfmergerutility pdfmerger = new pdfmergerutility(); pdfmerger.addsource(sto); pdfmerger.addsource(sfrom); pdfmerger.setdestinationfilename(snew); pdfmerger.mergedocuments(); note: as downloaded ./external was missing bouncycastle and lucene-demo jars roy. [comment on sourceforge] originally sent by oisincvera. logged in: yes user_id=1794616 originator: no following code in vb.net causes same error when with pdfmerger 'set output destination .setdestinationfilename(outputfilefullname) 'looping thru the file list and add source to the mergeing documents for i as integer = 0 to filecount - 1 step 1 .addsource(pdffilelist(1)) next i 'merge the document .mergedocuments() end with",
        "label": 1
    },
    {
        "text": "nullpointerexception in type1parser read text extraction from certain pdfs is not possible and pdf box responses with nullpointerexception. text extraction from same pdf with version 1.8.13 is working. originally the issue was discovered while using the newest apache tika 1.14 library. i can not down-grade to pdf box 1.8.13 with apache tika 1.14. unfortunately i can not provide the pdfs that fail to you. however, i did some testing and found out that \u201ctoken token = lexer.nexttoken();\u201d return null. feb 07, 2017 12:17:40 pm org.apache.pdfbox.pdmodel.font.pdtype1font <init> severe: can't read the embedded type1 font aaaaab+arial-boldmt java.io.ioexception: found token=null but expected name caused by: java.io.eofexception at org.apache.pdfbox.io.scratchfilebuffer.seek(scratchfilebuffer.java:302) at org.apache.pdfbox.pdfparser.cosparser.checkxrefoffset(cosparser.java:1177) at org.apache.pdfbox.pdfparser.cosparser.parsexref(cosparser.java:202)",
        "label": 11
    },
    {
        "text": "corrupted pdf after adding text we have a web application which writes an official stamp to pdf documents after they have been approved. recently some pdfs have become corrupted after the stamp is written to the document. the stamp appears on the document, but all other content is removed. adobe reader also displays a dialogue box indicating the document has been corrupted.",
        "label": 1
    },
    {
        "text": "another invalid color space  destoutputprofile   passes commercial validators kun_muutat_suomeenen.pdf.pdf is not valid, error(s): 2.4.3 | invalid color space, invalid color space, destoutputprofile is missing",
        "label": 3
    },
    {
        "text": "classcastexception for unknown destination type trying to read the outlines failed for the attached document. import java.io.ioexception; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.pddestination; import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.pdoutlineitem; import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.pdoutlinenode; public class testpddestination {  public static void main(string[] args) throws ioexception {   pddocument doc = pddocument.load(\"speisepl\u00e4ne.pdf\");   traverse(doc.getdocumentcatalog().getdocumentoutline());   doc.close();  }    static void traverse(pdoutlinenode node) throws ioexception {   if (node instanceof pdoutlineitem) {    pddestination dst = ((pdoutlineitem) node).getdestination();    /**     * throws java.lang.classcastexception: org.apache.pdfbox.cos.cosfloat cannot be cast to org.apache.pdfbox.cos.cosname,     * but should be something like a pdpagexyzdestination!     */    system.out.println(dst);   }   for (pdoutlineitem child = node.getfirstchild(); child != null; child = child.getnextsibling()) {    traverse(child);   }  } }",
        "label": 11
    },
    {
        "text": "multiple text operations on multiple pages cause npe in ttfsubsetter problem seems to be of the same nature as in pdfbox-2605, in a slightly different scenario. nullptest.java import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.pdpage; import org.apache.pdfbox.pdmodel.common.pdrectangle; import org.apache.pdfbox.pdmodel.edit.pdpagecontentstream; import org.apache.pdfbox.pdmodel.font.pdfont; import org.apache.pdfbox.pdmodel.font.pdtype0font; import org.junit.test; public class nullptest {     @test     public void testmultipageunicodepdf() throws exception {         pddocument document = new pddocument();         pdfont titlefont = pdtype0font.load(document, this.getclass().getresourceasstream(\"/arial unicode.ttf\"));         pdpage page = new pdpage(pdrectangle.a4);         document.addpage(page);         pdpagecontentstream contentstream = new pdpagecontentstream(document, page);         contentstream.begintext();         contentstream.setfont(titlefont, 12);         contentstream.newlineatoffset(0, 100);         contentstream.showtext(\"p\u011bkn\u00fd \u017elu\u0165ou\u010dk\u00fd k\u016f\u0148 \u00fap\u011bl \u010f\u00e1belsk\u00e9 \u00f3dy\");         contentstream.endtext();         contentstream.close();                  page = new pdpage(pdrectangle.a4);         document.addpage(page);         contentstream = new pdpagecontentstream(document, page);         contentstream.begintext();         contentstream.setfont(titlefont, 12);         contentstream.newlineatoffset(0, 200);         contentstream.showtext(\"p\u011bkn\u00fd \u017elu\u0165ou\u010dk\u00fd k\u016f\u0148 \u00fap\u011bl \u010f\u00e1belsk\u00e9 \u00f3dy\");         contentstream.endtext();         contentstream.close();         document.close();     } }",
        "label": 6
    },
    {
        "text": "jdk java close contract issue java 8 bug uncovered, and wondering if the pdfbox team would be willing to work around it? you should probably reply with an emphatic \"no\", buti figure it is worth a shot. here is the openjdk bug: https://bugs.openjdk.java.net/browse/jdk-8054565 pddocument.saveincremental(outputstream) calls close() twice - once in try{} and once in finally{}, relying on the closable contract which says it will do nothing if the stream is already close. but, we see this: caused by: java.io.ioexception: closed lob     at oracle.jdbc.driver.databaseerror.sqltoioexception(databaseerror.java:519)     at oracle.jdbc.driver.oraclebloboutputstream.ensureopen(oraclebloboutputstream.java:231)     at oracle.jdbc.driver.oraclebloboutputstream.flush(oraclebloboutputstream.java:167)     at java.io.filteroutputstream.flush(filteroutputstream.java:140)     at java.io.filteroutputstream.close(filteroutputstream.java:158)     at org.apache.pdfbox.pdfwriter.coswriter.close(coswriter.java:300)     at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1366)     at ourpackage.util.pdf.pdfdrm.applydrm(pdfdrm.java:225)     at ourpackage.db.liquibase.customchanges.iqmdxcontentloader.applydrmtocespdfdocumentindatabase(iqmdxcontentloader.java:383)     at ourpackage.db.liquibase.customchanges.iqmdxcontentloader.applyzippedcesdocumentchangestodatabase(iqmdxcontentloader.java:265)     at ourpackage.db.liquibase.customchanges.iqmdxcontentloader.generatestatements(iqmdxcontentloader.java:153)     ... 33 more because java 8's filteroutputstream.close() is calling flush() on the second close and oracle's driver code doesn't like that. the bug can be worked around it by implementing close() in cosstandardoutputstream as below:         private boolean closed;         @override         public void close() throws ioexception         {                 try (outputstream ostream = out)                 {                         if (!closed)                                 flush();                 }                 closed = true;         } i've done this in our project code base, by cloning and owning cosstandardoutputstream and adding it to our classpath first. not ideal. also, mailing list thread on openjdk that recognizes the bug http://marc.info/?t=141767408700004&r=1&w=2. although, it is fixed in java 9 with no plan of backporting. not sure how to request a backport, but that would be the ideal solution. original mailing list report http://asfmail.lucidworks.io/mail_files/pdfbox-users/201509.mbox/%3ccalrfkrtvyzc1y7cfxg8x17kkmd+7byyxgxsr0umqxz_mvd0f4w@mail.gmail.com%3e (note: listed versions i know this affects)",
        "label": 11
    },
    {
        "text": " patch  restore shading api some of shading api is gone in 2.0 can we have it back so we can convert pdf to postscript in fop",
        "label": 11
    },
    {
        "text": "manifest should support specification entries the pdfbox's manifest.mf has \"bundle-...\" entries. it should (also) support the standard specification-vendor: specification-title: specification-version: implementation-vendor: implementation-title: implementation-version: entries so that the standard java api of package can be used to access the info in java code (e.g. via getspecificationversion(), getimplementationversion(), ...).",
        "label": 1
    },
    {
        "text": "type1fonts working on one computer  not another asked on so, tilman suggests i open a jira: http://stackoverflow.com/questions/29111310/pdfbox-2-0-0-type1fonts-working-on-one-computer-not-another i am trying to work out why i'm getting a bunch of `java.lang.illegalargumentexception: no glyph for u+0057 in font helvetica-bold` errors on a windows 2012 server dev environment, but not on my local windows 7 environment. i built the trunk from scratch, with: `mvn -dskiptests=true install` on my machine (win 7), collected the jars and made a very rudimentary test package, by dumping all the jars into a subfolder libs/ and copying the `org/apache/pdfbox/examples `class files to the same directory, to see if the helloworld program works. the [helloworld program][1] creates a file, called test.pdf with the message \"why\" as requested, but when i run it on a new machine, i get the following: c:\\eap-6.3.0\\pdfboxtesting>java -cp \".;libs/*\" org.apache.pdfbox.examples.pdmodel.helloworld test.pdf why exception in thread \"main\" java.lang.illegalargumentexception: no glyph for u+0057 in font helvetica-bold at org.apache.pdfbox.pdmodel.font.pdtype1font.encode(pdtype1font.java:303) at org.apache.pdfbox.pdmodel.font.pdfont.encode(pdfont.java:268) at org.apache.pdfbox.pdmodel.pdpagecontentstream.showtext(pdpagecontentstream.java:316) at org.apache.pdfbox.examples.pdmodel.helloworld.main(helloworld.java:59) i installed adobe reader xi on that computer, in case it needed the fonts from adobe, installed on the system, or who knows. it's not finding `u+0057`, which is a w, and in my testing, it wasn't finding a bunch of stuff. it basically didn't find anything. so something is fundamentally wrong, maybe the operating system has provided a bad font? [1]: https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/helloworld.java",
        "label": 6
    },
    {
        "text": "corrupted xmp causes java lang stringindexoutofboundsexception using preflight version 2.0.0-rc3, the validation of the document \"bad-fmt-95-m28154.pdf\" causes the exception : java.lang.stringindexoutofboundsexception: string index out of range: -1 at java.lang.string.substring(string.java:1911) at org.apache.xmpbox.xml.domxmpparser.parseinitialxpacket(domxmpparser.java:671) at org.apache.xmpbox.xml.domxmpparser.parse(domxmpparser.java:139) at org.apache.pdfbox.preflight.process.metadatavalidationprocess.validate(metadatavalidationprocess.java:69) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:84) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:122) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:163) for this document, http://www.pdf-tools.com/ gives the error message : bad-fmt-95-m28154.pdf does not conform to pdf/a. validating file \"bad-fmt-95-m28154.pdf\" for conformance level pdfa-1a invalid content of xmp packet header attribute 'begin': ' '. the document does not conform to the requested standard. the document's meta data is either missing or inconsistent or corrupt. done.",
        "label": 11
    },
    {
        "text": "text extraction partially garbled in this file  was ok in don't know if this is the same as in pdfbox-3066. the text with the f4 font is extracted as garbage in 2.0, and is fine with ar and in 1.8.",
        "label": 11
    },
    {
        "text": "add pddocument boolean  constructor for creating new documents using scratch files please add a pddocument(boolean) constructor so that we may create new pdf files using scratch files instead of memory. without this, we need to do weird loops to save the document after it has at least one page, then reload it, just so that we use scratch files.",
        "label": 1
    },
    {
        "text": "pdfsplit ignores global resources when using pdfsplit to split the attached one page doc in single pages the result page is incomplete.",
        "label": 1
    },
    {
        "text": "dataformatexception  incorrect header check pdf from pdfbox-186 java -cp lib/levigo-jbig2-imageio-1.6.0.jar:lib/jai_imageio.jar:pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar org.apache.pdfbox.tools.writedecodeddoc pwc-tech-forecast-spring-2009.pdf exception in thread \"main\" java.io.ioexception: java.util.zip.dataformatexception: incorrect header check at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:83) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:365) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:278) at org.apache.pdfbox.cos.cosstream.getunfilteredstream(cosstream.java:189) at org.apache.pdfbox.tools.writedecodeddoc.doit(writedecodeddoc.java:121) at org.apache.pdfbox.tools.writedecodeddoc.main(writedecodeddoc.java:192) caused by: java.util.zip.dataformatexception: incorrect header check at java.util.zip.inflater.inflatebytes(native method) at java.util.zip.inflater.inflate(inflater.java:259) at java.util.zip.inflater.inflate(inflater.java:280) at org.apache.pdfbox.filter.flatefilter.decompress(flatefilter.java:101) at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:65) ... 5 more",
        "label": 11
    },
    {
        "text": "font getfontdescriptor  for pdtype1font helvetica is null private pdtype1font font = pdtype1font.helvetica; font.getfontdescriptor() returns null i would think it shouldn't.",
        "label": 6
    },
    {
        "text": "transparent png file display with black border hi, i have added transparent png file in pdf with pdfbox and it's display black border around image. i have added same png file with itext and it's display good in pdf. i have used below function to add png file. i am using latest pdfbox svn code to add png file. public void createpdffromimage( string inputfile, string image, string outputfile ) throws ioexception, cosvisitorexception { // the document pddocument doc = null; try { doc = pddocument.load( inputfile ); //we will add the image to the first page. pdpage page = (pdpage)doc.getdocumentcatalog().getallpages().get( 0 ); pdxobjectimage ximage = null; /*if( image.tolowercase().endswith( \".jpg\" ) ) { ximage = new pdjpeg(doc, new fileinputstream( image ) ); } else if (image.tolowercase().endswith(\".tif\") || image.tolowercase().endswith(\".tiff\")) { ximage = new pdccitt(doc, new randomaccessfile(new file(image),\"r\")); } else { bufferedimage awtimage = imageio.read( new file( image ) ); fileinputstream inputstream = new fileinputstream(image); pdstream stream = new pdstream(doc, inputstream); ximage = new pdpixelmap(stream); //throw new ioexception( \"image type not supported:\" + image ); } */ system.out.println(\"testing\"); bufferedimage stampimage = null; try { stampimage = imageio.read(new file(image)); } catch(exception e) { e.printstacktrace(); } ximage = new pdjpeg(doc, stampimage ); //ximage = new pdpixelmap(doc, stampimage); cosstream stream = ximage.getcosstream(); pdstream pdstream = new pdstream(stream); ximage = new pdpixelmap(pdstream); //boximage imagedata = boximage.getinstance(image); //system.out.println(\"\"+imagedata.getimagetype()); pdpagecontentstream contentstream = new pdpagecontentstream(doc, page, true, true, true); affinetransform transform = new affinetransform(stampimage.getwidth(), 0, 0, stampimage.getheight(), 20, 200); //contentstream.drawimage( ximage, 20, 20 ); contentstream.drawxobject(ximage, transform); contentstream.close(); doc.save( outputfile ); } finally { if( doc != null ) { doc.close(); } } }",
        "label": 1
    },
    {
        "text": "can't read embedded font ydlrut arialmt on all pdf reports of our application we get the following (or similar) errors. the reports are based on arial with unicode. renders fine on adobe acrobat and similar products. however, the resulting png is in a different font. messages: [java] warning: changing font on < > from <arial bold> to the default font [java] may 29, 2011 11:15:04 am org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring ... [java] info: can't read the embedded font fyktfo+arial-boldmt to reproduce: 1. extract zip. 2. start tst.ksh.",
        "label": 1
    },
    {
        "text": "wrong glyph  persian  is used in extacted text instead of the original glyph  persian  in pdf file hi i am very new to pdfbox and i am dealing with persian pdf files. when i convert persian pdf files using pdfbox-app, some persian glyphs like \u0645 are displayed wrongly in the extracted text. for example, the word \"\u0647\u0633\u062a\u0645\" in persian is extracted as \"\u0647\u0633\u062a\u0646\" and \"\u0645\u0646\" in persian is extracted as \"\u0647\u0646\". also, the word \"\u0633\u0644\u0627\u0645\" is extracted as \"\u0633\u0627\u0644\u0645\". by the way, i have tested extracting text from a complete persian pdf file with multiple pages; the result is disappointing. actually, it is totally wrong. please let me know if i should upload an example persian pdf file.",
        "label": 1
    },
    {
        "text": "convert page to image hi there, i am missing the converttoimage function for a page. is there a new way to handle this task? i am using 2.0.0 because of the awt font optimization.",
        "label": 1
    },
    {
        "text": "font cache is always rebuilt when font skipped if a font is skipped because of a missing name, the font is not added to the fontinfolist. this means that at the next program start, the list will be rebuilt. this has happened for me all the time, i'm just too patient so i didn't realize the problem. it happens with the attached font, which is on my system. there should be a type of entry in the cache file that mentions a file, but no font name, so that the next time the font directories are looked into, that file is not considered to be a new font.",
        "label": 11
    },
    {
        "text": "cannot change converted image's dpi when i convert pdf to jpg, i use \"renderimagewithdpi\" and \"jpegfactory.createfromimage\". but dpi doesn't change. so, how can i change image's dpi in pdfbox 2.0.0 please let me know that. this is my source. 1. using renderimagewithdpi pddocument document = pddocument.load(sourcefile); pdfrenderer pdfrenderer = new pdfrenderer(document); int pagecounter = 0; for (pdpage page : document.getpages()){       renderedimage im = pdfrenderer.renderimagewithdpi(pagecounter, integer.parseint(convertdpi), imagetype.rgb);      file f = new file(destinationdir +\"/\"+savename+\"_\"+ string.format(\"%03d\", pagecounter)+\".\"+convertformat);      imageio.write(im, convertformat,f);      pagecounter++; } document.close(); 2. using \"jpegfactory.createformimage\" pddocument document = pddocument.load(sourcefile); pdfrenderer pdfrenderer = new pdfrenderer(document); int pagecounter = 0; for (pdpage page : document.getpages()){      bufferedimage image = pdfrenderer.renderimage(pagecounter, 1);     pdimagexobject pdimage = jpegfactory.createfromimage(document, image, float.parsefloat(convertquality), integer.parseint(convertdpi));     file f = new file(destinationdir +\"/\"+savename+\"_\"+ string.format(\"%03d\", pagecounter)+\".\"+convertformat);     imageio.write(pdimage.getimage(), convertformat,f); } document.close();",
        "label": 11
    },
    {
        "text": " patch  many pdfbox tests are never run the pdfbox tests are run via the testall.java which simply adds all the other tests to the test suite. however, the testall.java has not been kept up to date, so there are 13 tests which are not run, these are as follows: /util testtextstripperperformance [fails] testpdftoimage testpdftext2html pageextractortest /pdmodel/graphics/color pdcolorstatetest /pdmodel/font testttfparser pdsimplefonttest /pdfparser testpdfparser [fails] testnonsequentialpdfparser conformingpdfparsertest /encryption testpublickeyencryption [fails] /cos testcosbase testcosnumber i presume that testall.java is a legacy file, as maven is used in all the other sub-projects to run any tests named test**.java, the solution is propose is: 1. delete alltests.java 2 .the patch changes pom.xml to run test**.java files automatically 3. the patch fixes bugs in the testimageioutils and testtextstripperperformance tests which threw exceptions because their output folder did not exist 4. the patch disables the testpdftoimage and testpublickeyencryption which are broken, i will open two new issues for fixing these tests",
        "label": 1
    },
    {
        "text": "how to read date each row and cloumn wise while reading pdf hi, i am reading pdf files. i am reading file line by line.i looking date to be read column wise in each row wise. i am getting more space between when compare with pdf basically i want write date to xls file. with my logic i am facing am facing alignment issue. can you please help. i am attaching out put and files as well.",
        "label": 1
    },
    {
        "text": "contributing the jbig2 imageio plugin to pdfbox levigo solutions gmbh donates the java imageio-plugin for the jbig2 to the pdfbox project. the plugin is currently hosted at https://github.com/levigo/jbig2-imageio and has already been prepared for integration. the steps completed so far are: ip vetting for contributions by non-levigo developers merging/application of all pending pull requests update of the project structure in anticipation of the new home: package names license headers license files readme.md release notes maven project information a tgz containing the source code has been attached: it is based on commit 483aab3eb9bbc02f6995a637155adf6b922ed0c0 (https://github.com/levigo/jbig2-imageio/commit/483aab3eb9bbc02f6995a637155adf6b922ed0c0). its sha1 is 0e07111b4bf7f5a51bf0fdd903f02f082ea3bf65",
        "label": 1
    },
    {
        "text": "can't draw pdfs while annots is cosstream instead of cosarray pdfbox would failed to draw the attached document , error logs are below: java.lang.classcastexception: org.apache.pdfbox.cos.cosstream cannot be cast to org.apache.pdfbox.cos.cosarray at org.apache.pdfbox.pdmodel.pdpage.getannotations(pdpage.java:661) ~[classes/:?] at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:202) ~[classes/:?] this pdf put cosstream as the page's annots object, and caused the failure. simply do type checks in pdpage.getannotations might avoid this issue, but the annotations would lost.   this pdf show correctly (i mean annotation works) in: chrome 63.0.3239.132 adobe reader 11.0.23 this pdf doesn't work perfectly in: microsoft edge      ",
        "label": 1
    },
    {
        "text": "pdmetadata exportxmpmetadata fails when metadata has encrypted stream when the metadata is encoded with the crypt filter, exportmetadata() fails to parse the xml. my guess is that pddocumentcatalog.getmetadata() gives pdmetadata the raw stream, instead of the filtered one. then pdmetadata.exportxmpmetadata() calls xmpmetadata.load(), which cannot parse the encrypted stream. while i cannot post the document (proprietary), the outline shown by pdfdebugger goes like this: root:dictionary(catalog) + acroform:dictionary metadata:stream(metadata:xml) filter:array o [0] crypt o length:6302 o subtype:xml o type:metadata",
        "label": 1
    },
    {
        "text": "illegalargumentexception in typemapping instanciatesimpleproperty i get this with the attached file: 004144.pdf preflight fail: java.lang.illegalargumentexception: failed to instanciate property  at org.apache.xmpbox.type.typemapping.instanciatesimpleproperty(typemapping.java:204)  at org.apache.xmpbox.xml.domxmpparser.managesimpletype(domxmpparser.java:399)  at org.apache.xmpbox.xml.domxmpparser.createproperty(domxmpparser.java:338)  at org.apache.xmpbox.xml.domxmpparser.parsedescriptionroot(domxmpparser.java:292)  at org.apache.xmpbox.xml.domxmpparser.parse(domxmpparser.java:206)  at org.apache.xmpbox.xml.domxmpparser.parse(domxmpparser.java:114)  at org.apache.pdfbox.preflight.process.metadatavalidationprocess.validate(metadatavalidationprocess.java:67)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88)  at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168)  at pdfboxpageimageextraction.preflighttest.main(preflighttest.java:41) caused by: java.lang.reflect.invocationtargetexception  at sun.reflect.generatedconstructoraccessor23.newinstance(unknown source)  at sun.reflect.delegatingconstructoraccessorimpl.newinstance(delegatingconstructoraccessorimpl.java:45)  at java.lang.reflect.constructor.newinstance(constructor.java:526)  at org.apache.xmpbox.type.typemapping.instanciatesimpleproperty(typemapping.java:184)  ... 10 more caused by: java.lang.illegalargumentexception: value given is not allowed for the date type : class java.lang.string  at org.apache.xmpbox.type.datetype.setvalue(datetype.java:110)  at org.apache.xmpbox.type.abstractsimpleproperty.<init>(abstractsimpleproperty.java:50)  at org.apache.xmpbox.type.datetype.<init>(datetype.java:50)  ... 14 more the cause is this line in the xmp: <xap:createdate>0-01-01t00:00:00z</xap:createdate> the cause is the \"z\".",
        "label": 11
    },
    {
        "text": "i need urgently to extract text color from pdf file i am working now in project to convert pdf to html format, i am using pdfbox to extract text from pdf , by using textposition class in pdfbox i extracted text, font,size,coordinates and others but i didn't find any method to get text color!!, i don't know why?? i did many search and many attempts about this issue but i didn't find any solution! please need urgent reply because it is very urgent issue. thanks, mohamme\u064a",
        "label": 1
    },
    {
        "text": "pdf rendering regression this pdf is rendered with black margins if rendered at 55 dpi in 2.0.2, but looks fine 2.0.1. pdf: ftp://ftp.cse.ohio-state.edu/pub/tech-report/2010/tr11.pdf",
        "label": 11
    },
    {
        "text": "pdresources getimages  is broken the current trunk getimages() call will always return an emptyset. as it tries to get the image from a freshly created hashmap instead of allxobjects.",
        "label": 1
    },
    {
        "text": "if  page   null   page getrotation    null  static pdrectangle[] pagesizes = new pdrectangle[5]; static { pagesizes[0] = pdpage.page_size_a0; pagesizes[1] = pdpage.page_size_a1; pagesizes[2] = pdpage.page_size_a2; pagesizes[3] = pdpage.page_size_a3; pagesizes[4] = pdpage.page_size_a4; } page = new pdpage(pagesizes[size]); ... if (page != null && page.getrotation() == 90) //npe thrown { }",
        "label": 11
    },
    {
        "text": "numberformatexception in cosparser fuzzing pdf loading with jqf triggered two numberformatexceptions in different places. first exception: java.lang.numberformatexception: for input string: \"1f\"  at java.lang.numberformatexception.forinputstring(numberformatexception.java:65)  at java.lang.long.parselong(long.java:589)  at java.lang.long.parselong(long.java:631)  at org.apache.pdfbox.pdfparser.cosparser.bfsearchforobjstreams(cosparser.java:2052)  at org.apache.pdfbox.pdfparser.cosparser.retrievetrailer(cosparser.java:287)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:171)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:220)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1160)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1057)     ... second exception: java.lang.numberformatexception: for input string: \"am\"  at java.lang.numberformatexception.forinputstring(numberformatexception.java:65)  at java.lang.integer.parseint(integer.java:580)  at java.lang.integer.parseint(integer.java:615)  at org.apache.pdfbox.pdfparser.cosparser.parsexreftable(cosparser.java:2696)  at org.apache.pdfbox.pdfparser.cosparser.parsexref(cosparser.java:326)  at org.apache.pdfbox.pdfparser.cosparser.retrievetrailer(cosparser.java:254)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:171)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:220)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1160)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1057)     ... the code used for fuzzing is pddocument.load(inputstream)",
        "label": 1
    },
    {
        "text": "redundant incorrect code in pdvisiblesigndesigner java org/apache/pdfbox/pdmodel/interactive/digitalsignature/visible/pdvisiblesigndesigner.java contains the following in the calculatepagesize method:     float x = pagewidth;     float y = 0;     pagewidth += y;     float tpercent = (100 * y / (x + y));     imagesizeinpercents = 100 - tpercent; i can't see how this would result in anything but an imagesizeinpercents of 100.",
        "label": 11
    },
    {
        "text": "regression  type font corrupted you get a warning when opening output in adobe reader blank line after \"cleartomark\" missing in fontfile java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar writedecodeddoc t1subset2.pdf",
        "label": 11
    },
    {
        "text": "usage methods references incorrect package see https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/util/printtextlocations.java#l106 it references the \"pdmodel\" package instead of \"util\" a better solution would be to do printtextlocations.class.getname() instead of hardcoding edit: same problem in several other examples, e.g. printimagelocations.",
        "label": 11
    },
    {
        "text": "high memory consumption while building font cache when the font cache is build there is a very high memory consumption. for this small program     public static void main(string[] args)     {         pdfont font = pdtype1font.helvetica;         try         {             system.in.read();         }         catch (ioexception e)         {             // todo auto-generated catch block             e.printstacktrace();         }     } i need to set -xmx1512m in order to avoid an oom smaller memory settings will bring this $ java -xmx1256m -jar test.jar  nov 03, 2015 2:48:32 am org.apache.pdfbox.pdmodel.font.filesystemfontprovider loadcache warnung: new fonts found, font cache will be re-built nov 03, 2015 2:48:32 am org.apache.pdfbox.pdmodel.font.filesystemfontprovider <init> warnung: building font cache, this may take a while exception in thread \"main\" java.lang.outofmemoryerror: java heap space  at org.apache.fontbox.cff.indexdata.initdata(indexdata.java:95)  at org.apache.fontbox.cff.cffparser.readindexdata(cffparser.java:163)  at org.apache.fontbox.cff.cffparser.parsefont(cffparser.java:393)  at org.apache.fontbox.cff.cffparser.parse(cffparser.java:115)  at org.apache.fontbox.ttf.cfftable.read(cfftable.java:53)  at org.apache.fontbox.ttf.truetypefont.readtable(truetypefont.java:377)  at org.apache.fontbox.ttf.opentypefont.getcff(opentypefont.java:61)  at org.apache.pdfbox.pdmodel.font.filesystemfontprovider.addtruetypefontimpl(filesystemfontprovider.java:432)  at org.apache.pdfbox.pdmodel.font.filesystemfontprovider.addtruetypecollection(filesystemfontprovider.java:344)  at org.apache.pdfbox.pdmodel.font.filesystemfontprovider.scanfonts(filesystemfontprovider.java:243)  at org.apache.pdfbox.pdmodel.font.filesystemfontprovider.<init>(filesystemfontprovider.java:224)  at org.apache.pdfbox.pdmodel.font.fontmapperimpl$defaultfontprovider.<clinit>(fontmapperimpl.java:132)  at org.apache.pdfbox.pdmodel.font.fontmapperimpl.getprovider(fontmapperimpl.java:151)  at org.apache.pdfbox.pdmodel.font.fontmapperimpl.findfont(fontmapperimpl.java:415)  at org.apache.pdfbox.pdmodel.font.fontmapperimpl.findfontboxfont(fontmapperimpl.java:378)  at org.apache.pdfbox.pdmodel.font.fontmapperimpl.getfontboxfont(fontmapperimpl.java:352)  at org.apache.pdfbox.pdmodel.font.pdtype1font.<init>(pdtype1font.java:114)  at org.apache.pdfbox.pdmodel.font.pdtype1font.<clinit>(pdtype1font.java:76)  at pdfonttest.main(pdfonttest.java:11) possible cause is a large number of fonts on my system nov 03, 2015 2:56:01 am org.apache.pdfbox.pdmodel.font.filesystemfontprovider loadcache warnung: new fonts found, font cache will be re-built nov 03, 2015 2:56:01 am org.apache.pdfbox.pdmodel.font.filesystemfontprovider <init> warnung: building font cache, this may take a while nov 03, 2015 2:56:22 am org.apache.pdfbox.pdmodel.font.filesystemfontprovider savecache warnung: finished building font cache, found 876 fonts",
        "label": 11
    },
    {
        "text": "the font gets gibbrish when adding a line of text to an existing pdf with a table when trying to add a line to the existing pdf document with a table the table headers appear gibberish. the table header used to be pmits asset id and after adding the header it reads as: 3 0 , 7 6 $ v v h w. some gibberish characters. here is my code: // the document pddocument doc = null; try { doc = pddocument.load( file ); list allpages = doc.getdocumentcatalog().getallpages(); //pdfont font = pdtype1font.helvetica_bold; for( int i=0; i<allpages.size(); i++ ) { pdpage page = (pdpage)allpages.get( i ); pdrectangle pagesize = page.findmediabox(); pdpagecontentstream contentstream = new pdpagecontentstream(doc, page, true, true,true); pdfont font = pdtype1font.times_roman; float fontsize = 15.0f; contentstream.begintext(); // set font and font size contentstream.setfont( font, fontsize); contentstream.movetextpositionbyamount(700, 1150); contentstream.drawstring( message); contentstream.endtext(); //contentstream. contentstream.close();} doc.save( outfile ); } finally { if( doc != null ) { doc.close(); } } } stack overflow has a lot of discussion about this issue and explained by user mlk http://stackoverflow.com/questions/19322553/adding-header-to-existing-pdf-file-using-pdfbox i am not sure how to attache the test pdf to this issue.",
        "label": 1
    },
    {
        "text": " patch rfc  set maximum compression level on flatefilter currently the flate filter uses the default compression level, which in case auf zlib is 6. when looking around the web for zlib compression level settings, most result suggest that a level higher than 6 does not gain much but take longer to compress. this is true for most data, but not for lossless compressed images. the savings there can be very measurable (e.g. in a pdf containing some big highres images 66 mb (level 6) to 57 mb (level 9); nope, i don't have sample data ready, as this were customer images). the attached patch changes the deflate compression to 9. most time you want a maximum compressed pdf file, as generating pdfs is usually not time critical. on the other side, when you want to generate a pdf very fast, you usually want a compression level of 2 or 3, as at this levels you have a higher write performance due to less io (at least in my tests) and very fast compression. the best would be of course to allow the user to set the compression level them self, e.g. on the document level. but i don't think it's possible to get the compression level from the document to the cosstreams. a global system property (e.g. apache.pdfbox.deflatelevel) could be a solution, but not a nice one.",
        "label": 11
    },
    {
        "text": "problem creating pdf with german text using embedded type1  pfb  font when creating a pdf and adding text using a postscript type1 font (e.g. the attached n019003l.pfb but also others), an error occurs when the text contains german characters. the error occurs with e.g. the character \"\u00e4\" (adieresis) and other similar umlaut characters; it does not occur with \"\u00df\" (germandbls). using an embedded ttf seems to work fine but when i load the pfb like this: inputstream pfb = new fileinputstream(fontfile); font = new pdtype1font(document, pfb); i get an encoding error whenever i try to print an \"\u00e4\" to the page: java.lang.illegalargumentexception: u+00e4 ('adieresis') is not available in this font nimbussanl-regu (generic: nimbussanl-regu) encoding: built-in (type 1) if i specify a different encoding (winansi) when loading the font: inputstream pfb = new fileinputstream(fontfile); font = new pdtype1font(document, pfb, new winansiencoding()); then the exception is not thrown, but i just have an empty space in place of the \"\u00e4\". i have tried to look into the code, in particular i have played around with the class pdtype1fontembedder. when the fontbox object type1font is created by the parser in the following line of code: type1 = type1font.createwithpfb(pfbbytes); i have tried to look into the charstring dictionary: type1.getcharstringsdict() and, by iterating through the set keys, can see that \"adieresis\" is in there. however, when using the default encoding from the font (i.e. by passing \"null\" to the pdtype1fontembedder), the resulting encoding that is obtained by the following line of code: fontencoding = type1encoding.fromfontbox(type1.getencoding()); does not contain \"adieresis\" (or other \"compound\" characters), but just \"dieresis\".",
        "label": 11
    },
    {
        "text": "overhaul pdfbox documentation in oder to make it easier for users of pdfbox to work with the library there shall be an enhanced documentation consisting of an introduction, api references and more well documented examples and code snippets (cookbook). in order to make it easier to contribute the cookbook shall be build automatically from the examples/snippet \u201arepository\u2018.",
        "label": 8
    },
    {
        "text": "think i found a bad constant  ttf  value and constant use in pdfbox source was searching if an oblique constant was defined somewhere for fsselection field of os/2 truetype table (org.apache.fontbox.ttf.os2windowsmetricstable), found a private one in org.apache.pdfbox.pdmodel.font.truetypeembedder (line 53) in v2.0.0 but it was defined with value 256 instead of 512 (as defined in official microsoft documentation here: https://www.microsoft.com/typography/otspec/os2.htm#fss, bits are defined starting at 0 and oblique is bit 9, so oblique should have value 512 (1 << 9) instead of 256. and the constant use (line 184), is wrong too, the line should be         fd.setitalic((fsselection & (italic | oblique)) != 0); instead of:         fd.setitalic((fsselection & italic) == fsselection ||                      (fsselection & oblique) == fsselection); because fsselection can contain other bits set at the same time (like bold = 1 << 5), so the tests can be both false while one of the bit is set.",
        "label": 1
    },
    {
        "text": "encrypted key not correctly calculated when the meta data is not encrypted since rev 4, meta data can be unencrypted while the data is encrypted. if the metadata is not encrypted 0xffffffff should be added to the hash: \"security handlers of revision 4 or greater) if document metadata is not being encrypted, pass 4 bytes with the value 0xffffffff to the md5 hash function.\" (see see 7.6.3.3 algorithm 2 step f of pdf 32000-1:2008) whether or not the metadata is encrypted is store in the encryption dictionary. the default value is to encrypt the meta data. i will attach a patch to detect whether the meta data is encrypted, and if not 0xffffffff will be added. the document that i have tested with can be downloaded from http://www.mbtareview.com/mbta_review_2009.pdf",
        "label": 1
    },
    {
        "text": "pdfstreamengine processencodedtext fails on utf text i have a pdf document which yields gibberish text. when i debug it, i get to the pdfstreamengine.processencodedtext. the method gets a following byte array: [0, 47, 0, 82, 0, 82, 0, 78, 0, 3, 0, 68, 0, 87, 0, 3, 0, 87, 0, 75, 0, 72, 0, 3, 0, -64, 0, 85, 0, 86, 0, 87, 0, 3, 0, 83, 0, 76, 0, 70, 0, 87, 0, 88, 0, 85, 0, 72, 0, 3, 0, 68, 0, 69, 0, 82, 0, 89, 0, 72, 0, 17, 0, 3] this looks to me like some utf16 text, but the codes seem different than what you'd normally expect. i don't understand the encoding. in 1.2.1 this yielded the correct output though (\"look at the picture above\"). in the 1.3.1 and the current trunk this is converted to garbage. the culprit is here: codelength = 1; string c = font.encode( string, i, codelength ); if( c == null && i+1<string.length) { //maybe a multibyte encoding codelength++; c = font.encode( string, i, codelength ); } so the code first tries to 'encode' a single byte as a character, and then tries two bytes, three bytes etc. first it starts with a 00 byte. in 1.2.1 the pdfont.encode would return null. the program would then try with two bytes getting a correct character on the second attempt. in the current trunk the font.encode method returns a space \" \" when 00 is passed. this is clearly wrong, because afterwards the entire string is parsed incorrectly. i tried to debug further and it seems to me that the problem is in the encoding class, in the getname method. it looks like this: public string getname( int code ) throws ioexception { string name = codetoname.get( code ); if( name == null ) { //lets be forgiving for now name = \"space\"; } return name; } the crucial bit is the \"let's be forgiving for now\". if a code is unknown in the encoding, a space is returned. in my case this completely breaks the parsing of a file. what was the rationale behind this behavior? removing it fixed my problem and didn't break anything. all unit tests of pdfbox pass. the regression tests of my applications (based on the pdf extraction code from the aperture framework) also pass. the \"forgiving\" part has been added in pdfbox-626, but the issue description doesn't name any reasons for that. if the \"forgiveness\" is there for a good reason, i'd be grateful for advice how to deal with the problem. otherwise please remove it. unfortunately i can't share the problem file.",
        "label": 1
    },
    {
        "text": "pdf box image color distortion colors displayed incorrect, after pdf page was converted to image. attached archive contains pdf and code example.",
        "label": 1
    },
    {
        "text": "extract paragraph from pdf file using search string i have working on text mining in pdf file using apache pdfbox for past three months. i am trying to extract the particular paragraph from pdf file using search string. but i can\u2019t extract the paragraph from pdf. is there any other methods to extract same. kindly suggest me.",
        "label": 1
    },
    {
        "text": "testcosfloat occasionally fails  is something wrong with my machine  in org.apache.pdfbox.cos.testcosfloat, testequals() fails when num is close to 1.0f. i originally encountered the problem as an occasional failure while building the unmodified source code. i can get the failure consistently by setting num to 1.0f explicitly in the code and running the test. the problem occurs on this line, on the last iteration of the loop, when i is 280000f and num is close to 280000f. cosfloat test4 = new cosfloat(num + 0.01f); it passes consistently on my machine if i change this value to 0.02f.",
        "label": 4
    },
    {
        "text": "merging pdfs with interactive forms produces incorrect result when merging a pdf with form fields (page2.pdf) to a pdf generated via fop (page1.pdf), the form fields of page2.pdf are not shown in the result in acrobat reader. when merging page2.pdf twice, the form fields are not shown for the first occurrence but are shown for the second occurrence. when merging page2.pdf with a pdf created by ms word, the problem is not reproducible. command line to reproduce the problem: java -classpath pdfbox-app-1.8.4.jar org.apache.pdfbox.pdfmerger page1.pdf page2.pdf page2.pdf result.pdf",
        "label": 8
    },
    {
        "text": "justification of text in pdf is it possible to justify text in pdf using pdfbox????",
        "label": 1
    },
    {
        "text": "cosname parsing doesn't handle iso encoded bytes as discussed here http://stackoverflow.com/questions/36964496/pdfbox-2-0-overcoming-dictionary-key-encoding/ a byte sequence making up a cosname is interpreted during parsing and writing where it shouldn't. details are given my mkl's excellent analysis.",
        "label": 6
    },
    {
        "text": " patch  don't a allow a miter limit   a miter limit of 0 or less will cause the pdf to not render correctly in acrobat reader. also such a value makes no sense. throw an exception instead. most other renderers will show the pdf correctly fine (e.g. pdfbox-debugger, mac os x preview etc.) and make debugging this problem difficult. see also https://github.com/danfickle/openhtmltopdf/issues/135",
        "label": 11
    },
    {
        "text": "type1 parser hangs indefinitely when rendering the first page of my pdf document the type1parser (org.apache.fontbox.type1.type1parser) hangs in a loop in parsebinary(byte[] bytes) throws ioexception and \"kills\" our rendering pipeline. please find the loop that hangs below: // find /private dict while (!lexer.peektoken().gettext().equals(\"private\")) { lexer.nexttoken(); } there is no token named \"private\" ever in the list of returned tokens (they're empty all the time). furthermore going deeper into the source code it seems the class reading the tokens (type1lexer) does never finally advance the buffer position and always returns an empty name token in the readtoken(token prevtoken) method. looking at the decrypted buffer i cannot get something useful out of it based on my current understanding. unfortunately i cannot provide the pdf in question as it contains confidental data. acrobat reader xi version 11.0.08 renders the document just fine. in addition it seems the pdf was encrypted (40-bit rc4) with an empty password and says it's pdf version 1.5. does this provide enough information or can i do anything else to help nailing this one down? i guess this might be a pdf document structure/feature that is not yet supported completely but at least pdfbox should throw an exception instead of failing \"silently\"...",
        "label": 6
    },
    {
        "text": "integration of a pdf a validator in pdfbox we (atos worldline) donate our pdf/a validator to the pdfbox project. this product is based on pdfbox and a javacc parser. before this donation, the product was already distributed under apache licence 2. its current name is padaf. padaf complies the isartor test suite. this version depends on standard pdfbox 1.5.0 version. only one test class does not compile with current head (on 27 of june), all other test cases pass. padaf is composed of 2 modules : preflight : the validator xmpbox : an other implementation of xmp parser and writer. we make that choice because we did not have the time to propose all necessary modification in jempbox. the attached tar ball contains : sources of the 2 modules junit tests for each one a parent (that will soon disappear) already depending on pdfbox-parent these are sha1 for each attached file b9bb323fa73e1416a8b282fe2a687cebf1ac2145 padaf-apache.tgz e9e5fb05105799b9884be0ae6c060323aed3211a pdfbox160.patch",
        "label": 1
    },
    {
        "text": "gets scrambled japanese text while reading a pdf file during conversion of a japanese pdf file to xml the output japanese text gets scrambled.",
        "label": 1
    },
    {
        "text": "title invalidly read in documentinformation the value returned by document.getdocumentinformation().gettitle() is invalid with the attached document. the last character is badly deserialized. the method returns microsoft word - la_lan01-#230492-v1-j2-zilker_-_motion_for_letters_rogator\u00e2 adobe reader proposes : microsoft word - la_lan01-#230492-v1-j2-zilker_-_motion_for_letters_rogator\u2026 with a horizontal ellipsis\u0083",
        "label": 5
    },
    {
        "text": "flatten not working on attached pdf form please see attached flattenissue.java. this code populates form fields in the openofficeform.pdf form and then it flattens the form. however the output openofficeform_filled_flattened.pdf is not correct. the values of the fields are incorrectly moved in left down corner. i have found a way how to workaround the issue please see flattenissueworkaround.java which generates correct openofficeform_filled_flattened_workaround.pdf attaching whole eclipse java project",
        "label": 8
    },
    {
        "text": "extending cosname to produce pdf a with correct outputintents hello, first of all, thanks for this tool, found it very useful. below some sample code to include (srgb) icc profile and corresponding outputintents to the generated pdf/a. the produced pdf successfully passes validation. it would be nice to have the cosname' extension included in the next release so we won't have to use a homemade build. regards, elyes extension in cosname (org.apache.pdfbox.cos) public static final cosname outputintents = new cosname( \"outputintents\" ); public static final cosname outputintent = new cosname( \"outputintent\" ); public static final cosname destoutputprofile = new cosname( \"destoutputprofile\" ); add new classes public class outputintents implements cosobjectable { private cosdictionary dictionary; public outputintents(pddocument doc, inputstream colorprofile) throws exception { dictionary = new cosdictionary(); dictionary.setitem(cosname.type, cosname.outputintent); dictionary.setitem(cosname.s, cosname.gts_pdfa1); destoutputprofile dop = new destoutputprofile(doc,colorprofile, false); dop.configure(); dictionary.setitem(cosname.destoutputprofile, dop); } public cosbase getcosobject() { return dictionary; } public cosdictionary getdictionary() { return dictionary; } public void setinfo( string value ) { dictionary.setstring(\"info\", value); } public void setoutputcondition( string value ) { dictionary.setstring(\"outputcondition\", value); } public void setoutputconditionidentifier( string value ) { dictionary.setstring(\"outputconditionidentifier\", value); } public void setregistryname( string value ) { dictionary.setstring(\"registryname\", value); } } public class destoutputprofile extends pdstream { public destoutputprofile(pddocument document) { super(document); } public destoutputprofile(cosstream str) { super(str); } public destoutputprofile(pddocument doc, inputstream str) throws ioexception { super(doc, str); } public destoutputprofile(pddocument doc, inputstream str, boolean filtered) throws ioexception { super(doc, str, filtered); } public void configure(){ try { getstream().setfilters(cosname.flate_decode); getstream().setint( cosname.length, getbytearray().length ); getstream().setint(cosname.n, 3); addcompression(); } catch (exception e) { e.printstacktrace(); system.exit(-1); } } } sample code to include output intent pddocumentcatalog cat = doc.getdocumentcatalog(); cosdictionary root = (cosdictionary)cat.getcosobject(); /* here you have to download .icc profile */ inputstream colorprofile = outputintents.class.getresourceasstream(\"/test/color/srgb.icc\"); outputintents oi = new outputintents(doc, colorprofile); oi.setinfo(\"srgb iec61966-2.1\"); oi.setoutputcondition(\"srgb iec61966-2.1\"); oi.setoutputconditionidentifier(\"srgb iec61966-2.1\"); oi.setregistryname(\"http://www.color.org\"); cosarray outputintents = new cosarray(); outputintents.add(oi); root.setitem(\"outputintents\", outputintents);",
        "label": 4
    },
    {
        "text": "pdfbox exports  images from a pdf instead of one i have a pdf that i export all images from. my problem is that i get 1290 images after export. if i export all images from the pdf in acrobat pro, i get only one. there must be some way that the pdf composes these images together, but i cant figure out how? the pdf is problbly made from an ad pdf placed in an indesign cs4 dokument and exported as a pdf by indesign server 6.x i dont need to compose all the images to one, i just want to filter out the ones that \"belong\" together. i will attach the pdf to this issue. does anyone know how to do that? best regards / pontus hulin",
        "label": 1
    },
    {
        "text": "classcastexception in pdappearancedictionary org.apache.pdfbox.pdmodel.interactive.annotation.pdappearancedictionary: in both getrolloverappearance() and getdownappearance() the cosdictionary ap is added to itself, so causing a classcastexception in the following while loop when it is casted to cosstream. i'll post a patch for this based on the getnormalappearance() method.",
        "label": 1
    },
    {
        "text": "axialshadingcontext is slow axialshadingcontext#getraster() is on top of profiler hot spots in documents that use an axial shading. inside it, the slowest part is calling pdcolorspacergb#torgb() and pdfunctiontype3#eval() (in this order).",
        "label": 9
    },
    {
        "text": "fdf does not parse  missing root object specification in trailer  fdf file generated with itext does not parse with pdfbox fdfparser fdfparser parser = new fdfparser(new fileinputstream(\"d:/dev/failsfdf.fdf\")); parser.parse(); java.io.ioexception: missing root object specification in trailer. at org.apache.pdfbox.pdfparser.cosparser.parsetrailervaluesdynamically(cosparser.java:2121) content of fdf file: %fdf-1.4 %\u00e2\u00e3\u00ef\u00f3 1 0 obj <</fdf<</fields[<</t(eld goal2)/v()>><</t(eld goal3)/v()>><</t(eld goal1)/v()>><</kids[<</t(modifications:3)/v()>><</t(level)/v(early advanced)>><</t(variations:1)/v(test in small group)>><</t(accommodations:3)/v(test over more than one day)>><</t(variations:3)/v()>><</t(variations:2)/v()>><</t(accommodations:1)/v(administer at time most beneficial to student)>><</t(accommodations:2)/v(supervised breaks within a section of the test)>><</t(modifications:2)/v()>><</t(modifications:1)/v()>>]/t(el_listening)>><</t(alt ed levels)/v( )>><</kids[<</t(modifications:3)/v()>><</t(level)/v(early advanced)>><</t(variations:1)/v(test in small group)>><</t(accommodations:3)/v(test over more than one day)>><</t(variations:3)/v()>><</t(variations:2)/v()>><</t(accommodations:1)/v(administer at time most beneficial to student)>><</t(accommodations:2)/v(supervised breaks within a section of the test)>><</t(modifications:2)/v()>><</t(modifications:1)/v()>>]/t(el_speaking)>><</t(eld location)/v(general education class)>><</t(meeting date)/v(9/10/2013)>><</t(eld services)/v/sei>><</t(eld strategies4)/v( )>><</t(eld strategies2)/v(think/pair/share)>><</t(_nativ_lang1)/v(spanish)>><</t(eld strategies3)/v(modeling & visualizing)>><</t(eld frequency)/v(day)>><</t(eld strategies1)/v(graphic organizers or study guides)>><</t(birthdate)/v(8/30/2001)>><</t(_nativ_lang2)/v(spanish)>><</kids[<</t(modifications:3)/v()>><</t(level)/v(beginning)>><</t(variations:1)/v(test in small group)>><</t(variations:3)/v()>><</t(accommodations:3)/v(test over more than one day)>><</t(variations:2)/v()>><</t(accommodations:1)/v(administer at time most beneficial to student)>><</t(accommodations:2)/v(supervised breaks within a section of the test)>><</t(modifications:2)/v()>><</t(modifications:1)/v()>>]/t(el_reading)>><</kids[<</t(modifications:3)/v()>><</t(level)/v(early intermediate)>><</t(variations:1)/v(test in small group)>><</t(accommodations:3)/v(test over more than one day)>><</t(variations:3)/v()>><</t(variations:2)/v()>><</t(accommodations:1)/v(administer at time most beneficial to student)>><</t(accommodations:2)/v(supervised breaks within a section of the test)>><</t(modifications:2)/v()>><</t(modifications:1)/v()>>]/t(el_writing)>><</t(selpa header)/v(la county charter)>><</t(nativ_lang)/v(spanish)>><</t(eld location minutes)/v()>><</t(assmt instrument)/v(celdt)>><</kids[<</t(level)/v(early intermediate)>>]/t(el_overall)>><</t(el celdt overall date)/v()>>]>>>> endobj trailer <</root 1 0 r>> %%eof",
        "label": 11
    },
    {
        "text": "images extracted from pdf are loosing color  are shown in blackcolor  using pdfbox, tried to read file (ebook-mini.pdf, which is attached) when images are extracted using below mentioned code, the extracted images aren't as per the ones in pdf, they have lost color. checked extracting images, using other tools and images were extracted correctly. attached images extracted using pdfbox as well.",
        "label": 1
    },
    {
        "text": "error parsing pdf i get the following error when parsing this pdf: http://jmlr.csail.mit.edu/proceedings/papers/v28/ranganath13.pdf java.io.ioexception: object must be defined and must not be compressed object: 554:0 stack trace: exception in thread \"main\" java.io.ioexception: object must be defined and must not be compressed object: 554:0 at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:682) at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:646) at org.apache.pdfbox.pdfparser.cosparser.getlength(cosparser.java:847) at org.apache.pdfbox.pdfparser.cosparser.parsecosstream(cosparser.java:906) at org.apache.pdfbox.pdfparser.cosparser.parsefileobject(cosparser.java:732) at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:693) at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:646) at org.apache.pdfbox.pdfparser.cosparser.parsedictobjects(cosparser.java:607) at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:198) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:225) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:848) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:793) at org.apache.pdfbox.tools.extracttext.startextraction(extracttext.java:192) at org.apache.pdfbox.tools.extracttext.main(extracttext.java:81) at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:55) note this problem does not occur in 1.8.9",
        "label": 1
    },
    {
        "text": "rounding issue in generated pdf file we have pdf file which was signed by some other application. when we try to sign it with pdfbox, previous revision is damaged. we did some investigations and found such problem: (question on stackoverflow is here: http://stackoverflow.com/questions/19903884/pdf-document-is-modified-by-another-revision/19905271?noredirect=1#19905271 ) some pdf tags are changed in new revisions. for example values of following tags: /whitepoint /gamma /matrix are changed from values like this: 0.9505 to values like this: 0.9505000114 we think this is problem of converting float/double inside cosfloat. following code just opens and saves pdf file and this operation changes values of mentioned text: public void saveto(string sourcefile, string destfile) throws exception{ pddocument doc = pddocument.load(new fileinputstream(sourcefile)); doc.save(new fileoutputstream(destfile)); }",
        "label": 1
    },
    {
        "text": "pdftext2html does not escape special characters in title the special characters such as \"<\" in the title are not escaped in the output from pdftext2html.",
        "label": 1
    },
    {
        "text": "pushback buffer is full on seamingly small pdf i am getting a push back buffer full error on a seemingly small pdf, smaller than most i read from this site.",
        "label": 1
    },
    {
        "text": "npe in pdtruetypefont makefontdescriptor i get an npe with the file from http://digitalcorpora.org/corp/nps/files/govdocs1/268/268554.pdf java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.makefontdescriptor(pdtruetypefont.java:292)  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.getfontdescriptor(pdtruetypefont.java:150)  at org.apache.pdfbox.pdmodel.font.pdfont.getfontwidth(pdfont.java:814) ioexception for file 268554.pdf  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.getfontwidth(pdtruetypefont.java:382)  at org.apache.pdfbox.pdmodel.font.pdfont.getfontwidth(pdfont.java:312)  at org.apache.pdfbox.pdmodel.font.pdfont.getspacewidth(pdfont.java:855)  at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:328)  at org.apache.pdfbox.util.operator.showtext.process(showtext.java:44)  at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:521)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:267)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:226)  at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:209)  at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:174)  at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:227)  at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:160)  at org.apache.pdfbox.rendering.pdfrenderer.renderimagewithdpi(pdfrenderer.java:109) i first thought it is the same as pdfbox-2165, but it's a different line number.",
        "label": 6
    },
    {
        "text": "strange encoding in pdf file [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1261693 originally submitted by mai00 on 2005-08-16 23:16. i've got a pdf-file with a strange encoding. when i use extracttext it gives me lines of mt73mt110mt102mt111mt45mt66.... i tried to use other extracting tools like pdftohtml and it could extract the text in plain english. maybe i'm just doing something wrong with the encoding but i tried different things and could't extract the right text. [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1261693&file_id=145929 strangeencoding.pdf (application/pdf), 155806 bytes pdf-file with strange encoding [comment on sourceforge] originally sent by mai00. logged in: yes user_id=1310361 hello, i have found more files which are strange encoded but e.g. can be extracted by adobe. i though it might have to do with the font. all of these files don't provide a basefont and i think it might be because maybe this files were created on unix systems. maybe if somehow the font can be provided or someone can find out which font is used one can find out how to decode the text. [comment on sourceforge] originally sent by salchow. logged in: yes user_id=1316887 i have got exactly the same problem. i registred a bug (id 1250097) and asked a question in the forum at the begining of august under the title : \"text extraction unsuccessful with pdfbox\". unfortunately, i haven't got any solution yet. if you find a way to solve this problem, i am interested in ... thanks salchow",
        "label": 1
    },
    {
        "text": "pdftextstripper adds extra word line delimiters when pdf page orientation is degrees the pdftextstripper adds word delimiters between each character and new-line after each word when page orientation is 180 degrees. this happens because the pdfstreamengine uses the raw scaling factor matrix.getxscale() from the transformation matrix to scale width/font-size which are used to calculate spacing between characters. ========================================================= output of the pdftextstripper.gettext(pddoc); t h i s i s a t e s t 1 ! ! ! t h i s i s a t e s t 2 ! ! ! t h i s i s a t e s t 3 ! ! ! t h i s i s a t e s t 4 ! ! ! ========================================================= example: the following will result in negative spacewidthdisp / font-size in pdftextstripper 180 degrees = [-1, 0, 0; 0, -1, 0, w, h, 1]; therefore the textmatrix.getxscale() == -1 float spacewidthdisp = spacewidthtext * fontsizetext * horizontalscalingtext * textmatrix.getxscale() * ctm.getxscale() fontsizetext * textmatrix.getxscale()",
        "label": 11
    },
    {
        "text": "pdpagelabels getlabelsbypageindices  returns uppercase letters for style a for the style 'a' the method getlabelsbypageindices returns uppercase due to the method labelgenerator.makeletterlabel always returns uppercase. then the method labelgenerator.getnumber shoule be changed from: } else if (pdpagelabelrange.style_letters_lower.equals(style)) {     return makeletterlabel(pageindex); } else if (pdpagelabelrange.style_letters_upper.equals(style)) {     return makeletterlabel(pageindex).touppercase(); } to: } else if (pdpagelabelrange.style_letters_lower.equals(style)) {     return makeletterlabel(pageindex).tolowercase(); } else if (pdpagelabelrange.style_letters_upper.equals(style)) {     return makeletterlabel(pageindex); }",
        "label": 11
    },
    {
        "text": "iccbased color spaces wrong color output when rendering page with embedded icc_profile (devicecmyk) it has a wrong colors, like semitransparent white plane covering the page see the render output tried patches suggested here https://forums.adobe.com/thread/1914790 https://github.com/haraldk/twelvemonkeys/blob/master/imageio/imageio-jpeg/src/main/java/com/twelvemonkeys/imageio/plugins/jpeg/jpegimagereader.java and trying one by one found that problem is connected to profileclass here is the one of proposed patches i've found and which worked for me please review proposed patch",
        "label": 11
    },
    {
        "text": "remove bouncy castle provider reference pdfbox versions 1.8.x and 2.0.x add bouncy castle as a security provider explicitly (hard coded) referencing bouncy castle explicitly ties pdf box to a specific provider implementation. instead of referencing bouncycastleprovider explicitly provide an option to select another provider or alternatively allow a way to override the default. version 1.8.x: https://github.com/apache/pdfbox/blob/1.8.10/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/securityhandlersmanager.java public static securityhandlersmanager getinstance()     {         if(instance == null)         {             instance = new securityhandlersmanager();             security.addprovider(new bouncycastleprovider());         }         return instance;     } version 2.0.0: https://github.com/apache/pdfbox/blob/trunk/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/securityhandlerfactory.java    static     {         security.addprovider(new bouncycastleprovider());     }",
        "label": 1
    },
    {
        "text": "pdfmergerutility corrupts file attachments when combining files that contain (pdf) file attachments, the attachments carry over, but are corrupted in the merged file. code used: pdfmergerutility merger = new pdfmergerutility(); merger.addsource(\"c:/gilad/testing/in/1.pdf\"); merger.addsource(\"c:/gilad/testing/in/2.pdf\"); merger.setdestinationfilename(\"c:/gilad/testing/in/merged.pdf\"); try { merger.mergedocuments(); } catch (exception e) { e.printstacktrace(); }",
        "label": 12
    },
    {
        "text": "pdpagexyzdestination zoom property can't be set lower than  the zoom property of pdpagexyzdestination is currently an int, which means it can't be anything that isn't a multiple of 100%, as the zoom level is measured between 0 (=0%) and 1 (=100%), or higher, not between 0 and 100. therefore it should be changed to a float.",
        "label": 11
    },
    {
        "text": "new npe in pdfbox rc1 in acroform pdcheckbox's ischecked  i ran the comparison code for 1.8.11-rc1 against 1.8.10 and found a new npe in ~600 files out of ~350k. java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.interactive.form.pdcheckbox.ischecked(pdcheckbox.java:57)  at org.apache.pdfbox.pdmodel.interactive.form.pdradiocollection.getvalue(pdradiocollection.java:128)  at org.apache.tika.parser.pdf.pdf2xhtml.addfieldstring(pdf2xhtml.java:657)  at org.apache.tika.parser.pdf.pdf2xhtml.processacrofield(pdf2xhtml.java:616)  at org.apache.tika.parser.pdf.pdf2xhtml.extractacroform(pdf2xhtml.java:602)  at org.apache.tika.parser.pdf.pdf2xhtml.enddocument(pdf2xhtml.java:212) to replicate the problem in printfields:             outputstring.append(\" = \" + fieldvalue);             outputstring.append(\",  type=\" + field.getclass().getname()); +            if (field instanceof pdcheckbox) +            { +              outputstring.append(\" : \"+((pdcheckbox)field).ischecked()); +            }",
        "label": 11
    },
    {
        "text": "arrayindexoutofboundsexception in codespacerange ispartialmatch   cmap is invalid caused by: java.lang.arrayindexoutofboundsexception: 1     org.apache.fontbox.cmap.codespacerange.ispartialmatch(codespacerange.java:129)     org.apache.fontbox.cmap.cmap.readcode(cmap.java:133)     org.apache.pdfbox.pdmodel.font.pdtype0font.readcode(pdtype0font.java:454)     org.apache.pdfbox.contentstream.pdfstreamengine.showtext(pdfstreamengine.java:677)",
        "label": 1
    },
    {
        "text": "pdfont getfontwidth  classcastexception  integer cannot be cast to float just tested upgrading from pdfbox 1.4.0 to 1.5.0. but i get this exception when adding custom text to pdf documents: java.lang.classcastexception: java.lang.integer cannot be cast to java.lang.float at org.apache.pdfbox.pdmodel.font.pdfont.getfontwidth(pdfont.java:786) at org.apache.pdfbox.pdmodel.font.pdsimplefont.getfontwidth(pdsimplefont.java:191) at org.apache.pdfbox.pdmodel.font.pdfont.getstringwidth(pdfont.java:283)",
        "label": 1
    },
    {
        "text": "errors parsing extracting text from a pdf i am trying to extract text from pdfs. extracting text from the test file http://digitalcorpora.org/corp/nps/files/govdocs1/020/020747.pdf causes exceptions to be thrown. the first: exception in thread \"main\" java.lang.runtimeexception: java.io.ioexception: value is not an integer: 636121514401477526485946144 at org.apache.pdfbox.pdfparser.pdfstreamparser$1.trynext(pdfstreamparser.java:187) at org.apache.pdfbox.pdfparser.pdfstreamparser$1.hasnext(pdfstreamparser.java:194) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:255) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:455) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:379) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:335) caused by: java.io.ioexception: value is not an integer: 636121514401477526485946144 at org.apache.pdfbox.cos.cosnumber.get(cosnumber.java:104) at org.apache.pdfbox.pdfparser.pdfstreamparser.parsenexttoken(pdfstreamparser.java:351) at org.apache.pdfbox.pdfparser.pdfstreamparser.access$000(pdfstreamparser.java:46) at org.apache.pdfbox.pdfparser.pdfstreamparser$1.trynext(pdfstreamparser.java:182) code to cause above exception: pdftextstripper ts = new pdftextstripper(); printwriter out = new printwriter(new filewriter(new file (\"020747.txt\"))); pddocument doc = pddocument.load(new file(\"020747.pdf\").touri().tourl(), true); ts.setforceparsing(true); ts.writetext(doc, out); using the following code causes a different exception until org.apache.pdfbox.baseparser.pushbacksize is increased (only tested 1024768). after it is increased i get basically the same exception as above printwriter out = new printwriter(new filewriter(new file(\"020747.txt\"))); pdfparser parser = new pdfparser(new fileinputstream(new file(\"020747.pdf\"))); parser.parse(); pdftextstripper ts = new pdftextstripper(); ts.setforceparsing(true); ts.writetext(parser.getpddocument(), out);",
        "label": 12
    },
    {
        "text": "statically cached cos objects are mutable the range of cosinteger (from -100 to 256) instances, cosboolean, many cosname instances and cosnull objects are statically cached in corresponding classes. though such such kind of cached objects are supposed to be immutable, they are not: they inherit and do not block from modification parent cosbase class properties direct and needtobeupdate. as these are properties are set during parsing and modification, and considered during writing the document, their mutability affects both the objects within the same document (when ex. the same cosnumber value from the cached range is used in different contexts both direct and indirect), as well as other documents, which might parsed and saved using the same classloader.",
        "label": 1
    },
    {
        "text": "rendering problem with type fonts the attached file does not render correctly. (this is the same problem mentioned in pdfbox-1773, but this time its not from my employer. i was able to find a tool (qpdf) to create an uncompressed pdf file and this way to remove my customer#)",
        "label": 1
    },
    {
        "text": " rotate pdf is not displayed correctly in pdfreader app to test pdfbox-2021 i created a pdf with /rotate 180. it does not display correctly in the pdfreader app (class pdfpagepanel). the purpose of this issue is to fix this and/or also use johns new renderpagetographics() method per dry. i won't do it immediately so if anybody else wants to do it, just assign it to yourself.",
        "label": 11
    },
    {
        "text": "indexed color space in jpx i get this with the attached file on page 11: java.lang.arrayindexoutofboundsexception: 8296  at org.apache.pdfbox.pdmodel.graphics.image.sampledimagereader.from8bit(sampledimagereader.java:253)  at org.apache.pdfbox.pdmodel.graphics.image.sampledimagereader.getrgbimage(sampledimagereader.java:146)  at org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject.getimage(pdimagexobject.java:188)  at org.apache.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:80) the problem is in jpxfilter. per the spec, we must ignore the bits_per_component value from the pdf and use the one from the image. we set bits_per_component to 8 because colormodel.getcomponentsize(0) is 8. colormodel.getpixelsize() is 4. in \"normal\" images, the sum of the colormodel.getcomponentsize() values equals colormodel.getpixelsize(). i'm not sure what to do. i am using this code locally:             colormodel colormodel = image.getcolormodel();             int pixelsize = colormodel.getpixelsize();             int[] componentsize = colormodel.getcomponentsize();             if (pixelsize < componentsize[0])             {                 log.warn(\"componentsize[0] of image ignored, because pixelsize < componentsize[0]\");                 log.warn(\"pixelsize: \" + pixelsize);                 log.warn(\"componentsize.length \" + componentsize.length);                 for (int i = 0; i < componentsize.length; ++i)                 {                     log.warn(\"componentsize[\" + i + \"]: \" + componentsize[i]);                 }             }             else             {                 parameters.setint(cosname.bits_per_component, componentsize[0]);             } and now the pdf renders properly and the image at the bottom right is almost correct. (a circle on the left is missing)",
        "label": 6
    },
    {
        "text": "errors in  eof handling  fix included  the '%%eof' handling in pdfparser has several errors. the current implementation (start from line 467): string eof = \"\"; if(!pdfsource.iseof()) readline(); // if there's more data to read, get the eof flag // verify that eof exists if(\"%%eof\".equals(eof)) { // pdf does not conform to spec, we should warn someone log.warn(\"expected='%%eof' actual='\" + eof + \"'\"); // if we're not at the end of a file, just put it back and move on if(!pdfsource.iseof()) pdfsource.unread(eof.getbytes(\"iso-8859-1\")); } the problems: eof variable gets no value comparison if(\"%%eof\".equals(eof)) must be negated unreading must first add a newline or space byte because we read with readline() (like in bug pdfbox-978) corrected version: string eof = \"\"; if(!pdfsource.iseof()) eof = readline(); // if there's more data to read, get the eof flag // verify that eof exists if(!\"%%eof\".equals(eof)) { // pdf does not conform to spec, we should warn someone log.warn(\"expected='%%eof' actual='\" + eof + \"'\"); // if we're not at the end of a file, just put it back and move on if(!pdfsource.iseof()) { pdfsource.unread( space_byte ); // we read a whole line; add space as newline replacement pdfsource.unread(eof.getbytes(\"iso-8859-1\")); } }",
        "label": 0
    },
    {
        "text": "can't extractimages an indexedcmyk raster [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1589598 originally submitted by rpresser on 2006-11-02 14:50. i have a lot of these images; they're part of my everyday workflow. cmyk images are extremely common in the prepress world; indexedcmyk is too, because it is the default setting for adobe distiller when the total number of unique colors is less than 256. c:\\temp\\pdfbox-0.7.3\\bin>extractimages.exe 797-14-1.pdf writing image:im1-2 exception in thread \"main\" java.lang.unsupportedoperationexception at java.awt.image.colormodel.createcompatiblesamplemodel(colormodel.java:684) at java.awt.image.colormodel.createcompatiblewritableraster(colormodel.java:677) at org.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdpixelmap.java:143) at org.pdfbox.pdmodel.graphics.xobject.pdpixelmap.write2outputstream(pdpixelmap.java:166) at org.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.write2file(pdxobjectimage.java:118) at org.pdfbox.extractimages.extractimages(extractimages.java:161) at org.pdfbox.extractimages.main(extractimages.java:72) it turns out that my sample image 797-14-1.pdf was too large to upload to sourceforge. i created a reduced resolution version of it, and got a different exception when attempting to extractimages on it: c:\\temp>extractimages test.pdf writing image:r29-1 exception in thread \"main\" java.io.ioexception: not implemented at org.pdfbox.pdmodel.graphics.color.pddevicecmyk.createcolormodel(pddevicecmyk.java:135) at org.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdpixelmap.java:142) at org.pdfbox.pdmodel.graphics.xobject.pdpixelmap.write2outputstream(pdpixelmap.java:166) at org.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.write2file(pdxobjectimage.java:118) at org.pdfbox.extractimages.extractimages(extractimages.java:161) at org.pdfbox.extractimages.main(extractimages.java:72) [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1589598&file_id=201210 test.pdf (application/pdf), 99717 bytes example pdf [comment on sourceforge] originally sent by benlitchfield. logged in: yes user_id=601708 originator: no note: see 797-14-1.pdf [comment on sourceforge] originally sent by benlitchfield. logged in: yes user_id=601708 originator: no note: requested original pdf file from rpresser [comment on sourceforge] originally sent by rpresser. logged in: yes user_id=298615 email me at rpresser at gmail dot com to get the original pdf, if desired.",
        "label": 1
    },
    {
        "text": "externalfonts uses classloader of class in font box externalfonts loads some default fonts via the org.apache.fontbox.util.resourceloader. that resourceloader uses it's own classloader (resourceloader.class.getclassloader()) for loading the given resource. the problem is that the resource is in the pdfbox project and the resourceloader in the fontbox. in an osgi environment this is a problem.",
        "label": 6
    },
    {
        "text": "ioexception over numberformatexception on a valid pdf on the attached document, which loads and displays with adobe reader fine, pddocument.load() throws the following exception: java.io.ioexception: java.lang.numberformatexception: for input string: \"0000000-21\" at org.apache.pdfbox.pdfparser.cosparser.parsexreftable(cosparser.java:2017) at org.apache.pdfbox.pdfparser.cosparser.parsexref(cosparser.java:224) at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:194) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:252) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:957) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:913) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:861) at temp.pdftemp.app.main(app.java:19) caused by: java.lang.numberformatexception: for input string: \"0000000-21\" at java.lang.numberformatexception.forinputstring(numberformatexception.java:65) at java.lang.long.parselong(long.java:589) at java.lang.long.parselong(long.java:631) at org.apache.pdfbox.pdfparser.cosparser.parsexreftable(cosparser.java:2010) ... 7 more",
        "label": 1
    },
    {
        "text": "memory leak in preflight preflightparser has this:     public preflightparser(datasource datasource) throws ioexception     {         // todo move file handling outside of the parser         super(new randomaccessbufferedfileinputstream(datasource.getinputstream()));         this.setlenient(false);         this.originaldocument = datasource;     } the todo message looks like a design issue, but it is much worse: the randomaccessbufferedfileinputstream is never closed, which results in the temp file not being deleted. the file parameter constructor has the same problem, i.e. that the randomaccessbufferedfileinputstream object is not closed (no temp file there).",
        "label": 11
    },
    {
        "text": "space in pdf in my pdf i have white space between columns, in earlier versions of pdfbox, white space used to get printed as empty line in the text file, however in the latest version the same is remove. please check",
        "label": 1
    },
    {
        "text": "calrgb colors different http://acroeng.adobe.com/test_files/images/jpeg2000//anna-iptimgx330.pdf java -cp pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar:/path/jai_imageio.jar org.apache.pdfbox.tools.pdftoimage anna-iptimgx330.pdf",
        "label": 11
    },
    {
        "text": "text extraction and height different in ar: with the increasing complexity of optical modules, 1.8: with the increasing complexity of optical modules, string[39.6,399.6 fs=1.0 xscale=29.888 height=20.114626 space=7.472 width=28.214272]w string[69.488,386.16 fs=1.0 xscale=9.963 height=6.5955067 space=2.49075 width=3.3176804]i string[72.80568,386.16 fs=1.0 xscale=9.963 height=6.5955067 space=2.49075 width=6.0873947]t string[78.893074,386.16 fs=1.0 xscale=9.963 height=6.5955067 space=2.49075 width=7.1932907]h string[90.71916,386.16 fs=1.0 xscale=9.963 height=6.5955067 space=2.49075 width=6.0873947]t string[96.80656,386.16 fs=1.0 xscale=9.963 height=6.5955067 space=2.49075 width=7.1932907]h 2.0: w ith the increasing complexity of optical modules, string[39.6,399.6 fs=1.0 xscale=29.888 height=9.584274 space=7.472 width=28.209717]w string[69.488,386.16 fs=1.0 xscale=9.963 height=3.194865 space=2.49075 width=3.3177567]i string[72.805756,386.16 fs=1.0 xscale=9.963 height=3.194865 space=2.49075 width=6.0858]t string[78.891556,386.16 fs=1.0 xscale=9.963 height=3.194865 space=2.49075 width=7.1949615]h string[90.719315,386.16 fs=1.0 xscale=9.963 height=3.194865 space=2.49075 width=6.0858]t string[96.805115,386.16 fs=1.0 xscale=9.963 height=3.194865 space=2.49075 width=7.1949615]h",
        "label": 11
    },
    {
        "text": "cannt read embedded fonts i am using pdfbox-1.7.1.jar,fontbox-1.7.1.jar,jempbox-1.7.1.jar and commons-logging-1.1.1.jar the problem not in printing it self, my pdf file has embedded fonts but all is arial , the problem when some char is bold i got the following error in java console org.apache.pdfbox.pdmodel.font.pdcidfonttype2font getawtfont info: can't read the embedded font aawtad+arial 26/12/2012 02:16:50 \u0645 org.apache.pdfbox.pdmodel.font.pdcidfonttype2font getawtfont info: using font arial instead 26/12/2012 02:16:51 \u0645 org.apache.pdfbox.pdmodel.font.pdcidfonttype2font getawtfont info: can't read the embedded font aawsad+arial you got any idea to solve this problem please tell me how can i solve this problem thanks",
        "label": 1
    },
    {
        "text": "adding page from one doc to another  as a layer  results in faulty doc using the process laid out in testlayerimport() of http://java2s.com/open-source/java/pdf/pdfbox-1.4.0/org/apache/pdfbox/util/testlayerutility.java.htm , a pdf document is generated that can be viewed in both adobe reader x (10.1.3) and sumatrapdf. but when opening some of the tools in reader x, an error box gets displayed. it warns about a potentially corrupt file and potentially incorrect display for example, opening the resulting pdf, pressing f4 to view the layer utils will trigger this behavior. i used page 1 from (1): http://www.enterasys.com/company/literature/a4-ds.pdf (2): http://www.tex.ac.uk/tex-archive/info/symbols/comprehensive/symbols-a4.pdf respectively, to create a pdf with page 1 of (1) overlayed with page 1 of (2). these are just random google results. the error was triggered with more concrete files of my own as well since the pdf displays fine on initial load, it wouldn't be so bad if it wasn't exactly the layering i was after (overlaying, toggling display of individual layers) i tried different variations: created a new document and importpage() from (1) did not create a new document but used (1) directly a few permutations of adding page/saving/re-loading or not alternatively - is there a way to add a layer/ocg without creating an xobject form off it? best, tobias",
        "label": 1
    },
    {
        "text": " patch  option to disable close warning in finalizer of cosdocument  i'm using pdfbox in a fop plug-in to embed pdf documents. the pdf images are cached in memory through soft references. therefore i do not know exactly when the cosdocument needs to be closed. i do close it in the holder's finalize() method but the garbage collector sometimes calls the cosdocument's finalizer before i have a chance to close it myself. with this patch i'd like to introduce an option that lets me disable the warning and do a close() in the finalizer in any case. i do think that the warning can be helpful for newbies (closing early is a good idea when that's possible) but the warning to system.err is a problem in my case. if noone objects within 72 hours, i'm happy to apply the patch myself.",
        "label": 5
    },
    {
        "text": "apache pdfbox form fill truetype text spacing issue i'm using apache pdfbox to fill a pdf form. i'm using a truetype font (not a default font) called 'impact', pretty standard fare. in the template i have a field called \"title\" that has the impact font assigned. i use the code below to take that template and populate the field with a value that has several words in it. the issue is when you view the created pdf there are large spaces between the words. if you open the pdf in acrobat and click on the field the text alters and the large spacing goes away. editing the field in any way will permanently correct the issue, but i'm generating the forms to not be altered after the fact. i've tried the same experiment with the default fonts (helvetica in this case) and the above issue doesn't exist. i can create a blank form and add a field and set the custom font and duplicate the issue. i've read that a similar issue was addressed in 2.0.0, pdfbox-2062 but it was for changing font size, not a custom font.",
        "label": 1
    },
    {
        "text": "pdfparser swallows a cr at the end of a stream i have a pdf which i cannot share at the moment, maybe later if i get a permission from the customer. the pdf is protected by an empty password, all streams are encrypted using aes. the pdf consistently uses the lf character for line endings. one of the streams looks like this: 10 0 obj <</length 9 0 r/filter/flatedecode/n 3/range[0 1 0 1 0 1 ]>> stream ....<0x0d><0x0a> endstream i.e. length field is a reference to an object, in the content, the length object is stored immediately after the stream as 9 0 obj 2624 endobj the byte <0x0d> belongs to the stream and is not to be treated as line separator in this case. the parser is not able to read the length field so it manually searches for the stream end in the class endstreamoutputstream. this class searches both for the pair <0x0d><0x0a> and the single <0x0a>, so it strips off the <0x0d> from this particular stream content. since the stream is encrypted, pdfbox runs into a badpaddingexception later on when trying to decrypt the stream. the problem is reproducible using org.apache.pdfbox.pdftoimage in current 1.8.14-snapshot. the same works fine in current pdfbox 2.0.x, presumably because it uses the non-sequential parser by default. the proposed fix is to analyze the pdf content while reading it and search for the cr character only if it was ever encountered as a line separator prior to the stream being parsed. note: i do not exactly know or understand the usage of the other classes inherited from baseparser, like pdfobjectstreamparser. maybe the line ending heuristic should be kept \"as before\" in these classes, by setting the new field baseparser.hascr to true already in the constructor. a patch is attached.",
        "label": 11
    },
    {
        "text": "classcastexception in pdtilingpattern getcontents exception in thread \"main\" java.lang.classcastexception: org.apache.pdfbox.cos.cosdictionary cannot be cast to org.apache.pdfbox.cos.cosstream         at org.apache.pdfbox.pdmodel.graphics.pattern.pdtilingpattern.getcontents(pdtilingpattern.java:160)         at org.apache.pdfbox.pdfparser.pdfstreamparser.<init>(pdfstreamparser.java:92) the file has a cosdictionary instead of a cosstream in a tiling pattern.",
        "label": 11
    },
    {
        "text": "java lang indexoutofboundsexception in callothersubr i get this exception with the attached file: java.lang.indexoutofboundsexception: index: 0, size: 0  at java.util.arraylist.rangecheck(unknown source)  at java.util.arraylist.get(unknown source)  at org.apache.fontbox.cff.type1charstring.callothersubr(type1charstring.java:291)  at org.apache.fontbox.cff.type1charstring.handlecommand(type1charstring.java:233)  at org.apache.fontbox.cff.type1charstring.access$000(type1charstring.java:39)  at org.apache.fontbox.cff.type1charstring$1.handlecommand(type1charstring.java:135)  at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:45)  at org.apache.fontbox.cff.type1charstring.render(type1charstring.java:138)  at org.apache.fontbox.cff.type1charstring.getpath(type1charstring.java:110)  at org.apache.pdfbox.rendering.font.type1glyph2d.<init>(type1glyph2d.java:90)  at org.apache.pdfbox.rendering.font.type1glyph2d.<init>(type1glyph2d.java:62)  at org.apache.pdfbox.rendering.pagedrawer.createglyph2d(pagedrawer.java:548)",
        "label": 6
    },
    {
        "text": "pdocument corrupts file i have a file (attached) that when loaded with pdocument.load and then saved to another location simply saves as a blank pdf. the number of pages is correct, but when opened in acrobat, all the page names are corrupted and the pages are blank. here's the code: pddocument doc = pddocument.load(\"/home/jnankin/desktop/in.pdf\"); doc.save(\"/home/jnankin/desktop/out.pdf\"); doc.close(); please advise.",
        "label": 1
    },
    {
        "text": "classcastexception in jpegfactory createfromimage  i was trying to save all the pages from a pdf as images and adding them to a newly created pdf. pddocument newdoc = new pddocument(); pdfrenderer pdfrenderer = new pdfrenderer(olddoc); floag width = ... float height = ... page.setmediabox(new pdrectangle(width, height)); newdoc.addpage(page); pdpagecontentstream contents = new pdpagecontentstream(newdoc, page); bufferedimage bufferedimage = pdfrenderer.renderimagewithdpi(0, 200, imagetype.rgb); pdimagexobject imagexobject = jpegfactory.createfromimage(newdoc, bufferedimage, 0.75); contents.drawimage(imagexobject, 0, 0, width, height); contents.close(); ... sometimes it's working just fine, sometimes it's trowing a classcastexception in jpegfactory.createfromimage: java.lang.classcastexception: com.sun.media.imageioimpl.plugins.jpeg.clibjpegimagewriteparam cannot be cast to javax.imageio.plugins.jpeg.jpegimagewriteparam  at org.apache.pdfbox.pdmodel.graphics.image.jpegfactory.encodeimagetojpegstream(jpegfactory.java:244)  at org.apache.pdfbox.pdmodel.graphics.image.jpegfactory.createjpeg(jpegfactory.java:212)  at org.apache.pdfbox.pdmodel.graphics.image.jpegfactory.createfromimage(jpegfactory.java:175)  at org.apache.pdfbox.pdmodel.graphics.image.jpegfactory.createfromimage(jpegfactory.java:160)  at com.mimecast.ttpservice.app.jpati.convertpdf.savedoc(convertpdf.java:1390) this is happening in the following code of above mentioned class: imagewriter = imageio.getimagewritersbysuffix(\"jpeg\").next(); ... jpegimagewriteparam jpegparam = (jpegimagewriteparam)imagewriter.getdefaultwriteparam(); in my case i can get more than one imagewritter when calling imageio.getimagewritersbysuffix(\"jpeg\") as follows: com.sun.imageio.plugins.jpeg.jpegimagewriter com.sun.media.imageioimpl.plugins.jpeg.clibjpegimagewriter i suspect that sometimes the clibjpegimagewriter is returned before jpegimagewriter, which produces the classcastexception a bit later. as i need to keep the jai installed, is it possible to change the above code to loop through all imagewriters found in order to pick the one needed by pdfbox? i would recommend doing something like this: iterator<imagewriter> iterator = imageio.getimagewritersbysuffix(\"jpeg\"); while (iterator.hasnext()) {     imagewriter foundwriter = iterator.next();     if (foundwriter instanceof jpegimagewriter) {         imagewriter = foundwriter;         break;     } } if (imagewriter == null) {     throw new invalidstateexception(\"no image writer found of jpegimagewriter type\"); }",
        "label": 11
    },
    {
        "text": "pdfmergeutility error invalid stored block lengths pdfmergeutility fails with a dataformatexception when trying to merge pdf documents. caused by: java.util.zip.dataformatexception: invalid stored block lengths i have attached 3 pdf documents pdf-01.pdf pdf-02.pdf pdf-03.pdf the first two pdf documents are good. they can be merged. in fact they were used to create the third document (pdf-03.pdf). when trying to merge another pdf with the third document, the pdf merge utility throws the error.",
        "label": 11
    },
    {
        "text": "exception in ttfparser the reason for this is an ambiguity in the truetype specification. namely, one of the font tables (os/2) is present in the font directory with length 0. the specification itself is completely silent about this. the only other information i was able to find is: the freetype font library (http://www.freetype.org/freetype2/docs/reference/ft2-truetype_tables.html#ft_sfnt_table_info) assumes that any table having 0 length in the font directory is treated as missing. google opentype sanitizer would report an error in such situation: https://github.com/khaledhosny/ots/blob/master/src/ots.cc, lines 575-578 there are several related discussions at adobe forums: https://forums.adobe.com/thread/1616317 , https://forums.adobe.com/thread/1611899 as allowing zero length tables in truetype fonts seems to be quite logical (and also implicitly confirmed by adobe acrobat validator), i've changed the ttfparser to skip tables with 0 length. attaching patch and font file. will add test file also if necessary.",
        "label": 11
    },
    {
        "text": "exception in thread  main  java lang nullpointerexception getting nullpointer exception when running pdfmergerexample exception in thread \"main\" java.lang.nullpointerexception at org.apache.pdfbox.multipdf.pdfmergerutility.appenddocument(pdfmergerutility.java:432) at org.apache.pdfbox.multipdf.pdfmergerutility.mergedocuments(pdfmergerutility.java:261) at scrach_pad.batch_email.pdfmergerexample.merge(pdfmergerexample.java:87) at scrach_pad.batch_email.testmergepdf.main(testmergepdf.java:50)",
        "label": 11
    },
    {
        "text": "failure to render devicen image for the attached test pdf, the left image is rendered incorrect.",
        "label": 11
    },
    {
        "text": "pdfont encode results change on identical input as reported daniel wildschut in the user mailing list: hello, we use pdfbox to fill in pdf forms and stumbled on a potential bug while sanitizing the input. we call pdfont.encode to check beforehand if a given character can be inserted using the given font. however we noticed that the results of the method call can change depending on what other strings have been checked before. apparently pdtype1font stores previous results in a codetobytesmap, which then causes the unexpected behavior. i'd say that the key used in \"codetobytesmap.put(code, bytes);\" is wrong; you probably want to use the method parameter \"unicode\" instead. i tested 2.0.11, the current 2.0.x branch and the 3.0.x branch and was able to reproduce the problem with all of them. code to reproduce: public class pdfboxencodetest {     public static void main( final string[] args )     {         final pdtype1font font = pdtype1font.helvetica_bold;         tryencode(font, \"\\u0080\");         tryencode(font, \"\u20ac\");         tryencode(font, \"\\u0080\");     }     private static void tryencode(final pdfont font, final string str) {         try {             font.encode(str);             system.out.println(\"character \" + str.codepointat(0) + \" can be encoded in font \" + font);         } catch (final ioexception | illegalargumentexception e) {             system.out.println(\"character \" + str.codepointat(0) + \" cannot be encoded in font \" + font + \": \" + e.getmessage());         }     } } expected output: character 128 cannot be encoded in font pdtype1font helvetica-bold: u+0080 ('.notdef') is not available in this font helvetica-bold encoding: winansiencoding character 8364 can be encoded in font pdtype1font helvetica-bold character 128 cannot be encoded in font pdtype1font helvetica-bold: u+0080 ('.notdef') is not available in this font helvetica-bold encoding: winansiencoding actual output: character 128 cannot be encoded in font pdtype1font helvetica-bold: u+0080 ('.notdef') is not available in this font helvetica-bold encoding: winansiencoding character 8364 can be encoded in font pdtype1font helvetica-bold character 128 can be encoded in font pdtype1font helvetica-bold",
        "label": 11
    },
    {
        "text": "investigate why glyph path caching does not always cache glyph accesses work in pdfbox-3088 shows that despite caching glyph paths in ttfglyph2d.getpathforgid(), there are repeated accesses for the same gid in glyphtable (which is why that one is now cached as well).",
        "label": 1
    },
    {
        "text": "java warnings mvn clean install -dskiptests java 9 deprecated some methods: [warning] pdf-box-svn/fontbox/src/main/java/org/apache/fontbox/cmap/cmapparser.java:[601,26] double(java.lang.string) in java.lang.double has been deprecated [warning] pdf-box-svn/preflight/src/test/java/org/apache/pdfbox/preflight/testpreflightpath.java:[66,22] integer(int) in java.lang.integer has been deprecated [warning] pdf-box-svn/xmpbox/src/test/java/org/apache/xmpbox/parser/deserializationtest.java:[146,29] integer(int) in java.lang.integer has been deprecated [warning] pdf-box-svn/xmpbox/src/test/java/org/apache/xmpbox/parser/deserializationtest.java:[147,29] integer(int) in java.lang.integer has been deprecated [warning] pdf-box-svn/xmpbox/src/test/java/org/apache/xmpbox/parser/deserializationtest.java:[152,29] integer(int) in java.lang.integer has been deprecated [warning] pdf-box-svn/xmpbox/src/test/java/org/apache/xmpbox/parser/deserializationtest.java:[153,29] integer(int) in java.lang.integer has been deprecated",
        "label": 11
    },
    {
        "text": "asterisk character not displaying properly in adobe reader from matt b. in the user mailing list: i have an odd issue with the asterisk character not displaying properly in adobe reader (xi or dc) the \"*\" is displayed on the document as a hollow box, all other characters seem to be ok. i thought it was an issue with my code, so i gave it a try in the helloworldttf.java example, and got the same results...with various different ttf fonts as well. attached is the test.pdf output file, using the liberationsans-regular.ttf font and input message \"1*1\". it was created using a 2.0.0-snapshot that i built earlier this morning, but i also had the same results using the rc1 binaries.",
        "label": 11
    },
    {
        "text": "knockout text missing http://acroeng.adobe.com/test_files/images//knockout-text.pdf java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage knockout-text.pdf",
        "label": 1
    },
    {
        "text": "error in converting a pdf to image using converttoimage hi, i converted a pdf to image using class : pdpage api : public bufferedimage converttoimage() i obtained an image with the first line of the bulleted list on the right with strange character and: with 1.5.0 version is missing the image on the top with 1.7.1 i had a strange color issue.",
        "label": 1
    },
    {
        "text": "npe at pdfmergerutility if i merge several documents at get an:   java.lang.nullpointerexception at org.apache.pdfbox.multipdf.pdfmergerutility.mergeacroform(pdfmergerutility.java:743) at org.apache.pdfbox.multipdf.pdfmergerutility.appenddocument(pdfmergerutility.java:390) at org.apache.pdfbox.multipdf.pdfmergerutility.mergedocuments(pdfmergerutility.java:266)",
        "label": 8
    },
    {
        "text": "parsing of a type1 font fails with a classcastexception a classcastexception is reported in type1charstringparser while rendering the attached pdf. the pdf was rendered correctly in 1.7.x where the fonts were read using awt, i did not try with latest 1.8.x. note: the pdf is just one of my test suite files, not a production problem. i am not sure whether the pdf or the parser is wrong, but i assume the later as acrobat and pdfbox 1.7.x (awt) are able to read it correctly.",
        "label": 6
    },
    {
        "text": "improve handling of line breaking characters when setting acroform field values when filling acroform fields the text supplied to setvalue might contain control characters such as \\n \\r, \\t and others which leads to an {{ java.lang.illegalargumentexception}} for most fonts as there is no glyph to represent these. we could enhance the processing of the string provided to provide proper replacements similar to how adobe acrobat handles that.",
        "label": 8
    },
    {
        "text": "problem when merging pdf and pdf documents merging pdf 1.1 document with other version (i.e. pdf 1.4) ends up with following exception: java.io.ioexception: unknown openaction cosint{26}. here's the referring stack trace alias: pbox000029: enter the username:  [guest] java.io.ioexception: unknown openaction cosint{26}     at org.apache.pdfbox.pdmodel.pddocumentcatalog.getopenaction(pddocumentcatalog.java:279)     at org.apache.pdfbox.multipdf.pdfmergerutility.appenddocument(pdfmergerutility.java:348)     at org.apache.pdfbox.multipdf.pdfmergerutility.mergedocuments(pdfmergerutility.java:263)   to fix this issue cosinteger should be handled in pddocumentcatalog's getopenaction method. our tests showed that returning \u201cnull\u201d results in correctly merged document. here is our suggestion for the fixed method: public pddestinationoraction getopenaction() throws ioexception {    cosbase openaction = this.root.getdictionaryobject(cosname.open_action);    if (openaction == null) {      return null;    } else if (openaction instanceof cosboolean) {      if (!((cosboolean) openaction).getvalue()) {        return null;      } else {        throw new ioexception(\"can't create openaction from cosboolean\");      }   } else if (openaction instanceof cosinteger) {      return null;          } else if (openaction instanceof cosdictionary) {      return pdactionfactory.createaction((cosdictionary)openaction);    } else if (openaction instanceof cosarray) {      return pddestination.create(openaction);    } else {      throw new ioexception(\"unknown openaction \" + openaction);    } }",
        "label": 11
    },
    {
        "text": "cm operator has numbers i got pdf in which one particular page there is an image which is not rendered on the position... i understood the problem. there is 7 numbers came before cm operator which i think is bug... page 9 has an error...",
        "label": 11
    },
    {
        "text": "classcastexception in pddocumentcatalog java this issue is similar to pdfbox-2687. i was calling document.getdocumentcatalog().getoutputintents(); and got a java.lang.classcastexception: org.apache.pdfbox.cos.cosobject cannot be cast to org.apache.pdfbox.cos.cosdictionary here is the file where the error occurs the output intent was set with pdfbox 1.8.6/7/8 not sure. https://www.dropbox.com/s/9fpytrdggzehv7s/20120312-example.pdf?dl=0",
        "label": 11
    },
    {
        "text": "create default resources with cache note: actual version is 2.0.0-rc3 in pdacroform#getdefaultresources existing resources are created like this:         cosdictionary dr = (cosdictionary) dictionary.getdictionaryobject(cosname.dr);         if (dr != null)         {             retval = new pdresources(dr);         } pdresources supports resource cache but default resources is always created without one.",
        "label": 11
    },
    {
        "text": "decrypt doesn't allow more then args according to the usage this utility should allow up to 8 arguments but at the moment nothing is processed if args.length > 3 thus there's no way to input 4 arguments (min number of arguments to decrypt a file)",
        "label": 1
    },
    {
        "text": "cannot set destination meta data in pdfmergerutility when merging multiple pdfs into one compound document via pdfmergerutility, meta data like title, author, subject cannot be set but seem to be taken from one of the input documents. this is usually not the desired behaviour because as a user i have no direct influence on the meta data. as a user i would like to explicitly set or at least overwrite certain meta data for the destination document. currently i can only set the destination stream or file name, but not the meta data.",
        "label": 11
    },
    {
        "text": "flatten does not work properly on field with type font pdf form sampleform_filled.pdf contains one field called \"txtfield\" with this content: \"\u011b\u0161\u010d\u0159\u017e\u00fd\u00e1\u00ed\u00e9\u00fa\u016f\u00f3\u010f\u0165\u011b\u0161\u010d\u0159\u017e\u00fd\u00e1\u00ed\u00e9\u00fa\u016f\u00f3\u010f\u0165\".  the font used in this field is \"/f5\" when you run this code:   try {  pddocument sourcepdfform = pddocument.load(new file(\"sampleform_filled.pdf\"));  pdacroform acroform = sourcepdfform.getdocumentcatalog()  .getacroform();  acroform.flatten();  sourcepdfform.save(\"sampleform_filled_flattened.pdf\"); } catch (ioexception e) {  e.printstacktrace(); }     you will get sampleform_filled_flattened.pdf with empty or not visible content of the field.    ",
        "label": 11
    },
    {
        "text": "seemingly good document gets semi corrupted i use pdfbox to insert a little bit of text at the top of my pdf-documents. i have found one case (one input document) where the resulting document appears to become semi-corrupted by pdfbox. i will try to attach to this jira issue a zip file with the pdf document in case and a small, self-contained java application that allows you to easily reproduce the problem. the text i try to insert is inserted okay and is not the problem. the problem is that other parts of the documents seem to get destroyed. you see this by comparing the original document with the processed document in a pdf document viewer. the problem manifests itself in different ways depending on which pdf document viewer application i use. i have tried evince (comes as default on ubuntu linux 14.04), firefox (also as default in ubuntu), google chrome, and adobe acrobat reader v.11 (both on windows 7 enterprise and in ubuntu with wine, the windows emulator). i you use for example adobe acrobat reader, look in particular for the logo image in the upper right corner of both pages, the fonts and the formatting of the line on the second page near the bottom that says \"fakturasum: 2 572,50\".",
        "label": 11
    },
    {
        "text": " patch  type safety in pdnametreenode and pdnumbertreenode via generics this patch provides type safety via generics in pdnametreenode and pdnumbertreenode.",
        "label": 6
    },
    {
        "text": "pdfbox throws nullpointerexception when parsing pdf i have a file that i can open with ghostscript, but pdfbox dies with a nullpointerexception when i try to parse it with pdfbox. the error is as follows: org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:747) at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:718) at org.apache.pdfbox.pdfparser.cosparser.getlength(cosparser.java:961) at org.apache.pdfbox.pdfparser.cosparser.parsecosstream(cosparser.java:1020) at org.apache.pdfbox.pdfparser.cosparser.bfsearchforobjstreams(cosparser.java:1912) at org.apache.pdfbox.pdfparser.cosparser.bfsearchforobjects(cosparser.java:1538) at org.apache.pdfbox.pdfparser.cosparser.rebuildtrailer(cosparser.java:2091) at org.apache.pdfbox.pdfparser.cosparser.retrievetrailer(cosparser.java:246) at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:189) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:240) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1013) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:969) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:917) at ",
        "label": 1
    },
    {
        "text": "texttopdf needs orientation control we want to use texttopdf in batch command line mode to convert legacy reports which assume a mono-spaced font, but most of our old legacy reports are 128 characters wide and without a landscape option, they come out wrapped into illegibility. using a courier 6 font just barely keeps them from wrapping, but it messes up the pagination. please note that this ticket relates to pdfbox-3409, where leading spaces are lost, which is even more of a deal-breaker for us than this. a courier 10 example is attached. see ticket pdfbox-3409 for a courier 6 example.",
        "label": 11
    },
    {
        "text": "problem extracting text in newline characters hello , i have a pdf file with 1 page only, when i try to extract its text using : string pagedata = stripper.gettext( pdffile ); it ignores some enter characters between lines, so the last word in the line and the first word in the next line appear as 1 word without spaces between them !! while if i copy the pdf text manually from the pdf and paste it in a text editor, enter characters appear after the same lines that caused the problem in pdfbox. please check the attached file as a sample. is there a way to fix this ? best regards ,",
        "label": 1
    },
    {
        "text": "text missing java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage out2.pdf",
        "label": 6
    },
    {
        "text": "cannot render fop pdf with subsetted otf cff for both standard and cid keyed fonts see attachments, pdf is from fop-2252.",
        "label": 6
    },
    {
        "text": "texttopdf drops leading spaces we want to use texttopdf in batch command line mode to convert legacy reports which assume a mono-spaced font, but the pdf files created ignore all leading spaces. obviously, this messes up column alignment. we can't use the tool without a fix for this. or is there a parameter we can pass? here is the command line we are using: java -jar pdfbox-app-1.8.10.jar texttopdf -standardfont courier -fontsize 6 gprod.pdf gprod.txt. i tried downloading 2.0.2, but it is stuck at \"warning: building on-disk font cache, this may take a while\". p.s. i am also submitting a second ticket (pdfbox-3410) regarding the need for orientation control in texttopdf. most of our old legacy reports are 128 characters wide and without a landscape option, they come out wrapped into illegibility.",
        "label": 11
    },
    {
        "text": "garbled image from pdftoimage for the attached pdf-file, pdftoimage produces an incorrect jpg-file. the pdf file is generated by the scan-to-pdf-function of a hewlett packard officejet pro 8600, and all the pdf's created like this exhibit the same problem. command : java -jar pdfbox-app-1.7.1.jar pdftoimage scan.pdf",
        "label": 1
    },
    {
        "text": "special characters not extracted when trying to extract characters for mathematic formulas, there appear to be lots of characters that don't seem to have any meaning. take the example on page 80 the last formula with the binomial coefficient. the first opening bracket, when extracted using the foxit reader or adobe reader gets a character with the int value 18 and the closing bracket is the int value 19. now when i look at the textposition objects using pdfbox, there is one character to the left of the 5 and that one has the glyph name spacehackarabic/space and the int value 32. the next problem is that there seems to be a character at the same position as the 5, a 'controllf'. what does it do at the same position as that number? mpw after the character 2 are 3 other characters, another 'controllf' and two 'spacehackarabic/space'. there is no indication whatsoever abouth the bracket. what do those extra characters mean? and why doesn't it show the character for the bracket that i am able to extract using the other pdf readers? the pdf can be downloaded from http://upload.wikimedia.org/wikibooks/de/f/f6/mathematik_stochastik.pdf",
        "label": 1
    },
    {
        "text": "importfdf fails to do anything i created a dead-simple pdf with form fields in acrobat and generated an fdf file from it. tried to run importfdf on these files and the resulting file is totally blank. attached are the input files (1.pdf, 1_data.fdf), the result file (2.pdf) and the warnings importfdf generated.",
        "label": 1
    },
    {
        "text": "ioexception  error reading stream  expected 'endstream' actual '' at offset the following stacktrace is shown with extracttext and pdfreader when opening a file previously parsed by 1.8.10 (and opened by chrome and icepdf): java.lang.runtimeexception: java.io.ioexception: error reading stream, expected='endstream' actual='' at offset 430840     org.apache.pdfbox.debugger.pdfdebugger.openmenuitemactionperformed(pdfdebugger.java:593)     org.apache.pdfbox.debugger.pdfdebugger.access$400(pdfdebugger.java:113)     org.apache.pdfbox.debugger.pdfdebugger$4.actionperformed(pdfdebugger.java:312)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source) caused by: java.io.ioexception: error reading stream, expected='endstream' actual='' at offset 430840     org.apache.pdfbox.pdfparser.cosparser.parsecosstream(cosparser.java:996)     org.apache.pdfbox.pdfparser.cosparser.parsefileobject(cosparser.java:760)     org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:721)     org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:652)     org.apache.pdfbox.pdfparser.cosparser.parsedictobjects(cosparser.java:612)     org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:215)     org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:249)     org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:840)     org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:780)     org.apache.pdfbox.debugger.pdfdebugger.parsedocument(pdfdebugger.java:1243)     org.apache.pdfbox.debugger.pdfdebugger.readpdffile(pdfdebugger.java:1165)     org.apache.pdfbox.debugger.pdfdebugger.openmenuitemactionperformed(pdfdebugger.java:587)     org.apache.pdfbox.debugger.pdfdebugger.access$400(pdfdebugger.java:113)     org.apache.pdfbox.debugger.pdfdebugger$4.actionperformed(pdfdebugger.java:312)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)",
        "label": 1
    },
    {
        "text": "java lang stackoverflowerror caused by: java.lang.stackoverflowerror at org.pdfbox.pdmodel.pdpagenode.getallkids(pdpagenode.java:210) at org.pdfbox.pdmodel.pdpagenode.getallkids(pdpagenode.java:210) at org.pdfbox.pdmodel.pdpagenode.getallkids(pdpagenode.java:210) ... ... at org.pdfbox.pdmodel.pdpagenode.getallkids(pdpagenode.java:210)",
        "label": 1
    },
    {
        "text": "incomplete signature creation  regression in with pdfbox  i got a document, which do not look special but after the pdfbox-1780 patch, signing breaks and only a small footprint was written into the document. the changes made with the patch pdfbox-1780 in the coswriter, cause this problem for me.",
        "label": 1
    },
    {
        "text": "pdpage converttoimage generates white image with no contents when converting a pdpage to an image where the mediabox, cropbox, and trimbox width/height are slightly larger than that of the pddocument pageformat height/width, the resulting image appears blank. a warning message appears in the log 'getrgbimage returned null'. the pdf is rendered fine.",
        "label": 1
    },
    {
        "text": "pdpagetree indexof doesn't find page numbers i know pdfbox-2423 is not closed yet so i'm not sure if the issues i'm having are a cause of that. i'm using the latest trunk and i have issues with the pdpagetree.indexof method. the javadoc reads returns the index of the given page, or -1 if it does not exist. which i understand it means in returns -1 if the given page is not found in the page tree correct? if so, the following unit test fails:  @test     public void indexofnotfoundpage() throws ioexception {         pddocument doc1 = pddocument.load(getclass().getclassloader()                 .getresourceasstream(\"pdf/bigger_outline_test.pdf\"));         assertequals(-1, doc1.getpages().indexof(new pdpage()));     } another similar issue i have is that pdpagetree.indexof doesn't find the correct index for a pdpage returned by the pdoutlineitem.finddestinationpage: @test     public void indexofpagefromoutlinedestination() throws ioexception {         pddocument doc = pddocument                 .load(getclass().getclassloader().getresourceasstream(\"pdf/bigger_outline_test.pdf\"));         pddocumentoutline outline = doc.getdocumentcatalog().getdocumentoutline();         for (pdoutlineitem current : outline.children()) {             if (current.gettitle().contains(\"second\")) {                 assertequals(3, doc.getpages().indexof(current.finddestinationpage(doc)));             }         }     } also note that indexof is used by pdpagedestination.findpagenumber which also returns a wrong result.",
        "label": 11
    },
    {
        "text": "some inline font is can not parsed out warning: changing font on <e> from <z_c00140.tmp> to the default font jun 6, 2012 5:48:54 am org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring warning: changing font on <b> from <z_c00140.tmp> to the default font jun 6, 2012 5:48:54 am org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring warning: changing font on <w> from <z_c00140.tmp> to the default font jun 6, 2012 5:48:54 am org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring warning: changing font on <!> from <z_c00140.tmp> to the default font",
        "label": 1
    },
    {
        "text": "needless adding while parsing dictionary objects hi, it seems like unnecessary objects(cosnull, cosfloat..) are also added to 'tobeparsedlist' while parsing dictionary objects and this can impact on performance. you can download a file causing out of memory exception while parsing dictionary objects below, https://turnernbahangtime.files.wordpress.com/2017/10/2017-18-official-nba-guide_v2.pdf and please check the attached patch that avoids unnecessary adding operations.",
        "label": 11
    },
    {
        "text": "merge failed to clone tags after merging two tagged documents, closing the source document causes the destination document to be closed, which prevents it from being saved. the following code demonstrates the bug with the attached flattened government pdf file. the original is available here if you need it. @test public void testmerge() throws exception {     pdfmergerutility pdfmergerutility = new pdfmergerutility();     pddocument src = pddocument.load(new file(\"govformpreflattened.pdf\"));     pddocument dest = pddocument.load(new file(\"govformpreflattened.pdf\"));     pdfmergerutility.appenddocument(dest, src);     src.close(); //if we don't close the src then we don't have an error     dest.save(file.createtempfile(\"mergeissue\",\".pdf\"));     dest.close(); } the issue is resolved with the attached patch. also i removed the \"if (mergestructtree)\" is because mergestructtree is always true here because this code is already inside an \"if (mergestructtree)\".",
        "label": 11
    },
    {
        "text": "a landscape pdf is rasterized as portrait fairly simple put give pdfbox a landscape pdf and create an image raster. it is created as portrait.",
        "label": 1
    },
    {
        "text": "spliting a pdf creates unnecessarily large files using pdfbox 0.8.0 (also tried on 1.1.0 and 1.2.1) to split files result in bigger parts than the original. concerned files were made from openoffice .odt documents in version 3.0.0 using openoffice pdf export and then merging several copies with pdfsam (http://www.pdfsam.org/) in joined eclipse project the test file size is 10 712 749 bytes for 2812 pages and the result file sizes after splitting in two at page 2300 are : 8 812 515 bytes and 10 701 142 bytes. using pdfsplit in command line as result we have all single result files bigger than the original. an example is also attached. an error tells the original file is corrupted, but we tried it on a file (using pdfsam and without using it) with no error and with similar result, so i think it's not related. this issue seems similar to pdfbox-28.",
        "label": 1
    },
    {
        "text": "converttoimage mangles images which were in the pdf of the pdfs we've tried running through pdfbox and generating page images, a number of them (coming from disparate sources and method of creation) seem to produce images where an image that was embedded in the page of the pdf shows somewhat mangled. it seems to be divided by horizontal stripes, where some stripes look normal, others seem to have some kind of \"smearing\" effect going on. see attached images and original pdf (image is of page 13). i marked this as critical as we are trying to use pdfbox in a project where page images are crucial, and inability to produce reasonable looking page images is pretty much a deal breaker. the code we use to extract the images looks more or less like the following: bufferedimage image = page.converttoimage(); smartdeferredfileoutputstream outstream = new smartdeferredfileoutputstream(); string[] writerformatnames = imageio.getwriterformatnames(); imageio.write(image, \"jpeg\", outstream); outstream.close() we've also tried specifying \"png\". in both \"jpg\" and \"png\" cases we get an image file that is indeed the correct format, and both images look exactly the same.",
        "label": 1
    },
    {
        "text": "wasted work in pddocument addsignature  the problem appears in version 1.8.1 and in revision 1476791. i attached a one-line patch that fixes it. this problem is similar to the already fixed pdfbox-1447 and pdfbox-1457. in method \"pddocument.addsignature\", the loop over \"cosobjects\" should break immediately after \"annotnotfound\" and \"sigfieldnotfound\" are set to \"false\". all the iterations after \"annotnotfound\" and \"sigfieldnotfound\" are set to \"false\" do not perform any useful work because the two \"if\" statements performing useful work depend on \"annotnotfound\" and \"sigfieldnotfound\".",
        "label": 1
    },
    {
        "text": "signaturefield setvalue  not implemented in the createemptysignatureform example, adding signaturefield.setvalue(new pdsignature()); before saving brings this exception in thread \"main\" java.lang.unsupportedoperationexception: not implemented  at org.apache.pdfbox.pdmodel.interactive.form.pdsignaturefield.constructappearances(pdsignaturefield.java:237)  at org.apache.pdfbox.pdmodel.interactive.form.pdterminalfield.applychange(pdterminalfield.java:226)  at org.apache.pdfbox.pdmodel.interactive.form.pdsignaturefield.setvalue(pdsignaturefield.java:121)  at org.apache.pdfbox.examples.signature.createemptysignatureform.main(createemptysignatureform.java:84) although there's nothing to construct, visual signing is a different area of pdfbox. what does work is this: signaturefield.getcosobject().setitem(cosname.v, new pdsignature()); i wanted to add this line because this would make it possible to sign this specific field with pdfbox, due to the findsignaturefield() method in pddocument, which would allow to pre-fill a pdsignature object.",
        "label": 8
    },
    {
        "text": "can't read embedded icc profile  invalid profile sequence  1) goto this page: http://www.color.org/version4ready.xalter 2) download this file: http://www.color.org/version4pdf.pdf 3) run this command: java -jar pdfbox-app-2.0.3.jar pdftoimage version4pdf.pdf 4) pdfbox output error: can't read embedded icc profile (invalid profile sequence), using alternate color space: devicergb 5) open the output file: version4pdf1.jpg, you will found there is a rendering error.",
        "label": 11
    },
    {
        "text": "ioexception  head is mandatory  when using getoriginaldata  of tt font from ttc file i tried this to answer this question: http://stackoverflow.com/questions/33044069/pdfbox-2-0-and-ttc-fonts         truetypecollection truetypecollection = new truetypecollection(new file(\"c:/windows/fonts/msgothic.ttc\"));         truetypefont ttfont = null;         for (truetypefont font : truetypecollection.getfonts())         {             if (\"ms-gothic\".equals(font.getname()))             {                 ttfont = font;             }         }         if (ttfont == null)         {             return;         }         pdtype0font font = pdtype0font.load(document, ttfont.getoriginaldata(), true); however this doesn't work: exception in thread \"main\" java.io.ioexception: head is mandatory     at org.apache.fontbox.ttf.ttfparser.parsetables(ttfparser.java:176)     at org.apache.fontbox.ttf.ttfparser.parse(ttfparser.java:145)     at org.apache.fontbox.ttf.ttfparser.parseembedded(ttfparser.java:119)     at org.apache.pdfbox.pdmodel.font.truetypeembedder.buildfontfile2(truetypeembedder.java:89)     at org.apache.pdfbox.pdmodel.font.truetypeembedder.<init>(truetypeembedder.java:72)     at org.apache.pdfbox.pdmodel.font.pdcidfonttype2embedder.<init>(pdcidfonttype2embedder.java:61)     at org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:120)     at org.apache.pdfbox.pdmodel.font.pdtype0font.load(pdtype0font.java:89)  from andreas: looks like a bug. ttfont.getoriginaldata() returns the data of the underlying ttc instead of the single ttf.",
        "label": 1
    },
    {
        "text": "vertical text creation i needed to output vertical japanese text, but was stymied by several limitations: no api to load a ttf as identity-v encoding no support for 'vert' glyph substitution no support for vertical metrics ('vhea' and 'vmtx' tables are parsed but not used at all) i have attached a series of patches that implement the above features. highlights: the gsub glyph substitution table is parsed (limitation: type 1 lookups only; this is sufficient for many features including 'vert'/'vrt2' vertical glyph substitution) cmap lookup makes use of gsub when features are enabled on a ttf 'vhea' and 'vmtx' metrics are applied to pdcidfont when appropriate, and are embedded/subsetted correctly through the dw2/w2 cidfont dictionary an api has been added for loading a ttf as a vertical font, setting identity-v encoding and enabling 'vert'/'vrt2' substitution each patch could approximately be split out into a separate ticket, if desired. also attached is some sample code that exercises these patches and illustrates the effect of vertical glyph positioning. the sample output pdf is also attached.",
        "label": 11
    },
    {
        "text": "dataformatexception  invalid code lengths set with truncated file displaying a page gets this: ava.util.zip.dataformatexception: invalid code lengths set     java.util.zip.inflater.inflatebytes(native method)     java.util.zip.inflater.inflate(inflater.java:259)     java.util.zip.inflater.inflate(inflater.java:280)     org.apache.pdfbox.filter.flatefilter.decompress(flatefilter.java:107)     org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:73)     org.apache.pdfbox.cos.cosinputstream.create(cosinputstream.java:69)     org.apache.pdfbox.cos.cosstream.createinputstream(cosstream.java:167)     org.apache.pdfbox.pdmodel.pdpage.getcontents(pdpage.java:168)     org.apache.pdfbox.pdfparser.pdfstreamparser.<init>(pdfstreamparser.java:92)     org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:505)     org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:484)     org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:158)     org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:220)     org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:147)     org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:69)     org.apache.pdfbox.debugger.pagepane.pagepane$renderworker.doinbackground(pagepane.java:290)     org.apache.pdfbox.debugger.pagepane.pagepane$renderworker.doinbackground(pagepane.java:259)     java.lang.thread.run(thread.java:748) this worked in 2.0.7 maybe similar: 37apqmodk5b3lt3i3wjlsxwezz3p5izg 242savx2kcvp5zgxmtnbk5dgt7fw67gf xufproxeej74a322ucihd3uohfqeurdj",
        "label": 1
    },
    {
        "text": "overhaul the appearance generation for pdf forms the appearance handling for forms in 1.x is limited and does not reflect all settings possible for form fields. in addition the current code is not very modular and does not follow the box model used for form fields. unfortunately only the basics of form handling are defined in the pdf spec. the details like padding of boxes, text placement etc. have to be determined by looking at how adobe forms are generated. update: the file from pdfbox-2310 has bad rendering which might be related?",
        "label": 8
    },
    {
        "text": "usage of default colorspace not checked by preflight in the test1.pdf file of pdfbox-3740, the default colorspace devicegray with color 0 (black) is used for text output (in pdf specification: \"the default colour shall be black (in devicegray\")). preflight should check whether there is an output intent but this isn't done. verapdf finds this. it should also be checked for other operations that may use the default there are two separate colour space parameters: one for stroking and one for all other painting operations. initial value: devicegray. ... there are two separate colour parameters: one for stroking and one for all other painting operations. initial value: black.",
        "label": 11
    },
    {
        "text": "building page requirements are wrong https://pdfbox.apache.org/building.html this pages says about the requirements... jdk 6+ java cryptography extension (jce) maven 3 in the current trunk which is references you need at least jdk 7 and maven 3.3.9 ...",
        "label": 1
    },
    {
        "text": "a problem with indexed color spaces  bpc of the base color space seems wrong  i incorporated the \"proper\" solution to pdfbox-1075 into my regression tests and the file which made me raise that issue got broken again. it has pictures with indexed color spaces, which now are returned as black. the indexed color space is one-bit. the lookup table has two colors: black and white. with the current trunk, the black pixels remain black (0,0,0), but the white pixels are returned as (1,1,1), which in rgb is nearly just as black. the text on the picture is obviously unreadable. on a second look it seems to me that the offending line is here (in pdpixelmap.getrgbimage): colormodel basecolormodel = csindexed.getbasecolorspace().createcolormodel(bpc); i think it's wrong, as in an indexed color space, \"bpc\" is not \"bits per component\", but \"bits per index\" i.e. bits per the integer which is interpreted as the index to the color lookup array. i think that the base color space's color model should be initialized with a different number. i came up with a following calculation: pdindexed csindexed = (pdindexed)colorspace; pdcolorspace basecs = csindexed.getbasecolorspace(); int numberofcolorvalues = 1 << bpc; int highvalue = csindexed.gethighvalue(); int size = math.min(numberofcolorvalues-1, highvalue); byte[] index = csindexed.getlookupdata(); int parentcomponentscount = basecs.getnumberofcomponents(); int basecolormodelbpc = (index.length * 8) / ((size+1) * parentcomponentscount); colormodel basecolormodel = csindexed.getbasecolorspace().createcolormodel(basecolormodelbpc); the basecolormodelbpc is calculated as the total number of bits in the lookup array divided by the total number of components in all colors. this seems to work for my offending file and causes no regressions with files from pdfbox-1075, pdfbox-1010 and pdfbox-706. what is weird though is a line which is later: byte[] indata = new byte[basecolormodel.getnumcomponents()]; doesn't this effectively assume that basecolormodelbpc should always be 8? if the base color model bpc were anything else than 8, then this code wouldn't be able to handle it correctly anyway. or am i overlooking something? i'll attach a patch which works for me. note that simply changing colormodel basecolormodel = csindexed.getbasecolorspace().createcolormodel(bpc); into colormodel basecolormodel = csindexed.getbasecolorspace().createcolormodel(8); has exactly the same effect (fixed my problem, no regressions in those three earlier issues). please decide what makes more sense.",
        "label": 1
    },
    {
        "text": "pdbutton getonvalues seems to be using the wrong source for getting the allowed values we are in the process of migrating from itext to pdfbox and noticed that an exception was being thrown when trying to set a radio button with pdfield.setvalue(). the values returned from pdbutton.getonvalues() which is used by pdbutton.checkvalue() called from pdbutton.setvalue() are only returning 0,1 instead of what we had been using with itext. after investigating itext's source code and playing around with pdfbox i was able to get to what i believe are the appropriate allowed values by using the following code.         if (field instanceof pdbutton)         {             final cosbase item = field.getcosobject().getitem(cosname.opt);             if (item != null && item instanceof cosarray)             {                 final cosarray optarray = (cosarray)item;                 for (int i = 0 ; i < optarray.size() ; i++)                 {                     // each item in this array is an allowed value                     // optarray.getstring(i);                 }             }         }",
        "label": 8
    },
    {
        "text": "signature not visible on acrobat signing this specific file with pdfbox, i get a non-visible signature in acrobat. using itext the signature is visible.",
        "label": 11
    },
    {
        "text": "suggestion  close streams in pdindex and pdjpeg close streams to improve gc, see attached patches",
        "label": 1
    },
    {
        "text": "java io ioexception  object at offset does not end with 'endobj' i get this exception with the file amyuni2_05d__pdf1_3_acro4x.pdf (it was once part of the project, now no more, but it can still be found on the web): java.io.ioexception: object (48:0) at offset 161333 does not end with 'endobj'. this is true, the \"endobject\" is indeed missing in that file. however the content of endobjectkey is 49 0 obj, i.e. the start of a new object.",
        "label": 11
    },
    {
        "text": "pdfmergerutility does not maintain tagged document structure when appending tagged documents with the pdfmergerutility.appenddocument method, tags from the source document are not copied to the destination document.",
        "label": 1
    },
    {
        "text": "infinite recursion in extractimages snapshot on tika-1742, nate dire reported that a particular pdf causes an infinite recursion/stack overflow while trying to extract images. i confirmed that this also happens with pure pdfbox 1.8.11-snapshot's extractimages. the file.",
        "label": 11
    },
    {
        "text": "landscape pdf rasterized as portrait the rotate entry on page objects is not taken into account when converting a pdf into an image.",
        "label": 1
    },
    {
        "text": "stringindexoutofboundsexception in pdfparser i have few test files parsed fine in pdfbox 1.7.1 but not in 1.8.1: java.lang.stringindexoutofboundsexception: string index out of range: 2047 at java.lang.abstractstringbuilder.deletecharat(abstractstringbuilder.java:762) at java.lang.stringbuilder.deletecharat(stringbuilder.java:258) at org.apache.pdfbox.pdfparser.baseparser.parsecoshexstring(baseparser.java:1000) at org.apache.pdfbox.pdfparser.baseparser.parsecosstring(baseparser.java:808) at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:1241) at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:558) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:188)",
        "label": 1
    },
    {
        "text": "fdfannotation richcontentstostring does not evaluate text nodes which have siblings in the xml the method fdfannotation.richcontentstostring does not evaluate text nodes which have siblings in the xml which can lead to missing text when you parse xfdf data and add the annotations to a pdf. example : parsing a xfdf string containing <p>text a <span style=\"text-decoration:word;\">text b</span> text c</p> and adding the annotation will display only \"text b\". i've included a code sample (mergetest.java) which generates two pdfs. for one pdf, the paragraph contains only spans with text nodes as their only children and all the text is included, for the other pdf, the paragraph has mixed text nodes and elements as children and here, the content from the text siblings of the \"span\" is missing. i propose the following fix: instead of traversing the children of an element with the xpath \"*\" expression, simply iterate the children obtained from node.getchildnodes(), process text and cdatasection nodes directly and call richcontentstostring for any elements. (source : fdfannotation_new.java, diff to 2.0.12 : fdfannotation_diff.txt) furthermore, this method needs to escape \"<\" and \"&\" in the text values read from the node values, because if these characters are added to the markup, it'll cause corruption of annotations as described in pdfbox-3646. additionally, i added quoting \" as \" to the attribute values to avoid possible corruption there.   note : my first attempt of a fix was to replace the xpath \"*\" expression with \"node()\", but for some reason, when i used this on a test case of <p><![cdata[a]]> b <span>c</span> d</p> i would only obtain a nodelist containing the cdatasection, the \"span\" element and the final text node, but not the text node containing \"b\".",
        "label": 11
    },
    {
        "text": "form fields missing values  values are null  when using getvalue() to get the field value in pdfs, getvalue() returns null. even though the document, when opened in evince or in acroread shows the form fields correctly filled in (and the commandline pdftk utility also correctly grabs the form values). using the precompiled commandline pdfbox app to bring up the pdfdebugger, the affected fields do not have any values, so i can't even try to grab the values \"manually\" by parsing the cosdictionary. also affects pdfbox 1.6.0. sample pdf triggering this issue in 90% of the form fields: http://www.cnf.cornell.edu/doc/new_user_application_-_cornell.pdf grab it, fill it out with acrobat reader, then try to get the field values.",
        "label": 8
    },
    {
        "text": "signature is not getting inserted into area hi , i want to sign pdf using signature in pkcs 7 format . i am converting pkcs 7 signature to byte array using convert.frombase64string method in .net . i am passing this byte array to sign method in signature interface which gets called after calling saveincremental. my byte array is inserting proper but the name of which signature is not shown when i open pdf. may be my byte conversion may not proper or something else i am doing wrong. please let me know.",
        "label": 11
    },
    {
        "text": "pdgraphicsstate class receives null page argument leading to nullpointerexception workaround changes needed for pdgraphicsstate constructor as reproduced below: attached pdf file can be used to reproduce the exception public pdgraphicsstate(pdrectangle page) { /* tb - changes made here are a workaround which creates a default generalpath assigned to currentclippingpath if the constructor argument page is null. probably a better remedy would be to ensure that the page argument is not null or use a dedicated constructor if page is null */ if (page != null) { dimension dimension = page.createdimension(); rectangle rectangle = new rectangle(dimension); currentclippingpath = new generalpath(rectangle); currentclippingpath = new generalpath(new rectangle(page.createdimension())); if (page.getlowerleftx() != 0 || page.getlowerlefty() != 0) { // compensate for offset this.currenttransformationmatrix = this.currenttransformationmatrix.multiply(matrix.gettranslatinginstance(-page.getlowerleftx(), -page.getlowerlefty())); } } else { currentclippingpath = new generalpath(); } } also, as a side effect of above workaround, made following change within pdfstreamengine.processencodedtext: /* tb - needed to make change here, as we encounter here a knock on effect of allowing null page arguments through in pdgraphicsstate constructor which creates a default generalpath assigned to currentclippingpath. that workaround causes findmediabox to return null, so in that case we assign default values to pageheight and pagewidth here. everything else seems to work as far as text extraction is concerned. */ if (page.findmediabox() != null) { pageheight = page.findmediabox().getheight(); pagewidth = page.findmediabox().getwidth(); } else { pageheight = 0; pagewidth = 0; }",
        "label": 1
    },
    {
        "text": "replace pdfreader with pdfdebugger as discussed on the mailing list: here's an idea: if we switch pdfdebugger to using \"view pages\" by default, it will no longer be confusing for casual users. i've found myself using this mode most of the time anyway. we can add page up/down too, of course - preferably using the actual \"page up\" and \"page down\" keys rather than the bizarre choice of the +/- keys which are currently used in pdfreader.",
        "label": 1
    },
    {
        "text": "jvm crash in pdcolorspaceinstance createcolor  similar to pdfbox-488, the jvm (here jdk 1.6 on windows xp) crashes when pdfbox tries to create a java.awt.color instance with some specific icc profile. the root cause of the problem is a low-level bug in the jvm (most likely http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6645513), but it would be really good if pdfbox could work around that issue or at least throw a normal exception in troublesome cases instead of crashing the entire jvm. see below for the relevant parts of the crash report. # an unexpected error has been detected by java runtime environment: # exception_access_violation (0xc0000005) at pc=0x6d17205d, pid=1512, tid=1324 # java vm: java hotspot(tm) client vm (11.3-b02 mixed mode windows-x86) problematic frame: c [cmm.dll+0x205d] # if you would like to submit a bug report, please visit: http://java.sun.com/webapps/bugreport/crash.jsp the crash happened outside the java virtual machine in native code. see problematic frame for where to report the bug. # --------------- t h r e a d --------------- current thread (0x492f6800): javathread \"pool-3-thread-11\" [_thread_in_native, id=1324, stack(0x4aa40000,0x4aa90000)] siginfo: exceptioncode=0xc0000005, writing address 0x00000008 registers: eax=0x001cc20b, ebx=0x4aa8eda0, ecx=0x00000000, edx=0x6d19c88c esp=0x4aa8ed34, ebp=0x4aa8edc0, esi=0x4aa8ed6c, edi=0x00000003 eip=0x6d17205d, eflags=0x00010246 top of stack: (sp=0x4aa8ed34) 0x4aa8ed34: 00000008 000000ff 4aa8ee34 73a6ef68 0x4aa8ed44: 790739f0 5577e7e0 00000000 00000000 0x4aa8ed54: 00000000 00000000 00000000 7dff9f58 0x4aa8ed64: 5d29bb60 7e87fca0 00000000 00000000 0x4aa8ed74: 00000000 00000000 00000000 565bff20 0x4aa8ed84: 618b6ca0 618b6d50 581b1ed8 00000000 0x4aa8ed94: 00000000 00000000 00000000 00000003 0x4aa8eda4: 6d173f79 00000000 3ff00000 0000000f instructions: (pc=0x6d17205d) 0x6d17204d: 83 c4 14 89 06 e8 e8 34 02 00 83 7d 1c 00 8b 0e 0x6d17205d: 89 41 08 74 0e 8b 45 f8 8b 34 30 85 f6 74 04 8b stack: [0x4aa40000,0x4aa90000], sp=0x4aa8ed34, free space=315k native frames: (j=compiled java code, j=interpreted, vv=vm code, c=native code) c [cmm.dll+0x205d] c [cmm.dll+0x40f1] c [cmm.dll+0x435e] c [cmm.dll+0x1ff75] c [cmm.dll+0x20413] java frames: (j=compiled java code, j=interpreted, vv=vm code) j sun.awt.color.cmm.cmmcombinetransforms([lsun/awt/color/icc_transform;lsun/awt/color/icc_transform;)i j java.awt.color.icc_colorspace.torgb([f)[f j java.awt.color.<init>(ljava/awt/color/colorspace;[ff)v j org.apache.pdfbox.pdmodel.graphics.color.pdcolorspaceinstance.createcolor()ljava/awt/color; j org.apache.pdfbox.pdfviewer.pagedrawer.fillpath(i)v j org.apache.pdfbox.util.operator.pagedrawer.fillnonzerorule.process(lorg/apache/pdfbox/util/pdfoperator;ljava/util/list;)v j org.apache.pdfbox.util.pdfstreamengine.processoperator(lorg/apache/pdfbox/util/pdfoperator;ljava/util/list;)v j org.apache.pdfbox.util.pdfstreamengine.processsubstream(lorg/apache/pdfbox/pdmodel/pdpage;lorg/apache/pdfbox/pdmodel/pdresources;lorg/apache/pdfbox/cos/cosstream;)v j org.apache.pdfbox.util.operator.pagedrawer.invoke.process(lorg/apache/pdfbox/util/pdfoperator;ljava/util/list;)v+419 j org.apache.pdfbox.util.pdfstreamengine.processoperator(lorg/apache/pdfbox/util/pdfoperator;ljava/util/list;)v j org.apache.pdfbox.util.pdfstreamengine.processsubstream(lorg/apache/pdfbox/pdmodel/pdpage;lorg/apache/pdfbox/pdmodel/pdresources;lorg/apache/pdfbox/cos/cosstream;)v j org.apache.pdfbox.util.pdfstreamengine.processstream(lorg/apache/pdfbox/pdmodel/pdpage;lorg/apache/pdfbox/pdmodel/pdresources;lorg/apache/pdfbox/cos/cosstream;)v+39 j org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(ljava/awt/graphics;lorg/apache/pdfbox/pdmodel/pdpage;ljava/awt/dimension;)v+57 j org.apache.pdfbox.pdmodel.pdpage.converttoimage()ljava/awt/image/bufferedimage;+107",
        "label": 7
    },
    {
        "text": "nullpointerexception   missing glyph description hi team. we process many pdf documents every day and today we ran into a file that we couldn't create an image to. for some reason it has glyphs that didn't have any glyph description. in glyfcompositedescript there is atleast two functions (line 258, 271) that fetch an glyphdescription from a map like this: glyphdescription gd = descriptions.get(c.getglyphindex()); then the functions use the description without a null check which results in an nullpointer exception. exception in thread \"main\" java.lang.nullpointerexception         at org.apache.fontbox.ttf.glyfcompositedescript.getcompositecompendpt(glyfcompositedescript.java:272)         at org.apache.fontbox.ttf.glyfcompositedescript.getendptofcontours(glyfcompositedescript.java:126)         at org.apache.fontbox.ttf.glyphrenderer.describe(glyphrenderer.java:72)         at org.apache.fontbox.ttf.glyphrenderer.getpath(glyphrenderer.java:56)         at org.apache.fontbox.ttf.glyphdata.getpath(glyphdata.java:116)         at org.apache.pdfbox.pdmodel.font.pdcidfonttype2.getpath(pdcidfonttype2.java:446)         at org.apache.pdfbox.pdmodel.font.pdtype0font.getpath(pdtype0font.java:506)         at org.apache.pdfbox.rendering.ttfglyph2d.getpathforgid(ttfglyph2d.java:137)         at org.apache.pdfbox.rendering.ttfglyph2d.getpathforcharactercode(ttfglyph2d.java:93)         at org.apache.pdfbox.rendering.pagedrawer.drawglyph2d(pagedrawer.java:353)         at org.apache.pdfbox.rendering.pagedrawer.showfontglyph(pagedrawer.java:334)         at org.apache.pdfbox.contentstream.pdfstreamengine.showglyph(pdfstreamengine.java:744)         at org.apache.pdfbox.contentstream.pdfstreamengine.showtext(pdfstreamengine.java:701)         at org.apache.pdfbox.contentstream.pdfstreamengine.showtextstring(pdfstreamengine.java:564)         at org.apache.pdfbox.contentstream.operator.text.showtext.process(showtext.java:55)         at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:815)         at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:472)         at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:446)         at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149)         at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:189)         at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:145)         at org.apache.pdfbox.rendering.pdfrenderer.renderimagewithdpi(pdfrenderer.java:94)         at org.apache.pdfbox.tools.pdftoimage.main(pdftoimage.java:236)         at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:94) so far we have only seen one file with this issue in our processing. i've tried to run the pdftoimage with all versions of pdfbox 2 and they fail. pdfbox 1.8.12 gives some error output but generates an working image. sep 23, 2016 7:36:53 am org.apache.pdfbox.util.pdfstreamengine processoperator info: unsupported/disabled operation: bdc sep 23, 2016 7:36:53 am org.apache.pdfbox.util.pdfstreamengine processoperator info: unsupported/disabled operation: emc sep 23, 2016 7:36:55 am org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring warning: changing font on <\u2022> from <null> to the default font sep 23, 2016 7:36:55 am org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring warning: changing font on <\u2022> from <null> to the default font sep 23, 2016 7:36:55 am org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring warning: changing font on <\u2022> from <null> to the default font sep 23, 2016 7:36:55 am org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring warning: changing font on <\u2022> from <null> to the default font sep 23, 2016 7:36:55 am org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring warning: changing font on <\u2022> from <null> to the default font sep 23, 2016 7:36:55 am org.apache.pdfbox.util.pdfimagewriter writeimage info: writing: [removed identifer]_01_07_201609231.jpg at the time of writing the bug report the file is to fresh to disclose. might be able to add it in a week or so depending on the customer, and if it's required for the resolution of this issue. thanks for your time.",
        "label": 11
    },
    {
        "text": "multi page print doesn't work with  book append new pdfprintable document  pageformat  in the method printwithpaper of printing.java example, if i use java.awt.print.book as in the example: book book = new book(); book.append(new pdfprintable(document), pageformat); job.setpageable(book); when i execute job.print(); it print only the first page of the document. i solved this issue by replacing the three rows mentioned above with: job.setprintable(new pdfprintable(document), pageformat); by that all pages are printed. i hope this is useful for someone. matteo",
        "label": 1
    },
    {
        "text": "outofmemoryerror on flatefilter   deflater end  is missing while creating some large pdf documents by pdfbox 2.0.8 and 2.0.9, i met an outofmemoryerror on flatefilter.encode(). while creating some small pdf documents, there are no problems. i checked the source code of org.apache.pdfbox.filter.flatefilter.java, and i found that calling of deflater.end() method is missing. when deflateroutputstream object is created by the 'new deflateroutputstream(encoded,deflater)' constructor method (i.e. 'custom deflater' is given), deflateroutputstream.close() api does not call 'deflater.end()' method automatically. deflater.end() method may be called by the finalizer at gc, of cource, but the timing of gc is undecidable by user. so 'deflater.end()' method should be called explicitly. otherwise it may cause an outofmemoryerror.",
        "label": 11
    },
    {
        "text": "pddocument getnumberofpages  return for certain pdf document sample document(https://issues.apache.org/jira/secure/attachment/12430914/formi-9-english.pdf) can be found here https://issues.apache.org/jira/browse/pdfbox-578. looks the npe issue fix in that work item https://issues.apache.org/jira/browse/pdfbox-578 is a work around. when i try to extract the text content from /formi-9-english.pdf , when i call pddocument.getnumberofpages(), this method return 0 which makes the extraction of the text content impossible: inputstream in = <pdf inputstream> pdfparser parser = new pdfparser(content); pdftextstripper pdfstripper = null; string parsedtext = null; parser.parse(); cosdoc = parser.getdocument(); pdfstripper = new pdftextstripper(); pddoc = new pddocument(cosdoc); for(int i=1; i<= pddoc.getnumberofpages(); i++) { // pddoc.getnumberofpages() return 0, which is incorrect } note: 1. this problem is found in the pdfbox latest version 1.8.2 2. i didn't which component to file this defect, so please assign to the correct component if needed, thanks",
        "label": 1
    },
    {
        "text": "cannot build last source code when i run pdfbox ant build.xml i have this issue : [javac] d:_sources\\eclipse_legalbox\\pdfbox\\pdfbox\\src\\main\\java\\org\\apache\\pdfbox\\pdmodel\\encryption\\pdencryptionmanager.java:46: warning: [deprecation] pdstandardencryption in org.apache.pdfbox.pdmodel.encryption has been deprecated [javac] registersecurityhandler( pdstandardencryption.filter_name, pdstandardencryption.class ); [javac] ^ [javac] d:_sources\\eclipse_legalbox\\pdfbox\\pdfbox\\src\\main\\java\\org\\apache\\pdfbox\\pdmodel\\encryption\\publickeysecurityhandler.java:391: error: incompatible types [javac] asn1primitive derobject = asn1inputstream.readobject(); [javac] ^ [javac] required: asn1primitive [javac] found: derobject [javac] d:_sources\\eclipse_legalbox\\pdfbox\\pdfbox\\src\\main\\java\\org\\apache\\pdfbox\\pdmodel\\encryption\\publickeysecurityhandler.java:407: error: cannot find symbol [javac] return contentinfo.toasn1primitive(); [javac] ^ [javac] symbol: method toasn1primitive() [javac] location: variable contentinfo of type contentinfo",
        "label": 1
    },
    {
        "text": "problem in textposition implementation in 2.0.3 there wasn't hashcode implemented in textposition, and for me that was fine. same instance, same hashcode. in 2.0.6 the hashcode is now checking the fields values, which is reasonable. but, the hashcode in the same instance can have different results. the problem is in the `direction` field, which is -1.0 and initialised only when getdir is called the first time. for now as workaround, anytime (or just the first time) i need the textposition's hashcode i call getdir before that. quick example: object getobjectfromtextpos(textposition textpos) {     textpos.getdir();     return somehashmap.get(textpos); } i don't know the reason of the late assignment to direction, but if that is necessary, i would say that the hashcode should call getdir() instead of using the field.",
        "label": 11
    },
    {
        "text": "greek pdfs print out wrong characters this issue resembles the pdfbox-770 bug which was fixed in version 1.5.0, however in case of pdfbox-770 problem occurred while extracting the text, in my case i have the same problem but while printing (silent print). e.g. in greek pdf a) greek letter \u03c0 is printed as pi. \"\u03c0\u03c1\u03bf\u03c3\u03ce\u03c0\u03c9\u03bd\" would become \"pi\u03c1\u03bf\u03c3\u03cepi\u03c9\u03bd\" on paper. b) the greek letter \u03bc is printed as \u00b5 ... which is slightly different on paper as the proper \u03bc. c) i think there is also an issue with \u03c9...but i will confirm this later. as an example pdf ..the same pdf as in case of pdfbox-770 can be used. unfortunately i cannot post the results as results are on paper... so, i cannot print any greek pdf, as it comes out unreadable... please address the issue, a fix might be somehow similar to 770's fix..though i couldn't find any reference what was the problem then in a first place... thanks in advance... p.k.",
        "label": 1
    },
    {
        "text": "nullpointerexception in  init pdfstreamparser java  java.lang.nullpointerexception at org.apache.pdfbox.pdfparser.pdfstreamparser.<init>(pdfstreamparser.java:109) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:288) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:245) at org.apache.pdfbox.contentstream.pdfstreamengine.processchildstream(pdfstreamengine.java:233) at org.apache.pdfbox.preflight.font.util.preflighttype3stream.showtype3character(preflighttype3stream.java:61) at org.apache.pdfbox.preflight.font.type3fontvalidator.getwidthfromcharproc(type3fontvalidator.java:371) at org.apache.pdfbox.preflight.font.type3fontvalidator.checkcharprocsandmetrics(type3fontvalidator.java:302) at org.apache.pdfbox.preflight.font.type3fontvalidator.validate(type3fontvalidator.java:84) at org.apache.pdfbox.preflight.process.reflect.fontvalidationprocess.validate(fontvalidationprocess.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatefonts(resourcesvalidationprocess.java:98) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:76) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validateresources(singlepagevalidationprocess.java:167) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:82) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:56) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:45) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168)",
        "label": 6
    },
    {
        "text": "shape transparency not respected when exporting to image when a pdf file has a shape that is drawn with a transparency value the transparency values are not respected when exported to image. i have attached a small patch that fixes this issue. the patch does not fully satisfy the pdf transparency model, for example only alpha composition is used. but it covers the most common use-case of drawing shapes with a transparency value for fill and stroke. i have also attached a maven project that demonstrates the issue. it had a pdf with a shape in it that is semi transparent. running the application (execute the runexample.sh script) will load that pdf and export it as an image. during the export (the output is a file called pdfasimage) the transparency is lost. compare the exported image and the original pdf to see the difference. pdf is in src/main/resources/...",
        "label": 1
    },
    {
        "text": "fontprovider not thread safe i understand that pdfbox is not yet thread-safe, however, from reading this comment on a similar ticket, it seems like the fonts should be thread safe and is something that we want to fix. however, i am experiencing an intermittent nullpointerexception when running multi-threaded unit tests that attempt to read several pdfs at once (see details here. inside fontmapperimpl.java the getprovider and setprovider methods are synchronised:     public synchronized void setprovider(fontprovider fontprovider)     {         this.fontprovider = fontprovider;         fontinfobyname = createfontinfobyname(fontprovider.getfontinfo());     }     /**      * returns the font service provider. defaults to using filesystemfontprovider.      */     public synchronized fontprovider getprovider()     {         if (fontprovider == null)         {             setprovider(defaultfontprovider.instance);         }         return fontprovider;     } however, the calling code from the findfont() method is not synchronised:         // make sure the font provider is initialized         if (fontprovider == null)         {             getprovider();         }         // first try to match the postscript name         fontinfo info = getfont(format, postscriptname);         if (info != null)         {             return info.getfont();         } as a result, if multiple threads attempt to access this at once, thread a may be in the setprovider method and have set fontprovider, but still processing the creation of fontinfobyname - so thread b could attempt to access before initialised.",
        "label": 11
    },
    {
        "text": "cmmexception  invalid profile data jenkins builds are intermittently failing with the error: java.awt.color.cmmexception: invalid profile data  at sun.awt.color.cmm.checkstatus(cmm.java:131)  at sun.awt.color.icc_transform.<init>(icc_transform.java:88)  at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:144)  at org.apache.pdfbox.pdmodel.graphics.color.pddevicergb.torgb(pddevicergb.java:79)  at org.apache.pdfbox.pdmodel.graphics.color.pdcolorspace.topaint(pdcolorspace.java:255)  at org.apache.pdfbox.rendering.pagedrawer.getnonstrokingpaint(pagedrawer.java:666)  at org.apache.pdfbox.rendering.pagedrawer.fillpath(pagedrawer.java:739)  at org.apache.pdfbox.util.operator.pagedrawer.fillnonzerorule.process(fillnonzerorule.java:37)  at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:488)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:254)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:221)  at org.apache.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:130)  at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:488)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:254)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:221)  at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:197)  at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:183)  at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:228)  at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:160)  at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:83)  at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:70)  at org.apache.pdfbox.util.testrendering.render(testrendering.java:78)",
        "label": 6
    },
    {
        "text": "indexoutofboundsexception in setnonstrokingiccbasedcolor java.lang.indexoutofboundsexception: index: 3, size: 3 at java.util.arraylist.rangecheck(arraylist.java:547) at java.util.arraylist.get(arraylist.java:322) at org.apache.pdfbox.util.operator.setnonstrokingiccbasedcolor.process(setnonstrokingiccbasedcolor.java:50) at org.apache.pdfbox.util.operator.setnonstrokingseparation.process(setnonstrokingseparation.java:95) at org.apache.pdfbox.util.operator.setnonstrokingcolor.process(setnonstrokingcolor.java:84) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:510) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:223) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:182) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:92) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:686)",
        "label": 2
    },
    {
        "text": "keywords are enclosed in quotes  i add keywords (and other properties) via the pddocumentinformation: pddi.setkeywords(\"test4711\"); the resulting pdf shows those keywords but enclosed in quotes: \"test4711\" instead of just the string: test4711 other strings i set with pddocumentinformation are shown correctly (without quotes). i debugged my code to ensure that the string object passed to setkeywords() is correct (i.e. without any additional quotes).",
        "label": 1
    },
    {
        "text": " patch  add a common interface pdshadingpaint for all shading paints the attached patch adds an common interface pdshadingpaint to all pdshading-based paint's. it allows to access the underlying pdshading object and the matrix of the paint. at the moment it is not possible to access this fields without using dirty accessibility hacks, see also this commit. why would you need that? i need that for my pdfboxgraphics2d adapter. i draw pdf pages using pdfrenderer/pagedrawer back into a pdf. while doing so i derive from both classes and change / filter certain aspects of the pdf. one use case is to extract a specific seperation color into its own pdf page, remap it to another color and also draw some overfill (i.e. a additional border of 0.5pt around all shapes drawn with this color). this so prepared page is then used with a machine which glues foil (gold, silver or copper) on the places marked with that color. you can look at an example here, it does not use a seperation color, but you should get the idea.  my long term goal is to be able to use pdfbox for all possible pre-press pdf manipulations. e.g. changing/remapping colorspaces, resampling images to the target resolution, ... at the moment i know of this \"special cases\" which will need a special treatment, as they are normally handled through rendering them first into a bufferedimage: transparency groups softmasks are there other places which resort to rendering to a bufferedimage first?",
        "label": 11
    },
    {
        "text": "listbox controls render incorrectly in adobe acrobat or adobe reader i have a form with a listbox. i update the value in the listbox using the following code: pdchoicefield c = (pdchoicefield)f; ((pdchoicefield)f).setvalue(\"2\"); i have a combo box that uses the same choices, and it works fine. the issue has to do with the rendering of the field. the update of the value (i.e. setvalue method) works fine, but when i look at the resulting output pdf the choices have become unreadable because the font has gone way large. i have searched the mailing list, and posted a question regarding this that no one has answered, so i am now assuming this is an unknown bug. thanks",
        "label": 8
    },
    {
        "text": "getdocumentcatalog  returns no results test below fails, getallpages() returns empty list should return 2 pages (see attached test pdf) testpdftopng.java import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.pdpage; import org.junit.assert; import org.junit.test; import javax.imageio.imageio; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import java.net.url; import java.nio.file.files; import java.nio.file.path; import java.util.arraylist; import java.util.list; public class testpdftopng {     public class pdftopngtest {         @test         public void testconvert() throws exception {             testconvert(testpdftopng.class.getresource(\"/bad-to-png-test-2.pdf\"), 2);         }         public void testconvert(url url, int expectedpages) throws ioexception {             final path outdir2 = files.createtempdirectory(\"test-convert-png\");             final list<path> images2 = toimages(url, outdir2);             assert.assertequals(expectedpages, images2.size());         }         public list<path> toimages(url url, path outdir) throws ioexception {             list<path> images = new arraylist<>();             system.out.println(\"images copied to folder: \" + outdir);             try (pddocument document = pddocument.load(url)) {                 list<pdpage> list = document.getdocumentcatalog().getallpages();                 system.out.println(\"total files to be converted -> \" + list.size());                 int pagenumber = 1;                 for (pdpage page : list) {                     final path path = outdir.resolve(\"test\" + \"_\" + pagenumber + \".png\");                     final file imagefile = path.tofile();                     imagefile.deleteonexit();                     bufferedimage image = page.converttoimage();                     imageio.write(image, \"png\", imagefile);                     system.out.println(\"image created -> \" + imagefile.getname());                     images.add(path);                     pagenumber++;                 }             }             return images;         }     } }",
        "label": 11
    },
    {
        "text": "arrayindexoutofboundsexception in type1charstring i get this with the attached file: java.lang.arrayindexoutofboundsexception: array index out of range: 3  at java.util.vector.get(vector.java:744)  at org.apache.fontbox.cff.type1charstring.handlecommand(type1charstring.java:204)  at org.apache.fontbox.cff.type1charstring.access$000(type1charstring.java:39)  at org.apache.fontbox.cff.type1charstring$1.handlecommand(type1charstring.java:143)  at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:45)  at org.apache.fontbox.cff.type1charstring.render(type1charstring.java:146)  at org.apache.fontbox.cff.type1charstring.getwidth(type1charstring.java:105)  at org.apache.fontbox.type1.type1font.getwidth(type1font.java:159)  at org.apache.pdfbox.pdmodel.font.pdtype1font.getwidthfromfont(pdtype1font.java:286)  at org.apache.pdfbox.preflight.font.container.fontcontainer.checkglyphwidth(fontcontainer.java:129)  at org.apache.pdfbox.preflight.content.preflightcontentstream.validtext(preflightcontentstream.java:340)  at org.apache.pdfbox.preflight.content.preflightcontentstream.validstringdefinition(preflightcontentstream.java:243)  at org.apache.pdfbox.preflight.content.preflightcontentstream.checkshowtextoperators(preflightcontentstream.java:183)  at org.apache.pdfbox.preflight.content.preflightcontentstream.processoperator(preflightcontentstream.java:153)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:461)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:425)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:398)  at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:164)  at org.apache.pdfbox.preflight.content.preflightcontentstream.validpagecontentstream(preflightcontentstream.java:72)  at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validatecontent(singlepagevalidationprocess.java:182)  at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:87)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:56)  at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:45)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88)  at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168)  at pdfboxpageimageextraction.preflighttest.main(preflighttest.java:41)",
        "label": 6
    },
    {
        "text": "standard and encoding before i attempted to become pdf/a compatible, i was happy with just an encoding entry for the standard 14... i have made a few tests: 1 - full embedding of font 2 - just encoding 3 - complete font descriptor rendering results and preflight warnings gs acro xpdf preflight ok ok bad many ok ok ok 2 ok bad ok 1",
        "label": 11
    },
    {
        "text": "pdfbox crashed jvm when importing certain pdf when importing certain pdf, the jvm crashed with the following error: # an unexpected error has been detected by java runtime environment: # exception_access_violation (0xc0000005) at pc=0x6d2f3bf0, pid=6704, tid=6316 # java vm: java hotspot(tm) client vm (11.3-b02 mixed mode windows-x86) problematic frame: c [fontmanager.dll+0x13bf0] # an error report file with more information is saved as: c:\\program files\\genuitec\\common\\plugins\\com.genuitec.eclipse.easie.tomcat.myeclipse_7.5.0.zmyeclipse75020090612\\tomcat\\bin\\hs_err_pid6704.log # if you would like to submit a bug report, please visit: http://java.sun.com/webapps/bugreport/crash.jsp the crash happened outside the java virtual machine in native code. see problematic frame for where to report the bug. # i was able to trace down where i used pdfimagewrite and try to convert the first page of pdf to png image. i tried to update the font and still seem to be problem. any help would be really appreciated. thanks,",
        "label": 1
    },
    {
        "text": "textpositioncomparator is not compatible with java the textpostioncompartor causes the following exception running on java 7: unexpected runtimeexception from org.apache.tika.parser.parserdecorator$1@9007fa2 original cause: comparison method violates its general contract! i think the problem is with this check: if ( ydifference < .1 || (pos2ybottom >= pos1ytop && pos2ybottom <= pos1ybottom) || (pos1ybottom >= pos2ytop && pos1ybottom <= pos2ybottom)) as it violates the contract requirement: the implementor must also ensure that the relation is transitive: ((compare(x, y)>0) && (compare(y, z)>0)) implies compare(x, z)>0. finally, the implementor must ensure that compare(x, y)==0 implies that sgn(compare(x, z))==sgn(compare(y, z)) for all z. java 7 now is strict and throws exceptions when the contract is violated.",
        "label": 1
    },
    {
        "text": "arrayindexoutofboundsexception in pdfxrefstreamparser fuzzing pdf loading with jqf triggered an arrayindexoutofboundsexception. java.lang.arrayindexoutofboundsexception: 1  at org.apache.pdfbox.pdfparser.pdfxrefstreamparser.parse(pdfxrefstreamparser.java:150)  at org.apache.pdfbox.pdfparser.cosparser.parsexrefstream(cosparser.java:2767)  at org.apache.pdfbox.pdfparser.cosparser.parsexrefobjstream(cosparser.java:442)  at org.apache.pdfbox.pdfparser.cosparser.parsexref(cosparser.java:392)  at org.apache.pdfbox.pdfparser.cosparser.retrievetrailer(cosparser.java:254)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:171)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:220)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1160)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1057)     ... the code used for fuzzing is pddocument.load(inputstream)",
        "label": 11
    },
    {
        "text": "add validation data of signer to document to support long term validation of a signature, we need to add a valdiation-dictionary to the document. inside there is most importantly an ocsp-response of the signers. (can be multiple). as defined in pades 4 the following elements will be added to a document: a dss (document security store) linked to the vri(s) of the signature(s) at first i will provide an example.",
        "label": 11
    },
    {
        "text": "classcastexception pdactionjavascript cannot be cast to pddestination i got the following stacktrace merging pdfs. pdf files can not be attached because they have confidential information. java.lang.classcastexception: org.apache.pdfbox.pdmodel.interactive.action.pdactionjavascript cannot be cast to org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.pddestination  at org.apache.pdfbox.multipdf.pdfmergerutility.appenddocument(pdfmergerutility.java:359)  at org.apache.pdfbox.multipdf.pdfmergerutility.mergedocuments(pdfmergerutility.java:266)",
        "label": 11
    },
    {
        "text": "exception on font pdtype1font zapf dingbats hi i am getting this exception using snapshot pdfbox-2.1.0-20170131.210242-692.jar and fontbox-2.1.0-20170131.215925-709.jar debugging pdtype1font.java, the unicode value passed to method \"protected byte[] encode(int unicode) throws ioexception\" was 84 and the call to method \"encode(int unicode)\" was triggered from font.getstringwidth(...) when font was pdtype1font.zapf_dingbats java.lang.illegalargumentexception: u+0054 ('.notdef') is not available in this font zapfdingbats (generic: ms-gothic) encoding: zapfdingbatsencoding at org.apache.pdfbox.pdmodel.font.pdtype1font.encode(pdtype1font.java:409) at org.apache.pdfbox.pdmodel.font.pdfont.encode(pdfont.java:316) at org.apache.pdfbox.pdmodel.font.pdfont.getstringwidth(pdfont.java:345)",
        "label": 11
    },
    {
        "text": "error when rendering a pdf with annotations i am using the 2.0.0-snapshot version deployed on the 23rd of december. when i try to render the attached pdf, i get the following error: java.io.ioexception: expected 'font' dictionary but found 'subtype' at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:51) ~[pdfbox-2.0.0-20141223.230019-865.jar:?] at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:91) ~[pdfbox-2.0.0-20141223.230019-865.jar:?] at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:50) ~[pdfbox-2.0.0-20141223.230019-865.jar:?] at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:809) ~[pdfbox-2.0.0-20141223.230019-865.jar:?] at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:471) ~[pdfbox-2.0.0-20141223.230019-865.jar:?] at org.apache.pdfbox.contentstream.pdfstreamengine.processannotation(pdfstreamengine.java:312) ~[pdfbox-2.0.0-20141223.230019-865.jar:?] at org.apache.pdfbox.contentstream.pdfstreamengine.showannotation(pdfstreamengine.java:390) ~[pdfbox-2.0.0-20141223.230019-865.jar:?] at org.apache.pdfbox.rendering.pagedrawer.showannotation(pagedrawer.java:776) ~[pdfbox-2.0.0-20141223.230019-865.jar:?] at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:167) ~[pdfbox-2.0.0-20141223.230019-865.jar:?] at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:204) ~[pdfbox-2.0.0-20141223.230019-865.jar:?] at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:137) ~[pdfbox-2.0.0-20141223.230019-865.jar:?] at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:70) ~[pdfbox-2.0.0-20141223.230019-865.jar:?] i tried to render the same pdf with the 1.8.7 version and it works. there seems to be a regression.",
        "label": 1
    },
    {
        "text": "java lang nullpointerexception on trying to set value for pdtextbox in pdf file  when trying to set value for a field in pdf using, pddocument pdf = pddocument.load(<pdffilename>); pddocumentcatalog doccatalog = pdf.getdocumentcatalog(); pdacroform acroform = doccatalog.getacroform(); pdtextbox t = (pdtextbox) acroform.getfield(<fieldname>); t.setvalue(<somevalue>); got following exception : java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.common.cosdictionarymap.put(cosdictionarymap.java:106) at org.apache.pdfbox.pdmodel.interactive.form.pdappearance.getfontandupdateresources(pdappearance.java:440) at org.apache.pdfbox.pdmodel.interactive.form.pdappearance.setappearancevalue(pdappearance.java:268) at org.apache.pdfbox.pdmodel.interactive.form.pdvariabletext.setvalue(pdvariabletext.java:131) at qs.common.generatereports.generatebidderdeclaration_obs_05_105(generatereports.java:71) source of the exception : nullpointerexception thrown at retval = (pdfont)formresources.getfonts().get( fontname ); in org.apache.pdfbox.pdmodel.interactive.form.pdappearance tried suggestion from following link : http://mail-archives.apache.org/mod_mbox/pdfbox-dev/201108.mbox/%3cbe54ce7a716a7247b1d3bf9d9c187ced0843e2a8@som-teaqasmail1.som.w2k.state.me.us%3e i.e. intruduced a try-catch for retval = (pdfont)formresources.getfonts().get( fontname ); resolved the issue for me as well. also, i had to add try-catch for following : printwriter.println(gettextposition(boundingbox, pdfont, fontsize, tokens)); as gettextposition() is throwing ioexception as the pdfont is null. creating this issue so that the bug is documented and would like to see the change in upcoming releases. shall attach the jar file that contains the changes which resolved the issue.",
        "label": 8
    },
    {
        "text": "getstringwidth is terribly slow  and resulting document is invalid  i'm maintaining a pdf layout engine that makes heavy use of \"getstringwidth\". with pdfbox 2.0.0 this got much slower. so please find attached an example which you can use for profiling purposes. i used \"opensans\" ttf as the basis (grab it at https://github.com/google/fonts/tree/master/apache/opensans). beside it being slow, the created pdf cannot be opened (but this may have something to do with pdfbox-2945 in rc2???)",
        "label": 1
    },
    {
        "text": "v2 still has hardcoded reference to bouncycastleprovider it seems that pdfbox v2.0.6 still has a hardcoded reference to bouncycastleprovider, though release note says it was removed. pdfbox-2963 - remove bouncy castle provider reference public final class securityhandlerfactory {     /** singleton instance */     public static final securityhandlerfactory instance = new securityhandlerfactory();     static     {         security.addprovider(new bouncycastleprovider());     } is it as expected that the following modification was only committed to trunk and not committed to 2.0 branch? https://svn.apache.org/viewvc?view=revision&revision=1789414 i use pdfbox v2.0.5 to parse a pdf file, but don't want it to add dependency to bouncy castle because it globally register a provider instance.",
        "label": 1
    },
    {
        "text": "wrong color space used for devicen operator without color space specified i have a pdf that uses a devicen color space, but when using the pdftoimage utility i noticed that some of the text comes out as cyan. i tracked the issue down to when the scn or scn operator is used without setting the color space explicitly (ie using the current color space). i have attached a patch which resolves the issue by reinstating the original (devicen) color space after using the alternate color space, otherwise the alternate color space (in this case cmyk) was seen as the current color space and the attribute of 1 for the scn operator, which was meant for the devicen color space, is used in the cmyk color space resulting in the cyan. i have also attached an example pdf and the result for the pdftoimage conversion.",
        "label": 1
    },
    {
        "text": "pdftextstripperbyarea dies on chinese japanese files i'm using pdftextstripperbyarea, this code makes it die: stripper.extractregions(page); assuming, the language is chinese or japanese, that's the error: =========== oct 19, 2018 1:24:50 am org.apache.pdfbox.pdmodel.font.pdfont getspacewidth severe: can't determine the width of the space character, assuming 250 java.io.ioexception: unexpected end of stream at org.apache.pdfbox.pdmodel.font.pdtype3charproc.getwidth(pdtype3charproc.java:170) at org.apache.pdfbox.pdmodel.font.pdtype3font.getwidthfromfont(pdtype3font.java:165) at org.apache.pdfbox.pdmodel.font.pdfont.getspacewidth(pdfont.java:547) at org.apache.pdfbox.text.legacypdfstreamengine.showglyph(legacypdfstreamengine.java:265) at org.apache.pdfbox.contentstream.pdfstreamengine.showtext(pdfstreamengine.java:734) at org.apache.pdfbox.contentstream.pdfstreamengine.showtextstring(pdfstreamengine.java:595) ========= should i use something else instead of pdftextstripperbyarea? let me know if more information needed. i attached the pdf file.output.pdf ==== to reproduce use the attached  above output.pdf and the standard pdfbox app:  java -jar pdfbox-app-2.0.12.jar extracttext output.pdf   ",
        "label": 11
    },
    {
        "text": "pagedrawer does not take the full cropbox into account a client sent me a pdf which was basically a double-sided page of which only the right side was shown by the cropbox. but pdfbox displayed the left side in the pdfreader. i've created a minimal test case with fop and a hex editor showing the problem. it seems as if the pagedrawer doesn't take the full cropbox information into account when painting the page.",
        "label": 5
    },
    {
        "text": "character rendered at wrong position there is a regression produced by one of the (otherwise successful) changes of this weekend / monday. when rendering the file of pdfbox-1608, one character is at the wrong position. it is the star below the text \"tuscan white bean salad\", somewhat in the middle of the image, below the green text \"soups and side salad\". (the second \"vegan modification\" in that section) that star is too much on the left. this worked fine on monday before the changes. to be sure that it isn't because of my own non committed changes, i checked out a \"clean\" 2.0 version and copied the pdf file in the pdfbox\\src\\test\\resources\\input\\rendering directory and looked at the pdfbox\\target\\test-output directory.",
        "label": 1
    },
    {
        "text": "failed to create type1c font  falling back to type1 font multiple errors which are probably all related. failed to create type1c font. falling back to type1 font java.lang.illegalargumentexception at org.apache.fontbox.cff.cffparser.readcharset(cffparser.java:512) at org.apache.fontbox.cff.cffparser.parsefont(cffparser.java:320) at org.apache.fontbox.cff.cffparser.parse(cffparser.java:66) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:299) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) failed to create type1c font. falling back to type1 font java.awt.geom.illegalpathstateexception: missing initial moveto in path definition at java.awt.geom.path2d$float.needroom(path2d.java:263) at java.awt.geom.path2d.closepath(path2d.java:1752) at org.apache.fontbox.cff.charstringrenderer.closepath(charstringrenderer.java:175) at org.apache.fontbox.cff.charstringrenderer.handlecommand(charstringrenderer.java:82) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:46) at org.apache.fontbox.cff.charstringrenderer.render(charstringrenderer.java:48) at org.apache.fontbox.cff.afmformatter.renderfont(afmformatter.java:126) at org.apache.fontbox.cff.afmformatter.printfontmetrics(afmformatter.java:64) at org.apache.fontbox.cff.afmformatter.printfont(afmformatter.java:57) at org.apache.fontbox.cff.afmformatter.format(afmformatter.java:50) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.preparefontmetric(pdtype1cfont.java:505) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:382) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) failed to create type1c font. falling back to type1 font java.awt.geom.illegalpathstateexception: missing initial moveto in path definition at java.awt.geom.path2d$float.needroom(path2d.java:263) at java.awt.geom.path2d.closepath(path2d.java:1752) at org.apache.fontbox.cff.charstringrenderer.closepath(charstringrenderer.java:175) at org.apache.fontbox.cff.charstringrenderer.handlecommand(charstringrenderer.java:82) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:46) at org.apache.fontbox.cff.charstringrenderer.render(charstringrenderer.java:48) at org.apache.fontbox.cff.afmformatter.renderfont(afmformatter.java:126) at org.apache.fontbox.cff.afmformatter.printfontmetrics(afmformatter.java:64) at org.apache.fontbox.cff.afmformatter.printfont(afmformatter.java:57) at org.apache.fontbox.cff.afmformatter.format(afmformatter.java:50) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.preparefontmetric(pdtype1cfont.java:505) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:382) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) failed to create type1c font. falling back to type1 font java.awt.geom.illegalpathstateexception: missing initial moveto in path definition at java.awt.geom.path2d$float.needroom(path2d.java:263) at java.awt.geom.path2d.closepath(path2d.java:1752) at org.apache.fontbox.cff.charstringrenderer.closepath(charstringrenderer.java:175) at org.apache.fontbox.cff.charstringrenderer.handlecommand(charstringrenderer.java:82) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:46) at org.apache.fontbox.cff.charstringrenderer.render(charstringrenderer.java:48) at org.apache.fontbox.cff.afmformatter.renderfont(afmformatter.java:126) at org.apache.fontbox.cff.afmformatter.printfontmetrics(afmformatter.java:64) at org.apache.fontbox.cff.afmformatter.printfont(afmformatter.java:57) at org.apache.fontbox.cff.afmformatter.format(afmformatter.java:50) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.preparefontmetric(pdtype1cfont.java:505) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:382) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) failed to create type1c font. falling back to type1 font java.lang.indexoutofboundsexception: index: 1,size: 1 at java.util.sublist.rangecheck(abstractlist.java:746) at java.util.sublist.get(abstractlist.java:619) at org.apache.fontbox.cff.charstringconverter.drawcurve(charstringconverter.java:344) at org.apache.fontbox.cff.charstringconverter.handletype2command(charstringconverter.java:225) at org.apache.fontbox.cff.charstringconverter.handlecommand(charstringconverter.java:76) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:46) at org.apache.fontbox.cff.charstringconverter.convert(charstringconverter.java:59) at org.apache.fontbox.cff.cfffont$mapping.totype1sequence(cfffont.java:305) at org.apache.fontbox.cff.afmformatter.renderfont(afmformatter.java:126) at org.apache.fontbox.cff.afmformatter.printfontmetrics(afmformatter.java:64) at org.apache.fontbox.cff.afmformatter.printfont(afmformatter.java:57) at org.apache.fontbox.cff.afmformatter.format(afmformatter.java:50) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.preparefontmetric(pdtype1cfont.java:505) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:382) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) failed to create type1c font. falling back to type1 font java.lang.illegalargumentexception at org.apache.fontbox.cff.cffparser.readcharset(cffparser.java:512) at org.apache.fontbox.cff.cffparser.parsefont(cffparser.java:320) at org.apache.fontbox.cff.cffparser.parse(cffparser.java:66) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:299) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) failed to create type1c font. falling back to type1 font java.lang.illegalargumentexception at org.apache.fontbox.cff.cffparser.readcharset(cffparser.java:512) at org.apache.fontbox.cff.cffparser.parsefont(cffparser.java:320) at org.apache.fontbox.cff.cffparser.parse(cffparser.java:66) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:299) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) failed to create type1c font. falling back to type1 font java.lang.illegalargumentexception at org.apache.fontbox.cff.cffparser.readcharset(cffparser.java:512) at org.apache.fontbox.cff.cffparser.parsefont(cffparser.java:320) at org.apache.fontbox.cff.cffparser.parse(cffparser.java:66) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:299) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619)",
        "label": 1
    },
    {
        "text": "can't get images from a pdf this is a regression. in 1.4.0 i was able to extract images from a pdf file. in 1.6 and the current trunk i get exceptions: severe: java.lang.illegalargumentexception: raster bytepackedraster: width = 1000 height = 32 #channels 1 xoff = 0 yoff = 0 is incompatible with colormodel indexcolormodel: #pixelbits = 1 numcomponents = 3 color space = java.awt.color.icc_colorspace@1050169 transparency = 1 transindex = -1 has alpha = false isalphapre = false java.lang.illegalargumentexception: raster bytepackedraster: width = 1000 height = 32 #channels 1 xoff = 0 yoff = 0 is incompatible with colormodel indexcolormodel: #pixelbits = 1 numcomponents = 3 color space = java.awt.color.icc_colorspace@1050169 transparency = 1 transindex = -1 has alpha = false isalphapre = false at java.awt.image.bufferedimage.<init>(bufferedimage.java:611) at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdpixelmap.java:252) at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.write2outputstream(pdpixelmap.java:289) at org.apache.pdfbox.testgovdocs148902.test148902(testgovdocs148902.java:58) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:39) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:25) at java.lang.reflect.method.invoke(method.java:597) at junit.framework.testcase.runtest(testcase.java:168) at junit.framework.testcase.runbare(testcase.java:134) at junit.framework.testresult$1.protect(testresult.java:110) at junit.framework.testresult.runprotected(testresult.java:128) at junit.framework.testresult.run(testresult.java:113) at junit.framework.testcase.run(testcase.java:124) at junit.framework.testsuite.runtest(testsuite.java:232) at junit.framework.testsuite.run(testsuite.java:227) at org.junit.internal.runners.junit38classrunner.run(junit38classrunner.java:83) at org.eclipse.jdt.internal.junit4.runner.junit4testreference.run(junit4testreference.java:49) at org.eclipse.jdt.internal.junit.runner.testexecution.run(testexecution.java:38) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:467) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:683) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.run(remotetestrunner.java:390) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.main(remotetestrunner.java:197) http://domex.nps.edu/corp/files/govdocs1/148/148902.pdf i pasted it into the src/test/resources/pdfparser folder and run a test case like this: public class testgovdocs148902 extends testcase { public void test148902() throws ioexception { pddocument doc = pddocument.load( \"src/test/resources/pdfparser/148902.pdf\"); int imagecounter = 0; cosdocument cosdoc = doc.getdocument(); list<cosobject> list = cosdoc.getobjectsbytype(cosname.xobject); for (cosobject cosob : list) { cosbase baseobject = cosob.getobject(); if (baseobject != null && baseobject instanceof cosstream) { cosstream st = (cosstream)baseobject; string subtype = st.getnameasstring(cosname.subtype); if (subtype != null && subtype.equalsignorecase(\"image\")) { pdxobjectimage ximage = (pdxobjectimage)pdxobject.createxobject( st ); if (ximage != null && ximage.getwidth() >= 5 && ximage.getheight() >= 5) { bytearrayoutputstream baos = new bytearrayoutputstream(); ximage.write2outputstream(baos); byte [] bytes = baos.tobytearray(); if (bytes.length > 0) { imagecounter++; } } } } } assertequals(32, imagecounter); } } the test cases passes in 1.4.",
        "label": 1
    },
    {
        "text": "could not find referenced cmap stream h the pdftextstripperbyarea.extractregions fails for the first page of the attached document. java.io.ioexception: error: could not find referenced cmap stream h at org.apache.fontbox.cmap.cmapparser.getexternalcmap(cmapparser.java:415) at org.apache.fontbox.cmap.cmapparser.parsepredefined(cmapparser.java:87) at org.apache.pdfbox.pdmodel.font.cmapmanager.getpredefinedcmap(cmapmanager.java:54) at org.apache.pdfbox.pdmodel.font.pdtype0font.readencoding(pdtype0font.java:181) at org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:129) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:83) at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:123) at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:815) at com.geensoft.traceability.converters.pdf.strippers.areastripper.processoperator(areastripper.java:324) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:472) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:446) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149) at org.apache.pdfbox.text.pdftextstreamengine.processpage(pdftextstreamengine.java:136) at org.apache.pdfbox.text.pdftextstripper.processpage(pdftextstripper.java:391) at org.apache.pdfbox.text.pdftextstripperbyarea.extractregions(pdftextstripperbyarea.java:132)",
        "label": 1
    },
    {
        "text": "pdf files with unusual japanese font can not be rewrite correctly while rotate attached pdf file, the japanese characters cannot display in the output pdf file. this problem can also occur when marge pdf files. we suspect that this caused by the name of font type. environment ------------------------------------------------- os : windows 7 (32bit) jvm : 1.6 pdfbox: 1.8.5 ------------------------------------------------- code to reproduce the problem ------------------------------------------------- public static void main(string[] args) { string filepath = \"d:\\\\test landscape.pdf\"; string newpdffile = \"d:\\\\test new_landscape.pdf\"; try { pddocument rotateddocument = pddocument.load(filepath); pddocument document = new pddocument(); int pagenumber = document.getnumberofpages(); for (int i=0; i<pagenumber; i++) { pdpage page = (pdpage)document.getdocumentcatalog().getallpages().get(i); page.setrotation(-90); rotateddocument.addpage(page); } rotateddocument.save(newpdffile); document.close(); rotateddocument.close(); } catch (exception e) { e.printstacktrace(); } } -------------------------------------------------",
        "label": 11
    },
    {
        "text": "false paragraph caused by superscript  regression  on the attached minimal example document, text extraction seems to be confused by the superscript, and generates three paragraphs where there is only one. note that 1.6 is processing this case well: $ java -jar /dev/shm/pdfbox-app-1.6.0.jar extracttext /tmp/superscript.pdf jun 29, 2012 4:52:24 pm org.apache.pdfbox.pdfparser.pdfparser parseobject warning: expected='%%eof' actual='5 0 obj ' $ cat /tmp/superscript.txt     multiple synthetic routes have been described by r. filler et al.11 regarding 1,3- bis(perfluorophenyl)propane-1,3-dione.  the synthesis and      $ java -jar /dev/shm/pdfbox-app-1.7.0.jar extracttext /tmp/superscript.pdf  jun 29, 2012 4:52:39 pm org.apache.pdfbox.pdfparser.pdfparser parseobject warning: expected='%%eof' actual='5 0 obj ' $ cat /tmp/superscript.txt                                                     multiple synthetic routes have been described by r. filler et al. 11  regarding 1,3- bis(perfluorophenyl)propane-1,3-dione.  the synthesis and     ",
        "label": 1
    },
    {
        "text": "stream parsing performance improvement   patch stream parsing is one of the critical parts looked from a performance point of view since typically most data is stored in streams. while pdfbox already got some speedup some time ago in the method copying stream data from file to random access buffer (baseparser#readuntilendstream) there is some room for improvement. the problem with the current implementation is the byte wise reading and writing of the data. i have rewritten the method using byte arrays for io and optimized the number of needed comparisons for finding 'endstream'/'endobj'. this results in 7-8 times faster parsing of streams and a 3-4 times faster parsing of a normal 10 page pdf. see the attached file which is a drop in replacement for the readuntilendstream method in baseparser.",
        "label": 1
    },
    {
        "text": "helvetica in pdf a   warn in pdtype1font java about licensing issues pdtype1font.java has a predefined list of fonts like times-roman, helvetica, courier, symbol and zapfdingbats. when creating a pdf/a, the font is embedded and not taken from the reader's operating system. as per https://de.wikipedia.org/wiki/helvetica_(schriftart) , this may lead to a licensing issue. suggestions: 1) use a free font such as https://de.wikipedia.org/wiki/nimbus_sans_l instead 2) at least warn in javadoc about the issue or is it an non-issue?",
        "label": 8
    },
    {
        "text": "decryption fails when metadata not encrypted but encryptmetadata is true default  parsing with either the top-down or bottom-up parser fails for encrypted document whose metadata is not encrypted but whose encryptmetadata flag is true or missing (defaults to true). the document should set encryptmetadata false, but, unfortunately, does not.",
        "label": 11
    },
    {
        "text": "throwing exception when pdf has unused empty fonts embedded  i was trying to follow up on the issues in our system and found that some pdf files threw errors. these pdfs are produced by a publishing system and that system seems to add fonts when you change to them and add them even though they are never used. or only space is used. then they add this font with an empty glyf table. this results in that errors are thrown on files that are fine. line 310 in ttfparser removes empty glyf tables. // skip tables with zero length if (table.getlength() == 0) { return null; } return table; line 215 of ttfparser throws exception when glyf table is missing. if (font.getglyph() == null) { throw new ioexception(\"glyf is mandatory\"); }",
        "label": 11
    },
    {
        "text": "java io ioexception  error  unknown annotation type null hi, i've come across the following exception on a very small number of documents: org.apache.tika.exception.tikaexception: unable to extract pdf content at org.apache.pdfbox.tika.pdf2xhtml.process(pdf2xhtml.java:80) ~[extractor.jar:na] at org.apache.pdfbox.tika.pdfparser.parse(pdfparser.java:116) ~[extractor.jar:na] at org.apache.tika.parser.compositeparser.parse(compositeparser.java:242) ~[extractor.jar:na] at org.apache.tika.parser.compositeparser.parse(compositeparser.java:242) ~[extractor.jar:na] at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:120) ~[extractor.jar:na] caused by: java.io.ioexception: error: unknown annotation type null at org.apache.pdfbox.pdmodel.interactive.annotation.pdannotation.createannotation(pdannotation.java:165) ~[extractor.jar:na] at org.apache.pdfbox.pdmodel.pdpage.getannotations(pdpage.java:785) ~[extractor.jar:na] at org.apache.pdfbox.tika.pdf2xhtml.endpage(pdf2xhtml.java:142) ~[extractor.jar:na] at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:450) ~[extractor.jar:na] at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:372) ~[extractor.jar:na] at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:328) ~[extractor.jar:na] at org.apache.pdfbox.tika.pdf2xhtml.process(pdf2xhtml.java:63) ~[extractor.jar:na] here are a few examples: http://www.jdsupra.com/documents/01ece854-a961-4184-8de7-f6d5311d6a48.pdf http://www.jdsupra.com/documents/0aabecb4-094a-40e4-a507-8b49ecb90a3e.pdf http://www.jdsupra.com/documents/0d74ccf8-2d57-487d-88c2-98eee26f8236.pdf thanks",
        "label": 1
    },
    {
        "text": "javax crypto badpaddingexception  given final block not properly padded i get the following stack trace when trying to parse certain pdfs: org.apache.pdfbox.preflight.exception.syntaxvalidationexception         at org.apache.pdfbox.preflight.parser.preflightparser.parse(preflightparser.java:203)         at org.apache.pdfbox.preflight.parser.preflightparser.parse(preflightparser.java:180)         at org.apache.pdfbox.preflight.parser.preflightparser.parse(preflightparser.java:168)         at pdfboxtest.main(hello.java:11) caused by: org.apache.pdfbox.exceptions.wrappedioexception         at org.apache.pdfbox.pdmodel.encryption.securityhandler.encryptdata(securityhandler.java:376)         at org.apache.pdfbox.pdmodel.encryption.securityhandler.decryptstring(securityhandler.java:578)         at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.decryptstring(nonsequentialpdfparser.java:1571)         at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.decryptdictionary(nonsequentialpdfparser.java:1535)         at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.decrypt(nonsequentialpdfparser.java:1596)         at org.apache.pdfbox.preflight.parser.preflightparser.parseobjectdynamically(preflightparser.java:797)         at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parseobjectdynamically(nonsequentialpdfparser.java:1343)         at org.apache.pdfbox.preflight.parser.preflightparser.initialparse(preflightparser.java:273)         at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parse(nonsequentialpdfparser.java:886)         at org.apache.pdfbox.preflight.parser.preflightparser.parse(preflightparser.java:198)         ... 3 more caused by: javax.crypto.badpaddingexception: given final block not properly padded         at com.sun.crypto.provider.ciphercore.dofinal(ciphercore.java:966)         at com.sun.crypto.provider.ciphercore.dofinal(ciphercore.java:824)         at com.sun.crypto.provider.aescipher.enginedofinal(aescipher.java:436)         at javax.crypto.cipher.dofinal(cipher.java:2004)         at org.apache.pdfbox.pdmodel.encryption.securityhandler.encryptdata(securityhandler.java:352)         ... 12 more the parsing code looks something like: filedatasource fd = new filedatasource(\"i-129.pdf\"); preflightparser parser = new preflightparser(fd); parser.parse();",
        "label": 11
    },
    {
        "text": "inline image mask does not mask the attached pdf has an inline image that looks like a \"g\" and only the black color should render on the colored background. however there is some white within the image instead of the background, despite having \"/im true\" within bi and ei.",
        "label": 6
    },
    {
        "text": "classcastexception in cosparser bfsearchfortrailer java.lang.classcastexception: org.apache.pdfbox.cos.cosinteger cannot be cast to org.apache.pdfbox.cos.cosobject     org.apache.pdfbox.pdfparser.cosparser.bfsearchfortrailer(cosparser.java:1668)     org.apache.pdfbox.pdfparser.cosparser.rebuildtrailer(cosparser.java:2110)     org.apache.pdfbox.pdfparser.cosparser.retrievetrailer(cosparser.java:246)     org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:189)     org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:240) this worked in 2.0.6.",
        "label": 1
    },
    {
        "text": "getting image with black background when converting from pdf to image  everytime i try to conver a pdf file with a graphic on it, to image (png) i get a black background beneath the graphic, where the background is white originally, here's my code: pddocument document = pddocument.load(new file(\"c:\\\\export_settings testreport.pdf\")); list<pdpage> pages = document.getdocumentcatalog().getallpages(); for (int i = 0; i < pages.size(); i++) { pdpage singlepage = pages.get(i); bufferedimage buffimage = singlepage.converttoimage(); imageio.write(buffimage, \"png\", new file(\"c:\\\\export_settings\\\\page\" + i + \".png\")); } the image quality is good, except for this, i tried with two different methos but i got the same result, please help me, thanks!",
        "label": 1
    },
    {
        "text": "error printing document java lang arrayindexoutofboundsexception  hello i'm trying to print pdf using pdfbox (2.0.0) with fontbox (2.0.0) but unsuccessfully. i think there is problem with font substitution. i'm attaching pdf file, log, and source code.",
        "label": 1
    },
    {
        "text": "glyphs rendered in wrong width fonts rendered in wrong size. the cause is related to wrong values in the /widths table and this code in pagedrawer:             // stretch non-embedded glyph if it does not match the width contained in the pdf             if (!font.isembedded())             {                 float fontwidth = font.getwidthfromfont(code);                 if (fontwidth > 0 && // ignore spaces                         math.abs(fontwidth - displacement.getx() * 1000) > 0.0001)                 {                     float pdfwidth = displacement.getx() * 1000;                     at.scale(pdfwidth / fontwidth, 1);                 }             } i suspect that there must be another condition to skip the stretching, but i didn't find out which one.",
        "label": 11
    },
    {
        "text": "pddocumentinformation getcreationdate  throws ioexception [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1456836 originally submitted by nobody on 2006-03-23 02:26. for some pdf documents, i get this exception when calling pddocumentinformation.getcreationdate() : ---------------------- java.io.ioexception: error converting date:#t\u00e2\u00a90]4\u00e2\u00a8\u00e3\u00b8\u00e2\u00b9} 3?w%b\u00e3\u009d! at org.pdfbox.util.dateconverter.tocalendar (dateconverter.java:237) at org.pdfbox.util.dateconverter.tocalendar (dateconverter.java:134) at org.pdfbox.cos.cosdictionary.getdate (cosdictionary.java:704) at org.pdfbox.pdmodel.pddocumentinformation.getcreationdat e(pddocumentinformation.java:232) ----------------------- but when i view those pdf docs with acrobat reader, it has a valid, clean creation date (\"erstellt am: 07.12.2004 15:27:13\"). it also shoes \"1.4 (acrobat 5.x) as the pdf version - so a quiet old and common version. using pdfbox 0.7.2 with jdk 1.5.0_06. [comment on sourceforge] originally sent by nobody. logged in: no i found the reason: this occurs on any pdf that is secured with a password. i work around the problem by first checking the document via mypddocument.isencrypted(); if it is encrypted. if the result is true, i don't read the creation/modification date. perhaps a more intuitive exception should be thrown, something like documentencryptedexception ...",
        "label": 1
    },
    {
        "text": "allow rendering with different x and y scale hi, we want to render pdf pages with different x and y scales. but that is currently not supported. could this be added? i have created a pull request. please check: https://github.com/apache/pdfbox/pull/42",
        "label": 1
    },
    {
        "text": "convert to image problem i build maven repo for pdfbox 2.0 version from git. i need convert pdf to image. in pdf used font arial from windows but i get not readable image.",
        "label": 1
    },
    {
        "text": "handling of byte order mark with metadata fields pddocumentinformation e.g. getauthor() honors the byte order of the extracted string and removes the byte order mark signs. but if the extracted string does only contain the byte order mark signs the corresponding string \"\u00fe\u00ff\" is returned. is this the intended solution? i'd appreciate to remove the byte order mark signs also, if the extracted string does only contain these signs. problematic code: public string getstring()   {   if (this.bytes.length > 2)     {       if (((this.bytes[0] & 0xff) == 254) && ((this.bytes[1] & 0xff) == 255))       {         return new string(this.bytes, 2, this.bytes.length - 2, charsets.utf_16be);       }       if (((this.bytes[0] & 0xff) == 255) && ((this.bytes[1] & 0xff) == 254))       {         return new string(this.bytes, 2, this.bytes.length - 2, charsets.utf_16le);       }     }          return pdfdocencoding.tostring(this.bytes);   } attachment has an example pdf",
        "label": 11
    },
    {
        "text": "arrayindexoutofboundsexception in asciihexfilter fuzzing pdf loading with jqf triggered an arrayindexoutofboundsexception. java.lang.arrayindexoutofboundsexception: 172  at org.apache.pdfbox.filter.asciihexfilter.decode(asciihexfilter.java:83)  at org.apache.pdfbox.filter.filter.decode(filter.java:87)  at org.apache.pdfbox.cos.cosinputstream.create(cosinputstream.java:77)  at org.apache.pdfbox.cos.cosstream.createinputstream(cosstream.java:175)  at org.apache.pdfbox.cos.cosstream.createinputstream(cosstream.java:163)  at org.apache.pdfbox.pdfparser.pdfobjectstreamparser.<init>(pdfobjectstreamparser.java:55)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectstream(cosparser.java:977)  at org.apache.pdfbox.pdfparser.cosparser.retrievecosdictionary(cosparser.java:2277)  at org.apache.pdfbox.pdfparser.cosparser.searchfortraileritems(cosparser.java:2235)  at org.apache.pdfbox.pdfparser.cosparser.rebuildtrailer(cosparser.java:2216)  at org.apache.pdfbox.pdfparser.cosparser.retrievetrailer(cosparser.java:279)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:171)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:220)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1160)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1057)     ... the code used for fuzzing is pddocument.load(inputstream)",
        "label": 11
    },
    {
        "text": "while creating a signature  in some cases two same entries may ocure inside the acroform fields this can happen if the documentcatalog-acroform and the page-annotations share the same fields-array. the patched pddocument check if an entry exists and decide if it should be add.",
        "label": 1
    },
    {
        "text": " patch  two pdfont to create pdf documents in cjk and non iso languages i made two pdfont classes for creating pdf documents in cjk and non-iso-8859-1 languages. one is pdtype0cjkfont. this is for using cjk fonts included in the asian font package of adobe reader. this font doesn't require the target font at the time of creating pdf documentary. this font uses utf-16 as a text code and supports surrogate pair characters. the other is pdtype0unicodefont. this is for using truetype type0 font which can deal with any unicode characters like a arialunicodems. only the characters which are used actually in the document are embedde. realizing this, you have to call the pdtype0unicode.reloadfont() method just before closing pdpagecontentstream. i think this specification is ugly, but i could not thought of a suitable way to remove this spec. this font uses the original glyph code of the embedded font as a text code and supports surrogate pair characters too. example programs using these two fonts are also attached.",
        "label": 6
    },
    {
        "text": " loop in destinations  not detected by preflight the bavaria testsuite requests to detect \"contains loops in destinations\" in the attached file. i'm not sure what they mean, but pdf-tools detects this and we don't: the value of the key prev is 212 0 r but must be 0 0 r. the value of the key prev is 214 0 r but must be 0 0 r. the value of the key prev is 215 0 r but must be 214 0 r. the value of the key prev is 213 0 r but must be 212 0 r. the value of the key prev is 217 0 r but must be 0 0 r. the value of the key prev is 218 0 r but must be 217 0 r. the value of the key prev is 219 0 r but must be 218 0 r. the value of the key prev is 216 0 r but must be 213 0 r. the value of the key prev is 220 0 r but must be 216 0 r. the value of the key prev is 222 0 r but must be 0 0 r. the value of the key prev is 223 0 r but must be 222 0 r. the value of the key prev is 224 0 r but must be 223 0 r. the value of the key prev is 221 0 r but must be 220 0 r. the value of the key prev is 226 0 r but must be 0 0 r. the value of the key prev is 225 0 r but must be 221 0 r. the value of the key prev is 211 0 r but must be 0 0 r. the value of the key prev is 210 0 r but must be 0 0 r.",
        "label": 11
    },
    {
        "text": "tags not fully preserved when merging pdfs  when merging pdfs, 508 accessibility tags are only preserved on the first page of combined pdf. both pdfmergerutility.mergedocuments() and pdfmergerutility..appenddocument() exhibit this behavior. example file attached to bugzilla \"issue\".",
        "label": 1
    },
    {
        "text": "error  error getting header version   pdf  on a valid document on the attached document, which opens fine in adobe reader, the pddocument.load() method throws the following error: java.io.ioexception: error getting header version: %pdf--33 at org.apache.pdfbox.pdfparser.cosparser.parseheader(cosparser.java:1935) at org.apache.pdfbox.pdfparser.cosparser.parsepdfheader(cosparser.java:1853) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:245) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:957) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:913) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:861)",
        "label": 11
    },
    {
        "text": "correct calculation of type0font size  [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1469146 originally submitted by pedropuchalski on 2006-04-12 02:58. especially in org.pdfbox.pdmodel.interactive.form. pdappearance.calculatefontsize( pdfont pdfont, pdrectangle boundingbox, list tokens, list datokens ) method. i need it for correct insertion of data in pdf form's fields in pdappearance.setappearancevalue(string apvalue). soon i will upload some exemple files(i must preper them first). and i'll try to do it by myself, but it looks like hard thing to do",
        "label": 8
    },
    {
        "text": "negative array size exception when reading a string from a otf font ",
        "label": 1
    },
    {
        "text": "failure to extract dc description when the value is the node text i can not get the dc:description from the following xmpmeta: <x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"xmp core 4.4.0\"> <rdf:rdf xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"> <rdf:description rdf:about=\"\" xmlns:exif=\"http://ns.adobe.com/exif/1.0/\"> <exif:usercomment>exif</exif:usercomment> </rdf:description> <rdf:description rdf:about=\"\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\"> <dc:description>from xnviewmp 0.26</dc:description> </rdf:description> </rdf:rdf> </x:xmpmeta> but it works from this: <x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"xmp core 4.4.0-exiv2\"> <rdf:rdf xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"> <rdf:description rdf:about=\"\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\"> <dc:description> <rdf:alt> <rdf:li xml:lang=\"x-default\">dc:description</rdf:li> </rdf:alt> </dc:description> </rdf:description> </rdf:rdf> </x:xmpmeta> both of them are valid according to http://www.w3.org/rdf/validator/. my interpretation of http://dublincore.org/documents/dcmes-xml/ is that the first format should be ok for dublin core too. see attached unit test.",
        "label": 0
    },
    {
        "text": "crash when repeating flag is outside of range  running pdfbox to create images with a pdf with bad data the tool crashes and no image is rendered.",
        "label": 11
    },
    {
        "text": "java macos  debugger app does not start  nosuchmethodexception  it seems the debugger app wants to integrate nicely into macos and uses some private api for this. this worked fine with all java versions including 8, but does no longer work with 9. java 9 provides new apis for this, but till pdfbox can depend on java 9 (or the next lts java 11) it should at least catch this and not crash.... the application does not start, and instead displays a dialog with a stack trace. console output + stacktrace: warning: an illegal reflective access operation has occurred warning: illegal reflective access by org.apache.pdfbox.debugger.ui.osxadapter (file:/users/emmy/downloads/debugger-app-2.0.7.jar) to constructor com.apple.eawt.application() warning: please consider reporting this to the maintainers of org.apache.pdfbox.debugger.ui.osxadapter warning: use --illegal-access=warn to enable warnings of further illegal reflective access operations warning: all illegal access operations will be denied in a future release mac os x adapter could not talk to eawt: java.lang.runtimeexception: java.lang.nosuchmethodexception: com.apple.eawt.application.addapplicationlistener(com.apple.eawt.applicationlistener)     org.apache.pdfbox.debugger.ui.osxadapter.sethandler(osxadapter.java:171)     org.apache.pdfbox.debugger.ui.osxadapter.setfilehandler(osxadapter.java:137)     org.apache.pdfbox.debugger.pdfdebugger.initcomponents(pdfdebugger.java:301)     org.apache.pdfbox.debugger.pdfdebugger.<init>(pdfdebugger.java:182)     org.apache.pdfbox.debugger.pdfdebugger.main(pdfdebugger.java:1201) caused by: java.lang.nosuchmethodexception: com.apple.eawt.application.addapplicationlistener(com.apple.eawt.applicationlistener)     java.base/java.lang.class.getdeclaredmethod(class.java:2432)     org.apache.pdfbox.debugger.ui.osxadapter.sethandler(osxadapter.java:163)     org.apache.pdfbox.debugger.ui.osxadapter.setfilehandler(osxadapter.java:137)     org.apache.pdfbox.debugger.pdfdebugger.initcomponents(pdfdebugger.java:301)     org.apache.pdfbox.debugger.pdfdebugger.<init>(pdfdebugger.java:182)     org.apache.pdfbox.debugger.pdfdebugger.main(pdfdebugger.java:1201) to workaround this problem i have to run the debugger app using jdk 8. this is ok for now, but very annoying.",
        "label": 11
    },
    {
        "text": "the document's page tree contains an invalid node after removing some pages and saving the pddocument opening the document with adobe reader gives the following error. the document's page tree contains an invalid node the original document does not.",
        "label": 3
    },
    {
        "text": " patch  can't read the embedded type1 font java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage x.pdf severe: can't read the embedded type1 font java.io.ioexception: found token[kind=name, text=end] but expected literal severe: can't read the embedded type1 font java.io.ioexception: found token[kind=name, text=currentdict] but expected literal",
        "label": 11
    },
    {
        "text": "counting pages of a pdf gives outofmemoryerror i have a pdf ( 397 mb) and i am trying to count the pages. i am able to open the pdf with adobereader 9, but no with foxitreader. code: pddocument doc = null; file temp = null; randomaccessfile rand = null; int nr = 0; try { //create a temporary file needed by the pdfbox when dealing with pdfs really really large temp = new file(\"e:/temp.tmp\"); //using random access file needed for pdf really large rand = new randomaccessfile(temp,\"rw\"); doc = pddocument.load(file,rand); nr = doc.getnumberofpages(); } catch(exception e) { e.printstacktrace(); } got following exception: org.apache.pdfbox.exceptions.wrappedioexception at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:240) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1069) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1022) at pdfboxexample.gethugenroffiles(pdfboxexample.java:36) at pdfboxexample.main(pdfboxexample.java:258) caused by: java.lang.outofmemoryerror: java heap space at java.lang.abstractstringbuilder.<init>(abstractstringbuilder.java:45) at java.lang.stringbuffer.<init>(stringbuffer.java:79) at org.apache.pdfbox.pdfparser.baseparser.readstring(baseparser.java:1121) at org.apache.pdfbox.pdfparser.baseparser.parsecosstream(baseparser.java:402) at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:552) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:184) ... 4 more i attached the pdf.",
        "label": 12
    },
    {
        "text": "the english words are shown as symbols and wrongly displayed when i run the below piece of code in my server continuously it is creating the text with symbols and showing incorrect word. string fontfile = \"monika.ttf\"; string text=\"hello\"; float fontsize = 20; font font = null; try { font = font.createfont(font.truetype_font, sample.class.getclassloader() .getresource(fontfile).openstream()); font = font.derivefont(fontsize); } catch (exception e) { throw new ioexception(\"could not load truetypefont for file: \" + fontfile, e); } fontrendercontext fc = new fontrendercontext(null, true, true); rectangle2d bounds = font.getstringbounds(text, fc); int width = (int) bounds.getwidth(); int height = (int) bounds.getheight(); int maxwidth = 500; int maxheight = 50; int minfontsize = 20; while (width > (maxwidth - 2 *5) height > (maxheight - 2 * 5)) unknown macro: { if (fontsize <= minfontsize) { break; } fontsize--; font = font.derivefont(fontsize); bounds = font.getstringbounds(text, fc); width = (int) bounds.getwidth(); height = (int) bounds.getheight(); } int paddingwidth = 5; int paddingheight = 5; bufferedimage buffer = null; pddocument doc = new pddocument(); pdpage page = new pdpage(new pdrectangle(width + 2 * paddingwidth, height + 2 * paddingheight)); bufferedimage newbufferedimage = imageio.read(sample.class .getclassloader() .getresource(sample.get(\"image.blue.background\")) .openstream()); pdjpeg newimage = new pdjpeg(doc, newbufferedimage); pdfont pdffont = null; try { pdffont = pdtruetypefont.loadttf(doc, sample.class.getclassloader().getresource(fontfile).openstream()); } catch (exception e) { throw new ioexception( \"could not load pdtruetypefont for file: \" + fontfile, e); } pdpagecontentstream stream = new pdpagecontentstream(doc, page); stream.drawimage(newimage, 0, 0); stream.setnonstrokingcolor(color.black); stream.setstrokingcolor(color.black); stream.begintext(); stream.setfont(pdffont, fontsize); stream.movetextpositionbyamount(paddingwidth, (float) (height / 2.5 + paddingheight)); stream.drawstring(text); stream.endtext(); stream.close(); buffer = page.converttoimage(bufferedimage.type_int_rgb, 94); // convert image image to pdxobjectimage pdxobjectimage watermark = new pdjpeg(doc, buffer); @suppresswarnings(\"rawtypes\") list pages = doc.getdocumentcatalog().getallpages(); iterator iterator1 = pages.iterator(); pdpage page1=null; while(iterator1.hasnext()) { page1 = (pdpage) iterator1.next(); } pdpagecontentstream stream1 = new pdpagecontentstream(doc, page1, true, true); stream1.drawimage(watermark,50,60); stream1.close(); imageio.write(buffer, \"jpeg\", new file(\"/users/test/\"+\"text.jpeg\")); doc.close();",
        "label": 1
    },
    {
        "text": "nullpointerexception when saving document i am trying to fill out this form(official norwegian government form): http://www.nav.no/om+nav/skjemaer/arbeidsgiverskjemaer/l%c3%b8nn+og+personalskjemaer+for+din+bedrift+%28hr%29/yrkesskade/_attachment/1073746888?_ts=1271f676c80 my code looks as follows: public void setkode(inputstream inputstream, string value, outputstream output) throws ioexception, cosvisitorexception { pddocument pdfdocument = pddocument.load(inputstream); if (logger.isinfoenabled()) { logger.info(pdfdocument.getcurrentaccesspermission().tostring()); } pddocumentcatalog doccatalog = pdfdocument.getdocumentcatalog(); pdacroform acroform = doccatalog.getacroform(); pdfield field = acroform.getfield(\"beskrivelse\"); if (field != null) { field.setvalue(value); } else { system.err.println(\"no field found with name:\" + \"beskrivelse\"); } pdfdocument.save(output); } while trying to fill in the field \"beskrivelse\" (or any other field in this form) i get the following stacktrace: java.lang.nullpointerexception at java.io.filterinputstream.close(filterinputstream.java:155) at org.apache.pdfbox.pdfwriter.coswriter.dowritesignature(coswriter.java:688) at org.apache.pdfbox.pdfwriter.coswriter.visitfromdocument(coswriter.java:1039) at org.apache.pdfbox.cos.cosdocument.accept(cosdocument.java:456) at org.apache.pdfbox.pdfwriter.coswriter.write(coswriter.java:1360) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1121) at com.qmplus.pdftest.app.setkode(app.java:36) at com.qmplus.pdftest.apptest.test(apptest.java:35) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:39) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:25) at java.lang.reflect.method.invoke(method.java:597) at org.junit.runners.model.frameworkmethod$1.runreflectivecall(frameworkmethod.java:44) at org.junit.internal.runners.model.reflectivecallable.run(reflectivecallable.java:15) at org.junit.runners.model.frameworkmethod.invokeexplosively(frameworkmethod.java:41) at org.junit.internal.runners.statements.invokemethod.evaluate(invokemethod.java:20) at org.junit.internal.runners.statements.runbefores.evaluate(runbefores.java:28) at org.junit.runners.parentrunner.runleaf(parentrunner.java:263) at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:69) at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:48) at org.junit.runners.parentrunner$3.run(parentrunner.java:231) at org.junit.runners.parentrunner$1.schedule(parentrunner.java:60) at org.junit.runners.parentrunner.runchildren(parentrunner.java:229) at org.junit.runners.parentrunner.access$000(parentrunner.java:50) at org.junit.runners.parentrunner$2.evaluate(parentrunner.java:222) at org.junit.runners.parentrunner.run(parentrunner.java:292) at org.eclipse.jdt.internal.junit4.runner.junit4testreference.run(junit4testreference.java:50) at org.eclipse.jdt.internal.junit.runner.testexecution.run(testexecution.java:38) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:467) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:683) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.run(remotetestrunner.java:390) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.main(remotetestrunner.java:197) the funny thing is, the output is created and looks to my eyes fine...",
        "label": 1
    },
    {
        "text": "can't set destination of a pdoutlineitem to null because of the overloaded setdestination() method of pdoutlineitem it's not possible to set it to null and therefore remove the go to named destination action, like it is possible with pdoutlineitem.setaction(), for example. sample code: pdoutlineitem bookmark = doc.getdocumentcatalog().getdocumentoutline().getfirstchild(); bookmark.setdestination(null); // does not compile",
        "label": 1
    },
    {
        "text": "umlaut not rendered correctly in ttf composite glyph the dots above the \"u\" in the attached file are not rendered correctly. from looking at the points array, i think that the cause is not the calculation of the shape path itself (pdfbox-1435), it must be before, i.e. the calculation of the point coordinates that are used later for the shapes, done in glyfcompositedescript.getxcoordinate() or even deeper. the x coordinates from the \"u\" are between 80 and 640. the x coordinates of the two dots are between 406 and 587, i.e. the two dots are at the right: points: point(547,-729,oncurve,) point(640,-729,oncurve,) point(640,-217,oncurve,) point(640,-107,,) point(487,23,,) point(359,23,oncurve,) point(229,23,,) point(80,-106,,) point(80,-217,oncurve,) point(80,-729,oncurve,) point(173,-729,oncurve,) point(173,-217,oncurve,) point(173,-138,,) point(274,-59,,) point(359,-59,oncurve,) point(447,-59,,) point(547,-143,,) point(547,-217,oncurve,endofcontour) point(510,-881,oncurve,) point(510,-777,oncurve,) point(406,-777,oncurve,) point(406,-881,oncurve,endofcontour) point(587,-881,oncurve,) point(587,-777,oncurve,) point(483,-777,oncurve,) point(483,-881,oncurve,endofcontour) the font can be found here: http://ftp.gnu.org/gnu/freefont/freefont-ttf-20120503.zip",
        "label": 11
    },
    {
        "text": "document stream used a undefined font resource i can not find the font (f3) in resouces, but the content stream included the follow script bt /f3 8 tf et q bt /f3 8 tf 0 0 0.6275 rg 0 0 0.6275 rg 1 0 0 1 1 5.89 tm 8 tl (www.global-reports.com)tj ()' et q and then, some exceptions are threw. 15:25:19,985 warn [pdfstreamengine] java.io.ioexception: error: could not find font(cosname {f3}) in map={f2=org.apache.pdfbox.pdmodel.font.pdtype1font@18f5824} java.io.ioexception: error: could not find font(cosname{f3} ) in map= {f2=org.apache.pdfbox.pdmodel.font.pdtype1font@18f5824} at org.apache.pdfbox.util.operator.settextfont.process(settextfont.java:57) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:553) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:270) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:237) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:217) 15:25:19,985 warn [pdfstreamengine] java.lang.nullpointerexception java.lang.nullpointerexception at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:357) at org.apache.pdfbox.util.operator.showtext.process(showtext.java:45) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:553) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:270) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:237) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:217)",
        "label": 1
    },
    {
        "text": "pdfbox tmp files not deleted by cosparser when parsing pdfs, temporary files get created under the system temp directory (e.g. pdfbox6525369863339991063.tmp). all files created for each documents are always deleted except for one. so each document parsed adds a new tmp file that never gets deleted. that's likely due to a stream never closed. when processing many pdfs on linux in the same jvm instance, we get the crashing error: \"too many files open\". changing the max file handle on the os is not always an option. i was able to fix this by modifying the cosparser class to close a cosstream instance: cosparser.java, starting on line 312     private long parsexrefobjstream(long objbyteoffset, boolean isstandalone) throws ioexception     {         // ---- parse indirect object head         readobjectnumber();         readgenerationnumber();         readexpectedstring(obj_marker, true);         cosdictionary dict = parsecosdictionary();         cosstream xrefstream = parsecosstream(dict);         parsexrefstream(xrefstream, (int) objbyteoffset, isstandalone);         xrefstream.close();  // <--- *** new line ***         return dict.getlong(cosname.prev);     }",
        "label": 11
    },
    {
        "text": "no such element exception processing file java.util.nosuchelementexception at java.util.hashmap$hashiterator.nextnode(hashmap.java:1431) at java.util.hashmap$keyiterator.next(hashmap.java:1453) at java.util.collections.max(collections.java:669) at org.apache.fontbox.ttf.cmapsubtable.processsubtype6(cmapsubtable.java:354) at org.apache.fontbox.ttf.cmapsubtable.initsubtable(cmapsubtable.java:98) at org.apache.fontbox.ttf.cmaptable.read(cmaptable.java:84) at org.apache.fontbox.ttf.truetypefont.readtable(truetypefont.java:377) at org.apache.fontbox.ttf.ttfparser.parsetables(ttfparser.java:174) at org.apache.fontbox.ttf.ttfparser.parse(ttfparser.java:150) at org.apache.fontbox.ttf.ttfparser.parse(ttfparser.java:106) at org.apache.pdfbox.pdmodel.font.pdcidfonttype2.<init>(pdcidfonttype2.java:110) at org.apache.pdfbox.pdmodel.font.pdcidfonttype2.<init>(pdcidfonttype2.java:69) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createdescendantfont(pdfontfactory.java:125) at org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:128) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:83) at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:123) at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:815) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:472) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:446) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149) at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:187) at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:208) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:139) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:68) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:55)",
        "label": 1
    },
    {
        "text": "pdf to image  jpeg  conversion  incomplete output while converting pages of some pdfs to jpeg images (an image for each page), few components present in pdf (mostly images) goes missing from output images. other components are rendered correctly in jpegs with exception of the missing components. for example, in \"cloud.pdf\", image of author on page 1 of the pdf is not present in its corresponding jpeg image.",
        "label": 1
    },
    {
        "text": "accesspermission not applied using pdfbox 2.0.3 from maven repository. i modified a pdf with adobe pro to add editable fields that i can edit with pdfbox in java. everything works well but i wanted to set the document as read-only so people downloading the generated pdf could not change values. so i followed https://pdfbox.apache.org/2.0/cookbook/encryption.html but it's not working. here is my method https://gist.github.com/mgohin/b09fed91e7475c09326d1ae25686dcd1",
        "label": 11
    },
    {
        "text": "error in extracting some unicode characters hello all i am extracting text from pdf having unicode text but i think some characters are not supported in 0.7.0 version pls some one help me doing that",
        "label": 1
    },
    {
        "text": "add a settextrise  method to pdpagecontentstream seeing that the appendrawcommand() methods are deprecated, it is necessary for pdpagecontentstream to implement every pdf operator explicitly. this one is both simple and useful: public void settextrise(float rise) throws ioexception {     writeoperand(rise);     writeoperator(\"ts\"); }",
        "label": 11
    },
    {
        "text": "print the chinese character i have scenario like this, we are planning to write a pdf using the pdfbox jar, we are facing the issue of passing the chinese character but it fails and it will display as \"?\". please help me out of this. thanks, sivaraman",
        "label": 1
    },
    {
        "text": "preflight reports    body syntax error  just tried the pdf/a validation. it fails on the attached pdf with \"1.1 : body syntax error\". adobe preflight reports success for both pdf/a level a and pdf/a level b validation. pdf was created with plain libreoffice 3.5.2 (export as pdf, using pdf/a level a).",
        "label": 4
    },
    {
        "text": "pdoptionalcontentproperties setgroupenabled not working pdoptionalcontentproperties.setgroupenabled does not work properly, because it tries to remove the wrong object from the off/on dictionaries (the result of todictionary, instead of the original object, which can be a different instance so the remove method does not find it). the attached patch fixes this issue.",
        "label": 11
    },
    {
        "text": "remove redundant ioutils closequietly ioutils has 4 closequietly methods where one with closeable argument would do.",
        "label": 11
    },
    {
        "text": "text is pink file from pdfbox-234 java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage stb336.pdf",
        "label": 11
    },
    {
        "text": "classcastexception in fdf export we have some simple code extracting fdf from a pdf like pddocument pdf = pddocument.load(inputstream); pdacroform form = pdf.getdocumentcatalog().getacroform(); fdfdocument fdf = form.exportfdf(); everything was fine with previous versions of pdfbox (1.8.8 in particular) but version 1.8.10 throws an exception : java.lang.classcastexception: org.apache.pdfbox.pdmodel.interactive.annotation.pdannotationwidget cannot be cast to org.apache.pdfbox.pdmodel.interactive.form.pdfield  at org.apache.pdfbox.pdmodel.interactive.form.pdacroform.addfieldandchildren(pdacroform.java:168)  at org.apache.pdfbox.pdmodel.interactive.form.pdacroform.exportfdf(pdacroform.java:145) i join the sample pdf that was used for this test",
        "label": 8
    },
    {
        "text": "pdf consisting on one page with mb renders until the end of time using renderimagewithdpi i am using pdfbox 2.0.8 on a java vm 1.8.0_151 the attached and valid pdf should be rendered by calling bufferedimage bim = pdfrenderer.renderimagewithdpi(i, 50); but the rendering never ends - the only thing i see is this line repeating very often in the console: [finalizer] debug org.apache.pdfbox.io.scratchfilebuffer - scratchfilebuffer not closed! here is the code that is used to open the document and then start the rendering: pddocument document = pddocument.load(file, memoryusagesetting.setuptempfileonly()); try  {    pdfrenderer pdfrenderer = new pdfrenderer(document);    int numberofpages = document.getpages().getcount();    for (int i = 0; i < numberofpages; i++) {       bufferedimage bim = pdfrenderer.renderimagewithdpi(i, 50); [...] the line bufferedimage bim = pdfrenderer.renderimagewithdpi(i, 50); is never passed. i ran a test and have wait for 30 minutes to let it pass, but nothing happens. please advise what to do and how to solve the issue.",
        "label": 11
    },
    {
        "text": "how do you use chinese font ",
        "label": 1
    },
    {
        "text": "javascript after  eof fails parsing hi i was investigating a failure to parse and debugging the pdfbox code when i noticed in the pdf document that i can't forward at the end of the file this: %%eof^m ^m ^m <script type=\"text/javascript\">^m var gajshost = ((\"https:\" == document.location.protocol) ? \"https://ssl.\" : \"http://www.\");^m document.write(unescape(\"%3cscript src='\" + gajshost + \"google-analytics.com/ga.js' type='text/javascript'%3e%3c/script%3e\"));^m </script>^m <script type=\"text/javascript\">^m try {^m var pagetracker = _gat._gettracker(\"ua-7429935-1\");^m pagetracker._trackpageview();^m } catch(err) {}</script>^m ^m ^m so the document ends.. but there is more content.. basically some javascript. what the parser does is it gets to line 492 in org.apache.pdfbox.pdfparser.pdfparser isendoffile get's set to true, but because it's not the end of the actual stream.. it continues this was a fix in pdfbox-979. next time around in the loop it reads <script type=\"text/javascript\"> which i think it ignores.. then trys to read var twice as a number. then blows up.. so i've playing around thinking of sensible thing to do. but worried that i might introduce some other issue. i assume this is legal structure for a pdfdocument. it opens fine in a viewer.",
        "label": 1
    },
    {
        "text": "crash in kerning calculations a bug in the usage of the result of a binary search causes a crash in the calculation of kerning information. here's the patch: --- a/fontbox/src/main/java/org/apache/fontbox/ttf/kerningsubtable.java +++ b/fontbox/src/main/java/org/apache/fontbox/ttf/kerningsubtable.java @@ -292,7 +292,7 @@ public class kerningsubtable              index = arrays.binarysearch(pairs, searchrange, pairs.length, key, this);              if (index >= 0)              { -                return pairs[searchrange + index][2]; +                return pairs[index][2];              }              return 0;          } explanation: the searchrange parameter is passed to binarysearch(), but the result of binarysearch() is relative to the start of the array, not the passed-in start. so no need to add searchrange to the result. adding causes the indexing to go off the end of the array.",
        "label": 1
    },
    {
        "text": " pdmodel font pdfont  error  could not parse predefined cmap file for 'pdfxc indentity0 0' hi, when i am trying to upload a pdf document the following error is thrown in the tomcat.. i am using pdfbox-1.4.0.jar.. 17:29:33,465 error [pdmodel.font.pdfont] error: could not parse predefined cmap file for 'pdfxc-indentity0-0' please find the solution",
        "label": 1
    },
    {
        "text": "yellow box shown java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage image.pdf",
        "label": 11
    },
    {
        "text": "can't extract b w images from pdf i wrote a test application using org.apache.pdfbox.extractimages to... extract images as png. (this is the start of something bigger, which involves making a statistic about the content of over a million pages within pdf files) however all images i get are all black or all white when i test on our own pdf files. i did get correct images from a file that had color images. to extract, i tried page.converttoimage() and then writing with imageio.write(), but i also tried using pdfimagewriter, neither had success for b/w images. the sample pdf is not confidential; it does give a warning \"getrgbimage returned null\" but other pdfs that don't give the warning (but are confidential) also fail.",
        "label": 1
    },
    {
        "text": "cmap handling bug some cmap includes another cmap using the \"usecmap\" command in the cmap resource file. for example, \"etenms-b5-h\" includes \"eten-b5-h\" cmap. the command in resource file is \"/eten-b5-h usecmap\" the cmapparser does handle this case. please find the coding below: if (op.op.equals(usecmap)) {     literalname usecmapname = (literalname) previoustoken;     inputstream usestream = resourceloader.loadresource(resourceroot + usecmapname.name);     if (usestream == null)     {         throw new ioexception(\"error: could not find referenced cmap stream \" + usecmapname.name);     }     cmap usecmap = parse(resourceroot, usestream);     result.usecmap(usecmap); } but the usecmap method of cmap class doesn't copy the cidranges list from the child cmap. please find the coding below:     public void usecmap( cmap cmap )     {         this.codespaceranges.addall( cmap.codespaceranges );         this.singlebytemappings.putall( cmap.singlebytemappings );         this.doublebytemappings.putall( cmap.doublebytemappings );     } without the cidranges from the included cmap, pdfbox doesn't know a text can be solved by the cmap and return \"?\" finally. suggest to add the following coding to usecmap method of cmap class to solve the problem. this.cidranges.addall( cmap.cidranges);",
        "label": 6
    },
    {
        "text": "unable to add tif images  ccittfactory not working as used in the addimagetopdf example, the following line generates an error with tif image: pdimagexobject ximage = ccittfactory.createfromrandomaccess(document, new randomaccessfile(new file(imagepath), \"r\")); java.io.ioexception: stream was not read at org.apache.pdfbox.cos.cosstream.getdecoderesult(cosstream.java:235) at org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject.<init>(pdimagexobject.java:80) at org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject.<init>(pdimagexobject.java:70) at org.apache.pdfbox.pdmodel.graphics.image.ccittfactory.createfromrandomaccess(ccittfactory.java:50)",
        "label": 11
    },
    {
        "text": "multiline fields won't get rendered correctly if there are multiple paragraphs in field value i have problem with multiline fields in form filling. it seems that if i have value with newlines \"\\n\" rendering won't work correctly. every line seems to be rendered over previous line. e.g. value = \"1\\n2\\n3\\n4\" will be rendered so than every number are rendered over each other but what i'm expecting would be something like: 1 2 3 4",
        "label": 8
    },
    {
        "text": "is cosnumber mutable or immutable  i'm writing code to clone a pdpage as a deep copy. i'm trying to decide which objects are mutable and which are immutable. cosinteger is confusing. it has a factory method, which suggests there is some internal caching going on, but it also has a setvalue() method. caching makes sense for immutable objects. if it is caching values, then setvalue() should probably be deprecated or removed. * * proposed junit code: cosinteger original = cosinteger.get(1); cosinteger copy = cosinteger.get(1); copy.setvalue(5); assertequals(1l, original.longvalue());",
        "label": 1
    },
    {
        "text": "ioexception  negative seek offset in nonsequentialpdfparser exception in thread \"main\" java.io.ioexception: negative seek offset  at java.io.randomaccessfile.seek(native method)  at org.apache.pdfbox.io.randomaccessbufferedfileinputstream.seek(randomaccessbufferedfileinputstream.java:116)  at org.apache.pdfbox.io.pushbackinputstream.seek(pushbackinputstream.java:234)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.initialparse(nonsequentialpdfparser.java:492)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parse(nonsequentialpdfparser.java:1013)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:951)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:897)  at org.apache.pdfbox.tools.pdfreader.parsedocument(pdfreader.java:375)  at org.apache.pdfbox.tools.pdfreader.openpdffile(pdfreader.java:340)  at org.apache.pdfbox.tools.pdfreader.main(pdfreader.java:326)  at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:80) this happens with several malformed pdfs from the test set in tika-1442. these files (303385, 069020, 303385, 742141, 982996) all have some trash at the end.",
        "label": 1
    },
    {
        "text": "pdf to image  faint dim images pdftoimage.java pddocument document = null;         file file = new file(\"f:\\\\projects\\\\java\\\\pdfbox\\\\complete.pdf\");         document = pddocument.load( file );         try {             // retrieve image             bufferedimage bi = new pdfrenderer(document).renderimagewithdpi( 0 , 150, imagetype.rgb );             file outputfile = new file(\"saved0.png\");             imageio.write(bi, \"png\", outputfile);         } catch (ioexception e) {         }",
        "label": 11
    },
    {
        "text": "flatten ne positonne pas bien le 1er champs si image avant sur formulaire, avec une image et plusieurs champs textes, la m\u00e9thode flatten ne positionne pas bien le 1er champs de texte, car need translation est faux,  parce que la m\u00e9thode revolveneedstranslation    trouve un xobject, mais qui est une image, et pas un xform. il faut donc modifier cette m\u00e9thode pour prendre en compte aussi le cas des images  ",
        "label": 8
    },
    {
        "text": "maven dependency not resolveable agains central pdfbox depends on ant-nodeps version 1.7.1, this version isn't in central, either change the version to 1.8.1 or add the apache release repository (see https://repository.apache.org/content/repositories/releases/org/apache/ant/ant-nodeps/1.7.1/) to the parent pom.",
        "label": 1
    },
    {
        "text": "partial failure to render pdf the attached file has several issues when rendering: the long \"-\" symbol replaced (top right, after \"reiseart: g\u00fcltig f\u00fcr alle reisearten\") the \u20ac (euro) symbol replaced (top right, after \"maximaler reisepreis: \") the square (on win7) or bullet (on xp) symbol is replaced with a sum symbol the whole text is not rendered in the same font than in acrobat reader",
        "label": 1
    },
    {
        "text": "flatefilter java swallows exceptions  should rethrow  i just re-discovered an issue in flatefilter.java, which i mentioned quite a while ago on the mailinglist; and which was agreed to be an misfeature in flatefilter.java, at lines 115ff, we find this piece of code: try { // decoding not needed while ((amountread = decompressor.read(buffer, 0, math.min(mayread,buffer_size))) != -1) { result.write(buffer, 0, amountread); } } catch (outofmemoryerror exception) { // if the stream is corrupt an outofmemoryerror may occur log.error(\"stop reading corrupt stream\"); } catch (zipexception exception) { // if the stream is corrupt an outofmemoryerror may occur log.error(\"stop reading corrupt stream\"); } catch (eofexception exception) { // if the stream is corrupt an outofmemoryerror may occur log.error(\"stop reading corrupt stream\"); } which means these exceptions are discarded and not reported upstream to the caller. this is very infortunate, as the caller has no means to discover that text extraction is incomplete. i discovered this on troubleshooting alfresco dms, which uses pdfbox for indexing pdf documents - except an innocent log message, alfresco does not know that conversion has failed. proposed solution is to re-throw all 3 exceptions and let the caller handle the exceptions",
        "label": 1
    },
    {
        "text": "create flexible checkbox and radiobuttons example create an example with a checkbox and an example with radio buttons including an appearance stream. some time in the future, the ap creation logic could be reused to be integrated / called by pdbutton.updatebyvalue().",
        "label": 11
    },
    {
        "text": "exception when using preflight validation on pdf a 1b exception in thread \"main\" java.lang.numberformatexception: for input string: \"readonly\" at java.lang.numberformatexception.forinputstring(unknown source) at java.lang.integer.parseint(unknown source) at java.lang.integer.parseint(unknown source) at org.apache.pdfbox.preflight.font.util.type1parser.readcharstringelement(type1parser.java:276) at org.apache.pdfbox.preflight.font.util.type1parser.parsecharstringarray(type1parser.java:259) at org.apache.pdfbox.preflight.font.util.type1parser.parseeexecpart(type1parser.java:248) at org.apache.pdfbox.preflight.font.util.type1parser.decodeandparseeexecpart(type1parser.java:180) at org.apache.pdfbox.preflight.font.util.type1parser.parse(type1parser.java:167) at org.apache.pdfbox.preflight.font.descriptor.type1descriptorhelper.processfontfile1(type1descriptorhelper.java:134) at org.apache.pdfbox.preflight.font.descriptor.type1descriptorhelper.processfontfile(type1descriptorhelper.java:109) at org.apache.pdfbox.preflight.font.descriptor.fontdescriptorhelper.validate(fontdescriptorhelper.java:90) at org.apache.pdfbox.preflight.font.simplefontvalidator.processfontdescriptorvalidation(simplefontvalidator.java:76) at org.apache.pdfbox.preflight.font.simplefontvalidator.validate(simplefontvalidator.java:53) at org.apache.pdfbox.preflight.process.reflect.fontvalidationprocess.validate(fontvalidationprocess.java:58) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:67) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:45) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatefonts(resourcesvalidationprocess.java:82) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:65) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:67) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:45) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validateresources(singlepagevalidationprocess.java:142) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:76) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:67) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:45) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:49) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:41) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:67) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:79) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:147) at org.apache.pdfbox.preflight.validator_a1b.main(validator_a1b.java:58)",
        "label": 3
    },
    {
        "text": "pdftextstripper returns garbage characters this code pddocument document = pddocument.loadnonseq(new file(pdffilename), null); pdftextstripper pdftextstripper = new pdftextstripper(\"utf-8\"); pdftextstripper.setstartpage(1); pdftextstripper.setendpage(999); system.out.println(pdftextstripper.gettext(document)); returns this text when used with the file mentioned in pdfbox-1436 : === downloads stack welcome to mac os x snow leopard. the dock in snow leopard includes stacks, which you can use to quickly access mylx\\lu[s`\u0003\\zlk\u0003\u00e4slz\u0003huk\u0003 applications right from the dock. stacks are simple to create. just drag any folder to the right side of the dock and it becomes a stack. click a stack and it springs from the dock in either h\u0003mhu\u0003vy\u0003h\u0003nypk\u0015\u0003;v\u0003vwlu\u0003h\u0003\u00e4sl\u0003pu\u0003h\u0003z[hjr\u0013\u0003jspjr\u0003[ol\u0003 \u00e4sl\u0003vujl\u0015 mac os x snow leopard includes three premade stacks called documents, downloads, and applications @v\\\u0003vwlulk\u0003[opz\u0003\u00e4sl\u0003myvt\u0003[ol\u0003+v^usvhkz\u0003z[hjr\u0015\u0003 the downloads stack captures all of your internet downloads and puts them in one convenient location. files you download in safari, mail, and ichat go ypno[\u0003pu[v\u0003[ol\u0003+v^usvhkz\u0003z[hjr\u0015\u0003>olu\u0003h\u0003\u00e4sl\u0003\u00e4upzolz\u0003 kv^usvhkpun\u0013\u0003[ol\u0003z[hjr\u0003uv[p\u00e4lz\u0003`v\\\u0003i`\u0003iv\\ujpun\u0003huk\u0003 w[z\u0003[ol\u0003ul^\u0003\u00e4sl\u0003ypno[\u0003vu\u0003[vw\u0013\u0003zv\u0003p[\u00bbz\u0003lhz`\u0003[v\u0003\u00e4uk\u0015 stacks automatically display their contents in a fan or a grid based on the number of items in the stack. you can also view the stack as a list. if you prefer one style over the other, you can set the stack to always open in that style. :[hjrz\u0003pu[lsspnlu[s`\u0003zov^\u0003[ol\u0003tvz[\u0003ylsl]hu[\u0003p[ltz\u0003\u00e4yz[\u0013\u0003 or you can set the sort order so that the items you care about most always appear at the top of the stack. to customize a stack, position the pointer over the stack icon and hold down the mouse button until a menu appears. choose the settings you want from the menu. ;v\u0003yltv]l\u0003h\u0003\u00e4sl\u0003myvt\u0003 a stack, just open the stack and drag the item out to where you ^hu[\u0003p[\u0015\u0003;v\u0003klsl[l\u0003h\u0003\u00e4sl\u0013\u0003 move it to the trash. 0u\u0003mhj[\u0013\u0003^olu\u0003`v\\\u00bbyl\u0003 done reading this document, feel free to throw it out. documents downloads applications tm and \u00a9 2009 apple inc. all rights reserved. === the garbage characters are the same that were solved by the change in pdfbox-490, so its probably a similar cause.",
        "label": 1
    },
    {
        "text": "gouraud shading doesn't appear there is a gray gouraud shading on page 6 of the attached pdf file that does't appear. one cause is similar to a few other such examples, e.g. pdfbox-1947 and pdfbox-1968, although i don't know if it is a duplicate: the paint context object is created, but getraster() is never called.",
        "label": 11
    },
    {
        "text": "add support for aes256 encryption adobe 9 added support for aes 256 encryption. further information is available at http://www.adobe.com/content/dam/adobe/en/devnet/acrobat/pdfs/adobe_supplement_iso32000.pdf (specially 3.5.1) or iso 32000-2.",
        "label": 6
    },
    {
        "text": "type0 settings  registry and  ordering are not decrypted when writing document when re-writing a document with font descriptions, adobe reader is unable to display the fonts in the document. reader can display the fonts in the original document. the difference is that in the original document, the font descriptions are in lower object numbers than the font references; in the output document, the font descriptions are in higher object numbers than the font references. is there a quick way to re-order them? update: the pdf file in question is actually corrupt, but somehow modifying it with pdfbox causes it to no longer be readable with adobe reader. update: the position of the objects in the document is not important, and is not the issue. whether the file is corrupt or not according to preflight tools is not the issue. the problem is that the input document is encrypted, including the /registry and /ordering settings on the type0 font, and the output document is not, however the encrypted strings are copied verbatim to the output document, despite having decrypted copies in use for the cmap of the pdtype0font.",
        "label": 1
    },
    {
        "text": "pdfbox always sets the second part of documentid to the same value from coswriter.java lines 1268 (trunk) 1500 (1.8) cosstring firstid = missingid ? new cosstring( md5.digest() ) : (cosstring)idarray.get(0); cosstring secondid = new cosstring( md5.digest() ); notice that digest is called in both lines the javadoc for md5.digest() goes \"completes the hash computation by performing final operations such as padding. the digest is reset after this call is made.\" so, if missingid == true then the secondid will always be the hash of the empty string. acrobat reader uses this value for it's search index, as hinted at here https://stackoverflow.com/a/20201670",
        "label": 1
    },
    {
        "text": "support for pdpattern  colorspace  pdpattern is a special colorspace which provides a shading or a tiling pattern to be used for stroke or fill operations. at least one pdf generator is known to use this on occasion as a means of embedding images into pdfs (aspose.words)",
        "label": 1
    },
    {
        "text": "invalid memory access of location eip 968f5aa7  mac os x  hi, when i open the document test.pdf (attached to this issue) the application crashes and throws errors. in the debugger i can see the following message at the end: invalid memory access of location 00000000 eip=968f5aa7 in the logfile there are some errors like: 22.06.2009 16:17:26 org.apache.pdfbox.util.operator.setnonstrokingcolor process warnung: not supported colorspace pattern within operator scn 22.06.2009 16:17:26 org.apache.pdfbox.pdmodel.graphics.color.pdcolorspaceinstance createcolor schwerwiegend: java.io.ioexception: not implemented or 22.06.2009 16:17:26 org.apache.pdfbox.util.operator.pagedrawer.fillnonzerorule process warnung: not implemented i get the error with java 5 and 6. on a windows machine the error doesn't occur. other pdfs are working expect the one that i mentioned in issue pdfbox-484 where i have some display problems. does someone know a workaround for this \"invalid memory access\" error? regards marco",
        "label": 6
    },
    {
        "text": "grayscale images become inverted pdpixelmap.getrgbimage() inverts images. after debugging it appears that the inversion happens at the end, in applymasks(image); some more debugging info: bitspercomponent == 1 getimagemask() == true getcolorspace() == pddevicegray map == new byte[] {(byte)0xff} // used for indexcolormodel in imagemask(baseimage) this happens: graphics.setcolor(color.black); graphics.fillrect(0, 0, baseimage.getwidth(), baseimage.getheight()); // assume default values ([0,1]) for the decodearray // todo decodearray == [1,0] graphics.setcomposite(alphacomposite.dstin); graphics.drawimage(baseimage, null, 0, 0); graphics.dispose(); return stencilmask; i wish i could provide a sample file, but i have no sanitized data files.",
        "label": 11
    },
    {
        "text": "wrong stream length the file of pdfbox-2048 has a wrong encoded font length, it is 4412 in the pdf but it is really about 27350. this wrong length is used to read the encoded font stream and this results in further trouble (eof). the problem is that the wrong length is passed to createfilteredstream() instead of just calling it without parameters. in cosstream.dodecode() unfilteredstream = filteredstream (there is a fixme there!!!), and in dodecode(cosname filtername, int filterindex) unfilteredstream.getlength() is used, which returns the expectedlength.",
        "label": 11
    },
    {
        "text": "possible optimization of sampledimagereader from8bit by using interleavedraster i noticed sampledimagereader.from8bit assumed the source data to be interleaved, which means if the target raster uses an interleaved sample model, the data can by directly copied.  this can save 10-15% of total render time in files with large 8-bit images (tested on samples from pdfbox-2092 , pdfbox-3791 and the file \"gs-bugzilla690022.pdf\" from pdfbox-4151).  in pdfbox-2092 there is a discussion about how the sample model must be banded, but i couldn't find a place in the code that directly relies on this, and the few tests i have run did not reveal problems. perhaps the constraint is obsolete, or else it means custom sample models cannot be used? ",
        "label": 11
    },
    {
        "text": "do not discard underlying cause when creating validation error ",
        "label": 11
    },
    {
        "text": "loading ttf font files from the classpath currently (pdfbox 1.1.0 & 1.2.0 snapshot) ttf font files can only be loaded from the file system as pdtruetypefont exposes two load methods: public static pdtruetypefont loadttf(pddocument, string) public static pdtruetypefont loadttf(pddocument, file) the first wraps the string in a java.io.file object and delegates to the second, so all ttf reading is from the file system. it would be useful to be able to read ttf files from the classpath - or indeed from any arbitrary stream. could we have a third method?: public static pdtruetypefont loadttf(pddocument, inputstream) this would allow ttfs to be loaded like so: pdtruetypefont.load(mydoc, myclass.class.getclassloader().getresourceasstream(\"myfont.ttf\")); for what it's worth here's a patch of what i did (see below). one uncertainty i had was about the use of the cosname.length1 field which only seems to be used currently in pdtruetypefont. so it may be reasonable or not to push the setting of this attribute into the pdstream constructor. index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/pdstream.java =================================================================== \u2014 pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/pdstream.java (revision 948363) +++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/pdstream.java (working copy) @@ -114,12 +114,17 @@ { output = stream.createunfilteredstream(); } + int bytesininputstream = 0; byte[] buffer = new byte[ 1024 ]; int amountread = -1; while( (amountread = str.read(buffer)) != -1 ) { output.write( buffer, 0, amountread ); + bytesininputstream += amountread; } + + // set the number of bytes read from the input stream + this.stream.setint( cosname.length1, bytesininputstream ); } finally { index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/pdtruetypefont.java =================================================================== --- pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/pdtruetypefont.java (revision 948363) +++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/pdtruetypefont.java (working copy) @@ -130,7 +130,7 @@ } /** * this will load a ttf to be embedding into a document. + * this will load a ttf to be embedded into a document. * @param doc the pdf document that will hold the embedded font. @param file a ttf file stream. @@ -139,21 +139,32 @@ */ public static pdtruetypefont loadttf( pddocument doc, file file ) throws ioexception { + return loadttf( doc, new fileinputstream( file ) ); + } + + /** + * this will load a ttf to be embedded into a document. + * + * @param doc the pdf document that will hold the embedded font. + * @param stream a ttf input stream. + * @return a pdf ttf. + * @throws ioexception if there is an error loading the data. + */ + public static pdtruetypefont loadttf( pddocument doc, inputstream stream ) throws ioexception + { pdtruetypefont retval = new pdtruetypefont(); pdfontdescriptordictionary fd = new pdfontdescriptordictionary(); pdstream fontstream = new pdstream(doc, new fileinputstream( file ), false ); fontstream.getstream().setint( cosname.length1, (int)file.length() ); + pdstream fontstream = new pdstream(doc, stream, false ); fontstream.addcompression(); fd.setfontfile2( fontstream ); retval.setfontdescriptor( fd ); inputstream ttfdata = new fileinputstream(file); try { - loaddescriptordictionary(retval, fd, ttfdata); + loaddescriptordictionary(retval, fd, stream); } finally { - ttfdata.close(); + stream.close(); } //only support winansi encoding right now, should really //just use identity-h with unicode mapping",
        "label": 1
    },
    {
        "text": "pdfpageable does not rotate portrait document with 90\u00b0 270\u00b0 rotation well portrait document produced by jasperreports won't be print correctly by pdfpageable.",
        "label": 6
    },
    {
        "text": "preflight crashes on pdf analysing the pdf below results in an exception in preflight: http://dl.dropbox.com/u/9523497/dccbagposter-ppt-120229172748-phpapp01.pdf (source: file originally downloaded from http://www.slideshare.net/jakkbl/dcc-bag-posterppt) additional info: i used build #562 (14-nov-2012 23:05:44), preflight-1.8.0-20121114.230701-58-jar-with-dependencies.jar from the command line.",
        "label": 3
    },
    {
        "text": "ioexception over dataformatexception   invalid stored block lengths  on a valid pdf on the attached document, which loads and displays with adobe reader fine, pddocument.load() throws the following exception: java.io.ioexception: java.util.zip.dataformatexception: invalid stored block lengths at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:82) at org.apache.pdfbox.cos.cosinputstream.create(cosinputstream.java:69) at org.apache.pdfbox.cos.cosstream.createinputstream(cosstream.java:162) at org.apache.pdfbox.pdfparser.pdfxrefstreamparser.<init>(pdfxrefstreamparser.java:56) at org.apache.pdfbox.pdfparser.cosparser.parsexrefstream(cosparser.java:2053) at org.apache.pdfbox.pdfparser.cosparser.parsexrefobjstream(cosparser.java:333) at org.apache.pdfbox.pdfparser.cosparser.parsexref(cosparser.java:259) at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:194) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:252) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:957) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:913) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:861) at temp.pdftemp.app.main(app.java:19) caused by: java.util.zip.dataformatexception: invalid stored block lengths at java.util.zip.inflater.inflatebytes(native method) at java.util.zip.inflater.inflate(inflater.java:259) at java.util.zip.inflater.inflate(inflater.java:280) at org.apache.pdfbox.filter.flatefilter.decompress(flatefilter.java:107) at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:73) ... 12 more",
        "label": 11
    },
    {
        "text": "image in pdf has extremely different colors when rendered page 5 of the attached pdf file has a truck, which is rendered in very different colors. apparently this image isn't embedded. renderutil.converttoimage() was called with only one parameter, i.e. the default image type was used.",
        "label": 1
    },
    {
        "text": "error expected floating point number actual '0 35095424' pdfbox.version=2.0.0 file file = new file(\"/home/user/error/witherror.pdf\"); try (pddocument document = pddocument.load(file)) { } exception: error expected floating point number actual='0.00-35095424'",
        "label": 11
    },
    {
        "text": "truetype   management of cmap format hi, i have found a better documentation about the format 2 for cmap of a truetype font. here is the link : http://developer.apple.com/fonts/ttrefman/rm06/chap6cmap.html in attachment you can find my implementation, however i didn't find font to test my code... the patch include the patch of the pdfbox-668 task and a suggestion to send ioexception instead of nullpointer during the parsing of truetype font if some tables are missing. regards, eric",
        "label": 1
    },
    {
        "text": "erroneous values for textposition get x y diradj  erroneous text positions for some of the characters in the attached pdf. interestingly, it seems to happen with the characters belonging to the table. attachments: the offending pdf and the output of printtextlocations (notice x values much larger than the width of the cropbox and negative y values) additionally, poppler's pdftohtml seems to generate correct values for the same input.",
        "label": 1
    },
    {
        "text": "not correct support of incremental save when write code like follows: try {    pddocument document = pddocument.load(new file(source_path));    // some_object is not object number of catalog, info dictionary or encrypt    cosobjectkey key = new cosobjectkey(some_object, 0);    cosobject objectfrompool = document.getdocument().getobjectfrompool(key);    cosdictionary object = (cosdictionary) objectfrompool.getobject();    object.setitem(cosname.getpdfname(\"test\"), cosboolean.true);    object.setneedtobeupdated(true);    outputstream writer = new bufferedoutputstream(new fileoutputstream(output_path));    document.saveincremental(writer);    writer.close();    document.close();   } catch (ioexception e) {    e.printstacktrace();   } in result file i`ve got nothing. it`s related with next problem: when we use pddocument.save(outputstream) - outputstream is real output stream (for example, fileoutputstream or bufferedoutputstream), but incremental save use bytearrayoutputstream which not store data in some file and only keep it in memory. also when save is incremental data from source file is not send to result file.",
        "label": 1
    },
    {
        "text": "cmapparser exception when call extracttounicodeendoding open 17704628.pdf in pdfreader, throws exception exception in thread \"awt-eventqueue-0\" java.lang.classcastexception: org.apache.fontbox.cmap.cmapparser$operator at org.apache.fontbox.cmap.cmapparser.parse(cmapparser.java:172) at org.apache.pdfbox.pdmodel.font.pdfont.parsecmap(pdfont.java:559) at org.apache.pdfbox.pdmodel.font.pdsimplefont.extracttounicodeencoding(pdsimplefont.java:425) at org.apache.pdfbox.pdmodel.font.pdsimplefont.determineencoding(pdsimplefont.java:393) at org.apache.pdfbox.pdmodel.font.pdfont.<init>(pdfont.java:189) at org.apache.pdfbox.pdmodel.font.pdsimplefont.<init>(pdsimplefont.java:82) at org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:65) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:75) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:119) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:239) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:221) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdfviewer.pdfpagepanel.paint(pdfpagepanel.java:96)",
        "label": 3
    },
    {
        "text": "object offsets should be of type long   patch currently object offsets are stored as integer (32 bit). however the pdf specification does not limit a pdf document to 2gb. the only restriction is the xref table which supports 10 digit values for object offsets. thus we could have offsets >2gb (<10gb). the attached patch changes all locations (as far as i could find them) dealing with object offsets to long type. since this is a rather small change which should not have greater performance/space impact i recommend to include it. otherwise we would have to include checks that the parsed file is smaller then integer.max_value.",
        "label": 1
    },
    {
        "text": "lost whitespaces when extracting arabic text i tried to extract text from an arabic pdf. result looks good for the first look, but if you look closer, you may notice that some of whitespaces is missing comparing to copy/pasted text from the same pdf. copy/pasted line from attached pdf: \u0628\u0639\u062f \u0645\u0627 \u0627\u0643\u062a\u0634\u0641 \u062d\u0642\u064a\u0642\u0629 \u0627\u0644\u0645\u062b\u0644\u062b \u0627\u0644\u063a\u0627\u0645\u0636 extracted text: \u0628\u0639\u062f \u0645\u0627 \u0627\u0643\u062a\u0634\u0641 \u062d\u0642\u064a\u0642\u0629\u0627\u0644\u0645\u062b\u0644\u062b\u0627\u0644\u063a\u0627\u0645\u0636",
        "label": 1
    },
    {
        "text": "null pointer exception when annotation is missing the subtype if an annotation is missing the required subtype then calling createannotation() will result in a npe. a better result is to return null and let the upper level code handle it.",
        "label": 1
    },
    {
        "text": "chinese  korean   multibyte character displayed incorrectly while trying using chinese character to write to a pdf, it displays incorrectly. sample code tried . also tried with other ttf files fireflysung.ttf,gbsn00lp.ttf, \u91d1\u6885\u6bdb\u884c\u4e66.ttf, simsun.ttf . have also tried modifying the encoding in pdtruetypefont.java loadttf(pddocument doc, inputstream stream) method. pddocument pddocument = new pddocument(); pddocument.addpage(new pdpage()); bufferedimage bi = new bufferedimage(10, 10, 10); points point = new points(300, 500); @suppresswarnings(\"unchecked\") list<pdpage> list = pddocument.getdocumentcatalog().getallpages(); pdpage pdpage = list.get(list.size() - 1); string fontpathname = \"sazanami-gothic.ttf\"; pdfont fonta = pdtruetypefont.loadttf(pddocument, sample.class.getclassloader() .getresource(fontpathname).openstream() ); pdjpeg ximage = new pdjpeg(pddocument, bi); pdpagecontentstream contentstream = new pdpagecontentstream(pddocument, pdpage, true, true); contentstream.begintext(); contentstream.setfont(fonta,18); contentstream.movetextpositionbyamount(point.getx(), point.gety() - 10 ); contentstream.setnonstrokingcolor(color.black); contentstream.drawstring(\"\u60b2\u3057\u3044\"); contentstream.endtext(); contentstream.close(); pddocument.save(\"test/test.pdf\"); pddocument.close(); i also looked into other issues reported pdfbox-1071, pdfbox-1302 , pdfbox-491, pdfbox-696,pdfbox-725",
        "label": 1
    },
    {
        "text": "allow subsampled downscaled rendering of images  and rendering subimages suggested/contributed change to allow subsampling of images and rendering sub-regions of images.   the need arises from having very large images which are highly compressed (usually jpeg or jbig2). the current implementation decodes the entire image into memory at full resolution, even if rendering is done at a much lower resolution.  since the change required augmenting the way filters work (to allow partial/subsampled decoding), it also includes a partial fix for pdfbox-3340.     this change introduces \"decodeoptions\" which are currently only applicable for images. they include requesting only metadata (for pdimagexobject's repair method), subsampling and sub-region (similar to javax.imagio.imagereadparam).  since not all filters can or do honor (use) the options, the decodeoptions class contains a flag. filters that honor the options (subsample / decode only requested region) set it to true. if the flag is false, the subsampling or cropping should be done after decoding, to ensure consistency.  pagedrawer was modified so it uses subsampling based on the ratio of the desired output to the original image.   ",
        "label": 11
    },
    {
        "text": "provide a pluggable font manager our j2ee application has all fonts and resources configured and stored in its database. no files are accessed directly from file system or from system environment. to make pdfbox compatible with this philosophy, we need the fontmanager in pdfbox and fontbox to be pluggable, e.g. as shown in the attached patch. the proposal defines a fontmanager interface and default implementation which is the original one. fontmanager then needs to be configured on and propagated from pdfstreamengine and pagedrawer. it should also be configurable on pdfrenderer, which is not shown in the patch. there i would suggest to introduce a configuration object which would take care about all the current and future options of pdfrenderer.",
        "label": 6
    },
    {
        "text": "nullpointerexception in pdfieldtreenode exception in thread \"main\" java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.interactive.form.pdfieldtreenode.getfullyqualifiedname(pdfieldtreenode.java:556) at com.monday.webforms.common.pdf.test.main(test.java:19) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:39) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:25) at java.lang.reflect.method.invoke(method.java:597) at com.intellij.rt.execution.application.appmain.main(appmain.java:120)",
        "label": 1
    },
    {
        "text": "pdfbox tests include copyright files the test files for pdfbox, fontbox, and preflight include several files under copyright which we probably don't have permission to redistribute, and need to be removed (or preferably replaced): pdfbox/src/test/resources/org/apache/pdfbox/ ttf/arialmt.ttf (this is actually bitstream vera sans - the license on this might be ok though?) pdfparser/gdb-refcard.pdf (gpl licensed) pdmodel/page_label.pdf (edited by foxit pdf for evaluation only) pdmodel/font/256.pdf (copyright 2004 journal of combinatorics) fontbox/src/test/resources/ttf/ testtruetype.ttf (newbaskerville, copyright \u00a9 2002 veronika elsner) preflight/src/test/resources/org/apache/padaf/preflight/font/ true_type.ttf (subset of microsoft arial)",
        "label": 11
    },
    {
        "text": "jvm crashes on linux os   sun jvm   pdfbox a fatal error has been detected by the java runtime environment: # sigsegv (0xb) at pc=0x796af64d, pid=16603, tid=2021653392 # jre version: 6.0_31-b04 java vm: java hotspot(tm) server vm (20.6-b01 mixed mode linux-x86 ) problematic frame: c [libfontmanager.so+0x1e64d] imaginary long double+0x7d # if you would like to submit a bug report, please visit: http://java.sun.com/webapps/bugreport/crash.jsp the crash happened outside the java virtual machine in native code. see problematic frame for where to report the bug. i can provide the full error, please let me know.",
        "label": 1
    },
    {
        "text": "java lang classcastexception  org apache pdfbox pdmodel font pdtype1cfont cannot be cast to org apache pdfbox pdmodel font pdtype1font java.lang.classcastexception: org.apache.pdfbox.pdmodel.font.pdtype1cfont cannot be cast to org.apache.pdfbox.pdmodel.font.pdtype1font at org.apache.pdfbox.preflight.process.reflect.fontvalidationprocess.getfontvalidator(fontvalidationprocess.java:93) at org.apache.pdfbox.preflight.process.reflect.fontvalidationprocess.validate(fontvalidationprocess.java:72) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatefonts(resourcesvalidationprocess.java:106) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:84) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178) at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75) at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:302) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:88) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validateresources(singlepagevalidationprocess.java:164) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:83) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:58) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:47) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168)",
        "label": 6
    },
    {
        "text": "arabic   farsi  persian  text appear disconnected when pdf is converted to image when the pdf file contains arabic / farsi text, they appear disconnected when converting pages to image. arabic / farsi letters are connected to each other when written. additionally, the error message \"changing font on <?> from <b lotus> to the default font\" appears on the console. as i tried to debug the issue, it is because pdfbox is looking into the embedded fonts for the \"isolated\" variation of the character, where the embedded font only includes \"connected\" variation. if the embedded font contains the isolated format too, the font is displayed correctly (the warning message doesn't appear for that character), but the character is displayed as the incorrect variation (i.e. isolated instead of connected) this happens in both 1.6.0 release and the latest trunk code (as of today). i didn't test previous versions. the difference is that in 1.6.0, the default font (that is substituted as mentioned above) contains the arabic / persian characters, but in the trunk, the replaced characters are displayed as squares. i will attach a pdf as an input for reproducing the issue. note: this might be related to issue pdfbox-1127, but that one regards text extraction.",
        "label": 1
    },
    {
        "text": "pdpagecontentstream  add setmiterlimit  currently pdpagecontentstream has no method to set the miter limit. at the moment one has to resort to contentstream.appendrawcommands(11f + \" m \"); as workaround. but appendrawcommand() is deprecated, so there should be a official method to do so:     /**      * set the miter limit.      *      * @param miterlimit the new miter limit.      * @throws ioexception if the content stream could not be written.      */      public void setmiterlimit(float miterlimit) throws ioexception     {         if (intextmode)         {             throw new illegalstateexception(\"error: setmiterlimit is not allowed within a text block.\");         }         writeoperand(miterlimit);         writeoperator(\"m\");     } please add this method to pdpagecontentstream. thank you.",
        "label": 11
    },
    {
        "text": "infinite loop while parsing attached file is corrupt, but should fail gracefully. instead it goes into a loop: aug 01, 2016 9:35:14 pm org.apache.pdfbox.pdfparser.cosparser parsexreftable warnung: invalid xref line: 0000497701 00000 \u00b6\u00f1w%?c\u00fe?\u00f2.\u00fe=^vp?\u00bb?y2+?6a\u00ba\u001ao;-\u00f3?^\u0010?\u0011\u0007\u00farhf-d?l\u000e\u00ed\u0018\u00a3yyd aug 01, 2016 9:35:14 pm org.apache.pdfbox.pdfparser.cosparser parsexref warnung: expected trailer object at position 507957, keep trying aug 01, 2016 9:35:14 pm org.apache.pdfbox.pdfparser.cosparser parsexreftable warnung: invalid xref line: 0000497701 00000 \u00b6\u00f1w%?c\u00fe?\u00f2.\u00fe=^vp?\u00bb?y2+?6a\u00ba\u001ao;-\u00f3?^\u0010?\u0011\u0007\u00farhf-d?l\u000e\u00ed\u0018\u00a3yyd aug 01, 2016 9:35:14 pm org.apache.pdfbox.pdfparser.cosparser parsexref warnung: expected trailer object at position 507957, keep trying aug 01, 2016 9:35:14 pm org.apache.pdfbox.pdfparser.cosparser parsexreftable warnung: invalid xref line: 0000497701 00000 \u00b6\u00f1w%?c\u00fe?\u00f2.\u00fe=^vp?\u00bb?y2+?6a\u00ba\u001ao;-\u00f3?^\u0010?\u0011\u0007\u00farhf-d?l\u000e\u00ed\u0018\u00a3yyd aug 01, 2016 9:35:14 pm org.apache.pdfbox.pdfparser.cosparser parsexref warnung: expected trailer object at position 507957, keep trying aug 01, 2016 9:35:14 pm org.apache.pdfbox.pdfparser.cosparser parsexreftable",
        "label": 11
    },
    {
        "text": "npe in pdnonterminalfield getchildren  java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.interactive.form.pdnonterminalfield.getchildren(pdnonterminalfield.java:130)  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.validatefield(acroformvalidationprocess.java:196)  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.explorefields(acroformvalidationprocess.java:114)  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.validate(acroformvalidationprocess.java:64)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:84)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:122)  at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:163)  at com.mycompany.preflightmasstest.preflightchecker.run(preflightchecker.java:52)  at java.util.concurrent.threadpoolexecutor.runworker(unknown source)  at java.util.concurrent.threadpoolexecutor$worker.run(unknown source)  at java.lang.thread.run(unknown source) the \"field\" / annotation that makes the problem is at \"36 0 o\", it is the link annotation. from my understanding, this is an incorrect pdf, a link annotation isn't a field. i tried returning just null, that change works with preflight.",
        "label": 6
    },
    {
        "text": "ycbcr jpegs not implemented i have a pdf in which one particular image has a devicecmyk colorspace and dctdecode filter. when i convert it to image it gets weird background color. i got warning \"ycbcr jpegs not implemented\". so i implemented it and it renders right image after that. i attached the pdf and patch. issue is on first page of pdf.",
        "label": 11
    },
    {
        "text": "pdf to image  jpeg  conversion  colormodel log info and jvm crash for large pdfs i am trying to convert pages in a pdf to jpeg images. for smaller files program runs well but in few cases it give following log info: org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap getrgbimage info: colormodel: colormodel: #pixelbits = 24 numcomponents = 3 color space = java.awt.color.icc_colorspace@107ebe1 transparency = 1 has alpha = false isalphapre = false for larger pdfs jvm crashes with the log mentioned above being displayed repeatedly.",
        "label": 1
    },
    {
        "text": "an error occured when reading table hmtx java -cp pdfbox/preflight/target/preflight-1.8.8-snapshot.jar:pdfbox/app/target/pdfbox-app-1.8.8-snapshot.jar:pdfbox/xmpbox/target/xmpbox-1.8.8-snapshot.jar:lib/commons-io-1.3.1.jar org.apache.pdfbox.preflight.validator_a1b ttsubset_pdfa.pdf severe: an error occured when reading table hmtx java.io.eofexception at org.apache.fontbox.ttf.memoryttfdatastream.readsignedshort(memoryttfdatastream.java:139)",
        "label": 6
    },
    {
        "text": "npe on converttoimage [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1607100 originally submitted by rimmeraj on 2006-12-01 12:31. command... java -classpath pdfbox-0.7.3.jar:fontbox-0.1.0.jar org.pdfbox.pdftoimage cert.pdf java.lang.nullpointerexception at org.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:84) at org.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:452) at org.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:215) at org.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:174) at org.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:104) at org.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:657) at org.pdfbox.pdftoimage.main(pdftoimage.java:183) [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1607100&file_id=205325 cert.pdf (application/pdf), 21465 bytes doc that was failing.. [comment on sourceforge] originally sent by code_slave. logged in: yes user_id=413743 originator: no i'm seeeing the same. but it's been over a month since you reported it , and still not fixed in the cvs",
        "label": 1
    },
    {
        "text": "pdpagecontentstream should allow drawing images at current position the pdpagecontentstream class has two drawimage methods (one calling the other) but both add a transformation to the graphics state. this patch adds a drawimage method with a single parameter (the image), which only adds the image without applying any transformation. this is needed because otherwise there is no other way of setting a transform matrix manually which might have skew/rotation in addition to scaling/translation. an alternative to this patch could also be a drawimage method which takes a matrix and applies it. but still if for whatever reasons multiple images should be drawn with the same transformation matrix this would be inflexible.",
        "label": 6
    },
    {
        "text": "signature interoperability issue   visible signature not visible on some viewers some files if signed with pdfbox produce not visible signature in chrome, pdfium foxit. if the same file is signed on some actobat, foxit or itext the signature is visible. the test fle are inserted in an encrypted zip. if possible i would like to communicate the password with a private message.",
        "label": 11
    },
    {
        "text": "add  gitignore i cloned pdfbox from https://github.com/apache/pdfbox and then built it. now git is showing all the compiled files as files that i've added",
        "label": 11
    },
    {
        "text": "incorrect metadata for encrypted pdfs with non ascii characters i have a document which has author metadata = \"j\u0131rg boettger\". that second character is not an 'i', it is a dotless lower case i. it is also an encrypted pdf, with user password = \"\". the problem is that if i load the document, decrypt it and then try to examine the document-level metadata (such as author) i see problems with the non-ascii chars. i will attach a testcase & the sample pdf that reproduces the problem for me. a bit of detail that may be useful: cosobject 19 0 at the end of the pdf defines the author. it is represented as byte[] = {-95, -118, -50, 122, -127, 105, 53, 105, 50, 14, -27, 122, 120} securityhandler.encryptdata() line 223 - which decrypts the string gives: j?rg boettger. bytes = [74, -102, 114, 103, 32, 66, 111, 101, 116, 116, 103, 101, 114] note the -102 in the second character. the second character, whose byte-value is -102 is not a displayable ascii char (even at 256 -102 = 154) and it just gets dropped from the cosstring & so we get an author of jrg boettger from pddocumentinformation. i'm not sure what the requirements are for handling non-ascii chars in this situation. but adobe reader 9, 10 & mac os x's preview application all show the correct author value.",
        "label": 1
    },
    {
        "text": "nullpointerexception in cosparser fuzzing pdf loading with jqf triggered an nullpointerexception. java.lang.nullpointerexception  at org.apache.pdfbox.pdfparser.cosparser.parsedictionaryrecursive(cosparser.java:2920)  at org.apache.pdfbox.pdfparser.cosparser.preparedecryption(cosparser.java:2865)  at org.apache.pdfbox.pdfparser.cosparser.retrievetrailer(cosparser.java:284)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:171)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:220)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1160)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1057)     ... the code used for fuzzing is pddocument.load(inputstream)",
        "label": 11
    },
    {
        "text": "set libraries to current versions for rc we should use the latest version of the bc library before rolling out the 2.0 rc. the latest on maven is 1.52, the latest is 1.53 (is not yet on maven central). other libs that are not the latest are junit and ant.",
        "label": 11
    },
    {
        "text": "wasted work in pdfmarkedcontentextractor processtextposition  the problem appears in version 1.7.1 and in revision 1409864. i attached a one-line patch that fixes it. in method \"pdfmarkedcontentextractor.processtextposition\", the loop over \"sametextcharacters\" should break immediately after \"suppresscharacter\" is set to \"true\". all the iterations after \"suppresscharacter\" is set to \"true\" do not perform any useful work, at best they just set \"suppresscharacter\" again to \"true\". method \"processtextposition\" in class \"pdftextstripper\" has a similar loop, and this loop breaks immediately after \"suppresscharacter\" is set to \"true\", just like in the proposed patch.",
        "label": 12
    },
    {
        "text": "wasted work in pdoptionalcontentproperties setgroupenabled  the problem appears in version version 1.7.1 and in revision 1414788. i attached a three-line patch (on.diff) that fixes it. this problem and the attached patch are similar the previously fixed pdfbox-1447 and its patch. in method \"pdoptionalcontentproperties.setgroupenabled\", the loop over \"on\" should not be executed if \"enable\" is \"true\". when \"enable\" is \"true\", all the iterations just compute \"group\" and \"name\", and then discard them, because the \"if\" condition depends on \"!enable\". similarly, in the same method \"pdoptionalcontentproperties.setgroupenabled\", the loop over \"off\" should not be executed if \"enable\" is \"false\". i attached a separate patch (off.diff) for the \"off\" loop.",
        "label": 1
    },
    {
        "text": "square glyphs missing in the file pdfbox-2294-taroutr50sortedlist112.pdf e.g. on page 17 (but some others too) the squares and the x-ed squares are missing in the rendering.",
        "label": 6
    },
    {
        "text": "colorspace with empty range array i have pdf document where i am modifying pdpage content stream. saved document is invalid (adobe reader complains about it). i have narrowed it down to colorspace. original document has colorspace: /colorspace << /cs6 [/iccbased << /alternate /devicergb /filter /flatedecode /length 2597 /n 3 >>]>> modified document has colorspace: /colorspace << /cs6 [/iccbased << /alternate /devicergb /filter /flatedecode /length 2597 /n 3 /range [] >>]>> when i manually remove \"/range []\" from pdf then adobe reader opens it without an error. obviously that range is added by calling pdiccbased.getrangearray(0) somewhere.",
        "label": 11
    },
    {
        "text": "ioexception  object must be defined and must not be compressed object  exception in thread \"main\" java.io.ioexception: object must be defined and must not be compressed object: 0:0  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parseobjectdynamically(nonsequentialpdfparser.java:1477)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parseobjectdynamically(nonsequentialpdfparser.java:1614)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parseobjectdynamically(nonsequentialpdfparser.java:1441)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.initialparse(nonsequentialpdfparser.java:513)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parse(nonsequentialpdfparser.java:1013)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:951)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:897)  at org.apache.pdfbox.tools.pdfreader.parsedocument(pdfreader.java:375)  at org.apache.pdfbox.tools.pdfreader.openpdffile(pdfreader.java:340)  at org.apache.pdfbox.tools.pdfreader.main(pdfreader.java:326)  at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:80) the xref table looks like this: xref 0 142 0000000000 65535 f 0000000000 00000 n 0000303104 00000 n 0000000000 00000 n 0000303104 00000 n",
        "label": 1
    },
    {
        "text": "pdfont had methods removed add back methods or provide a equivalent to pdfbox so it easier to upgrade to pdfbox 2 pdfont public int getfirstchar() public int getlastchar() public encoding getfontencoding() public cmap gettounicodecmap() public string encode(byte[] c, int offset, int length) throws ioexception pdcidfont public long getdefaultwidth() encoding public string getcharacter(int code) throws ioexception cfffont public object getproperty(string name) public map<string, byte[]> getcharstringsdict() public cffencoding getencoding() cffcharset public list<entry> getentries() cffencoding public list<entry> getentries() cmap public string lookup( int code, int length )",
        "label": 6
    },
    {
        "text": "invalid color space  invalid color space  destoutputprofile is missing user submitted attached pdf fails under preflight with the following error: /home/fausser/djntest.pdf is not valid, error(s): 2.4.3: invalid color space, invalid color space, destoutputprofile is missing vendor claims djntest.pdf verifies using commercial validators.",
        "label": 3
    },
    {
        "text": "text extraction using extracttext  pdf file is input file  generates some weired characters when i tried to extract text from pdf document it is generating some gibberish text. extracttext.exe \"\\jobvite\\resumes\\resume-boston.pdf resume-boston.txt will provide the pdf documents when requested, i could not find a way to include attachments.",
        "label": 1
    },
    {
        "text": " patch  charstringrenderer does not render charstring data correctly for type cff fonts i have a requirement to render the characters from a otf cff font and to get the bounding box for each character. i initially tried to use the charstringrenderer but found the bounding box data was very different to the actual characters. because the renderer outputs the character as a generalpath, i was able to draw this to a bitmap and view it. what i found was that the characters were not being drawn correctly which was effecting the bounds. i will post an image and patch in a moment to show the issue and resolution i used.",
        "label": 1
    },
    {
        "text": "unable to add text with drawline  version pdf files  acrobat x  if i open a scanned pdf file made under pdf 1.3 version i unable to add some text to that. if i convert the same file to 1.4 version it works fine. other pdf files have 1.4 or higher version also work fine.",
        "label": 1
    },
    {
        "text": "npe in dictionaryencoding constructor i get an npe with the attached file: sep 09, 2014 9:16:57 pm org.apache.pdfbox.pdmodel.font.pdtype1font <init> warnung: using fallback font 'timesnewromanpsmt' for 'zapfdingbats' exception in thread \"main\" java.lang.nullpointerexception  at org.apache.pdfbox.encoding.dictionaryencoding.<init>(dictionaryencoding.java:91)  at org.apache.pdfbox.pdmodel.font.pdsimplefont.readencoding(pdsimplefont.java:126)  at org.apache.pdfbox.pdmodel.font.pdtype1font.<init>(pdtype1font.java:256)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:65)  at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:171)  at org.apache.pdfbox.util.pdfstreamengine.getfonts(pdfstreamengine.java:556)  at org.apache.pdfbox.util.operator.text.settextfont.process(settextfont.java:48)",
        "label": 6
    },
    {
        "text": "non separable blend modes implementation hue  saturation  color  luminosity  i have a patch for implementation of non separable blend modes...",
        "label": 11
    },
    {
        "text": "pdftoimage   add the ability to select the area to export int the pages added a -cropbox option to be able to select the area to export as an image. the option affect each converted page. see the patch attached",
        "label": 7
    },
    {
        "text": "overlay page off by one when using  useallpages when using the new -useallpages option added in 1.8.7, the usepagenum doesn't account for the fact that the specificoverlaypage is indexed by zero and the output ends up with overlay pages shifted e.g. the output page 1 has page 2 from the overlay. we need to subtract 1 from the pagenumber when getting the overlay page number. int usepagenum = (pagenumber - 1) % numberofoverlaypages;",
        "label": 1
    },
    {
        "text": "stackoverflow as part of a fuzzing run with the afl-based kelinci fuzzer found at https://github.com/isstac/kelinci for a larger software that uses pdfbox i found the following stackoverflowerror issues: exception in thread \"main\" java.lang.stackoverflowerror     at java.util.hashmap.hash(hashmap.java:338)     at java.util.linkedhashmap.get(linkedhashmap.java:440)     at org.apache.pdfbox.cos.cosdictionary.getdictionaryobject(cosdictionary.java:188)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2207)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230)     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230)     [...]     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2230) additionally, a second stackoverflowerror was found: exception in thread \"main\" java.lang.stackoverflowerror     at java.util.hashmap.hash(hashmap.java:338)     at java.util.linkedhashmap.get(linkedhashmap.java:440)     at org.apache.pdfbox.cos.cosdictionary.getdictionaryobject(cosdictionary.java:188)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:102)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111)     [...]     at org.apache.pdfbox.pdmodel.pdpagetree.getinheritableattribute(pdpagetree.java:111) the issues can be reproduced with the attached files.",
        "label": 11
    },
    {
        "text": "npe in pdtruetypefont makefontdescriptor the attached file brings this exception when rendering or when extracting text java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.makefontdescriptor(pdtruetypefont.java:161)  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.getfontdescriptor(pdtruetypefont.java:150)  at org.apache.pdfbox.pdmodel.font.pdfont.getfontwidth(pdfont.java:814)  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.getfontwidth(pdtruetypefont.java:382)  at org.apache.pdfbox.pdmodel.font.pdfont.getfontwidth(pdfont.java:312)  at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:377)  at org.apache.pdfbox.util.operator.showtext.process(showtext.java:44)  at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:508)",
        "label": 6
    },
    {
        "text": "addition of missing xmp standard value types not all value types, defined in xmp specification, are included in org.apache.padaf.xmpbox.parser.nsmapping. thus its method isbasic() returns false on such types, like choice or real. if pdf/a file includes custom metadata and its extension schema description with such types, pdf/a validation using preflight fails with error like this: \"7.6 : error on metadata, valuetype 'closed choice of text' is unknown. no declaration found in this schema\" these value types are not included and regarded in nsmapping class: \u2022 basic value types: (open and closed) choice, dimensions, locale, mimetype, propername, real, thumbnail, xpath \u2022 media management value types: agentname, renditionclass, resourceevent, resourceref, version \u2022 basic job/workflow value type: job \u2022 exif schema value types: flash, cfapattern, devicesettings, gpscoordinate, oecf/sfr, rational note, that xpath type in nsmapping is included only in conjunction with bag, but spelled incorrectly as \"bag xpath\".",
        "label": 4
    },
    {
        "text": "nullpointerexception on type1parser readcharstrings type1parser java  when trying to open the attached file with pdfbox, i get a null pointer exception: java.lang.nullpointerexception at org.apache.fontbox.type1.type1parser.readcharstrings(type1parser.java:713) at org.apache.fontbox.type1.type1parser.parsebinary(type1parser.java:576) at org.apache.fontbox.type1.type1parser.parse(type1parser.java:64) at org.apache.fontbox.type1.type1font.createwithsegments(type1font.java:85) at org.apache.pdfbox.pdmodel.font.pdtype1font.<init>(pdtype1font.java:262) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:62) at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:143) at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:838) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:495) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:469) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150) at org.apache.pdfbox.text.legacypdfstreamengine.processpage(legacypdfstreamengine.java:139) at org.apache.pdfbox.text.pdftextstripper.processpage(pdftextstripper.java:391) at org.apache.pdfbox.text.pdftextstripper.processpages(pdftextstripper.java:319) at org.apache.pdfbox.text.pdftextstripper.writetext(pdftextstripper.java:266)",
        "label": 11
    },
    {
        "text": "handle non iso chars with drawstring the pdpagecontentstream.drawstring take a string as argument, it construct a cosstring of the input. if the input contain chars above 255, the cosstring is prefixed 0xfe, 0xff and the bytes are taken from the input as \"utf-16be\" encoded. back in the drawstring method this unicode16 encoded cosstring is appended as a \"iso-8859-1\" appendrawcommands( new string( buffer.tobytearray(), \"iso-8859-1\")); the result of this is that a line with utf-16 chars is shown prefix with \u00fe\u00ff, and with double space between the other chars. the chars above 255 are shown as the two corresponding iso-8859-1 characters. as a side question to this observation, is there an alternative way to use pdfbox, to support utf16?",
        "label": 6
    },
    {
        "text": "group of button fields treated as a radio button group when creating a group of identical button fields pdfbox reads them as a group of radio-button fields, with each widget as a check-box, which is incorrect. the main field has the class pdradiocollection and each kid is a pdcheckbox. run the following code on the attached file: pddocument doc = pddocument.load( new file(\"test.pdf\") ); pdacroform form = doc.getdocumentcatalog().getacroform(); list<pdfield> fields = form.getfields(); for (pdfield f: fields) { system.out.println(\"name:\" + f.getfullyqualifiedname()); system.out.println(\"type:\" + f.getfieldtype()); system.out.println(\"class:\" + f.getclass()); list<cosobjectable> kids = f.getkids(); if (kids!=null) { for (cosobjectable c : kids) { system.out.println(\"kid class: \" + c.getclass()); } } } the results are: name:test type:btn class:class org.apache.pdfbox.pdmodel.interactive.form.pdradiocollection kid class: class org.apache.pdfbox.pdmodel.interactive.form.pdcheckbox kid class: class org.apache.pdfbox.pdmodel.interactive.form.pdcheckbox",
        "label": 8
    },
    {
        "text": "remove system out println  for example at glyfsimpledescript.java ... catch (arrayindexoutofboundsexception e)         {             system.out.println(\"error: array index out of bounds\");         } and also 'printstacktrace' like in pagedrawer.java: ... catch( ioexception io )         {             io.printstacktrace();         } should forward exception or keep silence.",
        "label": 11
    },
    {
        "text": "in some cases pdpage converttoimage is extremely slow i convert hundreds of documents with an average of some seconds per page. one type of documents takes several minutes per page. it is not linked to the size of the document: i extracted one page and generated the image on its own. it is not linked to the fonts, because i have the same content in another document (a6 format instead of a4), and there i don't have a problem.",
        "label": 6
    },
    {
        "text": "contents of truncated file lost content was there in 2.0.5, now no longer. the file is truncated.",
        "label": 1
    },
    {
        "text": "type1fontutiltest is non deterministic type1fontutiltest uses java.util.random to generate random test data, which means that it is is non-deterministic. as discussed in pdfbox-1977, we should alter this test to make sure that it has deterministic (regression test) functionality as well as the existing non-deterministic (fuzz test) functionality.",
        "label": 11
    },
    {
        "text": "add ability to digitally sign a pdf [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1000109 originally submitted by benlitchfield on 2004-07-29 06:27. implementation notes: what about the info on this site: http://www.codeproject.com/useritems/pdfdigipad.asp adobe pdf public-key digital signature and encryption specification http://partners.adobe.com/asn/developer/pdfs/tn/ppk_pd fspec.pdf adobe acrobat digital signature api reference http://partners.adobe.com/asn/acrobat/docs/digsig.pdf http://www.mail-archive.com/itext- questions@lists.sourceforge.net/msg11084.html http://groups.google.de/groups? q=sign+openssl+group:comp.text.pdf&hl=de&lr=lang_de|l ang_en&ie=utf- 8&group=comp.text.pdf&selm=f55510dc.0403111256.f0a6 513%40posting.google.com&rnum=1 [comment on sourceforge] originally sent by notessensei. logged in: yes user_id=675521 i second the request [comment on sourceforge] originally sent by benlitchfield. logged in: yes user_id=601708 the org.pdfbox.pdmodel.interactive.digitalsignature package has been created but needs to be implemented. ben [comment on sourceforge] originally sent by benlitchfield. logged in: yes user_id=601708 java example of signing a pdf using an x509 certificate from a file or a x506certificate instance",
        "label": 10
    },
    {
        "text": "java util zip dataformatexception  invalid distance too far back i get a zip exception with the attached pdf file, which renders successfully in a couple of pdf viewers i tried. bytearrayinputstream pdfinputstream = new bytearrayinputstream(pdfbytearray); pdfmergerutility merger = new pdfmergerutility(); merger.addsource(pdfinputstream); bytearrayoutputstream outputstream = new bytearrayoutputstream(); merger.setdestinationstream(outputstream); merger.mergedocuments(memoryusagesetting.setupmainmemoryonly());   pdf file attached. stack trace: java.io.ioexception: java.util.zip.dataformatexception: invalid distance too far back at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:83) at org.apache.pdfbox.filter.filter.decode(filter.java:87) at org.apache.pdfbox.cos.cosinputstream.create(cosinputstream.java:77) at org.apache.pdfbox.cos.cosstream.createinputstream(cosstream.java:175) at org.apache.pdfbox.cos.cosstream.createinputstream(cosstream.java:163) at org.apache.pdfbox.multipdf.pdfmergerutility.appenddocument(pdfmergerutility.java:516) at org.apache.pdfbox.multipdf.pdfmergerutility.mergedocuments(pdfmergerutility.java:263) ... caused by: java.util.zip.dataformatexception: invalid distance too far back at java.util.zip.inflater.inflatebytes(native method) at java.util.zip.inflater.inflate(inflater.java:259) at java.util.zip.inflater.inflate(inflater.java:280) at org.apache.pdfbox.filter.flatefilter.decompress(flatefilter.java:108) at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:74) ... 35 more",
        "label": 11
    },
    {
        "text": "indexoutofboundsexception when retrieving kerning information when using truetypefont::getkerning there is a large possibility that you will run into an out of bounds exception. this is because the binary search is split into two parts, and the second part incorrectly adds the offset to the found index. actually, with the current implementation there is no need to split the search into two parts. this is only 'needed' when using a binary search implementation which is optimised for cases where the length of the array is a power of two, which arrays::binarysearch doesn't implement.",
        "label": 11
    },
    {
        "text": " patch  add method for retrieving cff bounding box from cfffont class with slight refactoring and optimization  i have added a method to the cfffont class to retrieve the bounding box for a character determined by an sid as well as retrieving a name. i have also slightly modified the existing code so that each sid mapping can be retrieved now using the sid as the key from a map. from looking around there are several examples of where iterative loops are used using the original mapping array: cfffontros.java:165 cffparser.java:876 i haven't changed those locations yet, but they can be made in a separate patch which should boost performance. there was a small bit of refactoring done as well just because i now retrieve a renderer from two locations. these patches are part of adding otf cff support to apache fop.",
        "label": 1
    },
    {
        "text": " write2file  gives null pointer exception oct 24, 2011 11:00:15 am org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap getrgbimage severe: java.lang.nullpointerexception java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.getcolorspace(pdxobjectimage.java:286) at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdpixelmap.java:140) at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.write2outputstream(pdpixelmap.java:285) at org.apache.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.write2file(pdxobjectimage.java:139) at org.apache.pdfbox.extractimages.extractimages(extractimages.java:165) at org.apache.pdfbox.extractimages.main(extractimages.java:62)",
        "label": 1
    },
    {
        "text": "dataformatexception  invalid code lengths set when rendering image when rendering image from the attached pdf, an exception was thrown and below is the relevant stack trace: java.util.zip.dataformatexception: invalid code lengths set     at java.util.zip.inflater.inflatebytes(native method) ~[?:1.8.0_121]     at java.util.zip.inflater.inflate(inflater.java:259) ~[?:1.8.0_121]     at java.util.zip.inflater.inflate(inflater.java:280) ~[?:1.8.0_121]     at org.apache.pdfbox.filter.flatefilter.decompress(flatefilter.java:108) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:74) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.filter.filter.decode(filter.java:87) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.cos.cosinputstream.create(cosinputstream.java:77) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.cos.cosstream.createinputstream(cosstream.java:175) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.cos.cosstream.createinputstream(cosstream.java:163) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.pdmodel.common.pdstream.createinputstream(pdstream.java:236) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.pdmodel.graphics.color.pdiccbased.loadiccprofile(pdiccbased.java:124) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.pdmodel.graphics.color.pdiccbased.<init>(pdiccbased.java:98) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.pdmodel.graphics.color.pdcolorspace.create(pdcolorspace.java:192) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.pdmodel.pdresources.getcolorspace(pdresources.java:199) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.pdmodel.pdresources.getcolorspace(pdresources.java:169) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.contentstream.operator.color.setnonstrokingcolorspace.process(setnonstrokingcolorspace.java:41) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:848) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:503) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:477) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:246) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:225) ~[pdfbox-2.0.9.jar:2.0.9]     at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:138) ~[pdfbox-2.0.9.jar:2.0.9]",
        "label": 11
    },
    {
        "text": "poor rendering with non sequential parser p39 + 40 of the attached file are poorly rendered with the non-sequential parser. with the old parser, while the glyphs are not perfect, they represent the correct character. this is for 1.8.8. in 2.0 the rendering is incorrect, but i didn't test with the old parser because that one is no longer available from the command line.",
        "label": 11
    },
    {
        "text": "using pdftoimage creates blank images on pages  i have been using pdftoimage to create images from the pdf documents and everything has been working great until i ran into this file. it will create the images of each page but not display the image correctly. either it will show the image as white or black. i attached the pdf and some of the images it created. below i have used this command and some of the output. any ideas? is it because it is an embedded image relating to pdfbox-1095 java -jar pdfbox-app-1.6.0.jar pdftoimage -imagetype png -startpage 1 -endpage 10 afdd2_1_1.pdf feb 28, 2012 9:14:57 pm org.apache.pdfbox.util.pdfstreamengine processoperator info: unsupported/disabled operation: bdc feb 28, 2012 9:14:58 pm org.apache.pdfbox.util.pdfstreamengine processoperator info: unsupported/disabled operation: emc feb 28, 2012 9:14:58 pm org.apache.pdfbox.util.pdfstreamengine processoperator info: unsupported/disabled operation: i writing: afdd2_1_11.png",
        "label": 1
    },
    {
        "text": "error results in description that looks more like the one belonging to analyzing the following pdf with preflight: https://github.com/openplanets/format-corpus/raw/master/pdfcabinetofhorrors/webcapture.pdf one of the reported errors is: <error count=\"1\"> <code>6.2.4</code> <details>action is forbidden, \"a\" must not be used in a field dictionary</details> </error but the description in the 'details' element doesn't really match what i see here: http://svn.apache.org/repos/asf/pdfbox/trunk/preflight/src/main/java/org/apache/pdfbox/preflight/preflightconstants.java /** a widget annotation linked with a form field shall not have any action */ string error_action_forbidden_widget_action_field = \"6.2.4\"; but it does look similar to this: /** additional action entry is forbidden in a form field object */ string error_action_forbidden_additional_actions_field = \"6.2.3\"; so it looks like a slight mix-up (error code linked to wrong description).",
        "label": 3
    },
    {
        "text": "infinite loop of searching for a key in pdresources error in code of class - org.apache.pdfbox.pdmodel.pdresources     private cosname createkey(cosname kind, string prefix)     {         cosdictionary dict = (cosdictionary)resources.getdictionaryobject(kind);         if (dict == null)         {             return cosname.getpdfname(prefix + 1);         }         // find a unique key         string key;         do         {             key = prefix + (dict.keyset().size() + 1);         }         while (dict.containskey(key));    <--------------- infinite loop of searching for a key         return cosname.getpdfname(key);     } my test code: public class pdfmain_svg {  public static void main(string[] args) throws exception {   system.out.println(\"hello\");   pddocument document = pddocument.load(new file(     \"d:\\\\project\\\\pdfbox-image\\\\acro6jsguide.pdf\"));   float fontsize = 10f;   pdfont font = pdtype0font.load(document, new file(     \"c:\\\\windows\\\\fonts\\\\arial.ttf\"));   for (int pageindex = 0; pageindex < document.getnumberofpages(); pageindex++) {    system.out.println(\"page index = \" + pageindex);    pdpage page = document.getpage(pageindex);      pdpagecontentstream contentstream = new pdpagecontentstream(      document, page, true, true);    contentstream.setfont(font, fontsize); <---------------- hang on page 6    contentstream.setnonstrokingcolor(color.light_gray);    contentstream.begintext();    contentstream.newlineatoffset(100, 100);    contentstream.showtext(\"test printing\");    contentstream.endtext();    contentstream.close();   }   file f = new file(\"d:\\\\work\\\\kostya.pdf\");   document.save(f);   document.close();   system.out.println(\"f=\" + f.getabsolutepath() + \": \" + f.exists());  } }",
        "label": 11
    },
    {
        "text": "signing external signed document again with pdfbox  break the document  1/ i sign a file using this method public static void signbypdfbox( file inputpdf, file outputpdf, keystore ks, string password) throws ioexception, unrecoverablekeyexception, keystoreexception, nosuchalgorithmexception, cosvisitorexception, signatureexception { pddocument inputdoc = pddocument.load(inputpdf); padessigner signer = new padessigner(ks, password); signer.setsignaturename(\"hello1\"); signer.setsignaturereason(\"why noy\"); signer.setsignaturelocation(\"curacao\"); signer.setsignaturecontactinfo(\"david.keller.fr@gmail.com\"); signer.signpdf(inputdoc, outputpdf); } 2/ i resign the same file using the same method and in acrobat reader i have this error : signdict/contents illegal data i have googelized it, and i found only old topics for itext lib. i have tried the same with itext 5.x, and double signatures works",
        "label": 10
    },
    {
        "text": "pdfdebugger shows xml metadata in iso when viewing xml metadata in the pdfdebugger the content is displayed using iso-8859-1 instead of utf-8 (or even more intelligent by looking at the begin attribute. so instead of this <rdf:li>s.stra\u00df\u009fe_2</rdf:li> we get this <rdf:li>s.stra\u00e3\u009f e_2</rdf:li>",
        "label": 8
    },
    {
        "text": "objstm is being processed to late i have a pdf that has the following 1 0 obj^m <</type/catalog/pages 5 0 r/metadata 8 0 r/acroform<</fields[]>>>>^m and 22 0 obj^m <</type /objstm /n 2/first 10/length 175/filter /flatedecode>>stream^m inside the 22 0 obj is the 5 0 which holds the pages. when 1 0obj is parsed then a place holder is set for the 5 0obj with it's value set to null. when 22 0 is parsed it is not expanded so 5 0 is always null. when i go to get all the pages document.getdocumentcatalog().getallpages() it returns 0 since (cosdictionary)root.getdictionaryobject( cosname.pages ) is null. should objstm not get processed immediately so the objects tha are in there are filled? i have a pdf as an example but it is confidential so i can send it someone off list",
        "label": 11
    },
    {
        "text": "cosstring encodes euro sign wrongly when setting the value of cosstring to the euro sign the encoding is wrong     cosstring string = new cosstring(\"\u20ac\");     system.out.println(string); produces this output     cosstring{\u00ac} whereas the same code using 1.8 produces the correct result     cosstring{\u20ac}",
        "label": 8
    },
    {
        "text": "performance issue when filling the first pdtextfield of an acroform when filling the first pdtextfield in a form the performance is slow. all other pdtextfields in the form are handled quickly. this code pdtextfield field = (pdtextfield) doc.getdocumentcatalog().getacroform().getfield(\"textfield01\"); long start = system.nanotime(); field.setvalue(\"abcd\"); long end = system.nanotime(); double difference = (end - start)/1e6; system.out.println(difference); field = (pdtextfield) doc.getdocumentcatalog().getacroform().getfield(\"textfield02\"); start = system.nanotime(); field.setvalue(\"abcd\"); end = system.nanotime(); difference = (end - start)/1e6; system.out.println(difference); produces the following output 9713.38 3.904",
        "label": 6
    },
    {
        "text": "pagelayout twocolumnright was illegal i tried to load pagelayout.twocolumnright pdf occurred an error java.lang.illegalargumentexception: twocolumnright. someone forgot to implement in pagelayout#fromstring maybe.",
        "label": 11
    },
    {
        "text": "indexoutofboundsexception on converttoimage with an embedded fax image pdpage.converttoimage brings me this stacktrace: java.lang.indexoutofboundsexception: offset + length > bit count at org.apache.pdfbox.io.ccitt.packedbitarray.setbits(packedbitarray.java:108) at org.apache.pdfbox.io.ccitt.ccittfaxg31ddecodeinputstream.writerun(ccittfaxg31ddecodeinputstream.java:184) at org.apache.pdfbox.io.ccitt.ccittfaxg31ddecodeinputstream.access$400(ccittfaxg31ddecodeinputstream.java:29) at org.apache.pdfbox.io.ccitt.ccittfaxg31ddecodeinputstream$runlengthtreenode.execute(ccittfaxg31ddecodeinputstream.java:375) at org.apache.pdfbox.io.ccitt.ccittfaxg31ddecodeinputstream.decodeline(ccittfaxg31ddecodeinputstream.java:165) at org.apache.pdfbox.io.ccitt.ccittfaxg31ddecodeinputstream.read(ccittfaxg31ddecodeinputstream.java:98) at java.io.inputstream.read(inputstream.java:163) at java.io.filterinputstream.read(filterinputstream.java:116) at org.apache.pdfbox.io.ccitt.fillorderchangeinputstream.read(fillorderchangeinputstream.java:45) at java.io.filterinputstream.read(filterinputstream.java:90) at org.apache.pdfbox.io.ioutils.copy(ioutils.java:68) at org.apache.pdfbox.filter.ccittfaxdecodefilter.decode(ccittfaxdecodefilter.java:114) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:295) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:237) at org.apache.pdfbox.cos.cosstream.getunfilteredstream(cosstream.java:172) at org.apache.pdfbox.pdmodel.graphics.xobject.pdccitt.getrgbimage(pdccitt.java:155) at org.apache.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:83) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:554) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:125) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:781) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:712) at de.rekers.ui.table.ydateianlagetable$4.doinbackground(ydateianlagetable.java:740) at de.rekers.ui.table.ydateianlagetable$4.doinbackground(ydateianlagetable.java:1) at javax.swing.swingworker$1.call(swingworker.java:277) at java.util.concurrent.futuretask$sync.innerrun(futuretask.java:303) at java.util.concurrent.futuretask.run(futuretask.java:138) at javax.swing.swingworker.run(swingworker.java:316) at java.util.concurrent.threadpoolexecutor$worker.runtask(threadpoolexecutor.java:886) at java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:908) at java.lang.thread.run(thread.java:662) the document is partially rendered. the document is created by our fax software. acrobat reader shows the document without an error. thanks in advance! martin",
        "label": 11
    },
    {
        "text": "overlaying pdfs corrupts cross reference stream after overlaying the attached files the corss reference stream of the resulting pdf is corrupt. using 1.8.11 works fine, results for both versions are attached as well",
        "label": 1
    },
    {
        "text": "npe when extracting image inside form unsing current head version: java -cp app/target/pdfbox-app-1.7.0-snapshot.jar org.apache.pdfbox.extractimages /tmp/in.pdf exception in thread \"main\" java.lang.nullpointerexception at org.apache.pdfbox.extractimages.processresources(extractimages.java:166) at org.apache.pdfbox.extractimages.processresources(extractimages.java:195) at org.apache.pdfbox.extractimages.extractimages(extractimages.java:150) at org.apache.pdfbox.extractimages.main(extractimages.java:64)",
        "label": 1
    },
    {
        "text": "add setmodifieddate calendar c  to pdannotation currently, the setmodifieddate method takes a string object as its input parameter, but this string must be formatted in the pdf iso date format, which is not documented and is confusing. my proposal is to make it more consistent with the setcreationdate method and change the input parameter to calendar, and add a function that converts that calendar object into a properly formatted string. the method that takes a string as input can be left for compatibility purposes, but the javadoc should be adjusted to show what type of string should be used.",
        "label": 11
    },
    {
        "text": "pdf with incorrect startxref current version has same problem 1.8.4 d:\\software\\pdfbox>java -jar pdfbox-app-1.8.4.jar convertcolorspace rpt1390780234888753.pdf test.pdf \u4e8c\u6708 07, 2014 4:59:11 \u4e0b\u5348 org.apache.pdfbox.pdfparser.baseparser parsecosstream \u8b66\u544a: specified stream length 15353 is wrong. fall back to reading stream until 'endstream'. \u4e8c\u6708 07, 2014 4:59:11 \u4e0b\u5348 org.apache.pdfbox.pdfparser.baseparser parsecosstream \u8b66\u544a: specified stream length 12156 is wrong. fall back to reading stream until 'endstream'. \u4e8c\u6708 07, 2014 4:59:11 \u4e0b\u5348 org.apache.pdfbox.pdfparser.xreftrailerresolver setstartxref \u8b66\u544a: did not found xref object at specified startxref position 83636 convertcolorspace failed with the following exception: java.io.ioexception: missing closing bracket for hex string. reached eos. at org.apache.pdfbox.pdfparser.baseparser.parsecoshexstring(baseparser.java:1023) at org.apache.pdfbox.pdfparser.baseparser.parsecosstring(baseparser.java:816) at org.apache.pdfbox.pdfparser.pdfstreamparser.parsenexttoken(pdfstreamparser.java:259) at org.apache.pdfbox.pdfparser.pdfstreamparser.parse(pdfstreamparser.java:133) at org.apache.pdfbox.convertcolorspace.replacecolors(convertcolorspace.java:88) at org.apache.pdfbox.convertcolorspace.main(convertcolorspace.java:385) at org.apache.pdfbox.pdfbox.main(pdfbox.java:46)",
        "label": 1
    },
    {
        "text": "giant glyphs when rendering embedded fonts hi, i try to generate an image out of the attatched pdf. pdfviewer like \"acrobat reader\" or the ubuntu \"document viewer\" are able to display the pdf in a correct way. pdfbox is a little bit confused about the font. checked with the latest relase version: java -jar pdfbox-app-2.0.3.jar pdftoimage 978-3-86764-721-2_t2.pdf",
        "label": 1
    },
    {
        "text": "add additional unit tests i've ran jacoco over the pdfbox module, and found some functions that were missing unit test coverage. i've written some unit tests for these functions and i would like to submit them. the functions i've written tests for are: org.apache.pdfbox.cos.cosobjectkey.comparetoinput org.apache.pdfbox.pdfwriter.coswriterxrefentry.comparetoinput org.apache.pdfbox.pdmodel.pagelayout.fromstring org.apache.pdfbox.pdmodel.pagemode.fromstring org.apache.pdfbox.pdmodel.pagemode.stringvalue org.apache.pdfbox.pdmodel.graphics.state.renderingintent.fromstring org.apache.pdfbox.pdmodel.graphics.state.renderingintent.stringvalue",
        "label": 11
    },
    {
        "text": "can't draw color border around a pdtextbox   create example there's a thread \"setting a border color on a pdtextbox\" in the user mailing list. this relates to version 1.8.*, but i wanted to create an example for 2.0. after doing this for 2.0 with this code pdappearancecharacteristicsdictionary fieldappearance =                  new pdappearancecharacteristicsdictionary(new cosdictionary());         pdcolor green = new pdcolor(new float[] { 0, 1, 0 }, pddevicergb.instance);         fieldappearance.setbordercolour(green);         widget.setappearancecharacteristics(fieldappearance); it didn't work. the reason is this in the pdf: 5 0 obj << /ft /tx /t (samplefield) /type /annot /subtype /widget /rect [50.0 750.0 250.0 800.0] /mk 7 0 r /v (english form contents) /ap 8 0 r >> endobj 6 0 obj << /font 9 0 r >> endobj 7 0 obj << /bc [0.0 1.0 0.0 null]  <=================== >> endobj the /bc color array has an extra null element which comes from a \"patternname\" in pdcolor:     public cosarray tocosarray()     {         cosarray array = new cosarray();         array.setfloatarray(components);         array.add(patternname);         return array;     } removing it in the pdf brings a \"good\" file. i believe this is a regression that came from changing pdgamma to pdcolor some time ago in pdfbox-2629.",
        "label": 11
    },
    {
        "text": "arg list is optional for some color seperations  however  code expects it to be set and causes a null pointer exception when drawing the pdf  here is a patch that includes the required additional check for null. and a pdf to test it with as well. eclipse workspace patch 1.0 #p pdfbox index: src/main/java/org/apache/pdfbox/util/operator/setnonstrokingseparation.java =================================================================== src/main/java/org/apache/pdfbox/util/operator/setnonstrokingseparation.java (revision 1818) +++ src/main/java/org/apache/pdfbox/util/operator/setnonstrokingseparation.java (working copy) @@ -61,7 +61,9 @@ { pdseparation sep = (pdseparation) colorspace; colorspace = sep.getalternatecolorspace(); arglist = sep.getcolorvalues().tolist(); + if (sep.getcolorvalues() != null) { + arglist = sep.getcolorvalues().tolist(); + } } if (colorspace != null)",
        "label": 1
    },
    {
        "text": "pdchoicefield's implementation of setvalue does not work for all pdf forms  sometimes it throws classcastexception for a choice with the following options: cosarray{[cosstring{ }, cosarray{[cosstring {nr} , cosstring {non-reactive} ]}, cosarray{[cosstring {r} , cosstring {reactive} ]}, cosarray{[cosstring {declined}, cosstring{declined} ]}]} a class cast is thrown as the code expects all items to be strings as the first item is a string. however, the remaining items are all pairs. the attached code is the fix. it just makes the pair/single check every time through the loop.",
        "label": 7
    },
    {
        "text": "numberformatexception when loading large pdf file if you trying to load very large pdf file (over 2gb), you get java.io.ioexception: java.lang.numberformatexception: for input string: \"2313730984\". it fails in cosparser.java in parsexreftable(long startbyteoffset). on the line 2006, if integer.parseint(splitstring[1]) reads number which is bigger than maximum int. ////// java.io.ioexception: java.lang.numberformatexception: for input string: \"2313730984\" at org.apache.pdfbox.pdfparser.cosparser.parsexreftable(cosparser.java:2012) at org.apache.pdfbox.pdfparser.cosparser.parsexref(cosparser.java:223) at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:192) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:249) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:840) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:765) at test.main(test.java:17) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:62) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) at java.lang.reflect.method.invoke(method.java:498) at com.intellij.rt.execution.application.appmain.main(appmain.java:147) caused by: java.lang.numberformatexception: for input string: \"2313730984\" at java.lang.numberformatexception.forinputstring(numberformatexception.java:65) at java.lang.integer.parseint(integer.java:583) at java.lang.integer.parseint(integer.java:615) at org.apache.pdfbox.pdfparser.cosparser.parsexreftable(cosparser.java:2005) ... 11 more",
        "label": 11
    },
    {
        "text": "classcastexception in pdxobjectimage getmask certain /flatedecode encoded images which contain a mask dictionary cause the getrgbimage() method to fail with the following exception: java.lang.classcastexception: org.apache.pdfbox.cos.cosstream cannot be cast to org.apache.pdfbox.cos.cosarray at org.apache.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.getmask(pdxobjectimage.java:364) at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdpixelmap.java:205) at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.write2outputstream(pdpixelmap.java:310) at org.apache.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.write2file(pdxobjectimage.java:139) at imagepdfboxtest2.main(imagepdfboxtest2.java:41) i will attach a simple test program and a test dokument which was created with openoffice 3.2.",
        "label": 1
    },
    {
        "text": "the 'kern' table type is not supported  the kerning table ('kern') is not supported by fontbox.",
        "label": 1
    },
    {
        "text": "implement transparency groups the attached pdf uses transparency groups, blending and soft masks to create the rounded corners and shades behind images. it appears that these features are not implemented in pdfbox. an implementation proposal is attached in the transparencygroup.patch. the basic idea is to create a buffered image, draw the transparency group content onto it and then use the result to produce the soft mask or draw the image on the original g2d. note: i am not the (only) author of the proposed change. it was developed in our company few years ago in sources based on a 1.7.x version of pdfbox, mostly by a guy who already left. over the years, merging of the work done in pdfbox main stream into our source base has become impossible due to many refactorings and other deep going changes done. now we would like to go the opposite way - where possible - bring the changes and fixes we have done into pdfbox main stream and start to use it in our installations.",
        "label": 6
    },
    {
        "text": "cmyk image cannot be extracted  empty file generated  extracting the attached pdf with the following command: java -jar app/target/pdfbox-app-1.7.0-snapshot.jar pdftoimage -imagetype png /tmp/wo2011140338-page25.pdf this generates image wo2011140338-page251.png (attached). this is a great improvement over pdfbox 1.6.0, which generates four copies of the image (maybe because of the cmyk encoding?). well done! however the image is still of quite poor quality, apparently lower than the actual image data in the pdf, when displayed with acrobat reader or evince 2.32.0 (screenshot attached too). it would be great if that could be fixed too.",
        "label": 1
    },
    {
        "text": "npe on org apache pdfbox pdmodel pdpagetree ispagetreenode i got a npe on org.apache.pdfbox.pdmodel.pdpagetree.ispagetreenode. stacktrace: java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.pdpagetree.ispagetreenode(pdpagetree.java:307)  at org.apache.pdfbox.pdmodel.pdpagetree.access$100(pdpagetree.java:38)  at org.apache.pdfbox.pdmodel.pdpagetree$pageiterator.enqueuekids(pdpagetree.java:164)  at org.apache.pdfbox.pdmodel.pdpagetree$pageiterator.enqueuekids(pdpagetree.java:169)  at org.apache.pdfbox.pdmodel.pdpagetree$pageiterator.<init>(pdpagetree.java:159)  at org.apache.pdfbox.pdmodel.pdpagetree$pageiterator.<init>(pdpagetree.java:153)  at org.apache.pdfbox.pdmodel.pdpagetree.iterator(pdpagetree.java:123)  at org.apache.pdfbox.text.pdftextstripper.processpages(pdftextstripper.java:314)  at org.apache.pdfbox.text.pdftextstripper.writetext(pdftextstripper.java:266)  at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:117)  at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:159)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280)  ...",
        "label": 11
    },
    {
        "text": "problem when setting cosname off on radio button the following error occurs when trying to set the radio button to cosname.off when the field contains /opt values: error (pdfdocument.java:98) - error populating form us/gov/opm/sf2817 java.lang.arrayindexoutofboundsexception: -1  at java.util.arraylist.elementdata(arraylist.java:418) ~[na:1.8.0_45]  at java.util.arraylist.get(arraylist.java:431) ~[na:1.8.0_45]  at org.apache.pdfbox.pdmodel.common.cosarraylist.get(cosarraylist.java:544) ~[pdfbox-2.0.3.jar:2.0.3]  at org.apache.pdfbox.pdmodel.interactive.form.pdbutton.constructappearances(pdbutton.java:275) ~[pdfbox-2.0.3.jar:2.0.3]  at org.apache.pdfbox.pdmodel.interactive.form.pdterminalfield.applychange(pdterminalfield.java:228) ~[pdfbox-2.0.3.jar:2.0.3]  at org.apache.pdfbox.pdmodel.interactive.form.pdbutton.setvalue(pdbutton.java:167) ~[pdfbox-2.0.3.jar:2.0.3] the code that triggers the error is: field.setvalue(cosname.off.getname());",
        "label": 8
    },
    {
        "text": "hello world using a truetype font arrayindexoutofboundsexception the small example \u201chello world using a truetype font\u201d on the pdfbox website does not work when selecting the windows font \u201ccour.ttf\u201d (courier new). it works with the non-fixed width fonts that i have tried (arial, albertus, bookman old style, garamond, palatino, segoe ui) and it works with lucida console, a fixed width font, but not courier new. this is the error: exception in thread \"main\" java.lang.arrayindexoutofboundsexception: 5 at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loaddescriptordictionary(pdtruetypefont.java:418) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:201) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:177) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:158) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:145) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:132) at pdfbox_ttf_test.main.main(main.java:31) to me this is the same error as pdfbox-1335, except maybe it is still not fixed for all fonts. i am using windows 7 sp1 32-bit, pdfbox 1.8.2., netbeans ide 6.9.1 this is my source: ----------------------- <snip> ------------------------- /* to change this template, choose tools | templates and open the template in the editor. */ package pdfbox_ttf_test; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.pdpage; import org.apache.pdfbox.pdmodel.font.pdfont; import org.apache.pdfbox.pdmodel.font.pdtruetypefont; import org.apache.pdfbox.pdmodel.edit.pdpagecontentstream; import org.apache.pdfbox.exceptions.cosvisitorexception; import java.io.ioexception; /** * @author duncan */ public class main { /** @param args the command line arguments */ public static void main(string[] args) throws ioexception, cosvisitorexception { // todo code application logic here pddocument document = new pddocument(); pdpage page = new pdpage(); document.addpage( page ); // create a new font object by loading a truetype font into the document pdfont font = pdtruetypefont.loadttf(document, \"c:\\\\windows\\\\fonts\\\\cour.ttf\"); // start a new content stream which will \"hold\" the to be created content pdpagecontentstream contentstream = new pdpagecontentstream(document, page); // define a text content stream using the selected font, moving the cursor and drawing the text \"hello world\" contentstream.begintext(); contentstream.setfont( font, 12 ); contentstream.movetextpositionbyamount( 100, 700 ); contentstream.drawstring( \"hello world\" ); contentstream.endtext(); // make sure that the content stream is closed: contentstream.close(); // save the results and ensure that the document is properly closed: document.save( \"hello world.pdf\"); document.close(); } } -------------------------- <end snip> -----------------------------",
        "label": 1
    },
    {
        "text": "characters are not positioned properly  due to wrong width height of chars  characters in this pdf are not positioned properly. all characters are rendered at position x=0.0 problem is in pdfont.getfontwidth(). it returns 0.0 for every char. the same applies for pdfont.getfontheight()",
        "label": 1
    },
    {
        "text": "how to use preflight component to get pdf's colorspace i want to get a pdf's color property before sending it to color-printer or monochrome-only printer in my program. but i don't know how to implement this by preflight component. no samples can be found anywhere.",
        "label": 1
    },
    {
        "text": "use an enum for renderingintent the rendering intent in the graphics state is currently a string, we should replace it with a renderingintent enum.",
        "label": 6
    },
    {
        "text": "arrayindexoutofboundsexception in cmapsubtable processsubtype6 i downloaded a pdf (https://core.tdar.org/document/372138/vanishing-river-volume-1-part-2-other-pre-classic-sites-in-the-lvap-study-area-chapters-5-6) and converted it to a pdf using abbyy finereader. in attempting to preflight the pdf i encountered two separate exceptions. *note*, these pdfs are not small, hence not attaching them directly, if someone who is looking at the issue needs them, feel free to contact me and i can share them directly. java.lang.arrayindexoutofboundsexception: -14  at org.apache.pdfbox.preflight.font.container.cidtype2container.getfontprogramwidth(cidtype2container.java:60)  at org.apache.pdfbox.preflight.font.container.type0container.getfontprogramwidth(type0container.java:45)  at org.apache.pdfbox.preflight.font.container.fontcontainer.checkglyphwith(fontcontainer.java:115)  at org.apache.pdfbox.preflight.content.contentstreamwrapper.validtext(contentstreamwrapper.java:372)  at org.apache.pdfbox.preflight.content.contentstreamwrapper.validstringarray(contentstreamwrapper.java:296)  at org.apache.pdfbox.preflight.content.contentstreamwrapper.validstringarray(contentstreamwrapper.java:292)  at org.apache.pdfbox.preflight.content.contentstreamwrapper.checkshowtextoperators(contentstreamwrapper.java:208)  at org.apache.pdfbox.preflight.content.contentstreamwrapper.processoperator(contentstreamwrapper.java:180)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235)  at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215)  at org.apache.pdfbox.preflight.content.contentstreamwrapper.validpagecontentstream(contentstreamwrapper.java:75)  at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validatecontent(singlepagevalidationprocess.java:179)  at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:87)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:81)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:54)  at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:58)  at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:47)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:81)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:96)  at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168)  at org.tdar.core.parser.pdfatest.testfile(pdfatest.java:44)  at org.tdar.core.parser.pdfatest.test(pdfatest.java:21)  at sun.reflect.nativemethodaccessorimpl.invoke0(native method)  at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)  at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)  at java.lang.reflect.method.invoke(method.java:606)  at org.junit.runners.model.frameworkmethod$1.runreflectivecall(frameworkmethod.java:50)  at org.junit.internal.runners.model.reflectivecallable.run(reflectivecallable.java:12)  at org.junit.runners.model.frameworkmethod.invokeexplosively(frameworkmethod.java:47)  at org.junit.internal.runners.statements.invokemethod.evaluate(invokemethod.java:17)  at org.junit.runners.parentrunner.runleaf(parentrunner.java:325)  at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:78)  at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:57)  at org.junit.runners.parentrunner$3.run(parentrunner.java:290)  at org.junit.runners.parentrunner$1.schedule(parentrunner.java:71)  at org.junit.runners.parentrunner.runchildren(parentrunner.java:288)  at org.junit.runners.parentrunner.access$000(parentrunner.java:58)  at org.junit.runners.parentrunner$2.evaluate(parentrunner.java:268)  at org.junit.runners.parentrunner.run(parentrunner.java:363)  at org.eclipse.jdt.internal.junit4.runner.junit4testreference.run(junit4testreference.java:86)  at org.eclipse.jdt.internal.junit.runner.testexecution.run(testexecution.java:38)  at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:459)  at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:675)  at org.eclipse.jdt.internal.junit.runner.remotetestrunner.run(remotetestrunner.java:382)  at org.eclipse.jdt.internal.junit.runner.remotetestrunner.main(remotetestrunner.java:192) and java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.font.pdtype0font.getfontwidth(pdtype0font.java:188)  at org.apache.pdfbox.preflight.font.container.fontcontainer.checkglyphwith(fontcontainer.java:114)  at org.apache.pdfbox.preflight.content.contentstreamwrapper.validtext(contentstreamwrapper.java:372)  at org.apache.pdfbox.preflight.content.contentstreamwrapper.validstringarray(contentstreamwrapper.java:296)  at org.apache.pdfbox.preflight.content.contentstreamwrapper.validstringarray(contentstreamwrapper.java:292)  at org.apache.pdfbox.preflight.content.contentstreamwrapper.checkshowtextoperators(contentstreamwrapper.java:208)  at org.apache.pdfbox.preflight.content.contentstreamwrapper.processoperator(contentstreamwrapper.java:180)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235)  at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215)  at org.apache.pdfbox.preflight.content.contentstreamwrapper.validpagecontentstream(contentstreamwrapper.java:75)  at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validatecontent(singlepagevalidationprocess.java:179)  at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:87)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:81)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:54)  at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:58)  at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:47)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:81)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:96)  at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168)  at org.tdar.core.parser.pdfatest.testfile(pdfatest.java:44)  at org.tdar.core.parser.pdfatest.test(pdfatest.java:21)  at sun.reflect.nativemethodaccessorimpl.invoke0(native method)  at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)  at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)  at java.lang.reflect.method.invoke(method.java:606)  at org.junit.runners.model.frameworkmethod$1.runreflectivecall(frameworkmethod.java:50)  at org.junit.internal.runners.model.reflectivecallable.run(reflectivecallable.java:12)  at org.junit.runners.model.frameworkmethod.invokeexplosively(frameworkmethod.java:47)  at org.junit.internal.runners.statements.invokemethod.evaluate(invokemethod.java:17)  at org.junit.runners.parentrunner.runleaf(parentrunner.java:325)  at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:78)  at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:57)  at org.junit.runners.parentrunner$3.run(parentrunner.java:290)  at org.junit.runners.parentrunner$1.schedule(parentrunner.java:71)  at org.junit.runners.parentrunner.runchildren(parentrunner.java:288)  at org.junit.runners.parentrunner.access$000(parentrunner.java:58)  at org.junit.runners.parentrunner$2.evaluate(parentrunner.java:268)  at org.junit.runners.parentrunner.run(parentrunner.java:363)  at org.eclipse.jdt.internal.junit4.runner.junit4testreference.run(junit4testreference.java:86)  at org.eclipse.jdt.internal.junit.runner.testexecution.run(testexecution.java:38)  at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:459)  at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:675)  at org.eclipse.jdt.internal.junit.runner.remotetestrunner.run(remotetestrunner.java:382)  at org.eclipse.jdt.internal.junit.runner.remotetestrunner.main(remotetestrunner.java:192) i've tried opening these pdfs in acrobat and callas pdftool and validate them and they have no issues.",
        "label": 1
    },
    {
        "text": "hybrid reference pdf still contain xrefstm info in the trailer dictionary afterpddocument save word2010.pdf is the input pdf, i open the document with pdfbox add a string to the pdf. in this case \u2018hello world!\u2019. afterwards i save the pdf. if i look at the content of the pdf before and after i modified it (using notepad++) i see this: word2010.pdf: line 647: <</size 18/root 1 0 r/info 7 0 r/id[<ae9af29d5a22ae47b47c4da29170be64><ae9af29d5a22ae47b47c4da29170be64>] /prev 81972/xrefstm 81702>> modified_word2010.pdf: line 791: /xrefstm 81702 xrefstm is not updated although the original pdf had multiple revisions that were merged into a new pdf document. a third party library we use defends on this xrefstm value and cannot open the pdf after it was modified. (stack trace see previous msg) any help would be much appreciated. maruan: that\u2019s a bug. explanation: the original file uses what\u2019s called a hybrid reference. that\u2019s for compatibility with readers which do not support compressed reference streams. the file generated by pdfbox doesn\u2019t use hybrid references any more but still contains the xrefstm info in the trailer dictionary. see http://mail-archives.apache.org/mod_mbox/pdfbox-users/201403.mbox/%3c4425df0d5759d64aa8845aa3ec444e1d014ae30ab3%40exchange03.unifiedpost.com%3e for more info.",
        "label": 1
    },
    {
        "text": "unreadable fonts on unix i'm converting pdfs to tif. the conversion is fine when run in windows. when i run the same code in unix ,its converting with a font that is unreadable. i put some font ttf files in the classes path but that has not made any difference. please help.",
        "label": 1
    },
    {
        "text": "using renderingmode with pdpagecontentstream when outputting text with a pdpagecontentstream i'd like to set the rendering mode (particularly to invisible/renderingmode.neither). use of pdpagecontentstream.appendrawcommands(\"3 tr\"), is deprecated in pdfbox version 2.0.2. i suggest to implement something like a setrenderingmode on pdpagecontentstream as an enhancement.",
        "label": 11
    },
    {
        "text": "npe from pdpagelabels with a large number pdpagelabelranges section 3.8.6 states that number trees have either \"nums\" or \"kids\" entries. the current pdpagelabels does not handle kids and fails with a npe. fix: public pdpagelabels(pddocument document, cosdictionary dict) throws ioexception { this(document); if (dict == null) { return; } pdnumbertreenode root = new pdnumbertreenode(dict, cosdictionary.class); findlabels(root); } private void findlabels(pdnumbertreenode node) throws ioexception { if (node.getkids() != null) { @suppresswarnings(\"unchecked\") list<pdnumbertreenode> kids = node.getkids(); for (pdnumbertreenode kid : kids) { findlabels(kid); } } else if (node.getnumbers() != null) { @suppresswarnings(\"unchecked\") map<integer, cosdictionary> numbers = node.getnumbers(); for (entry<integer, cosdictionary> i : numbers.entryset()) { labels.put(i.getkey(), new pdpagelabelrange(i.getvalue())); } } }",
        "label": 1
    },
    {
        "text": "extracttext  html doesn't always close the  p  tags it opens i have a test document (same one on pdfbox-1129), which when run through extracttext -html, extracts the page number for each page, however in each case the page number looks like: <p>n<p>text of page n... ie, the <p> tag for the page number wasn't closed. maybe related: if i run extracttext without html, there is not space after the page number and before the next word, ie i see words like 1massachusetts, 2course, 3also, 4the.",
        "label": 1
    },
    {
        "text": "dateconverter  allow for external adding of potential date parsing formats please create a method \"addpotentialdateformat\" in class dateconverter so that new date formats can be added from the outside without modifying the jembox sources themselves.",
        "label": 1
    },
    {
        "text": "bad required namespace prefix for xmpschemapdfaid in the iso 19005 standard, the namespace prefix is \"pdfaid\" for the namespace \"http://www.aiim.org/pdfa/ns/id/\". in this case, this prefix is required, and not preferred (as it is for dublin core for instance). the constructor of xmpschemapdfaid should be changed from \"pdfatype\" to \"pdfaid\"",
        "label": 1
    },
    {
        "text": "support explicit retrieval of page labels [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1283254 originally submitted by cvonsee on 2005-09-06 11:26. please include methods in pdpage (or elsewhere) to allow explicit retrieval of page label information for the current page and for all pages. retrieved information should include everything that is available from the pdf, including page numbering style, label prefix and page number for current page. thanks! keep up the good work! chris von see",
        "label": 7
    },
    {
        "text": "printimagelocations doesn't print images inside pdxobjectform objects some pdf store images inside forms to reuse them throughout the document. printimagelocations misses such images. a workaround that works for some documents: if (xobject instanceof pdxobjectform) { map images = ((pdxobjectform) xobject).getresources() .getimages(); if (images != null) { iterator imageiter = images.keyset().iterator(); while (imageiter.hasnext()) { string key = (string) imageiter.next(); pdxobjectimage image = (pdxobjectimage) images.get(key); string name = key; //system.out.println(\"writing image:\" + name); //image.write2file(name); try { pdpage page = getcurrentpage(); matrix ctm = getgraphicsstate() .getcurrenttransformationmatrix(); double rotationinradians = (page.findrotation() * math.pi) / 180; affinetransform rotation = new affinetransform(); rotation.settorotation(rotationinradians); affinetransform rotationinverse = rotation.createinverse(); matrix rotationinversematrix = new matrix(); rotationinversematrix .setfromaffinetransform(rotationinverse); matrix rotationmatrix = new matrix(); rotationmatrix.setfromaffinetransform(rotation); matrix unrotatedctm = ctm.multiply(rotationinversematrix); float xscale = unrotatedctm.getxscale(); float yscale = unrotatedctm.getyscale(); imagesinformation.add(new imageinformation(name, unrotatedctm.getxposition(), unrotatedctm.getyposition(), xscale / 100f * image.getwidth(), yscale / 100f * image.getheight())); } catch (noninvertibletransformexception e) { throw new wrappedioexception(e); } } } } if (xobject instanceof pdxobjectimage) { try { pdxobjectimage image = (pdxobjectimage) xobject; pdpage page = getcurrentpage(); matrix ctm = getgraphicsstate() .getcurrenttransformationmatrix(); double rotationinradians = (page.findrotation() * math.pi) / 180; affinetransform rotation = new affinetransform(); rotation.settorotation(rotationinradians); affinetransform rotationinverse = rotation.createinverse(); matrix rotationinversematrix = new matrix(); rotationinversematrix .setfromaffinetransform(rotationinverse); matrix rotationmatrix = new matrix(); rotationmatrix.setfromaffinetransform(rotation); matrix unrotatedctm = ctm.multiply(rotationinversematrix); float xscale = unrotatedctm.getxscale(); float yscale = unrotatedctm.getyscale(); imagesinformation.add(new imageinformation(objectname.getname(), unrotatedctm.getxposition(), unrotatedctm.getyposition(), xscale / 100f * image.getwidth(), yscale / 100f * image.getheight())); } catch (noninvertibletransformexception e) { throw new wrappedioexception(e); }",
        "label": 1
    },
    {
        "text": "load fdf document creates temp file when called with file parameter load fdf document creates temp file when called with file parameter, as shown by this stack trace from https://stackoverflow.com/questions/28229085/temp-file-creation-error-on-gae-with-pdfbox com.sun.jersey.spi.container.containerresponse mapmappablecontainerexception: the runtimeexception could not be mapped to a response, re-throwing to the http container java.lang.securityexception: unable to create temporary file  at java.io.file.checkandcreate(file.java:1873)  at java.io.file.createtempfile(file.java:1968)  at java.io.file.createtempfile(file.java:2013)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.createtmpfile(nonsequentialpdfparser.java:298)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.<init>(nonsequentialpdfparser.java:278)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.<init>(nonsequentialpdfparser.java:264)  at org.apache.pdfbox.pdmodel.fdf.fdfdocument.load(fdfdocument.java:200)  at org.apache.pdfbox.pdmodel.fdf.fdfdocument.load(fdfdocument.java:172) and this source code         file pdffile = new file(\"resources/generatefdf.pdf\");         file fdffile = new file(\"resources/fdftest.fdf\");         pddocument pdfdoc = pddocument.load(pdffile);         fdfdocument fdfdoc = fdfdocument.load(fdffile); i had a quick look at the sources of fdfdocument:     public static fdfdocument load( file file ) throws ioexception     {         return load( new bufferedinputstream( new fileinputstream( file ) ) );     } is it needed this way, i.e. can't the nonsequentialpdfparser constructor be called instead, as it is done when opening a *p*df document?",
        "label": 11
    },
    {
        "text": "classcastexception in getoptionalcontentgroups i noticed this issue when trying to remove a set of layers i previously added on a multi-page pdf. i noticed it in version 2.0.6, but might be present in others. here is a stacktrace snippet: caused by: java.lang.classcastexception: org.apache.pdfbox.cos.cosdictionary cannot be cast to org.apache.pdfbox.cos.cosobject at org.apache.pdfbox.pdmodel.graphics.optionalcontent.pdoptionalcontentproperties.getoptionalcontentgroups(pdoptionalcontentproperties.java:180). i looked at the source and saw the todictionary method that seemed to be used in every other place so i just put in in place and it seems to have solved the issue. i've uploaded the updated file, the one that i'm using, which you can review and include in your project if it's a valid fix.",
        "label": 11
    },
    {
        "text": "error org apache pdfbox filter flatefilter   stop reading corrupt stream this report: http://www2.goldmansachs.com/our-firm/press/press-releases/current/pdfs/2010-q2-earnings.pdf with this code: public static string gettransformed(inputstream inputstream) { pddocument pddocument = null; string document = null; try { pdfparser parser = new pdfparser(inputstream); parser.parse(); pddocument = parser.getpddocument(); pdftext2html pdf2html = new pdftext2html(\"utf-8\"); document = pdf2html.gettext(pddocument); } catch (ioexception e) { e.printstacktrace(); } finally { if (pddocument != null) { try { pddocument.getdocument().close(); } catch (ioexception e) { e.printstacktrace(); } } } return document; } returns: 17:01:15,609 [main] error org.apache.pdfbox.filter.flatefilter - stop reading corrupt stream null java.io.ioexception: error: expected an integer type, actual='' at org.apache.pdfbox.pdfparser.baseparser.readint(baseparser.java:1310) at org.apache.pdfbox.pdfparser.pdfobjectstreamparser.parse(pdfobjectstreamparser.java:81) at org.apache.pdfbox.cos.cosdocument.dereferenceobjectstreams(cosdocument.java:449) at org.apache.pdfbox.pdmodel.pddocument.openprotection(pddocument.java:1112) at org.apache.pdfbox.pdmodel.pddocument.decrypt(pddocument.java:591) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:246) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:184) in foxit pdf this file was opened normally",
        "label": 0
    },
    {
        "text": "expected 'obj' actual 'o' error while parsing the attached pdf parsing the attached pdf fails with the following error: caused by: java.io.ioexception: expected='obj' actual='o' org.apache.pdfbox.io.pushbackinputstream@11d75b9 at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:509) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:179) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:859) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:826) ... the same errors appears with the 1.1, 1.2 releases and the 1.3 latest trunk so far - svn rev. 962879 . the file opens without warnings or any visible issues in the latest versions of foxit reader and acrobat reader on windows. the parsing was done via the apache tika parser. thank you",
        "label": 12
    },
    {
        "text": "pddocument protect changes color palette when applying protection to a pdf the resulting pdf shows weird background colors. the following minimal sample program produces the observed behaviour in attached pdf \"zieldatei-mit-schutz.pdf\" package protecttest; // $ java -version // openjdk version \"1.8.0_181\" // openjdk runtime environment (build 1.8.0_181-8u181-b13-0ubuntu0.18.04.1-b13) // openjdk 64-bit server vm (build 25.181-b13, mixed mode) // compile with // javac -cp pdfbox-2.0.11.jar protecttest/pdfprotector.java // execute with // java -cp pdfbox-2.0.11.jar:commons-logging-1.1.3.jar:. protecttest.pdfprotector import java.io.file; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.encryption.accesspermission; import org.apache.pdfbox.pdmodel.encryption.standardprotectionpolicy; public class pdfprotector {     public static void main(string[] args) throws exception {     // load and save with no protection     pddocument d1 = pddocument.load(new file(\"quelldatei.pdf\"));     d1.save(new file(\"zieldatei-ohne-schutz.pdf\"));     d1.close();     // everything seems fine with the resulting pdf     // load and save with protection         pddocument d2 = pddocument.load(new file(\"quelldatei.pdf\"));     accesspermission ap = new accesspermission();     ap.setcanassembledocument(false);     ap.setcanmodify(false);     d2.protect(new standardprotectionpolicy(\"foobar\",\"\",ap));     d2.save(new file(\"zieldatei-mit-schutz.pdf\"));     d2.close();     // resulting file is rendered with odd colors     } }",
        "label": 11
    },
    {
        "text": "invalid color space ok with commercial validators autoppdfa.pdf is not valid, error(s): 2.4.9:invalid color space, invalid color space, iccbased colorspace is forbidden.",
        "label": 3
    },
    {
        "text": "npe in glyfcompositedescript getpointcount i get this with the attached file: exception in thread \"awt-eventqueue-0\" java.lang.nullpointerexception         at org.apache.fontbox.ttf.glyfcompositedescript.getpointcount(glyfcompositedescript.java:199)         at org.apache.fontbox.ttf.glyphrenderer.describe(glyphrenderer.java:56)         at org.apache.fontbox.ttf.glyphrenderer.getpath(glyphrenderer.java:46)         at org.apache.fontbox.ttf.glyphdata.getpath(glyphdata.java:114)         at org.apache.pdfbox.rendering.font.ttfglyph2d.getpathforglyphid(ttfglyph2d.java:202)         at org.apache.pdfbox.rendering.font.ttfglyph2d.getpathforcharactercode(ttfglyph2d.java:154)",
        "label": 11
    },
    {
        "text": "wasted work in publickeysecurityhandler preparefordecryption  the problem appears in version 1.7.1 and in revision 1414743. i attached a one-line patch that fixes it. this problem and the attached patch are similar the previously fixed pdfbox-1447 and its patch. in method \"publickeysecurityhandler.preparefordecryption\", the loop over \"recipcertificatesit\" should break immediately after \"foundrecipient\" is set to \"true\" and \"envelopeddata\" is set to \"ri.getcontent(...)\". all the iterations after \"foundrecipient\" is set to \"true\" do not perform any useful work because the \"if\" statement depends on \"!foundrecipient\".",
        "label": 1
    },
    {
        "text": "incorrect embedding of non subset fonts  the following code produces a broken pdf. final string dir = \"/users/user/documents/pdf/\"; pddocument doc = new pddocument(); pdpage pg = new pdpage(); pdpagecontentstream con = new pdpagecontentstream(doc, pg); con.begintext(); // working fine when below is true, not when it is false. con.setfont(pdtype0font.load(doc, new fileinputstream(dir + \"notosans-regular.ttf\"), false), 16); con.settextmatrix(matrix.gettranslateinstance(50, 600)); con.showtext(\"hello world\"); con.endtext(); con.close(); doc.addpage(pg); doc.save(new file(dir + \"out.pdf\")); doc.close(); as mentioned in the code, it works fine when the subset is true. i've tried it with a few fonts. the referenced font is downloadable from here: https://www.google.com/fonts#useplace:use/collection:noto+sans behavior in chrome: shows random characters. behavior in mac preview: shows selectable whitespace. behavior in acrobat reader: shows message on open (cannot find or create the font 'notosans'. some characters may not display or print correctly). shows dots instead of characters. behavior in safari: same as preview. tested with 2.0.0 and 2.0.2. why does this matter? we need a complete font to embed to use in text acro form fields. thanks.",
        "label": 11
    },
    {
        "text": "npe in pdactionuri geturi  if uri doesn't exist this code brings an npe:         pdactionuri actionuri = new pdactionuri();         actionuri.geturi(); this is because of my change in pdfbox-3913",
        "label": 11
    },
    {
        "text": " pdfbox app  maven bundle configuration problem the problem with the current maven-bundle-plugin setting of the pdfbox-app plugin is that, junit and the commons logging log framework implementations are required. in addition many javax packages are imported which are not requierd.",
        "label": 7
    },
    {
        "text": "javadoc for cosbase setneedtobeupdate i tried to understand what the cosbase needtobeupdate flag stands for and i only found this in the coswriter.             if(actual != null && objectkeys.containskey(actual) &&                     !object.isneedtobeupdate() && (cosbase!= null &&                     !cosbase.isneedtobeupdate()))             {                 return;             } i kind of think i got what it's used for but maybe someone who knows better could add some javadoc? thanks",
        "label": 11
    },
    {
        "text": "writedecodeddoc cant decrypt pdf correctly java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar writedecodeddoc aes256_57.pdf tmp.pdf \"kind regards\" missing i guess you will ask me to use nonseq",
        "label": 11
    },
    {
        "text": "stackoverflowerror in preflight i get a stack overflow with the attached file. i can't even get the full trace. exception in thread \"main\" java.lang.stackoverflowerror  at java.util.regex.pattern$single.<init>(unknown source)  at java.util.regex.pattern.newsingle(unknown source)  at java.util.regex.pattern.atom(unknown source)  at java.util.regex.pattern.sequence(unknown source)  at java.util.regex.pattern.expr(unknown source)  at java.util.regex.pattern.compile(unknown source)  at java.util.regex.pattern.<init>(unknown source)  at java.util.regex.pattern.compile(unknown source)  at java.lang.string.replaceall(unknown source)  at org.apache.pdfbox.pdmodel.font.externalfonts.getsubstitutes(externalfonts.java:208)  at org.apache.pdfbox.pdmodel.font.externalfonts.gettruetypefont(externalfonts.java:384)  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.<init>(pdtruetypefont.java:144)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:81)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.getfonts(resourcesvalidationprocess.java:127)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatefonts(resourcesvalidationprocess.java:93)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:76)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178)  at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75)  at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:70)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:288)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80)",
        "label": 11
    },
    {
        "text": "nonsequentialpdfparser incorrectly parsing document info when using the nonsequentialpdfparser, the pddocumentinformation returned by getdocumentinformation() seems to contain all null entries, which does not occur when using the standard pdfparser. i have a large batch of pdf files which have random and strange issues that cause them to occasionally fail with the standard parser, so i was experimenting with the nonsequential parser and came across this issue. i'll attempt to attach some test code & a test pdf file for which i can replicate the issue.",
        "label": 1
    },
    {
        "text": "character positioning in pdfreader [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1290572 originally submitted by benlitchfield on 2005-09-13 18:13. the pdfreader(and subsequently printing) does not always position characters correctly. see:convention20.pdf original-spacing-issue.pdf result-spacing-issue.pdf",
        "label": 1
    },
    {
        "text": "generics added to maputil using generics for getnextuniquekey to avoid eclipse hint",
        "label": 11
    },
    {
        "text": "text fields if initialy empty in acroforms do not contain a cosname v in its dictionary and therefore does not get rendered  when filling pdf acro forms if a text field initialy does not contain a value ( is empty) then the fieldtreenode does not set cosname.v in it's dictionary and therefore calling setvalue does not update the value and does not render. this is solved by calling field.getdictionary().setitem(cosname.v, new cosstring(\"some new value\")); instead of setvalue. this is probobally not desired. so either add it to constructor or somewhere else. this affects the trunk version (downloaded on 5.1.2015)",
        "label": 8
    },
    {
        "text": "swedish characters are garbled in form when using swedish characters to fill in a form they show up garbled in the pdf. this seems to have to do with the pdappearance class. when calling setvalue on the field, the value seems to be set ok since cosstring handles characters outside ascii in its writepdf method. when pdappearance writes the value in insertgeneratedappearance it does not do the same check. if the same check is done it seems to work for pdappearance to (see patch below). since i do not know very much about the pdf format, i dont know if this is the right way to do it... pddocument document = pddocument.load(<pdf-file>); pddocumentcatalog doccatalog = document.getdocumentcatalog(); pdacroform form = doccatalog.getacroform(); pdfield field = form.getfield(<field name>); field.setvalue(\"\u00e5\u00e4\u00f6\"); @@ -400,9 +401,32 @@ { throw new ioexception( \"error: unknown justification value:\" + q ); } printwriter.println(\"(\" + value + \") tj\"); printwriter.println(\"et\" ); printwriter.flush(); + boolean outsideascii = false; + byte[] bytes = value.getbytes(\"iso-8859-1\"); + int length = bytes.length; + + for( int i=0; i<length && !outsideascii; i++ ) + { + //if the byte is negative then it is an eight bit byte and is + //outside the ascii range. + outsideascii = bytes[i] <0; + } + if(!outsideascii) { + printwriter.println(\"(\" + value + \") tj\"); + printwriter.println(\"et\" ); + printwriter.flush(); + } else unknown macro: {+ printwriter.print(\"<\");+ for(int i=0; i<length; i++ )+ { + string val = coshextable.hex_table[ (bytes[i]+256)%256 ]; + printwriter.write(val); + }+ printwriter.println(\"> tj\");+ printwriter.println(\"et\" );+ printwriter.flush(); + } }",
        "label": 8
    },
    {
        "text": "add certificate dictionary to seed value in signature field this dictionary is important as it gives the ability to put certificate constraints on a signature field, like if you want signatures that are signed by a specific issuer or authority to only be used in a field. currently tested issuer constraint and it worked, acrobat reader ignores other certificates and only allow the issuer given to sign the field. documentation is not complete waiting for the initial acceptance to complete. new class pdseedvaluecertificate is added which refers to this certificate. pdseedvalue is modified to add the new dictionary. cosname is modified to add the new pdf names that are included in the dictionary. reference for this dictionary can be found in pdf reference 1.7 section 12.7.4.5 table 235 page 457 in here http://www.adobe.com/content/dam/acom/en/devnet/pdf/pdf32000_2008.pdf or chapter 8 table 8.84 page 700 in here http://archimedespalimpsest.net/documents/external/pdf_reference_1-7.pdf and in here https://www.adobe.com/devnet-docs/acrobatetk/tools/digsig/acrobat_digitalsignatures_in_pdf.pdf this is my first contribution, hope everything goes well.",
        "label": 11
    },
    {
        "text": "read non conforming pdfs  attached  without throwing java io ioexception  expected 'endobj' org apache pdfbox io pushbackinputstream this happened using the following pdf (~2mb): http://biblioteca.sinbad.ua.pt/disqsws/get.aspx?filename=2010001615.pdf&catalog=teses&type=pdf when reading non-conforming pdfs like the one above the following exception is thrown and the text extraction partially fails: warn - parsing error, skipping object java.io.ioexception: expected='endobj' firstreadattempt='' secondreadattempt='' org.apache.pdfbox.io.pushbackinputstream@53ab04 at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:607) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:172) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:878) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:843) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:74) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:197) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:197) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:137) at org.apache.tika.cli.tikacli.process(tikacli.java:218) at org.apache.tika.cli.tikacli.main(tikacli.java:84)",
        "label": 0
    },
    {
        "text": "threads using pdfbox getting stuck when using standard fonts user patrick stahle reports: we have a relatively heavily threaded application which is calling pdfbox to stamp certain pdf files. we have been in production for a little over a week and have run into a few threads getting stuck. the stack trace is the following: ### thread id=34, name=\"dispatch_2_20160626211454_1064\" # threadinfo: \"dispatch_2_20160626211454_1064\" id=34 runnable # cpu: threadcputime=49,541,548.824 ms, threadusertime=49,538,533.066 ms # contention: blockedcount=33 , blockedtime=123 ms # contention: lockname=null , lockownerid=-1, lockownername=null java.util.hashmap.put(hashmap.java:473) java.util.hashset.add(hashset.java:217) java.util.abstractcollection.addall(abstractcollection.java:334) org.apache.pdfbox.pdmodel.font.encoding.encoding.contains(encoding.java:109) org.apache.pdfbox.pdmodel.font.pdtype1font.encode(pdtype1font.java:343) org.apache.pdfbox.pdmodel.font.pdfont.encode(pdfont.java:286) org.apache.pdfbox.pdmodel.font.pdfont.getstringwidth(pdfont.java:315) com.tycoelectronics.emcs.stamppdf.stampenginepdfbox.getlongesttextwidth(stampenginepdfbox.java:1369) we seem to be getting stuck in pdfont classes hashmap which is unsynchronized class. we are using \"pdtype1font.helvetica\". the problem is that for the standard 14 fonts, each font is a singleton, but its code is being used multithreaded, so we have to secure that.",
        "label": 11
    },
    {
        "text": "support jpeg color space code  jcs ycck  in dctfilter we have a work around for 4-component images which handles certain color space codes to decide for ycck and cmyk color space. i have a document (c&en journal issue, http://cen.acs.org/index.html) with some images returning color space code 11 which should be jcs_ycck. adding this code for ycck type the images display fine.",
        "label": 12
    },
    {
        "text": "content outside the mediabox should not be rendered from the pdf spec ( http://www.adobe.com/content/dam/adobe/en/devnet/acrobat/pdfs/pdf32000_2008.pdf page 628): \"the crop, bleed, trim, and art boxes shall not ordinarily extend beyond the boundaries of the media box. if they do, they are effectively reduced to their intersection with the media box.\" the attached file has the following characteristics: mediabox: [18.0,20.592,630.0,812.88] cropbox: [0.0,0.0,648.0,1043.0] trimbox: [0.0,0.0,648.0,1043.0] bleedbox: [0.0,0.0,648.0,1043.0] in adobe reader, the \"do not print\" section above the mediabox does not display, but when using pdfbox it does.",
        "label": 11
    },
    {
        "text": "cosdocument and pddocument declare throws ioexception when they don't the doc for cosdocument() says it throws an ioexception if there is an error creating the temp file. if you dig through the code a temp is never created, a value of null is assigned to tmpfile. upon fixing the cosdocument() constructor, the constructor for pddocument will also not need to declare an ioexception as a possible throws.",
        "label": 11
    },
    {
        "text": "some pdf files are causing exception  java io ioexception  error  could not find font cosname f53  in map  i am using pdfbox 1.7.1 and when parsing some pdf files, it is throwing exceptions and it's filling the tomcat log very quickly (100mb in few seconds). there was another bug filed related to this issue. i tried the patch supplied in that bug but the issue is still there. i want to mention that the text gets extracted successfully from the pdf. but it just throws a log of warn messages in the logs. as a workaround, i have set the log level to error to avoid those warn messages. here is the problematic pdf file: http://doratst.uark.edu/fedora/repository/default%3a1590/obj/traveler20120822.pdf related bug: https://issues.apache.org/jira/browse/pdfbox-1359#comment-13584669 i am getting the following exception: warn 2013-02-22 14:41:19,519 (pdfstreamengine) java.lang.nullpointerexception java.lang.nullpointerexception warn 2013-02-22 14:41:19,519 (pdfstreamengine) java.lang.nullpointerexception java.lang.nullpointerexception warn 2013-02-22 14:41:19,519 (pdfstreamengine) java.io.ioexception: error: could not find font(cosname {f53.0}) in map={f50.1=org.apache.pdfbox.pdmodel.font.pdtype1font@50246923, f51.0=org.apache.pdfbox.pdmodel.font.pdtype1font@672a1f0} java.io.ioexception: error: could not find font(cosname{f53.0} ) in map= {f50.1=org.apache.pdfbox.pdmodel.font.pdtype1font@50246923, f51.0=org.apache.pdfbox.pdmodel.font.pdtype1font@672a1f0} at org.apache.pdfbox.util.operator.settextfont.process(settextfont.java:57) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:556) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:270) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:237) at org.apache.pdfbox.util.operator.invoke.process(invoke.java:67) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:556) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:270) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:237) at org.apache.pdfbox.util.operator.invoke.process(invoke.java:67) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:556) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:270) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:237) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:217) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:448) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:372) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:328) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:247) at dk.defxws.fedoragsearch.server.transformertotext.gettextfrompdf(transformertotext.java:335) at dk.defxws.fedoragsearch.server.transformertotext.gettext(transformertotext.java:194) at dk.defxws.fedoragsearch.server.genericoperationsimpl.getdatastreamtext(genericoperationsimpl.java:668) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:39) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:25) at java.lang.reflect.method.invoke(method.java:597) at org.apache.xalan.extensions.extensionhandlerjavaclass.callfunction(extensionhandlerjavaclass.java:399) at org.apache.xalan.extensions.extensionhandlerjavaclass.callfunction(extensionhandlerjavaclass.java:438) at org.apache.xalan.extensions.extensionstable.extfunction(extensionstable.java:220) at org.apache.xalan.transformer.transformerimpl.extfunction(transformerimpl.java:473) at org.apache.xpath.functions.funcextfunction.execute(funcextfunction.java:206) at org.apache.xpath.expression.executecharstocontenthandler(expression.java:311)",
        "label": 1
    },
    {
        "text": "slow performance when printing pdf  fix provided  when printing a pdf document (4 pages, 177kb, link below) using command java -jar pdfbox-app-2.0.0-rc1.jar printpdf test.pdf processing of the document before print takes about 15 seconds on system with core i5-4670 processor. most of the time is wasted on reading font files from system. the reason is that the font is read byte by byte in an unbuffered manner. the defective code is located in class org.apache.fontbox.ttf.rafdatastream, where new instance of randomaccessfile is created without buffering. i prepared a buffer wrapper over randomaccessfile that adds buffering to randomaccessfile. use of the buffer in rafdatastream shortens printing time 5 times, i.e., printing takes 3 seconds instead of 15s. the wrapper class is augmented version of a class released at https://code.google.com/p/jmzreader/wiki/bufferedrandomaccessfile (apache license 2.0). please integrate provided fix with original source of fontbox. pdf document and fix are available at http://1drv.ms/1nskpfc",
        "label": 11
    },
    {
        "text": "writing text into existing pdf   extra spaces between characters on some pages of the pdf i used pdfbox to add text into existing pdf documents (kind of text stamping). for some pages of pdf, the space/gap between letters/characters of the text is much wider ! i cannot explain how/why it happens ?! sample of my code: contentstream.begintext(); contentstream.setnonstrokingcolor(colortext); contentstream.setfont(pdffont, fontsize); contentstream.movetextpositionbyamount(xtext, ytext); contentstream.drawstring(messagestamp); contentstream.endtext();",
        "label": 1
    },
    {
        "text": "when w entries not included in cidfont get width from font by code  improve display of some pdf files  some pdf use cjk font without embedded subset displayed incorrectly, the alphabet become wider. this is before the patch.     this is after the patch. the test file datetest.pdf this patch only get width from font when these isn't a w entry in cidfont. if there is an w entry, then any cid not in w entries will return default width.",
        "label": 11
    },
    {
        "text": "classcastexception in getmetadata if no real meta data here's an exception from tim allison latest tika test (too lazy to test it myself, the cause is obvious) with the attached file: org.apache.tika.exception.tikaexception: unexpected runtimeexception from org.apache.tika.parser.pdf.pdfparser  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:249)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:247)  at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:120)  at org.apache.tika.parser.recursiveparserwrapper.parse(recursiveparserwrapper.java:137)  at org.apache.tika.batch.fs.recursiveparserwrapperfsconsumer.processfileresource(recursiveparserwrapperfsconsumer.java:120)  at org.apache.tika.batch.fileresourceconsumer._processfileresource(fileresourceconsumer.java:153)  at org.apache.tika.batch.fileresourceconsumer.call(fileresourceconsumer.java:96)  at org.apache.tika.batch.fileresourceconsumer.call(fileresourceconsumer.java:38)  at java.util.concurrent.futuretask.run(futuretask.java:262)  at java.util.concurrent.executors$runnableadapter.call(executors.java:471)  at java.util.concurrent.futuretask.run(futuretask.java:262)  at java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145)  at java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615)  at java.lang.thread.run(thread.java:724) caused by: java.lang.classcastexception: org.apache.pdfbox.cos.cosdictionary cannot be cast to org.apache.pdfbox.cos.cosstream  at org.apache.pdfbox.pdmodel.pddocumentcatalog.getmetadata(pddocumentcatalog.java:312)  at org.apache.tika.parser.pdf.pdfparser.extractmetadata(pdfparser.java:181)  at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:158)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:247)  ... 13 more \" here's the excerpt in the pdf: 241 0 obj << /type /metadata /subtype /xml >> endobj the current code is         cosstream stream = (cosstream)root.getdictionaryobject( cosname.metadata ); shall we keep it that way or rather put out a warning if the meta data is not a stream and return null? adobe reader does nothing when looking for the properties.",
        "label": 11
    },
    {
        "text": "missing stream in  xrefstm causes parse to break when the pdf document contains a startref and xref table (a la pdf1.4) as well as an /xrefstm, but the offset given by /xrefstm does not describe a xref (stream or otherwise), pdfbox does its level best to find the xref info using a brute force search. in the case where the document only contains the xref table given by startxref, and does not contain an object of /type /xref, the brute force search results in the xref table. see diffs for cosparser.java(2.0.0) and nonsequentialpdfparser.java (1.8.9), below.",
        "label": 1
    },
    {
        "text": "a text including single quote is malformed with embedded ttf font when a text including single quote is output by an embedded ttf font, it turns into garbage. this can be reproduced by an attached code. this is because the cid code of single quote is 0x0a and escaped in coswriter.writestring(). the attached patch fixes this.",
        "label": 6
    },
    {
        "text": "text extraction gibberish after ghostscript update i have a test pdf document that is generated using ps2pdf from ghostscript. if i use ghostscript 8.70 then pdfbox will correctly extract the text if i use ghostscript 8.71 then pdfbox will not correctly extract the text (same byte count but gibberish characters). i will also note, that i had to update poppler to 0.14 to get it to correctly extract text from the test-871.pdf, the previous version would only extract the correct text from text-870.pdf. attached will be the pdf generated using the same original postscript file but run using ghostscript 8.70 vs 8.71.",
        "label": 1
    },
    {
        "text": "illegalblocksizeexception  input length must be multiple of when decrypting with padded cipher on java version \"1.7.0_72\", java version \"1.8.0_20\" works ok java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage test.pdf exception in thread \"main\" java.io.ioexception: javax.crypto.illegalblocksizeexception: input length must be multiple of 16 when decrypting with padded cipher at javax.crypto.cipherinputstream.getmoredata(cipherinputstream.java:115)",
        "label": 1
    },
    {
        "text": "infinite recursion when trying to extract text from specific types of pdfs hello and thanks for pdfbox. we just started using pdfbox for text extraction(through tika) and it fails to finish text extraction falling in an infinite loop and never returning the text. please note that this happens only for a specific type of pdf documents(used for hand writing recognition) such as the one attached. not sure if this is a bug of pdfbox or due to the nature of the pdfs, but i think that pdfbox should at least break out if extraction is not possible. i wish i could give you more information but i know nothing about pdf format, parsing, etc. please let me know if you need any information or my help in any way. thanks a lot for your time.",
        "label": 1
    },
    {
        "text": "allow access to font data in cfffont we used to have: public map<string, byte[]> getcharstringsdict() now we have: list<byte[]> getcharstringbytes() also we used to be able to create our own new maximumprofiletable() but this is not public anymore. can it be public also.",
        "label": 6
    },
    {
        "text": "pdf signature improvements hallo, i have some signing improvements and want to contribute it. changelog: add ability to sign documents with xref streams (big thanks to a. funk). this will significantly improve the signature creation, due to the fact that there are more and more documents with xref streams out there. add ability to handle documents with hybrid xref (xref stream and table as fallback) parsing incremental updated documents where the offsets of the xref entries doesn't match exactly the position of the object. the conflict solver tollerate objects that are +- 4 bytes out of the offset. fix cosstring parsing if there are malformed chars inside a hex string. removed some confusing logging in the conflict solver add ability to create and sign signature fields. add ability to create pades signature timestamps (pades part4) improved the signature search and added new convenience methods to pddocument. add new methods to the pdsignature object (seed value dict) add examples for signing pdf documents (just basic signatures, i try to add some for advanced signing with signatureoptions and maybe a example for visual signing) hope i don't forgot something. all the changes are made on a pdfbox fork on github. a pull request will follow in a moment. best regards thomas",
        "label": 1
    },
    {
        "text": "recent files in pdf reader a recently opened file list containing menu in pdf reader will be a nice feature in pdf reader. i've made a patch for this. a new package under org.apache.pdfbox.tools is created named util which contains the class recentfiles so that this can be used in feature improvement of other gui tools pdfbox provides. in recentfiles class, file path string is saved in preference by converting and breaking them into byte array. to do that, i've followed this post . i'm saying this to help pdfbox to make an informed decision concerning licences issues if there is any.",
        "label": 11
    },
    {
        "text": "the blank white page is converted with method pdpage converttoimage  the pdf is created by multi-function copier with ocr. when the pdf is scanned without ocr, the image can be generated. when the pdf is scanned with ocr, the blank with image is generated.",
        "label": 1
    },
    {
        "text": "page missing the first page (with \"i\u00e9seg\") was in 2.0.4 but is no longer there since 2.0.5.",
        "label": 1
    },
    {
        "text": "bad display of no break space u 00a0   character no-break space u+00a0 (160) character is displayed as empty frame with thin border.",
        "label": 1
    },
    {
        "text": "support xfa form submitting [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1166672 originally submitted by benlitchfield on 2005-03-19 14:02. pdfbox currently support fdf and xfdf to populate an acroform, the 7.0 version of designer does not support either of these as a submission type. the possiblities are xdp/xfa/full pdf/url encoded params there is alreadu an open rfe for xdp, this is for the xfa format. see this thread for a discussion of this topic https://sourceforge.net/forum/message.php? msg_id=3043621 ben",
        "label": 1
    },
    {
        "text": " patch  rewrite overlay java's stream rewriting and rsrc dict renaming to use pdfstreamprocessor the attached patch reworks the handling of content stream rewriting for resource dictionary clash avoidance in overlay.java . prior to this patch, overlay appends \"overlay\" to all names in the font, xobject and exgstate resource dictionaries, then rewrites content stream(s) in the overlay pdf to reference those new names using a simple hand-rolled content-stream find-and-replace process. it doesn't check for over-length names, and it doesn't check to make sure that the newly generated name(s) don't clash. because pdfs often use the same names for objects, this quickly becomes a problem when you're doing multiple overlays - something that becomes more likely with https://issues.apache.org/jira/browse/pdfbox-1255 but is already useful to do with stock pdfbox. this patch alters overlay so that it only renames objects from the overlay pdf when there is a conflict with the pdf being overlaid upon. it also uses a name generation strategy that checks for conflicts and for over-length names, so multiple overlays will work much better. the patch uses the pdfstreamprocessor (a simplified base extracted from pdfstreamengine by https://issues.apache.org/jira/browse/pdfbox-1256) to copy each stream from the pdf to overlay to a contentstreamwriter. it checks for names that reference renamed resources and substitutes the new name before writing each operator and its arguments to the output stream. the main benefit of this patch is that it enables multiple overlays without name clashes. a secondary benefit of this patch is that it eliminates overlay.java -specific code in favour of using facilities provided by the rest of pdfbox. that makes overlay a better example, helps it test the rest of pdfbox better, and makes it benefit from improvements in pdfbox's stream processor and writer. depends on prior patches in series: https://issues.apache.org/jira/browse/pdfbox-1256 https://issues.apache.org/jira/browse/pdfbox-1255",
        "label": 1
    },
    {
        "text": "unused xref object streams cause parser to fail   fix i have a pdf document with 3 xref streams (no xref table; pdf version 1.6). currently pdfbox reads and parses all 3 streams in the order the appear and combines the data in a dictionary (thus attributes specified in a later xref stream overwrite attributes in earlier streams). the problem with my document is that the first 2 xref streams declare document encryption while the last one does not. furthermore the last one uses another document id thus trying to decrypt the document would fail because of the different ids (however already the parsing of the stream in the first xref object already fails. the solution i came up with is to first get all xref streams, start looking from last one if it contains a 'prev' key and go up the list as long as we have this 'prev' key. this should work in most cases assuming that multiple active xref sections appear in order without an unused xref section in between. a really correct solution would have to test for object byte positions (therefore it would be necessary to store byte positions for each object). the fix in cosdocument.parsexrefstreams(): public void parsexrefstreams() throws ioexception { cosdictionary trailerdict = new cosdictionary(); // use only last xref and xref which are referenced by a used xref via 'prev' // we assume that 'prev' will reference next preceding xref object // (otherwise we would have to use object byte positions) list<cosobject> xrefstreams = getobjectsbytype( \"xref\" ); int firstxrefidx = xrefstreams.size() - 1; while ( firstxrefidx > 0 ) { cosstream stream = (cosstream)xrefstreams.get( firstxrefidx ).getobject(); if ( stream.getint( cosname.prev, -1 ) == -1 ) // no 'prev' key; current xref object will be first one we use break; } // for( cosobject xrefstream : getobjectsbytype( \"xref\" ) ) for ( int xrefidx = firstxrefidx, len = xrefstreams.size(); xrefidx < len; xrefidx++ ) { cosstream stream = (cosstream)xrefstreams.get( xrefidx ).getobject(); trailerdict.addall(stream); pdfxrefstreamparser parser = new pdfxrefstreamparser(stream, this, forceparsing); parser.parse(); } settrailer( trailerdict ); }",
        "label": 1
    },
    {
        "text": "classcastexception on cosdocument getdocumentid i got this error while trying to save a pdf where i added encryption: ava.lang.classcastexception: org.apache.pdfbox.cos.cosobject cannot be cast to org.apache.pdfbox.cos.cosarray at org.apache.pdfbox.cos.cosdocument.getdocumentid(cosdocument.java:379) at org.apache.pdfbox.pdmodel.encryption.standardsecurityhandler.preparedocumentforencryption(standardsecurityhandler.java:300) at org.apache.pdfbox.pdfwriter.coswriter.write(coswriter.java:1306) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1121) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1102) inspecting the pdf in a repl, i found out that the id is not a direct array, but a reference to one. i changed the line 401 of cosdocument.java to use getdictionaryobject instead of getitem and it seemed to fix the problem.",
        "label": 1
    },
    {
        "text": "barcode getting color inverted in pdf to image conversion while converting a 1 page pdf to an image (both attached below), the image converts properly, however the barcodes colours invert. the code used to do the conversion looks like this right now: public static void convertpdftojpg(string src){ try{ //load pdf file in the document object pddocument doc=pddocument.load(new fileinputstream(src)); //get all pages from document and store them in a list list<pdpage> pages=doc.getdocumentcatalog().getallpages(); //create iterator object so it is easy to access each page from the list iterator<pdpage> i= pages.iterator(); int count=1; //count variable used to separate each image file //convert every page of the pdf document to a unique image file system.out.println(\"please wait...\"); while(i.hasnext()) { pdpage page=i.next(); bufferedimage bi=page.converttoimage( bufferedimage.type_int_rgb, 300); fileoutputstream fos = new fileoutputstream(new file(\"d:\\\\slika2_3.jpg\")); //imageio.write(bi, \"jpg\", new file(\"d:\\\\pdfimageold.jpg\")); boolean foundwriter = imageioutil.writeimage(bi, \"jpg\", fos, 300); count++; } system.out.println(\"conversion complete\"); }catch(ioexception ie) {ie.printstacktrace();} }",
        "label": 11
    },
    {
        "text": "pdfield setvalue is not behave correctly use a template pdf file to write value into different fields (type of pdtextbox, pdcheckbox, pdchoicefield). the pdtextbox displays either very large font or not show anything. if click into the field, it displays correctly. click outside the field, it reverts back to the wrong display. the same logic of code works well with itext library. the code similar to: pdftemplate = pddocument.load(\"mytemplate.pdf\"); pddocumentcatalog doccatalog = pdftemplate.getdocumentcatalog(); pdacroform acroform = doccatalog.getacroform(); : try { pdfield pdfield = acroform.getfield(field); if (pdfield != null) pdfield.setvalue(value); } catch(...){} :",
        "label": 8
    },
    {
        "text": "pdfdebugger does not handle cancelling of  open url  dialog in pdfdebugger, click the menu item \"open url...\" and then cancel the dialog. a malformedurlexception caused by a npe is thrown. after that, it is not possible to open any other file nor to close the application, since both throws a npe in the code updating the list of last recently used files.",
        "label": 11
    },
    {
        "text": "byte short tiff tags not read correctly all tag values (even byte/short) are currently read as a long value. that works fine as long as the value is padded with 0. unfortunately, the very first file from production environment i tried to process with ccittfactory failed, because short value was not padded with 0 (the complete tag data is 1201 0300 0100 0000 0100 3832 - little endian): java.io.ioexception: orientation 842530817 is not supported at org.apache.pdfbox.pdmodel.graphics.image.ccittfactory.extractfromtiff(ccittfactory.java:392) at org.apache.pdfbox.pdmodel.graphics.image.ccittfactory.createfromrandomaccessimpl(ccittfactory.java:219) at org.apache.pdfbox.pdmodel.graphics.image.ccittfactory.createfromfile(ccittfactory.java:167) at org.apache.pdfbox.pdmodel.graphics.image.ccittfactorytest.testcreatefromrandomaccesssingle(ccittfactorytest.java:66) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) at org.junit.internal.runners.junit38classrunner.run(junit38classrunner.java:86) at org.junit.runner.junitcore.run(junitcore.java:137) at com.intellij.rt.execution.junit.junitstarter.main(junitstarter.java:68)",
        "label": 11
    },
    {
        "text": "optimize reading of bit depth images in sampleimagereader reading of 1-bit depth (black and white) images in sampleimagereader can be optimized. the attached patch reduces the time spent in sampleimagereader#getrgbimage() from 4 seconds to 1.8 second on my notebook with the attached pdf.",
        "label": 11
    },
    {
        "text": "i have a page pdf  but opening it with pdfbox shows only i have a pdf document, with 6 pages. however, when i open it using pdfbox, and get num of pages, i see only 5. i guess that the 6th page is different somehow - i have no idea how - but it makes pdfbox not to \"see\" it. since the doc is sensitive, i will try to reproduce the similar problem with another doc and the upload it.",
        "label": 1
    },
    {
        "text": "npe in fontvalidator issubset in preflight java.lang.nullpointerexception  at org.apache.pdfbox.preflight.font.fontvalidator.issubset(fontvalidator.java:48) at org.apache.pdfbox.preflight.font.fontvalidator.issubset(fontvalidator.java:48)  at org.apache.pdfbox.preflight.font.descriptor.type1descriptorhelper.checkmandatoryfields(type1descriptorhelper.java:59)  at org.apache.pdfbox.preflight.font.descriptor.fontdescriptorhelper.validate(fontdescriptorhelper.java:96)  at org.apache.pdfbox.preflight.font.simplefontvalidator.processfontdescriptorvalidation(simplefontvalidator.java:121)  at org.apache.pdfbox.preflight.font.simplefontvalidator.validate(simplefontvalidator.java:60)  at org.apache.pdfbox.preflight.process.reflect.fontvalidationprocess.validate(fontvalidationprocess.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatefonts(resourcesvalidationprocess.java:98)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:76)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validateresources(singlepagevalidationprocess.java:167)  at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:82)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52)  at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:56)  at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:45)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88)  at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168)  at pdfboxpageimageextraction.preflighttest.main(preflighttest.java:41)",
        "label": 11
    },
    {
        "text": "mention subtype in cosstream ioexception and not only in resourcesvalidationprocess.java",
        "label": 11
    },
    {
        "text": "xfdf annotations partially incorrectly applied to existing pdf or exceptions when parsing i am currently investigating in using pdfbox (my tests used pfdbox 2.0rc2) for a small use case \u201estamping\u201c annotations from a given xfdf format (created by qoppa\u2019s jpdfeditor/jpdfnotes, www.qoppa.com) into a given pdf/a-1b file. this works with a surprisingly minimal set of java code line \uf04a but: obviously not all xfdf elements are supported and/or there are bugs in reading xfdf up to now. i just wanted to let you know about my experiences. a) drawing lines painted by a pencil (element: \u201c<gesture>\u201d) do not show up at all after stamping them. why? sample data to test with: <ink name=\"c2b070ebb736993ea25f4545350ad2c3\" style=\"solid\" width=\"4.0\" flags=\"print\" date=\"d:20151207122033+01'00'\" color=\"#00ff00\" opacity=\"1.0\" page=\"0\" subject=\"bleistift\" rect=\"62.4562,1378.1637,167.5599,1402.8388\" title=\"matstoll\"><inklist><gesture>68.4562,1385.1637;69.7534,1385.1637;73.6451,1385.1637;77.5368,1385.1637;82.7258,1387.7582;89.212,1389.0554;93.1037,1390.3525;96.9954,1390.3525;100.8871,1391.6498;104.7788,1392.947;111.2649,1394.2443;116.4539,1394.2443;121.6428,1395.5415;125.5345,1395.5415;130.7235,1395.5415;134.6152,1395.5415;139.8041,1395.5415;143.6958,1395.5415;148.8848,1395.5415;151.4792,1395.5415;155.3709,1396.8387;156.6682,1396.8387;157.9654,1396.8387;160.5599,1396.8387</gesture></inklist><contents>pencil line</contents></ink> b) polygons (at least when created with jpdfnotes) throw an exception when reading: exception in thread \"main\" java.lang.numberformatexception: for input string: \"1318.7075;1054.6517\" at sun.misc.floatingdecimal.readjavaformatstring(unknown source) at sun.misc.floatingdecimal.parsefloat(unknown source) at java.lang.float.parsefloat(unknown source) at org.apache.pdfbox.pdmodel.fdf.fdfannotationpolygon.initvertices(fdfannotationpolygon.java:101) at org.apache.pdfbox.pdmodel.fdf.fdfannotationpolygon.<init>(fdfannotationpolygon.java:78) at org.apache.pdfbox.pdmodel.fdf.fdfdictionary.<init>(fdfdictionary.java:196) sample data to test with: <polygon name=\"534dc02a197b56578ffa6ae5f178100f\" style=\"solid\" width=\"9.0\" flags=\"print\" date=\"d:20151207121013+01'00'\" color=\"#0000ff\" opacity=\"1.0\" page=\"0\" subject=\"polygon\" rect=\"857.5527,1117.7167,1063.6517,1334.1936\" title=\"matstoll\"> <vertices>866.5527,1318.7075;1054.6517,1325.1936;1032.5987,1126.7167;876.9306,1179.9034;866.5527,1318.7075;</vertices> </polygon> c) a cloudy polygon cannot be read either \u2013 i assume a general issue reading polygons. sample data to test with: <polygon name=\"0276b0ecdca680fdb0c0ae8377ae0faa\" style=\"cloudy\" width=\"4.0\" flags=\"print\" date=\"d:20151207122247+01'00'\" intensity=\"2\" color=\"#ff5500\" opacity=\"1.0\" page=\"0\" subject=\"cloud/wolke\" rect=\"278.8037,1105.6361,563.5944,1216.9184\" title=\"matstoll\" it=\"polygoncloud\"><vertices>310.0391,1147.4725;420.304,1205.8481;555.2164,1117.6361;342.4699,1117.6361;286.6888,1134.5002;310.0391,1147.4725;</vertices></polygon> d) a freetext (\u201c<freetext>\u201d) element will not show up correctly: b1) though \u201cwidth=0.0\u201d for the box, it pdfbox will render a box around the text b2) though font is set to \u201cfont: courier 12pt; color:#000000\u201d a wrong font will be rendered b3) the color setting will be ignored: my tests setting a color of font and border to red showed up a textbox with black border and black text. e) a freetext element with legend options does not show up correctly: e1) colors are wrong/ignored e2) font size not correct e3) legend arrow not drawn sample data to test with: <freetext name=\"95db90502d987fde0dd5446ed48c098a\" style=\"solid\" width=\"3.0\" justification=\"left\" flags=\"print\" date=\"d:20151207122813+01'00'\" color=\"#4055ff\" callout=\"356.7395,1471.7811,479.2464,1372.3664,494.2464,1327.1395\" page=\"0\" subject=\"legend textfield\" fringe=\"137.5069,-0.0,0.0,86.9147\" rect=\"356.7395,1269.4126,704.3984,1471.7811\" head=\"openarrow\" title=\"matstoll\" it=\"freetextcallout\"><contents>this is a legend with arrow</contents><defaultstyle>font: courier 24pt; color:#bfaaff</defaultstyle><defaultappearance>1.0 0.7490196078431373 0.0 rg /helv 12 tf</defaultappearance></freetext> there might be more of such issues \u2013 but i think this should be sufficient info for now to check how to proceed. adobe acrobat renders all these test cases correctly by the way, so i assume the xfdf elements are all correct. i can provide the sample code if needed \u2013 where shall i upload it \u2013 if needed? as i do not find that much info about the support of xfdf in various pdf libraries \u2013 what about the official support in pdfbox? should all of the samples work? what are the plans to do so? thanks a lot in advance.",
        "label": 11
    },
    {
        "text": "nullpointerexception in securityhandler adddictionaryandsubdictionary securityhandler java  nullpointerexception in securityhandler.adddictionaryandsubdictionary(securityhandler.java:185) the attached pdf causes a null pointer in my environment possible security encryption issue? java.io.ioexception: at org.apache.tika.parser.parsingreader.read(parsingreader.java:260) ... caused by: org.apache.tika.exception.tikaexception: unexpected runtimeexception from org.apache.tika.parser.pdf.pdfparser@335ac93d at org.apache.tika.parser.compositeparser.parse(compositeparser.java:244) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:242) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:120) at org.apache.tika.parser.parsingreader$parsingtask.run(parsingreader.java:221) ... 1 more caused by: java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.encryption.securityhandler.adddictionaryandsubdictionary(securityhandler.java:185) note i incorrectly logged this in tika as https://issues.apache.org/jira/browse/tika-848 so could that one be resolved when this one is? thanks.",
        "label": 12
    },
    {
        "text": "find and replace existing text [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1239382 originally submitted by nobody on 2005-07-16 04:25. hello, i\u00b4m looking for a tool which i can use to find a flagged text (\"[[page1]]\") and replace this with a hyperlinked text (\"page1\"). would this be possible with pdfbox? thank you for your help oliver [comment on sourceforge] originally sent by benlitchfield. logged in: yes user_id=601708 changed from bug to feature request.",
        "label": 1
    },
    {
        "text": "html converter escapes formatting close tags bug introduced by pdfbox-1213 in 1.8.3 for html style information. bold style tags are opened correctly, but the close tags are html-escaped. ~/work/pdfbox ((1.8.3))$ java -jar app/target/pdfbox-app-1.8.3.jar extracttext -html -nonseq -console pdftest.pdf  <!doctype html public \"-//w3c//dtd html 4.01 transitional//en\" \"http://www.w3.org/tr/html4/loose.dtd\"> <html><head><title>1725.pdf</title> <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"> </head> <body> <div style=\"page-break-before:always; page-break-after:always\"><div><p>e:\\m55\\!\\1725.fm 2003-01-01 18:15 p tagg, ipm, university of liverpool </p> <p><b>a very small pdf file &lt;/b&gt;</p> <p><b>a very small pdf file &lt;/b&gt;</p> <p><b>a very small pdf file &lt;/b&gt;</p> <p><b>a very small pdf file &lt;/b&gt;</p> <p><b>a very small pdf file &lt;/b&gt;</p> <p><b>a very small pdf file&lt;/b&gt;</p> </div></div> </body></html>",
        "label": 1
    },
    {
        "text": " info dictionary no longer available the /info dictionary is no longer available, it was there in 2.0.7.",
        "label": 1
    },
    {
        "text": "illegalargumentexception  root cannot be null with truncated file java.lang.illegalargumentexception: root cannot be null     org.apache.pdfbox.pdmodel.pdpagetree.<init>(pdpagetree.java:75)     org.apache.pdfbox.pdmodel.pddocumentcatalog.getpages(pddocumentcatalog.java:129)     org.apache.pdfbox.pdmodel.pddocument.getpages(pddocument.java:1388)     org.apache.pdfbox.debugger.ui.documententry.getpagecount(documententry.java:42)     org.apache.pdfbox.debugger.ui.pdftreemodel.getchildcount(pdftreemodel.java:195)     java.desktop/java.beans.propertychangesupport.fire(unknown source)     java.desktop/java.beans.propertychangesupport.firepropertychange(unknown source)     java.desktop/java.beans.propertychangesupport.firepropertychange(unknown source)     org.apache.pdfbox.debugger.pdfdebugger.inittree(pdfdebugger.java:1288)     org.apache.pdfbox.debugger.pdfdebugger.readpdffile(pdfdebugger.java:1235)     org.apache.pdfbox.debugger.pdfdebugger.readpdffile(pdfdebugger.java:1218)     org.apache.pdfbox.debugger.pdfdebugger.main(pdfdebugger.java:1209)     org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:85) this worked in 2.0.6, but no longer in 2.0.7. it happens since [ https://svn.apache.org/r1795705 ] of pdfbox-3798.",
        "label": 1
    },
    {
        "text": "can't retrieve number tree from structure tree pddocument doc = pddocument.load(new file(\"generalforbearance.pdf\")); object value = doc.getdocumentcatalog().getstructuretreeroot().getparenttree().getvalue(0); the code above always fails when used on a pdf with a structure tree: exception in thread \"main\" java.io.ioexception: error while trying to create value in number tree:org.apache.pdfbox.cos.cosbase.<init>(org.apache.pdfbox.cos.cosarray)  at org.apache.pdfbox.pdmodel.common.pdnumbertreenode.convertcostopd(pdnumbertreenode.java:212)  at org.apache.pdfbox.pdmodel.common.pdnumbertreenode.getnumbers(pdnumbertreenode.java:185)  at org.apache.pdfbox.pdmodel.common.pdnumbertreenode.getvalue(pdnumbertreenode.java:139)  at pdfboxpageimageextraction.mergetest.main(mergetest.java:29) caused by: java.lang.nosuchmethodexception: org.apache.pdfbox.cos.cosbase.<init>(org.apache.pdfbox.cos.cosarray)  at java.lang.classj.getconstructor0(class.java:3082)  at java.lang.class.getdeclaredconstructor(class.java:2178)  at org.apache.pdfbox.pdmodel.common.pdnumbertreenode.convertcostopd(pdnumbertreenode.java:206)  ... 3 more i suspect that it is related to the pdnumbertreenode having been called with a cosbase class parameter in getparenttree(). that one doesn't have a constructor with a parameter. the structure tree numbers tree has mixed contents, these can be arrays or dictionaries. what we need is some pd wrapper that can have both inside.",
        "label": 11
    },
    {
        "text": "added pdembeddedfile constructor with cosname parameter since the \"addcompression\" method from pdstream got deprecated and instead the \"pdstream\" constructor with \"cosname\" parameter should be used, please also provide this constructor in all classes derived from \"pdstream\" where it makes sense (especially in \"pdembeddedfile\")",
        "label": 11
    },
    {
        "text": "radial shading  type  fails ghent workgroup tests gwg 6.0 test: the black rectangle around the circle is missing gwg 6.1 test: the rectangles are there but shouldn't be. plus, the second type 3 shading has wrong colors. (maybe same problem as in pdfbox-1876 ?)",
        "label": 11
    },
    {
        "text": "adding style information to the pdf to html converter this patch modifies the pdf to html conversion in order to add style information (bold, italic and size font) in the resulting file. moreover, we have deleted the \"doctype\" header because some parsers throws the following exception: [fatal error] loose.dtd:31:3: the declaration for the entity \"html.version\" must end with '>'. org.xml.sax.saxparseexception: the declaration for the entity \"html.version\" must end with '>'.",
        "label": 1
    },
    {
        "text": "prepare pdfbox for release to prepare pdfbox for release we have to check on the build-process (directory structure, targets etc.) and to check that everything is according to the apache policies.",
        "label": 1
    },
    {
        "text": "grey background rectangle rendered at different position the grey background rectangle is larger in the rendered image than in the pdf.",
        "label": 1
    },
    {
        "text": "support lucene fedora rawhide has updated to lucene 3.6.0. when trying to compile pdfbox against it i get: [error] /builddir/build/build/pdfbox-1.7.0/lucene/src/main/java/org/apache/pdfbox/lucene/indexfiles.java:[27,29] error: cannot find symbol [error] symbol: class htmldocument location: package org.apache.lucene.demo looks like the demo package in lucene has change quite a lot, including changing the artifaceid to lucene-demo: diff -up pdfbox-1.7.0/lucene/pom.xml.lucene pdfbox-1.7.0/lucene/pom.xml \u2014 pdfbox-1.7.0/lucene/pom.xml.lucene 2012-07-05 09:16:35.056582368 -0600 +++ pdfbox-1.7.0/lucene/pom.xml 2012-07-05 09:45:08.069655661 -0600 @@ -47,7 +47,7 @@ </dependency> <dependency> <groupid>org.apache.lucene</groupid> <artifactid>lucene-demos</artifactid> + <artifactid>lucene-demo</artifactid> <version>${lucene.version}</version> </dependency> </dependencies>",
        "label": 1
    },
    {
        "text": "java io ioexception  found token kind name  text    but expected literal for type1 font simon steiner reports an exception with the file from pdfbox-1084: java.io.ioexception: found token[kind=name, text=#40] but expected literal at 2354  at org.apache.fontbox.type1.type1parser.read(type1parser.java:737)  at org.apache.fontbox.type1.type1parser.parseascii(type1parser.java:159)  at org.apache.fontbox.type1.type1parser.parse(type1parser.java:61)",
        "label": 11
    },
    {
        "text": "pdtruetypefont has no method to load font from stream the pdtruetypefont had formely static method to load a font from a stream. now that method is gone. as far as i can see without a reason. probably removed by mistake. could that method be restored?",
        "label": 6
    },
    {
        "text": "fine tune kcms warning message   update documentation as shown in pdfbox-4392 and in another issue i can't find, lcms is no longer always as slow as if was before. my own regression tests now take about the same time regardless whether kcms or lcms is used. so the warning message is to be fine-tuned according to the java version-version, and the utilities no longer set kcms - let the users decide and set their own or update.",
        "label": 11
    },
    {
        "text": "throwing in pdtype1font encode for chars above is wrong  chars like `'\\u2019'` can be handled by the code following the test, so throwing in `pdtype1font.encode` whenever `unicode > 0xff` is wrong. see http://stackoverflow.com/a/34598915/581205",
        "label": 1
    },
    {
        "text": " patch  improved the accuracy of the bounding box for each rendered cff glyph in a previous patch to the charstringrenderer class, i resolved the rendering issues and added a method to retrieve the bounding box for a cff glyph. this utilized the generalpath.getbounds() method to retrieve it's bounding box. unfortunately it was found that the method uses the control points of the bezier curves instead of the actual lines and was not very accurate. i have therefore added several new methods to calculate the correct extents of the glyph so that now it matches that of the measurements found in tools like fontforge. as a side note, there are several checks which were originally added in my patch which were unfortunately removed relating to the number of arguments provided with an operator. i have one adobe font (adobe heiti standard - cid-keyed otf) which has one or more glyphs which trip up on this and cause an array index out of bounds exception. each glyph renders correctly even though this issue occurs and therefore would be grateful if these could be left in. i have re-added these checks back with the patch i am about to add.",
        "label": 1
    },
    {
        "text": "extracting page causes incorrect clipping i have a compressed pdf from which i extract pages (each page will become an individual pdf file). the extracted pages are clipped incorrectly (text is cut), as opposed to original pdf that is not clipped. i traced it down to a missing mediabox attribute in the extracted pages, which exists in the original file as an attribute on all pages. using the same file, but uncompressed, the extracted pages are not cut and the mediabox attribute is present. the main code (without initializations and checks) used to load and extract pages is the following: temp = new file(\"e:/temp.tmp\"); rand = new randomaccessfile(temp,\"rw\"); doc = pddocument.loadnonseq(file,rand); pdpage page = (pdpage) doc.getprintable(pageindex); pddocument newdoc = new pddocument(); newdoc.importpage(page); newdoc.close(); doc.close(); rand.close(); temp.delete();",
        "label": 1
    },
    {
        "text": "please accommodate ' ' where a number is expected pdf's created by scansoft's pdf driver have '-' where a number is needed, as in 1 0 0 1 - 783 tm. see http://markmail.org/message/r63jfd5wybejzbkr for details. proposal: interpret - as 0. patch: \u2014 /tmp/x/pdfbox-0.8.0-incubating/src/main/java/org/apache/pdfbox/pdfparser/pdfstreamparser.java 2009-09-14 19:39:44.000000000 -0400 +++ src/main/java/org/apache/pdfbox/pdfparser/pdfstreamparser.java 2010-01-07 00:14:45.000000000 -0500 @@ -252,7 +252,12 @@ dotnotread = false; } } retval = cosnumber.get( buf.tostring() ); + string number = buf.tostring(); + /* accommodate pdf files (such as scansoft-created ones that output '-' + * where a number is expected. substitute a 0 */ + if (\"-\".equals(number)) + number = \"0\"; + retval = cosnumber.get( number ); break; } case 'b':",
        "label": 7
    },
    {
        "text": "can't read japanese fonts [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1464488 originally submitted by nobody on 2006-04-04 13:55. when i try to run extracttext, the output is garbage. i'm running the latest pdfbox-0.7.3-dev-20060404 . i run with parameters: -encoding utf-8 jp.pdf jp.txt sourceforge won't let me upload a file, so here is a url: http://www.denso.co.jp/ja/aboutdenso/download/pdf/corporate_guide.pdf i've seen another discussion thread about this issue too. can you explain how to enable pdfbox to work with japanese fonts? (are there properties that need to be set or additional resources needed?) domo arigato sunfishy (at) gmail",
        "label": 1
    },
    {
        "text": "accent positioning in type1 fonts when viewed in pdfbox debugger, the accents in the attached pdfs are in wrong position. i have a patch to fix this. the asb argument specifies the left side bearing of the accent glyph. it must be subtracted from the x coordinate.",
        "label": 11
    },
    {
        "text": "support tika migration to pdfbox this issue is to track fixing issues which came up as part of tika-1285 (upgrade to pdfbox 2.0.0 when available) mainly new exceptions compared to pdfbox 1.8.x regressions in text extraction lower quality text extraction there should be individual issues to track tasks/bugs arising from that.",
        "label": 1
    },
    {
        "text": "pdftoimage create blank pages  llegalargumentexception  width   and height   must be   pdftoimage create blank pages. you can find this pdf file here: http://acl.ldc.upenn.edu/c/c90/c90-3003.pdf exception is: java.lang.illegalargumentexception: width (2480) and height (0) must be > 0 at java.awt.image.samplemodel.<init>(unknown source) at java.awt.image.multipixelpackedsamplemodel.<init>(unknown source) at java.awt.image.multipixelpackedsamplemodel.<init>(unknown source) at java.awt.image.raster.createpackedraster(unknown source) at java.awt.image.raster.createpackedraster(unknown source) at java.awt.image.indexcolormodel.createcompatiblewritableraster(unknown source) at org.apache.pdfbox.pdmodel.graphics.xobject.pdccitt.getrgbimage(pdccitt.java:134) at org.apache.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:78) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.util.pdfimagewriter.writeimage(pdfimagewriter.java:135) at org.apache.pdfbox.pdftoimage.main(pdftoimage.java:231) at org.apache.pdfbox.pdfbox.main(pdfbox.java:58)",
        "label": 1
    },
    {
        "text": "exception access violation in fontmanager so fontmanager dll it seems when writing a pdf that has an invalid embedded font to an image there is a crash in the native function sun.font.filefont.getglyphimage(ji). it can be reproduced using the pdftoimage program on a pdf with an invalid embedded font. turing on -dsun.java2d.debugfonts=true on a bad pdf will show some like the follow for the bad font info: open ttf: c:\\docume~1\\mdavis\\locals~1\\temp+~jf4968602841241472406.tmp jul 20, 2010 11:37:31 am sun.font.truetypeglyphmapper handlebadcmap severe: null cmap for ** truetype font: family=inklbc+symbolmt name=inklbc+symbolmt style=0 filename=c:\\docume~1\\mdavis\\locals~1\\temp+~jf4968602841241472406.tmpsubstituting for this font jul 20, 2010 11:37:31 am sun.font.fontmanager deregisterbadfont severe: deregister bad font: ** truetype font: family=inklbc+symbolmt name=inklbc+symbolmt style=0 filename=c:\\docume~1\\mdavis\\locals~1\\temp+~jf4968602841241472406.tmp jul 20, 2010 11:37:31 am sun.font.filefontstrike <init> info: strike for ** truetype font: family=inklbc+symbolmt name=inklbc+symbolmt style=0 filename=c:\\docume~1\\mdavis\\locals~1\\temp+~jf4968602841241472406.tmp at size = 19 use natives = false usejavarasteriser = true aahint = 2 has embedded bitmaps = false the following code in pdsimplefont.java seems to fix the crash although i am not sure if it is correct: public void drawstring(string string, graphics g, float fontsize, affinetransform at, float x, float y) throws ioexception { font _awtfont = getawtfont(); //mdavis - fix fontmanager.so/dll on sun.font.filefont.getglyphimage for font with bad cmaps? if (_awtfont.candisplayupto(string) != -1) { log.warn(\"changing fonts on <\" + string + \"> from <\" + _awtfont.getname() + \"> to default font\"); _awtfont = null; } graphics2d g2d = (graphics2d) g;",
        "label": 7
    },
    {
        "text": "npe in pagedrawer drawstring file from pdfbox-122 java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage pdfbox122-unijis-ucs2-hw-h_sample.pdf jul 22, 2014 9:38:55 pm org.apache.pdfbox.rendering.pagedrawer createawtfont information: unsupported type of font org.apache.pdfbox.pdmodel.font.pdtype0font jul 22, 2014 9:38:55 pm org.apache.pdfbox.rendering.pagedrawer createawtfont information: using font sansserif.plain instead of ?l?r?\u00a5?\u00ae exception in thread \"main\" java.lang.nullpointerexception         at sun.font.standardglyphvector.<init>(unknown source)         at java.awt.font.createglyphvector(unknown source)         at org.apache.pdfbox.rendering.pagedrawer.drawstring(pagedrawer.java:415)         at org.apache.pdfbox.rendering.pagedrawer.processglyph(pagedrawer.java:331)         at org.apache.pdfbox.util.pdfstreamengine.processtext(pdfstreamengine.java:503)",
        "label": 6
    },
    {
        "text": "npe in bfsearchforobjstreams java.lang.nullpointerexception: null     org.apache.pdfbox.pdfparser.cosparser.bfsearchforobjstreams(cosparser.java:1738)     org.apache.pdfbox.pdfparser.cosparser.bfsearchforobjects(cosparser.java:1529)     org.apache.pdfbox.pdfparser.cosparser.getbfcosobjectoffsets(cosparser.java:1445)     org.apache.pdfbox.pdfparser.cosparser.rebuildtrailer(cosparser.java:1905) this worked in 2.0.7. the exception happens in 39 files.",
        "label": 1
    },
    {
        "text": "java lang illegalargumentexception  fromindex    toindex  i get this exception with page.converttoimage(): apr 27, 2012 10:58:46 am org.apache.pdfbox.util.pdfstreamengine processoperator warnung: java.lang.illegalargumentexception: fromindex(0) > toindex(-2) java.lang.illegalargumentexception: fromindex(0) > toindex(-2) at java.util.arraylist.sublistrangecheck(arraylist.java:924) at java.util.arraylist$sublist.sublist(arraylist.java:1109) at org.apache.fontbox.cff.charstringconverter.handletype2command(charstringconverter.java:259) at org.apache.fontbox.cff.charstringconverter.handlecommand(charstringconverter.java:81) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:53) at org.apache.fontbox.cff.charstringconverter.convert(charstringconverter.java:64) at org.apache.fontbox.cff.cfffont$mapping.totype1sequence(cfffont.java:374) at org.apache.fontbox.cff.type1fontformatter.printeexecfontdictionary(type1fontformatter.java:177) at org.apache.fontbox.cff.type1fontformatter.printfontdictionary(type1fontformatter.java:127) at org.apache.fontbox.cff.type1fontformatter.printfont(type1fontformatter.java:57) at org.apache.fontbox.cff.type1fontformatter.format(type1fontformatter.java:47) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.prepareawtfont(pdtype1cfont.java:546) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.getawtfont(pdtype1cfont.java:287) at org.apache.pdfbox.pdmodel.font.pdtype1font.getawtfont(pdtype1font.java:216) at org.apache.pdfbox.pdmodel.font.pdsimplefont.drawstring(pdsimplefont.java:101) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:194) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:494) at org.apache.pdfbox.util.operator.showtext.process(showtext.java:45) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.dopdf(extractimages.java:78) at pdfboxpageimageextraction.extractimages.main(extractimages.java:52) the code: ... document = pddocument.load(pdffilename); list pages = document.getdocumentcatalog().getallpages(); int p = 0; for (object pobj : pages) { pdpage page = (pdpage) pobj; ++p; bufferedimage bim = page.converttoimage(); .... this happens on page 25, (and others) on the attached pdf. (note that when viewing that file with acrobat reader, the page number is \"xxiv\"). it seems to deal with special characters. in the attached png file, at least one such character is missing.",
        "label": 1
    },
    {
        "text": "improve pdfbox tests i'd like to improve the tests for rendering. org/apache/pdfbox/util/testpdftoimage.java is disabled in pdfbox\\pom.xml . this has been disabled since 2009 ?! so i enabled it here. the subdir \"rendering\" is missing in pdfbox\\target\\test-output for these tests when a test fails because the rendered image is not identical, no detailed message appears on the console. it appears only in pdfbox.log and not on the console. this is because of the settings in pdfbox\\src\\test\\resources\\logging.properties if this is on purpose, please change the texts in pdfbox\\src\\test\\java\\org\\apache\\pdfbox\\util*.java from \"one or more failures, see test log for details\" to \"one or more failures, see test logfile 'pdfbox.log' for details\" i wanted to attach a pdf with ccitt g4 compression and its rendering created with the 1.8.2 version, but it doesn't work out, seems that cib generates files that can be rendered properly with 1.8.2. however i attach the tiff g4 file, and a jbig2 test file from it. i don't have access to a xerox workcentre (enter jbig2 in google news ) so i used a free service, so there's a watermark. it should be included into pdfbox\\src\\test\\resources\\input\\rendering i have created the image myself and i give it into the public domain. if my suggestion is accepted, it would be nice if people could create files that fail in current versions or have failed in old versions, and release these files to the public domain, so that they can be added to the tests.",
        "label": 11
    },
    {
        "text": "out of memory   cosdocument  randomaccessbuffer  possibly related to pdfbox-1777. exception in thread \"main\" java.lang.outofmemoryerror: java heap space at java.util.abstractcollection.toarray(abstractcollection.java:136) at java.util.arraylist.<init>(arraylist.java:168) at org.apache.pdfbox.cos.cosdocument.getobjects(cosdocument.java:518) at org.apache.pdfbox.cos.cosdocument.getobjects(cosdocument.java:518) at org.apache.pdfbox.cos.cosdocument.close(cosdocument.java:575) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:254) at techref.testpdfbox.main(testpdfbox.java:36) the heap space is set to -xmx1640m the pdf docoument is parsed ok with version 1.8.3 but fails with 1.8.4 the large pdf document has the following attributes. pddoc.getcurrentaccesspermission.canextractcontent = true pddoc.getcurrentaccesspermission.canextractforaccessibility = true pddoc.getnumberofpages = 228 pddoc.getdocumentcatalog.getlanguage = null pddoc.getdocumentcatalog.getpagelayout = singlepage pddoc.getdocumentcatalog.getpagemode = usenone pddoc.getdocumentcatalog.getversion = null page count=228 title=microsoft word - fea.doc author=null subject=null keywords=null creator=windows nt 4.0 producer=acrobat distiller 4.05 for windows creation date=fri jun 29 15:29:59 bst 2001 modification date=mon jul 02 15:41:18 bst 2001 trapped=null dictionary=cosdictionary{(cosname {creationdate} :cosstring {d:20010629142959} ) (cosname {producer} :cosstring {acrobat distiller 4.05 for windows} ) (cosname {creator} :cosstring {windows nt 4.0} ) (cosname {title} :cosstring {microsoft word - fea.doc} ) (cosname {moddate} :cosstring {d:20010702164118+02'00'} ) }",
        "label": 1
    },
    {
        "text": "npe during pdtruetypefont loadttf  on mac truetype font lacking windows platformid cmapencodingentry i'm attempting to embed a truetype font using pdfbox, on the mac, using pdtruetype.loadttf( pddocument, inputstream, encoding ). for truetype fonts originating from windows (e.g., tahoma) this works. for truetype fonts originating from the mac (e.g., apple chancery), a nullpointerexception is thrown. java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loaddescriptordictionary(pdtruetypefont.java:409) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:201) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:177) i stepped through the code in a debugger. the method pdtruetypefont.loaddescriptordictionary() loops through the cmap table for the font, looking for a cmap with platform id 3 (windows), and sets the variable unimap only if one is found. after that loop, the variable unimap is dereferenced without checking for null. some mac truetype fonts have platform ids 0 (unicode) and 1 (mac), but not 3 (windows). at the least, a null check seems required. but more desirable would be support for mac truetype fonts. am i missing something, or should i enter a bug? example problem font: apple chancery (included with os) details: pdfbox version: 1.8.2 [have not yet tested with 1.8.3, which was released a few days ago] platform: mac java 6 font platform ids: 0, 1",
        "label": 6
    },
    {
        "text": "adobepdfschema getproducer  returns empty string i experienced this bug while pdf/a validation process. the document is not considered valid because the producer value is not in sync with pddocumentinformation. pddocumentinformation.getproducer() = ` ' (one space) adobepdfschema.getproducer() = `' (empty) below the metadata extracted from the pdf document: <?xpacket begin=\"\ufeff\" id=\"w5m0mpcehihzreszntczkc9d\"?> <x:xmpmeta xmlns:x=\"adobe:ns:meta/\"> <rdf:rdf xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"> <rdf:description rdf:about=\"\" xmlns:xap=\"http://ns.adobe.com/xap/1.0/\"> <xap:creatortool>canon </xap:creatortool> <xap:createdate>2014-01-23t20:09:45+01:00</xap:createdate> </rdf:description> <rdf:description rdf:about=\"\" xmlns:pdf=\"http://ns.adobe.com/pdf/1.3/\"> <pdf:producer> </pdf:producer> </rdf:description> <rdf:description rdf:about=\"\" xmlns:pdfaid=\"http://www.aiim.org/pdfa/ns/id/\"> <pdfaid:part>1</pdfaid:part> <pdfaid:conformance>b</pdfaid:conformance> </rdf:description> </rdf:rdf> </x:xmpmeta> <?xpacket end=\"w\"?> as you can see the producer value should be equal to ` ' (one space). the bug is located within the method domxmpparser.removecomments. this method is invoked during the unmarshalling process and removes much more than comments, text nodes too! i can fix (badly) my issue by changing the code base from : text t = (text) node; if (t.gettextcontent().trim().length() == 0) unknown macro: { // xxx is there a better way to remove useless text ? node.getparentnode().removechild(node); } into : text t = (text) node; if (t.gettextcontent().startswith(\"\\n\")) unknown macro: { // xxx is there a better way to remove useless text ? node.getparentnode().removechild(node); } but this is not a long term fix. imho, the unmarshalling process should be reworked.",
        "label": 4
    },
    {
        "text": "negativearraysizeexception thrown when converting pdf to image  in tilingpaint java  specifically page 7 of the pdf document is failing. pdf document: http://download.win2pdf.com/samples/powerpoint-slides.pdf (also attached to ticket) stack trace: exception in thread \"main\" java.lang.negativearraysizeexception at java.awt.image.databufferbyte.<init>(databufferbyte.java:76) at java.awt.image.raster.createinterleavedraster(raster.java:266) at java.awt.image.raster.createinterleavedraster(raster.java:212) at java.awt.image.componentcolormodel.createcompatiblewritableraster(componentcolormodel.java:2825) at org.apache.pdfbox.rendering.tilingpaint.getimage(tilingpaint.java:134) at org.apache.pdfbox.rendering.tilingpaint.<init>(tilingpaint.java:69) at org.apache.pdfbox.rendering.pagedrawer.getpaint(pagedrawer.java:251) at org.apache.pdfbox.rendering.pagedrawer.getnonstrokingpaint(pagedrawer.java:526) at org.apache.pdfbox.rendering.pagedrawer.fillpath(pagedrawer.java:597) at org.apache.pdfbox.contentstream.operator.graphics.fillevenoddrule.process(fillevenoddrule.java:36) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:829) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:486) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:460) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150) at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:189) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:145) at org.apache.pdfbox.rendering.pdfrenderer.renderimagewithdpi(pdfrenderer.java:94) at org.apache.pdfbox.tools.pdftoimage.main(pdftoimage.java:236) at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:94)",
        "label": 11
    },
    {
        "text": "visible signatures in different pages changes previous revision i tried to make two visible signatures in a 2-pages pdf file using pdfbox-2.0.0-rc1. i followed the example in svn directory https://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/ i have just modified createvisiblesignature class customizing the input parameters and the page to sign. if both the signatures are made in the same page, no error occurs. if signatures are made in different pages (e.g. signature 1 in page 1 and signature 2 in page 2), when i open the pdf file with adobe acrobat xi pro (v.11.0.13) it tells that signature 1 is not valid. the attachment below refers to the source/resourse zip file. it contains: test.docx: 2-pages test document generated with microsoft office professional plus 2013 test1.pdf: pdf version that generates error (created with word by selecting \"save as adobe pdf\" option) test1_*.pdf: signed pdf files with error test2.pdf: pdf version that generates no error (created with word by selecting \"save as\" option and then \"*.pdf\") test2_*.pdf: signed pdf files with no error createvisiblesignature.java: customized source code stamp.png: signature image test.p12: key store (password 12345)",
        "label": 11
    },
    {
        "text": "pdacnnotation has methods not defined for all annotations pdannotation has methods for getting/setting entries not defined for all annotations (a, aa, bs). the patch, i'll provide later, moves the methods to the classes for specific annotations for which these entries are defined.",
        "label": 1
    },
    {
        "text": "java 8u25 illegalblocksizeexception decrypting pdf java 8u20 is ok java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage out.pdf exception in thread \"main\" java.io.ioexception: javax.crypto.illegalblocksizeexception: input length must be multiple of 16 when decrypting with padded cipher at javax.crypto.cipherinputstream.getmoredata(cipherinputstream.java:115) at javax.crypto.cipherinputstream.read(cipherinputstream.java:233) at javax.crypto.cipherinputstream.read(cipherinputstream.java:209) at org.apache.pdfbox.pdmodel.encryption.securityhandler.encryptdata(securityhandler.java:331) http://lucene.472066.n3.nabble.com/pdf-test-failing-on-trunk-td4166517.html",
        "label": 1
    },
    {
        "text": "incorrect width calculation for form fields that do not scroll when a form field is marked non scrollable, current implementation does not work. there appears to be unfinished code that in the end does not set the font size.",
        "label": 1
    },
    {
        "text": "allow missing page type i came across a pdf document with missing type in the page dictionary. according to the spec that's required and pdfbox has a check and throws an illegalstate if the page is requested to the pdpagetree. acrobat and other libs handle the same doc so i think the constraint could be relaxed a little, consider valid if type is page or missing, and consider invalid if it's something else, what do you think?",
        "label": 11
    },
    {
        "text": "currentaccesspermission setreadonly  not set in standardsecurityhandler reported by joe ye in the mailing list while troubleshooting an encryption related issue, i discovered that currentaccesspermission.setreadonly() is called in method pdfbox.pdmodel.encryption.publickeysecurityhandler#preparefordecryption but not in pdfbox.pdmodel.encryption.standardsecurityhandler#preparefordecryption. could you please explain why there is the difference? as we're using standardsecurityhandler, it appears readonly is never set..",
        "label": 11
    },
    {
        "text": "load document error for two regisstar documents hello, i've the problem during load pdf document. my code: string input = \"d:\\\\documents 1c890.pdf\"; pddocument document = null; try { document = pddocument.load(input); ... } catch (exception e) { } error message: error: expected an integer type, actual='n'",
        "label": 11
    },
    {
        "text": "not extracting text from pdf document pddocument document = pddocument.load(inputstream); pdftextstripper stripper = new pdftextstripper(); stripper.gettext(document) is not returning some text content in the attached pdf document . it is just returning the form fields but the values are empty . the bug is reproducible both in 1.8.0-snapshot and 1.7.1 codebase. please help in resolving the issue",
        "label": 1
    },
    {
        "text": "unnecessary filling new array with zeros in randomaccessbuffer write byte  int  int  it is not required to fill new array with zeros, because it's done by jvm",
        "label": 1
    },
    {
        "text": "pdfbox extracts wrong characters for some korean pdf files  pdfbox1.7.0 extracts wrong characters for some korean pdf files with ratio of about 25%. i attach two pdf files such as those and output. thanks a lot.",
        "label": 1
    },
    {
        "text": "lcms error  couldn't link the profiles i am also running against the error \"lcms error 13: couldn't link the profiles\" the error occures frequent times, depending on which document to be displayed with pdfbox. stack: exception in thread \"main\" java.awt.color.cmmexception: lcms error 13: couldn't link the profiles  at sun.java2d.cmm.lcms.lcms.createnativetransform(native method)  at sun.java2d.cmm.lcms.lcms.createtransform(unknown source)  at sun.java2d.cmm.lcms.lcmstransform.dotransform(unknown source)  at sun.java2d.cmm.lcms.lcmstransform.colorconvert(unknown source)  at java.awt.image.colormodel.getlineargray16toothergray8lut(unknown source)  at java.awt.image.componentcolormodel.setupluts(unknown source)  at java.awt.image.componentcolormodel.<init>(unknown source)  at java.awt.image.componentcolormodel.<init>(unknown source)  at org.apache.pdfbox.pdmodel.graphics.color.pdcolorspace.torgbimageawt(pdcolorspace.java:275)  at org.apache.pdfbox.pdmodel.graphics.color.pdiccbased.torgbimage(pdiccbased.java:200)  at org.apache.pdfbox.pdmodel.graphics.image.sampledimagereader.from8bit(sampledimagereader.java:257)  at org.apache.pdfbox.pdmodel.graphics.image.sampledimagereader.getrgbimage(sampledimagereader.java:143)  at org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject.getimage(pdimagexobject.java:340)  at org.apache.pdfbox.rendering.pagedrawer.drawimage(pagedrawer.java:793)  at org.apache.pdfbox.contentstream.operator.graphics.drawobject.process(drawobject.java:62)  at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:815)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:472)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:446)  at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149)  at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:189)  at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:145)  at org.apache.pdfbox.rendering.pdfrenderer.renderimagewithdpi(pdfrenderer.java:94)  at org.apache.pdfbox.tools.pdftoimage.main(pdftoimage.java:236) reproduced the bug with the 2.0.0-rc, and now also with the 2.0.3 reason are the \"t\u00fcv/qa\" certified images at the bottom of the pages. created a document where it's clearly reproducible with pdfbox-app so the \"final\" argument mentioned in pdfbox-2454, that it wasn't reproducible, now isn't valid any more. steps to reproduce: download pdf file from http://www.igs.at/downloads/pdfbox_lcms_error_13.pdf and save as c:\\test.pdf run the pdfbox image rendering app \"pdftoimage\": java -cp pdfbox-2.0.3.jar;pdfbox-app-2.0.3.jar;preflight-2.0.3.jar;preflight-app-2.0.3.jar org.apache.pdfbox.tools.pdftoimage c:\\test.pdf > you will immediately see the stack mentioned above, in console/error output.",
        "label": 11
    },
    {
        "text": "attachment damages singature i have pdf document. 1) adobe reader reads document well. 2) i sign document (using pdfbox-examples) and everything is well 3) then i try to attach file to original pdf (code is written in the pdfbox web page - in the cookbook). 4) adobe reader reads attached document well. everything is well. 5) now i have document with attachment. 6) i try to sign that document (i mean document with attachment). and i have 2 problem: first: when i open document, adobe reader tells me that signature byte range is invalid. second: when i try to close document (i mean to close adobe reader), adobe reader tells me that: do you want to save changes to \"original[with-attachment][signed]\" before closing?",
        "label": 10
    },
    {
        "text": "error on metadata testing the preflight-1.8.0-20120715.180423-19-jar-with-dependencies.jar on file: notepad++_a1b.pdf (attached) i get the following errors: the file/home/fausser/notepad++_a1b.pdf is not valid, error(s) : 7.1 : error on metadata, 'schemas' expected and 'producer' found at line number = 14 column number = 24 system id = null public id = null location uri= null characteroffset = 855 note: this file verifies as a valid pdf/a with commercial validators",
        "label": 4
    },
    {
        "text": "xmpmetadata getschemas   delivery incorrect result if multiple namespaces are present if an rdf document only has a single rdf:description element covering multiple namespaces, the getschemas () method delivers only the first namespace. it can easily be fixed by changing line 613 to: for (int j = 0; j < attributes.getlength(); j++) please see the attached file for an example.",
        "label": 1
    },
    {
        "text": "time stamp document level sigature we need tsa document level signature modulo too! at the moment we sign document with our certificate. but... sometimes we need to sign document with tsa too. this is important part of signing. sometimes this is very very very important- for instance when we will implement pades 4 profile this module will be essential. without that document secure store will not work i'm working on this improvement. i'will finish this soon. it's almost done. i only must add some java docs, and might be i change architect design and etc.. so, please assign this it to me i will upload patch as soon as possible",
        "label": 11
    },
    {
        "text": "the cmapparser does not recognize essential cmap operators [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1438028 originally submitted by vdimchev on 2006-02-24 03:48. the bug is directly related to the following bug i discovered in the database: [ 1208652 ] pdftextstripper.writetext exception:unknown encoding for .. i'll try to exlain it again here and supply enough resources for its fix. the problem is that the current implementation of cmapparser class supports only the beginbfchar and beginbfrange operators. this is not enough and causes the invokation to pdftextstripper.writetext() to throw ioexception with the following message: unknown encoding for 'identity- v'. i also managed to produce the message: \"unknown encoding for '90ms-rksj-h'. the complete stacktrace is: java.io.ioexception: unknown encoding for 'identity-v' at org.pdfbox.encoding.encodingmanager. getencoding(encodingmanager.java:83) at org.pdfbox.pdmodel.font.pdfont. getencoding(pdfont.java:627) at org.pdfbox.pdmodel.font.pdfont. encode(pdfont.java:476) at org.pdfbox.util.pdfstreamengine. showstring(pdfstreamengine.java:332) at org.pdfbox.util.operator.showtext. process(showtext.java:66) at org.pdfbox.util.pdfstreamengine. processoperator(pdfstreamengine.java:494) at org.pdfbox.util.pdfstreamengine. processsubstream(pdfstreamengine.java:207) at org.pdfbox.util.pdfstreamengine. processstream(pdfstreamengine.java:160) at org.pdfbox.util.pdftextstripper. processpage(pdftextstripper.java:355) at org.pdfbox.util.pdftextstripper. processpages(pdftextstripper.java:268) at org.pdfbox.util.pdftextstripper. writetext(pdftextstripper.java:220) in fact the cause of this exception is that the cmapparser does not recognize the begincidchar and begincidrange operators (in the case of the 90ms-rksj- h) encoding and usecmap operator in the case of identity-v encoding. the cmap files for these encodings are not properly parsed and the corresponding cmap objects do not contain neither one nor two byte mappings, further the lookup() method returns null. i'll attach two samples for the 90ms-rksj-h encoding and one for the identity-v encoding. i'll attach cmap reference also. [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1438028&file_id=168711 5014.cidfont_spec.rar (application/octet-stream), 240282 bytes reference, containing cmap description [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1438028&file_id=168709 ken1.pdf (application/pdf), 33713 bytes the identity-v sample [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1438028&file_id=168708 tp0404-2a.pdf (application/pdf), 11434 bytes the second 90ms-rksj-h sample [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1438028&file_id=168705 nan_youkou.pdf (application/pdf), 7663 bytes the first 90ms-rksj-h sample",
        "label": 1
    },
    {
        "text": "false negative on pdf a validation  1.4.10 : trailer syntax error, file contains data after the last %%eof sequence at offset 0 3.2.2 : font damaged, tjseep+arial-italicmt: the fontfile can't be read",
        "label": 6
    },
    {
        "text": "text extraction shows glyphs with zero height this happens with file 001033.pdf: 2.0: string[108.0,663.6 fs=6.96 xscale=6.96 height=0.0 space=12.1104 width=3.4800034]1 string[144.0,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.996994]i string[147.417,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=4.5]n string[152.337,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.25]  string[154.88701,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.501999]t string[157.809,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=4.5]h string[162.729,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=3.9960022]e string[167.145,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.25]  1.8: string[108.0,663.6 fs=6.96 xscale=6.96 height=4.57272 space=1.74 width=3.4800034]1 string[144.0,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.996994]i string[147.417,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=4.5]n string[152.337,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.25]  string[154.88701,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.501999]t string[157.809,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=4.5]h string[162.729,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=3.9960022]e string[167.145,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.25]  the font has an empty bbox: def /fontbbox {0 0 0 0} 1.8 had this code to get the height (in pdsimplefont):                 pdrectangle fontbbox = desc.getfontboundingbox();                 if (fontbbox != null)                 {                     retval = fontbbox.getheight() / 2;                 }                 if( retval == 0 )                 {                     retval = desc.getcapheight();                 }                 if( retval == 0 )                 {                     retval = desc.getascent();                 }                 if( retval == 0 )                 {                     retval = desc.getxheight();                     if (retval > 0)                     {                         retval -= desc.getdescent();                     }                 } 2.0 has only this: float glyphheight = font.getboundingbox().getheight() / 2; so 2.0 takes the height from the font itself, and has no plan b. getting the bbox from the font descriptor brings correct heights. (and a better text extraction)",
        "label": 11
    },
    {
        "text": "eol changes on different oses [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1415803 originally submitted by yourgod on 2006-01-26 15:03. contentstreamwriter.eol is currently defined as system.getproperty(\"line.separator\").getbytes() i am using pddocument.save(outputstream) to send the pdf through a checkedoutputstream for getting a checksum for the pdf. i found that because of this use of system.getproperty(\"line.separator\") that my checksums were different when this ran on different operating systems. my workaround was to force system.getproperty(\"line.separator\") to a known value before calling pddocument.save(outputstream) and then resetting it after, but this is not an optimal solution. i propose that this value be made a fixed one (which one you pick apparently doesn't matter) as it's more \"java like\" for things to be the same on different operating systems. [comment on sourceforge] originally sent by yourgod. logged in: yes user_id=257129 seems cosstandardoutputstream.eol also needs a change made as it is initialized the same way.",
        "label": 1
    },
    {
        "text": "java lang unsupportedoperationexception  kerning table version format not yet supported  hi everyone, i am currently using pdfbox to extract text from pdf files and i an encountering an unsupportedoperationexception while trying to extract text from provided file (file.pdf) ... caused by: java.lang.unsupportedoperationexception: kerning table version 0 format 2 not yet supported. at org.apache.fontbox.ttf.kerningsubtable.readsubtable0format2(kerningsubtable.java:231) at org.apache.fontbox.ttf.kerningsubtable.readsubtable0(kerningsubtable.java:215) at org.apache.fontbox.ttf.kerningsubtable.read(kerningsubtable.java:70) at org.apache.fontbox.ttf.kerningtable.read(kerningtable.java:80) at org.apache.fontbox.ttf.truetypefont.readtable(truetypefont.java:324) at org.apache.fontbox.ttf.ttfparser.parsetables(ttfparser.java:174) at org.apache.fontbox.ttf.ttfparser.parse(ttfparser.java:150) at org.apache.fontbox.ttf.ttfparser.parse(ttfparser.java:106) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.<init>(pdtruetypefont.java:178) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:75) at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:143) at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:829) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:486) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:460) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150) at org.apache.pdfbox.text.legacypdfstreamengine.processpage(legacypdfstreamengine.java:139) at org.apache.pdfbox.text.pdftextstripper.processpage(pdftextstripper.java:391) at org.apache.pdfbox.text.pdftextstripper.processpages(pdftextstripper.java:319) at org.apache.pdfbox.text.pdftextstripper.writetext(pdftextstripper.java:266) at org.apache.pdfbox.text.pdftextstripper.gettext(pdftextstripper.java:227) ... i would like to understand what in my file causes this error and if anyone knows a workaround to perform text extraction successfully on this file. thank you in advance guys",
        "label": 11
    },
    {
        "text": "should be able to extract text from  owner password  protected pdf file without specifing  owner password  hi team, technically, we can do extract text from \"owner\" password protected pdf file without specifing \"owner\" password. right? do we should be able to do that ? or not. the reason why i'm asking is i am using the pdfbox for audting the content of the pdf file. so, whether the user want to make \"text extract\" permission disabled or not, i need to look into the content of the \"owner password\" protected pdf file. old pdfbox could do this. what do you think? takashi",
        "label": 1
    },
    {
        "text": "font missing when building from source makes build fail downloaded and built trunk from source today and got a failing test due to missing noto font. ``` 2017-11-23 08:19:58 error org.apache.pdfbox.pdmodel.font.filesystemfontprovider:661 - could not load font file: /usr/share/fonts/noto/notosanscoptic-regular.ttf java.io.filenotfoundexception: /usr/share/fonts/noto/notosanscoptic-regular.ttf (no such file or directory) at java.io.randomaccessfile.open0(native method) at java.io.randomaccessfile.open(randomaccessfile.java:316) at java.io.randomaccessfile.<init>(randomaccessfile.java:243) at org.apache.fontbox.ttf.bufferedrandomaccessfile.<init>(bufferedrandomaccessfile.java:88) at org.apache.fontbox.ttf.rafdatastream.<init>(rafdatastream.java:63) at org.apache.fontbox.ttf.ttfparser.parse(ttfparser.java:84) at org.apache.pdfbox.pdmodel.font.filesystemfontprovider.readtruetypefont(filesystemfontprovider.java:682) at org.apache.pdfbox.pdmodel.font.filesystemfontprovider.gettruetypefont(filesystemfontprovider.java:650) at org.apache.pdfbox.pdmodel.font.filesystemfontprovider.access$200(filesystemfontprovider.java:55) at org.apache.pdfbox.pdmodel.font.filesystemfontprovider$fsfontinfo.getfont(filesystemfontprovider.java:126) at org.apache.pdfbox.pdmodel.font.fontmapperimpl.getcidfont(fontmapperimpl.java:518) at org.apache.pdfbox.pdmodel.font.pdcidfonttype0.<init>(pdcidfonttype0.java:128) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createdescendantfont(pdfontfactory.java:121) at org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:80) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:83) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.getfonts(resourcesvalidationprocess.java:125) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatefonts(resourcesvalidationprocess.java:94) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:77) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:84) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:57) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validateresources(singlepagevalidationprocess.java:169) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:84) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:84) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:57) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:69) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:57) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:84) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:122) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:163) at org.apache.pdfbox.preflight.testisartorbavaria.validate(testisartorbavaria.java:190) ``` ``` validate[target/pdfs/isartor testsuite/pdfa-1b/6.3 fonts/6.3.4 embedded font programs/isartor-6-3-4-t01-fail-c.pdf](org.apache.pdfbox.preflight.testisartorbavaria) time elapsed: 0.025 sec <<< error! java.lang.nullpointerexception: null at org.apache.pdfbox.pdmodel.font.pdcidfonttype0.<init>(pdcidfonttype0.java:158) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createdescendantfont(pdfontfactory.java:121) at org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:80) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:83) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.getfonts(resourcesvalidationprocess.java:125) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatefonts(resourcesvalidationprocess.java:94) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:77) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:84) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:57) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validateresources(singlepagevalidationprocess.java:169) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:84) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:84) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:57) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:69) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:57) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:84) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:122) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:163) at org.apache.pdfbox.preflight.testisartorbavaria.validate(testisartorbavaria.java:190) ```",
        "label": 11
    },
    {
        "text": "pages in a pdf being dropped with just an error log message trying to excatly pages from pdf documents like this pddocument doc = pddocument.load(new bytearrayinputstream(pdf)); list allpages = doc.getdocumentcatalog().getallpages(); but not all pages get read, and the only indication something is wrong is this error-logging: error org.apache.pdfbox.pdmodel.pdpagenode.getallkids()#202: no kids found in getallkids(). probably a malformed pdf. i'm getting one of these error-lines for each page that isn't read. i'm attaching two different files with this problem. one gives me 4 out of 6 pages, and the other gives me none of the 4 pages. both documents read fine in acrobat reader and in okular where all the pages get shown.",
        "label": 1
    },
    {
        "text": " patch  couldn't link the profiles error on multithreaded system java.awt.color.cmmexception: lcms error 13: couldn't link the profiles at sun.java2d.cmm.lcms.lcms.createnativetransform(native method) at sun.java2d.cmm.lcms.lcms.createtransform(lcms.java:156) at sun.java2d.cmm.lcms.lcmstransform.dotransform(lcmstransform.java:155) at sun.java2d.cmm.lcms.lcmstransform.colorconvert(lcmstransform.java:268) at java.awt.image.colorconvertop.iccbifilter(colorconvertop.java:355) at java.awt.image.colorconvertop.filter(colorconvertop.java:282) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorspace.torgbimageawt(pdcolorspace.java:237)",
        "label": 6
    },
    {
        "text": "reading pdf documents that contain special characters  e g  \u20ac  cause warning and invalid parse result when trying to call stripper.gettext on the pdf file http://www.edi-energy.de/files2/edi@energy%20utilmd%205.1_20130401.pdf, pdfbox 1.8.2 emits the following warning: 08:48:20,222 warn pdfstreamengine:567 - java.io.ioexception: error: could not find font(cosname {f7}) in map={f1=org.apache.pdfbox.pdmodel.font.pdtruetypefont@676825b5, f2=org.apache.pdfbox.pdmodel.font.pdtruetypefont@547e97d8} java.io.ioexception: error: could not find font(cosname{f7} ) in map= {f1=org.apache.pdfbox.pdmodel.font.pdtruetypefont@676825b5, f2=org.apache.pdfbox.pdmodel.font.pdtruetypefont@547e97d8} at org.apache.pdfbox.util.operator.settextfont.process(settextfont.java:57) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:554) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:455) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:379) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:335) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:254) interestingly, pdfbox 2.0 emits a different warning that calls out the problem more precisely: aug 27, 2013 9:35:30 am org.apache.pdfbox.pdmodel.font.pdsimplefont extracttounicodeencoding severe: error: could not load embedded tounicode cmap aug 27, 2013 9:35:30 am org.apache.pdfbox.pdmodel.font.pdsimplefont getspacewidth severe: can't determine the width of the space character using 250 as default java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.font.pdsimplefont.getspacewidth(pdsimplefont.java:406) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:343) at org.apache.pdfbox.util.operator.showtextglyph.process(showtextglyph.java:62) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:529) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:258) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:205) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:455) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:379) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:335) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:254) we could trace the problem down to reading pages that contain special characters (e.g. \u20ac). in the referenced pdf document, pages that do not contain special characters (e.g. \u20ac) do not cause the above mentioned warning. the text parts in the document that cause the warning do not get parsed correctly. the parse result contains byte rubbish. adobe reader displays the entire document correctly. the following snippet should serve as a repro: package com.regiocom.bpo.mig; import java.io.file; import java.io.fileinputstream; import java.io.filenotfoundexception; import java.io.ioexception; import java.util.list; import org.apache.pdfbox.pdfparser.pdfparser; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.util.pdftextstripper; import org.apache.pdfbox.util.splitter; public class repro { public repro() { try { stripper = new pdftextstripper(); } catch (ioexception e) { e.printstacktrace(); } } // use this pdf as input: http://www.edi-energy.de/files2/edi@energy%20utilmd%205.1_20130401.pdf public void run(string pdffile) { pddocument[] documents = loadandsplitfile(pdffile, 1); for(pddocument document : documents) { parse(document); } } private pddocument[] loadandsplitfile(string pdffile, int splitpage) { list<pddocument> documents; splitter splitter = new splitter(); pdfparser parser; try { parser = new pdfparser(new fileinputstream(new file(pdffile))); parser.parse(); pddocument doc = parser.getpddocument(); splitter.setsplitatpage(splitpage); documents = splitter.split(doc); doc.close(); return documents.toarray(new pddocument[]{}); } catch (filenotfoundexception e) { e.printstacktrace(); } catch (ioexception e) { e.printstacktrace(); } return null; } private void parse(pddocument pdffile) { try { stripper.gettext(pdffile); } catch (ioexception e) { e.printstacktrace(); } } private pdftextstripper stripper; }",
        "label": 1
    },
    {
        "text": "classcastexception in preflight  pdnonterminalfield cannot be cast to pdfield i get this with the attached files: exception in thread \"main\" java.lang.classcastexception: org.apache.pdfbox.pdmodel.interactive.form.pdnonterminalfield cannot be cast to org.apache.pdfbox.pdmodel.interactive.form.pdfield  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.explorefields(acroformvalidationprocess.java:107)  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.validate(acroformvalidationprocess.java:60)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88)  at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168)  at org.apache.pdfbox.preflight.validator_a1b.runsimple(validator_a1b.java:161)  at org.apache.pdfbox.preflight.validator_a1b.main(validator_a1b.java:126)",
        "label": 11
    },
    {
        "text": "chinese font substitution issue java -jar pdfbox-app-1.8.10.jar pdftoimage 20150829a01_pdf.pdf",
        "label": 6
    },
    {
        "text": "nullpointerexception when setting form field value hi, i am not able to fill out form fields using 2.0.3 or 2.0.4. when calling field.setvalue(\"value\") i get a nullpointerexception. code: pddocument doc = pddocument.load(new file(\"input.pdf\")); pdacroform form = doc.getdocumentcatalog().getacroform(); form.getfield(\"firstname\").setvalue(\"name\"); form.flatten(); doc.save(\"output.pdf\"); stacktrace: exception in thread \"main\" java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.pdpagecontentstream.getname(pdpagecontentstream.java:964)  at org.apache.pdfbox.pdmodel.pdpagecontentstream.setnonstrokingcolor(pdpagecontentstream.java:1172)  at org.apache.pdfbox.pdmodel.interactive.form.appearancegeneratorhelper.initializeappearancecontent(appearancegeneratorhelper.java:211)  at org.apache.pdfbox.pdmodel.interactive.form.appearancegeneratorhelper.setappearancevalue(appearancegeneratorhelper.java:167)  at org.apache.pdfbox.pdmodel.interactive.form.pdtextfield.constructappearances(pdtextfield.java:263)  at org.apache.pdfbox.pdmodel.interactive.form.pdterminalfield.applychange(pdterminalfield.java:228)  at org.apache.pdfbox.pdmodel.interactive.form.pdtextfield.setvalue(pdtextfield.java:218) the private property pdresources resources is null. if i set form.setneedappearances(true); before setting the value, the nullpointerexception is gone. but then form.flatten() does break something, all form fields are empty in the resulting pdf. maybe this is an issue with our pdf. the same code works using version 2.0.2, but there i suffer from the black border issue (see 3454) i attached the pdf and a screenshot with some infos from the pdfdebugger tool as requested. thanks in advance.",
        "label": 11
    },
    {
        "text": "cache glyph table to optimize concurrent access if several threads convert several pdf to png (one thread access to a single document at a time) they are a contention on a lock in glythtable. jstack shows that all threads are in state blocked on the synchronized block in the getglyph method. the lock is necessary, it's ok, but degrades performance. this patch cache glyphs already read. with the patch pdfbox-3080, the follow benchmark compare 1000 pdf conversions with 1, 8, and 50 threads. simulation pdf 2.0-snapshot with this patch + pdfbox3080 1000 conversions / 1 thread 120 s 71 s 1000 conversions / 8 threads 76 s 28 s 1000 conversions / 50 threads 81 s 33 s",
        "label": 11
    },
    {
        "text": "pdtruetypefont limits number of glyph widths to  this can easily be removed  currently the support for fonts with exotic glyphs are limited at best. making pdfbox render chinese characters has proved to be a bit of a pain ... one blocker we ran into was the limitation of glyph widths to 256 individual widths. in pdtruetypefont.java, we find this in loaddescriptordictionary(): int firstchar = 0; int maxwidths=256; horizontalmetricstable hmet = ttf.gethorizontalmetrics(); int[] widthvalues = hmet.getadvancewidth(); list widths = new arraylist(maxwidths); the \"int maxwidths=256\" affects the remaining code so glyph widths for codepoints larger than 256 are ignored. we found that there is no need to impose such a limitation, and that having it makes it impossible to generate a proper /w dictionary when generating a cidfonttype2. simply replacing the hard coded value 256 with the following seems to be a perfectly usable solution: int firstchar = 0; //int maxwidths=256; <---- no hard coded value int maxwidths = glyphtoccode.length; // <---- rather use the counted number of codepoints horizontalmetricstable hmet = ttf.gethorizontalmetrics(); int[] widthvalues = hmet.getadvancewidth(); list widths = new arraylist(maxwidths); integer zero = new integer( 250 ); is it possible to have this change added to 1.2.0? also we would be more than happy to contribute some code that shows how you can use pdfbox to produce pdf's containing special characters (asian, chinese etc) by using codepoint-to-glyph mapping and copy-paste working (/tounicode). the code allows api users to simply use utf-8 strings and not worry about any of the tricky font handling details.",
        "label": 1
    },
    {
        "text": "nonsequentialparser not reading version in header and trailer on older pdf files, the nonsequentialparser returns a different pdfversion than the traditional parser via the call: document.getdocument().getversion(). i think this is because nonsequentialparser is not reading the header but relying on the default 1.4 if no version is found in the trailer. many apologies if this is a duplicate. i feel like i've seen this issue elsewhere, but i can't track it down.",
        "label": 11
    },
    {
        "text": "getpagelabels method for pdocumentcatalog class  i had a requirement for adding page labels (see pdf reference (http://www.adobe.com/devnet/acrobat/pdfs/pdf32000_2008.pdf, page 374 (12.4.2 page labels). since pdfbox does not have this functionality currently. i ended up implementing it. the code contains on public method getpagelabels(), which should become a part of the pddocumentcatalog api. this method returns an array of page labels. the array size corresponds to the number of pages in the document.",
        "label": 7
    },
    {
        "text": "getparent method of class pdfield doesn't consider both parent keys  p  and  parent  the getparent method should lookup a parent using both valid parent keys: \"p\" and \"parent\". the method findfieldtype of this class already performs it's lookup using both keys. additionally method getparent of the class pdfield has a return type of pdfield. while this is appropriate for nested fields this doesn't work for pdpages. i have an acroform i'm working with that sets a page object to be the parent of an acroform field. it does this specifically by setting the \"p\" key to the object reference for a particular page (e.g. << /p 102 0 r/ft/btn >> with \"102 0 r\" being the aforementioned object reference). as a result of this design decision there is no way of getting a field's parent page from the getparent method. we are required to get the backing cosdictionary, call getdictionaryobject(\"p\") and create a pdpage object from scratch. this is workable, but not optimal. we'd prefer to avoid the cos data types wherever possible. thanks, robert mchugh",
        "label": 1
    },
    {
        "text": "improve handling and writing of header and trailer versions from maruan sahyoun in pdfbox-1922: i'd think that instead of setting the version the current way (which is replacing the version information in the header) during the parsing the parsing should keep both version informations and getversion within cosdocument is amended to return the correct information. what i'm suggesting is keeping both versions as this is inline with the spec and ensures that we do not override the current settings in a pdf when opening and saving out. from me: cosdocument.java has this:     public void setversion( float versionvalue )     {         // update header string         if (versionvalue != version)          {             headerstring = headerstring.replacefirst(string.valueof(version), string.valueof(versionvalue));         }         version = versionvalue;     } so it does two things, set the version and set the headerstring. my first idea would be to remove the setting of the headerstring, because this is 1. a side effect and 2. already done elsewhere. but this was inserted in 2011 by andreas lehmk\u00fchler as part of pdfbox-879 so i wonder if i will break something by removing this. from andreas lehmk\u00fchler: as far as i can remember it, i wasn't aware of the fact that a pdf may have to versions (header + trailer). in the hindsight the change wasn't that good. i agree with maruan sahyoun, we have to overhaul the get/setversion methods. both must take both possible values into account following the pdf spec. my current thought: we may need two setters. one for \"inside jobs\" (i.e. parsing), that sets each version separately. one for \"higher\" applications (e.g. merging), that sets the version in the header and in the trailer at the same time. whatever change will be done, it should not produce a regression in pdfbox-879.",
        "label": 1
    },
    {
        "text": "add description to embedded file pdf documents can contain file attachments. but at the moment, we can't add descriptions of file attachments.",
        "label": 1
    },
    {
        "text": "converttoimage causes jvm crash on certain pdfs i'm evaluating pdfbox and as part of the process i tried out several pdfs on it. one of the issues i found was on converting certain pdfs to images, it crashed the jvm with this message (ubuntu lucid lynx 64-bit): # # a fatal error has been detected by the java runtime environment: # #  sigsegv (0xb) at pc=0x00007fe5b6be1a37, pid=2133, tid=140628023412496 # # jre version: 6.0_20-b02 # java vm: java hotspot(tm) 64-bit server vm (16.3-b01 mixed mode linux-amd64 ) # problematic frame: # c  [libfontmanager.so+0x27a37] # # an error report file with more information is saved as: # /home/xxxxxx/hs_err_pid2133.log # # if you would like to submit a bug report, please visit: #   http://java.sun.com/webapps/bugreport/crash.jsp # the crash happened outside the java virtual machine in native code. # see problematic frame for where to report the bug. # of course, this seems like an issue with java but it would be nice if pdfbox somehow worked around it. i tested this on 2 separate 64-bit linux boxes as well as a 32-bit windows box. pretty much the same error on both platforms.",
        "label": 7
    },
    {
        "text": "java lang illegalargumentexception  width   and height   cannot be   we're using pdfbox-1.8.1.jar to convert pdf to jpgs. below is part of a stacktrace we see when converting a pdf of size 500kb java.lang.illegalargumentexception: width (4032) and height (-2880) cannot be <= 0 at java.awt.image.directcolormodel.createcompatiblewritableraster(unknown source) at java.awt.image.bufferedimage.<init>(unknown source) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:752) at org.apache.pdfbox.util.pdfimagewriter.writeimage(pdfimagewriter.java:115) we use pddocument.load(file). as suggested, we tried with loadnonseq and also the non sequential form of load as below. also tried it with a fileinputstream and file. all these forms of load gave us the same error. \u2014 raf = new randomaccessfile(new file(\"/tmp/nonseqpdffile\"), \"rw\"); document = pddocument.load(new fileinputstream(inputfile), raf); pdfimagewriter imagewriter = new pdfimagewriter(); success = imagewriter.writeimage(document, imageformat, password, startpage, endpage, pdfworkfileprefix, imagetype, resolution);",
        "label": 1
    },
    {
        "text": "truetype font glyphs not rendered file submitted by manfred pock on the mailing list, i am attaching a reduced version. the font itself seems to be ok, extracting the stream and double click shows glyphs, but with pdfbox nothing appears.",
        "label": 11
    },
    {
        "text": "java io ioexception  error  source pdf is encrypted  can't append encrypted pdf documents in the release notes of pdfbox 2.0.0 rc2 we can read that (pdfbox-1656) pdfmergerutility is able to merge encrypted files. i have some files protected against modification with a password (users are allowed to open and print the file but its content is locked). i'm trying to merge those files into a single one but without success. 1. adding source files. 2. setting the destination filename. 3. calling mergedocuments(). result is : exception in thread \"main\" java.io.ioexception: error: source pdf is encrypted, can't append encrypted pdf documents. at org.apache.pdfbox.multipdf.pdfmergerutility.appenddocument(pdfmergerutility.java:255) at org.apache.pdfbox.multipdf.pdfmergerutility.mergedocuments(pdfmergerutility.java:201) note : pddocument.load() works if i need to print the files. (bonus question : how could i decrypt a document before appending it to a new one (decrypt and openprotection are not used anymore))",
        "label": 11
    },
    {
        "text": "add basic xfa extraction add a basic xfa extraction capability to pdxfa to support getting the data of dynamic xfa forms.",
        "label": 1
    },
    {
        "text": "loading a cups generated pdf results in rasterexceptions i've generated a pdf with cups (a testpage) and when i try to load this pdf with the recently checked out version of pdfbox, i get rasterexceptions because there are filters active on the inline images. i've removed the filters in the pdf and then i can open it without errors but i also get an empty page. note: the pdf works with the pdf-renderer on dev.java.net and the reader of adobe.",
        "label": 1
    },
    {
        "text": "problem with generate jpg from pdf when converting jpg from pdf (using writeimage) whitespaces in text are replaced by digt \"w\" or \"y\".",
        "label": 1
    },
    {
        "text": "text strings being returned as single characters  regression from version printtextlocations writestring() is returning individual characters on this file, rather than a complete string. was returning strings with '-200,000' in version 1.8 also note that textposition.getwidthofspace() is getting a negative value (-4.464) for each character. don't know if that is symptom or a cause.",
        "label": 11
    },
    {
        "text": "textposition instance return wrong position i use pdftextstripper to strip text from pdf. but the textposition instance generated during the strip process return the wrong position.",
        "label": 1
    },
    {
        "text": "preflightdocument constructor ignores given preflightconfiguration instance one of the constructor in preflightdocument document, where custom preflightconfiguration instance can be passed, does not set it to the internal class variable \"config\" and therefore ignores it. here is the patch to fix this bug: index: preflightdocument.java =================================================================== \u2014 preflightdocument.java (revision 1409245) +++ preflightdocument.java (working copy) @@ -91,6 +91,7 @@ public preflightdocument(cosdocument doc, format format, preflightconfiguration cfg) { super(doc); this.specification = format; + this.config = cfg; if (this.config == null) { initconfiguration(format); }",
        "label": 3
    },
    {
        "text": "inline image with ei in the middle incorrectly parsed this pdf http://digitalcorpora.org/corp/nps/files/govdocs1/876/876636.pdf has an exception because the end of an inline image is improperly detected. the stream looks like this: bi   /w 452   /h 169   /bpc 8   /cs /rgb   /d [0.0 1.0 0.0 1.0 0.0 1.0]   /f [/a85 /fl] id ...................................................... ....................................................ei ...................................................... ... .... ei q the inline images are handled in pdfstreamparser. this is tricky, we look for followup bin data to check that it isn't an ei in the middle, but here it isn't bin data, but ascii85 stuff. we also can't request that there be a lf before the ei, because i remember that i had a pdf at work created by a well known company that doesn't use it.",
        "label": 11
    },
    {
        "text": "all english characters and some chinese words are separated by a space see the pdf document and text document extracted by extracttext. the file's info: $ pdfinfo ikanalyzer.pdf title: ikanalyzer\u4e2d\u6587\u5206\u8bcd\u5668v3.0\u4f7f\u7528\u624b\u518c keywords: ik analyzer \u4e2d\u6587\u5206\u8bcd\u5668 lucene author: \u6797\u826f\u76ca\u3001\u5353\u8bd7\u579a creator: wps office \u4e2a\u4eba\u7248 producer: pdflib 7.0.3 (c++/win32) creationdate: sun dec 6 22:07:26 2009 tagged: no pages: 15 encrypted: no page size: 595.3 x 841.9 pts (a4) file size: 441273 bytes optimized: no pdf version: 1.5 $ pdffonts ikanalyzer.pdf name type emb sub uni object id ------------------------------------ ----------------- \u2014 --- \u2014 --------- inuzmh+nsimsun-identity-h cid truetype yes yes yes 7 0 mgixay+microsoftyahei-identity-h cid truetype yes yes yes 8 0 cflopa+simsun-identity-h cid truetype yes yes yes 6 0 ghnzkz+timesnewromanps-boldmt-identity-h cid truetype yes yes yes 19 0 unebht+cambria-bold-identity-h cid truetype yes yes yes 20 0 uqkwwp+wingdings-regular-identity-h cid truetype yes yes yes 33 0 nkftto+microsoftyahei-identity-h cid truetype yes yes yes 40 0 oojxdg+couriernewpsmt-identity-h cid truetype yes yes yes 51 0 whldyi+couriernewps-italicmt-identity-h cid truetype yes yes yes 58 0 txihgb+cambria-identity-h cid truetype yes yes yes 100 0 crjwmd+timesnewromanpsmt-identity-h cid truetype yes yes yes 108 0",
        "label": 1
    },
    {
        "text": "cache file fallback if not writable fallback to the next file location if the current location for .pdfbox.cache is not writable. currently there is a fallback from pdfbox.fontcache to user.home to java.io.tmpdir as directory to write .pdfbox.cache, but this is only on the level of if the system property is defined. it would be nice to fallback to the next directory if the file is not writable in a directory. without config and on a system where user.home is not writable pdfbox is quite slow, as the caching is tried each time. usually java.io.tmpdir is writable, so this would provide better performance out of the box. the workaound is to configure the pdfbox.fontcache system property.",
        "label": 11
    },
    {
        "text": "some characteres are missing after print thru pdfbox hello, i'm trying to print document (source and pdffile are attached in issue https://issues.apache.org/jira/browse/pdfbox-1671 ), but after printin some characters are missing. it's mainly character \u017e which you can find for examle in last cell of document. i don't know if this is bug or if this is not supported by pdfbox. thanks",
        "label": 1
    },
    {
        "text": "pdfunctiontype0 incorrect type 0 (sampled) functions are described in 3.9.1 of the pdf spec and basically, its cheating: there's an n-dimensional grid of values (\"samples\") and the function shall return these values or something in-between. pdfunctiontype0 has two bugs: 1) it does not do any interpolation. the function interpolate() is called several times, but only adjust values between ranges etc, not to calculate the color between 2^n samples - that part is \"outputvalues[i] = (outputvaluesprevious[i] + outputvaluesnext[i]) / 2\". the spec does not tell much, only that \"interpolation is used to determine output values from the nearest surrounding values in the sample table\". i have done a linear/bilinear interpolation implementation for 1d/2d inputs. i did not do an interpolation implementation for 3d and higher, because its unclear whether this is actually used. instead, i return random values. 2) the sample bits are not collected correctly, the current code ignores the leftover bits when a row is done. the spec tells us \"successive values are adjacent in the bit stream; there is no padding at byte boundaries\". luckily, that one is easy to correct, three lines must be moved up. alternatively, one might use the bit-io lib i mention in pdfbox-615.",
        "label": 1
    },
    {
        "text": "npe in nonsequentialpdfparser when parseminimal property is set to true when the parseminimal system property is set to true, indirect objects are not followed when the pdf is parsed. that causes the following npe: java.lang.nullpointerexception at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parsedictobjects(nonsequentialpdfparser.java:1082) at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.getpage(nonsequentialpdfparser.java:928) at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parse(nonsequentialpdfparser.java:749)",
        "label": 1
    },
    {
        "text": "creating a link without borders appears with borders in mac's preview i am trying to create a link with no borders. the link appears and works perfect in adobe reader, but in mac preview the link appears with a border around it. here is my code : pdannotationlink link = new pdannotationlink(); pdborderstyledictionary border = new pdborderstyledictionary(); border.setwidth( 0f ); link.setborderstyle( border ); can this be fixed to show no border in mac's preview ? i have attached a sample pdf with a link in its last page ... you can test it on adobe reader and mac's preview programs.",
        "label": 1
    },
    {
        "text": "addition of 'null' in cosstring when extracting form fields when extracting from a pdf form document which has a multi line text box, if you have words separated by a cr, the extractor returns a 'null' in the extraction.",
        "label": 1
    },
    {
        "text": "problem with calling  saveincrementalforexternalsigning  more than once in the same document i've included the test which will fail. after digging around a little, i found out that by calling saveincrementalforexternalsigning, it trimmed the reserved space in the byterange (i've included the difference in the screen shot). i'm not sure if this is a bug for anyone but it's for my use case (distributed digital signing). changing the content at all is not permitted at all. if this is an intended feature, please dismiss this. i can workaround by calling it more than once and it'll be stable although i'm not sure about efficiency.",
        "label": 11
    },
    {
        "text": "all sort of problems when importing xfdf files into pdfs   damaged pdfs and npes when trying to merge pdfs with there corresponding xfdfs all sort of problems occur. i created different pdfs with form fields and a \"sendbutton\". (the sendbutton triggers a send-action to send the form data via post-request to a url in the xfdf format). merging that xfdf data with the pdf worked only for the simplest most minimal example: 1 text-input + send button. in the other cases i experienced some of the following problems missing checkbox npe in importfdf (acroform == null) miss-rendered send-button (not working any longer: either url damaged or document no send-able with strange adobe message) i tried doing the same with the evaluation version of aspose pdf kit for java which worked fine in all of that cases. i could provide examples of pdfs and and corresponding xfdf that show that faulty behavior",
        "label": 11
    },
    {
        "text": "nullpointerexception when doing overlay when input pdf file for overlay contains empty page (with contents == null) like npe.pdf file we get nullpointerexception in overlay.addoriginalcontent method. it occurres even if we overlay over other than this empty page. here's some sample code to reproduce the problem: overlay overlayobj = new overlay(); file file1 = new file(\"npe.pdf\"); pddocument originaldoc = pddocument.load(file1); overlayobj.setoverlayposition(overlay.position.foreground); overlayobj.setinputpdf(originaldoc); map<integer, string> ovmap = new hashmap<>(); file file2 = new file(\"pdf2.pdf\"); ovmap.put(2, file2.getpath()); overlayobj.overlay(ovmap); originaldoc.save(\"test__result.pdf\");",
        "label": 11
    },
    {
        "text": "latest apache tika can't be used together with pdfbox i'm using both tika and pdfbox in my project and i have upgraded pdfbox to 2.0. i realized after that tika is using some classes from pdfbox and some of these classes are removed from pdfbox 2.0 such as cryptographyexception. see code: https://github.com/apache/tika/blob/trunk/tika-parsers/src/main/java/org/apache/tika/parser/pdf/pdfparser.java line 151",
        "label": 1
    },
    {
        "text": "maven repository points to incorrect snapshot version looking at the maven repository    https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-parent/1.8.14-snapshot/maven-metadata.xml   latest version points to 1.8.14-20180226.173300-46 but that version is not available in the repository, a different version is available https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-parent/1.8.14-snapshot/pdfbox-parent-1.8.14-20180226.173259-46.pom same buildnumber but different timestamp   this results in failing downloads",
        "label": 1
    },
    {
        "text": "pdpagedestination page index off by one when creating a new bookmark with the same page number as an existing bookmark, the resulting destination is offset by 1 compared to the old destination. this results in the bookmark being set for the next page, which could be a non-existing page. i've added a class with an example pdf and my own output pdf. run with argument of a path to where you have the pdf, including a trailing slash.",
        "label": 11
    },
    {
        "text": "slovakian characters hello, i have a pdf document with slovakian characters: hlavn\u00ed administr\u00e1tor my code: pddocument document = null; document = pddocument.load(pdffile, true); pdftextstripper stripper = null; stripper = new pdftextstripper(\"iso-8859-2\"); stripper.gettext(document); i always get this result: hlavn? administr\\ ?tor",
        "label": 1
    },
    {
        "text": "cjk decoding [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=765686 originally submitted by bguan on 2003-07-03 17:57. another feature i need a lot is the correct interpretation of cjk encoding. yes, i know pdf can be a pain when it comes to correctly interpreting cjk charsets, as many factors are involved, including whether a font (or its subset) is embeded or not. attached is a simple korean pdf that so far has not been correctly interpreted by any java based opensource libraries. though it could be rendered correctly by xpdf on linux and also windows. [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552835&aid=765686&file_id=80181 cjk.zip (), 142061 bytes cjk pdf, output and test program [comment on sourceforge] originally sent by bguan. logged in: yes user_id=815589 hello ben, thanks for the response. i just downloaded pdfbox 0.6.5 and wrote a little sample program to test it against 3 cjk pdf files i have, and the output is still no good. i have attached my sample program, the 3 pdfs and the output in the attached zip file. can you tell me what i am foing wrong? the pdf files were generated by using adobe acrobat 5.0 using embeded fonts i believe. thank you. [comment on sourceforge] originally sent by benlitchfield. logged in: yes user_id=601708 there was no attachment with this. i have done some cjk work in the 0.6.5 release. please attach the document and i can take a look at it.(make sure you check the 'attach file' checkbox) ben",
        "label": 1
    },
    {
        "text": "return default value for checkbox   radiobutton if  v entry is missing  widget  as entries are present  the /v entry is missing for the radio and checkbox fields in the attached file. getvalue() returns nothing. a look at the widget shows that /as is set. shouldn't this be used as fallback? the value is the one that isn't cosname.off. for the attached file, i looked at the radiobutton \"marital status\" and the checkbox \"as\".",
        "label": 8
    },
    {
        "text": "executionexception  java lang arrayindexoutofboundsexception  the following stacktrace is shown with extracttext and pdfreader when opening a file previously parsed by 1.8.10. unfortunately the file can not be shared. java.lang.runtimeexception: java.util.concurrent.executionexception: java.lang.arrayindexoutofboundsexception: 0     org.apache.pdfbox.debugger.pagepane.pagepane$renderworker.done(pagepane.java:176)     sun.swing.accumulativerunnable.run(unknown source)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source) caused by: java.util.concurrent.executionexception: java.lang.arrayindexoutofboundsexception: 0     org.apache.pdfbox.debugger.pagepane.pagepane$renderworker.done(pagepane.java:165)     sun.swing.accumulativerunnable.run(unknown source)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source) caused by: java.lang.arrayindexoutofboundsexception: 0     org.apache.fontbox.ttf.truetypefont.getunicodecmap(truetypefont.java:566)     org.apache.pdfbox.pdmodel.font.pdcidfonttype2.<init>(pdcidfonttype2.java:183)     org.apache.pdfbox.pdmodel.font.pdcidfonttype2.<init>(pdcidfonttype2.java:70)     org.apache.pdfbox.pdmodel.font.pdfontfactory.createdescendantfont(pdfontfactory.java:125)     org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:128)     org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:83)     org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:123)     org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60)     org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:815)     org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:472)     org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:446)     org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149)     org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:189)     org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:208)     org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:139)     org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:68)     org.apache.pdfbox.debugger.pagepane.pagepane$renderworker.doinbackground(pagepane.java:156)     org.apache.pdfbox.debugger.pagepane.pagepane$renderworker.doinbackground(pagepane.java:139)     java.lang.thread.run(unknown source)",
        "label": 11
    },
    {
        "text": "exception when renderingintent value is not one of the predefined  hello! due to pdf specification there are four possible rendering intents : relativecolorimetric, absolutecolorimetric, perceptual or saturation. but also there's a remark that \"if the viewer application does not recognize the specified name, it uses the relativecolorimetric intent by default.\" pdfbox throws exception while encountering unknown renderingintent which seems to be incorrect behavior. look at org.apache.pdfbox.pdmodel.graphics.state.renderingintent.fromstring",
        "label": 11
    },
    {
        "text": "pdftoimage image rendering fails on pdf with embedded picture s  ",
        "label": 1
    },
    {
        "text": "java lang indexoutofboundsexception at writing pdf file i got this error: i will just recreate a document with pages 1-6. exception in thread \"main\" java.io.ioexception: org.apache.pdfbox.exceptions.cosvisitorexception: java.lang.indexoutofboundsexception: index: 115, size: 0 at de.back2heaven.pdf.model.targetdocumuent.save(targetdocumuent.java:56) at de.back2heaven.pdf.model.document.prozess(document.java:76) at de.back2heaven.pdf.model.document.main(document.java:56) caused by: org.apache.pdfbox.exceptions.cosvisitorexception: java.lang.indexoutofboundsexception: index: 115, size: 0 at org.apache.pdfbox.pdfwriter.coswriter.visitfromstream(coswriter.java:1354) at org.apache.pdfbox.cos.cosstream.accept(cosstream.java:217) at org.apache.pdfbox.cos.cosobject.accept(cosobject.java:206) at org.apache.pdfbox.pdfwriter.coswriter.dowriteobject(coswriter.java:525) at org.apache.pdfbox.pdfwriter.coswriter.dowritebody(coswriter.java:435) at org.apache.pdfbox.pdfwriter.coswriter.visitfromdocument(coswriter.java:1122) at org.apache.pdfbox.cos.cosdocument.accept(cosdocument.java:552) at org.apache.pdfbox.pdfwriter.coswriter.write(coswriter.java:1501) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1324) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1305) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1292) at de.back2heaven.pdf.model.targetdocumuent.save(targetdocumuent.java:54) ... 2 more caused by: java.lang.indexoutofboundsexception: index: 115, size: 0 at java.util.arraylist.rangecheck(arraylist.java:604) at java.util.arraylist.get(arraylist.java:382) at org.apache.pdfbox.io.randomaccessbuffer.seek(randomaccessbuffer.java:84) at org.apache.pdfbox.io.randomaccessfileinputstream.read(randomaccessfileinputstream.java:96) at java.io.bufferedinputstream.fill(bufferedinputstream.java:235) at java.io.bufferedinputstream.read1(bufferedinputstream.java:275) at java.io.bufferedinputstream.read(bufferedinputstream.java:334) at org.apache.pdfbox.pdfwriter.coswriter.visitfromstream(coswriter.java:1337) ... 13 more",
        "label": 4
    },
    {
        "text": "buffer error when trying to run node description: trying to merge pdf using the latest merge pdf node but getting the following error there is a problem with task \u201cmerge pdf\u201d in the process \u201ccreate application pack\u201d problem: an error occurred in executing an activity class. details: org.apache.pdfbox.exceptions.wrappedioexception: could not push back 628696 bytes in order to reparse stream. try increasing push back buffer using system property org.apache.pdfbox.baseparser.pushbacksize recommended action: examine the activity class to correct the error and then resume. priority of this problem: high priority",
        "label": 12
    },
    {
        "text": "signing improvement  settable signature size  here is a small patch that add a new setter and getter \"preferedsignaturesize\" to the signatureoptions. so the user can set the approximate signature size on one's own. we use a small amount of bytes for the signature itself like 0x500 and additional calculate the size of the whole certificate chain that should be wrote inside the signature. this is much better than setting a fix signature size. if the user don't set any size, 0x2500 will be reserved.",
        "label": 1
    },
    {
        "text": "pdfmergerutility addsources function does not work public void addsources(list<inputstream> sourceslist) { this.sources.addall(sources); } it should be \"this.sources.addall(sourceslist);\"",
        "label": 12
    },
    {
        "text": "arrayindexoutofboundsexception in bfsearchforobjstreams java.lang.arrayindexoutofboundsexception: 184     org.apache.pdfbox.pdfparser.cosparser.bfsearchforobjstreams(cosparser.java:1766)     org.apache.pdfbox.pdfparser.cosparser.bfsearchforobjects(cosparser.java:1529)     org.apache.pdfbox.pdfparser.cosparser.getbfcosobjectoffsets(cosparser.java:1445)     org.apache.pdfbox.pdfparser.cosparser.checkxrefoffsets(cosparser.java:1379)     org.apache.pdfbox.pdfparser.cosparser.parsexref(cosparser.java:368)     org.apache.pdfbox.pdfparser.cosparser.retrievetrailer(cosparser.java:214)     org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:189)     org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:239)     org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1017)     org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:955)     org.apache.pdfbox.debugger.pdfdebugger.parsedocument(pdfdebugger.java:1408)     org.apache.pdfbox.debugger.pdfdebugger.readpdffile(pdfdebugger.java:1326)     org.apache.pdfbox.debugger.pdfdebugger.readpdffile(pdfdebugger.java:1309)     org.apache.pdfbox.debugger.pdfdebugger.main(pdfdebugger.java:275)     org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:72) worked with 2.0.7. it's the only file from the recent test by tim.",
        "label": 1
    },
    {
        "text": "strange color issues with converttoimage method while testing pdfbox i noticed a few strange color issues when converting the first page of an pdf to an image using the method converttoimage on a pdpage. an example pdf and resulting png is attached for each case. case 1: most of the colors seem to get inverted. case 2: the green color of the area in the top right is paler the the original, and the text under the logo at the bottom right is quite \"pixely\" case 3: the blue area under the text is missing case 4: the red area should be semi-transparent (so the rose stem can be seen behind it), not solid. i compared all resulting images with how the pdf looks in foxit reader 5.1 on windows 7. this is the code i used: --------- pdfparser parser = new pdfparser(new fileinputstream(pdfinputfile)); parser.parse(); pddocument document = parser.getpddocument(); list<pdpage> pages = (list<pdpage>)document.getdocumentcatalog().getallpages(); if (pages.size() > 0) { pdpage page = pages.get(0); bufferedimage image = page.converttoimage(bufferedimage.type_int_rgb, 300); imageio.write(image, \"png\", pngoutputfile); } --------- if there is some change i can do in my code or some configuration to improve some of these issues, then i would love to hear about it. as a comparison, ghost4j (with ghostscript underneath) can handle these cases better. even the text under the logo in case 2 was less \"pixely\", with the same resolution.",
        "label": 1
    },
    {
        "text": "pdfimagewriter default bufferedimage type makes output colors look poor the default imagetype for pdfimagewriter.writeimage() is 8, which is type_ushort_565_rgb. i suggest to use type_int_rgb instead. the current default might create a poor user experience. i also suggest that the type and the resolution (\"screen resolution or 96 if not detected\") be added to the javadoc. finally, the variable \"imagetype\" is used with two different meanings in that file: once as a string for the format, once as int for the bufferedimage type.",
        "label": 1
    },
    {
        "text": "xfdf export is not xml compliant the xfdf content is written as a simple string instead of xml nodes. as a result, field values containing special characters (&, <, >, ...) are not escaped and the resulting xml is invalid.",
        "label": 1
    },
    {
        "text": "problem converting pdf page w  fully embedded ttf font  identity h  cid  i'm running into an issue when trying to convert a pdf page to an image. conditions: pdf file with truetype font fully embedded encoding: identity-h (cid) although the fontfile2 stream is present, i get (i added extra info logging): jun 1, 2010 12:44:38 pm org.apache.pdfbox.pdmodel.font.pdfontfactory createfont info: subtype: cosname {type0} jun 1, 2010 12:44:38 pm org.apache.pdfbox.pdmodel.font.pdfontfactory createfont info: subtype: cosname {cidfonttype2} jun 1, 2010 12:44:39 pm org.apache.pdfbox.pdmodel.font.pdtype1font getawtfont info: can't find the specified basefont droidsansfallback java.lang.throwable at org.apache.pdfbox.pdmodel.font.pdtype1font.getawtfont(pdtype1font.java:234) at org.apache.pdfbox.pdmodel.font.pdsimplefont.drawstring(pdsimplefont.java:97) at org.apache.pdfbox.pdmodel.font.pdtype0font.drawstring(pdtype0font.java:68) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:190) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:498) at org.apache.pdfbox.util.operator.showtext.process(showtext.java:45) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:556) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:250) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:208) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:111) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:718) at org.apache.pdfbox.util.pdfimagewriter.writeimage(pdfimagewriter.java:137) at org.apache.pdfbox.pdftoimage.main(pdftoimage.java:204) info: using font arialmt instead test with: java -jar pdfbox-app-1.2.0-snapshot.jar pdftoimage -imagetype png -startpage 1 -endpage 1 -color rgba -resolution 108 hello-droidsans-identity-h.pdf attached is a sample pdf with one of the droid fonts fully embedded in the above manner (free, apache 2 license): http://android.git.kernel.org/?p=platform/frameworks/base.git;a=tree;f=data/fonts;hb=head (the attached file has droidsans instead of droidsansfallback as in the log to keep the file size down, but it has the same result) (i was able to hack fix by changing pdtype0 to extends pdtruetypefont, but that seems like a terrible hack). below are the relevant parts of the pdf that cause the getawtfont issue: 1 0 obj <</descendantfonts[7 0 r] /basefont/droidsans/type/font/encoding/identity-h/subtype/type0/tounicode 8 0 r>> endobj 4 0 obj <</parent 3 0 r/contents 2 0 r/type/page/resources<</procset [/pdf /text /imageb /imagec /imagei] /font<</f1 1 0 r>> /mediabox[0 0 328.5 449.28]>> endobj 5 0 obj <</length1 190044/length 190044>>stream -snip ttf stream- endstream 6 0 obj <</fontbbox[-558 -270 1168 1047]/capheight 713/type/fontdescriptor/fontfile2 5 0 r/stemv 80/descent -240/flags 32/fontname/droidsans/ascent 765/italicangle 0>> endobj 7 0 obj <</basefont/droidsans/cidsysteminfo<</ordering(identity)/registry(adobe)/supplement 0>>/w [3[259 269]43[701]58[883]71[585 535]79[258]82[577]85[398]]/type/font/subtype/cidfonttype2/fontdescriptor 6 0 r/dw 1000/cidtogidmap/identity>> endobj 8 0 obj <</length 485>>stream /cidinit /procset findresource begin 12 dict begin begincmap /cidsysteminfo << /registry (ttx+0) /ordering (t42uv) /supplement 0 def /cmapname /ttx+0 def /cmaptype 2 def 1 begincodespacerange <0000><ffff> endcodespacerange 9 beginbfrange <0003><0003><0020> <0004><0004><0021> <002b><002b><0048> <003a><003a><0057> <0047><0047><0064> <0048><0048><0065> <004f><004f><006c> <0052><0052><006f> <0055><0055><0072> endbfrange endcmap cmapname currentdict /cmap defineresource pop end end endstream endobj",
        "label": 1
    },
    {
        "text": "add numpages parameter of book in printing printwithpaper example book has a constructor taking 3 parameters, is it ok to use this one in printing.printwithpapaer? i found the current usage of book will cause all pages but the first one been omitted.",
        "label": 1
    },
    {
        "text": "pdf supplies glyph unicode mapping  but pdfbox doesn't use it  we had a user report this pdf to the lucene lists: http://www.lucidimagination.com/search/document/7a8c14a534d9a84c/tika_can_not_parse_all_of_the_persian_pdf_files i asked them to create a tika issue (tika-713) and attach the pdf file upon inspection, the fonts used in the pdf have custom encodings (that map the characters to u+0001, u+0002, ...), however they contain a mapping for the font to unicode >>/type/encoding/baseencoding/winansiencoding/differences, but pdfbox doesnt use this mapping. if you use extracttext it extracts the raw control characters instead.",
        "label": 1
    },
    {
        "text": "faulty jempbox checksum file in maven central maven is giving me \"checksum failed\" warnings for jempbox-1.0.0.jar . the checksum file http://repo1.maven.org/maven2/org/apache/pdfbox/jempbox/1.0.0/jempbox-1.0.0.jar.md5 contains the following: jempbox-1.0.0.jar: c1 83 87 f9 1f a8 66 da 2d e4 2c a6 61 fe d3 d5 that's the right checksum, but the format of the file is wrong. the checksum files of other packages, e.g. http://repo1.maven.org/maven2/org/apache/pdfbox/pdfbox/1.0.0/pdfbox-1.0.0.jar.md5 contain only the checksum, not the filename, and use lowercase letters and no spaces.",
        "label": 1
    },
    {
        "text": "text is obscured by the images text is obscured by the images,and images is showed in reversed color.",
        "label": 1
    },
    {
        "text": "cache color space instances i have a pdf from a customer which contains a lot of calls of setnonstrokingcolorspace and setstrokingcolorspace. each time, an embedded color profile resource is loaded via icc_profile.getinstance(inputstream). i have attempted to cache the result in pdresources.java as shown in the attached patch. for this particular pdf, this change improves the performance of pdftoimage from 27 seconds down to 5 seconds (the pdf has two pages). i cannot share the customer pdf, so i have attempted to find a similar free one. unfortunately, in my test suite, i did not find anything with a comparable improvement. the best example i found is in the attached pdf. there the improvement is from 4.9 seconds without caching to 4.1 with caching.",
        "label": 6
    },
    {
        "text": "several errors in the incremental save we have several mistakes in pdf signature. 1) some pdf ar not signed but no error is arised 2) others contain the signature but acrobat reader does not show it . the documents of the first type are confidential and we can only provide the information appendend by pdfbox to the original pdf. for the second case we will provide you the original document .",
        "label": 11
    },
    {
        "text": "illegalargumentexception in getstringwidth showtext i want to get the string width using a type0 font. because i'm using a character not in the font (e.g. '\\n') i'm getting the following exception: exception in thread \"main\" java.lang.illegalargumentexception: no glyph for u+000a in font opensans  at org.apache.pdfbox.pdmodel.font.pdcidfonttype2.encode(pdcidfonttype2.java:401)  at org.apache.pdfbox.pdmodel.font.pdtype0font.encode(pdtype0font.java:351)  at org.apache.pdfbox.pdmodel.font.pdfont.encode(pdfont.java:283)  at org.apache.pdfbox.pdmodel.font.pdfont.getstringwidth(pdfont.java:312) as this is a quite common scenario, i suggest you provide a possibility to provide a fallback codepoint that can be used for all non-printable characters. a similiar exception happens when trying to print the text via the pdpagecontentstream: exception in thread \"main\" java.lang.illegalargumentexception: no glyph for u+000a in font opensans  at org.apache.pdfbox.pdmodel.font.pdcidfonttype2.encode(pdcidfonttype2.java:401)  at org.apache.pdfbox.pdmodel.font.pdtype0font.encode(pdtype0font.java:351)  at org.apache.pdfbox.pdmodel.font.pdfont.encode(pdfont.java:283)  at org.apache.pdfbox.pdmodel.pdpagecontentstream.showtext(pdpagecontentstream.java:341) i finally ended up creating my own \"font.encode\" method (with a lot of other hacks) that basically does the following:    final byte [] afallbackbytes = afont.encode (nfallbackcodepoint);        byte [] acpbytes;       try       {         // this method is package private         acpbytes = afont.encode (ncp);       }       catch (final illegalargumentexception ex) {         acpbytes = afallbackbytes;       } -> another issue is, that \"pdfont.encode (int)\" is not public - it would help to change this as well. shall i create a separate issue?",
        "label": 6
    },
    {
        "text": "print with printranges printrequestattribute causing document to be cropped when printing with printranges printrequestattribute, the printed out document will be cropped.",
        "label": 6
    },
    {
        "text": "add decoded stream length to pdstream add getter/setter for decoded stream length (dl) in pdstream. see pdf 32000-1:2008 section 7.3.8.2 table 5, page 21.",
        "label": 7
    },
    {
        "text": "textextraction only working after uncompressing with pdftk from jonas karlsson on the user list: === we have a user with pdfs generated by a commercial transcription service. when we try to extract text from these pdfs, pdfbox returns a few empty lines. we get this result both from our own code, and when using the extracttext command line tool if i specify the non-sequential parser, with the -nonseq flag, the following error is produced: apr 28, 2014 10:35:11 am org.apache.pdfbox.pdfparser.nonsequentialpdfparser validatestreamlength severe: the end of the stream doesn't point to the correct offset, using workaround to read the stream if i uncompress the file with pdftk, pdfbox is able to successfully extract the text. === i have been given permission to attach the file \"committers only\". so don't pass it around, avoid quoting details from the file. the file is also not rendering. the lengths of the streams are 0.",
        "label": 11
    },
    {
        "text": "pdtextstream does not support utf16 with bom the getasstring() method from pdtextstream is quite useful, but it does not support utf-16 text. i added a small check on the first two bytes to support utf-16 content. this is needed because two-bytes encodings do not degrade gracefully like utf-8, even for plain ascii text and so the resulting string is unusable.",
        "label": 6
    },
    {
        "text": "writedecodeddoc slow due to decoding images pdf from pdfbox-323 time qpdf --stream-data=uncompress about\\ stacks.pdf /tmp/out.pdf real 0m0.200s user 0m0.020s sys 0m0.180s time java -jar pdf-box-svn/app/target/pdfbox-app-2.1.0-snapshot.jar writedecodeddoc about\\ stacks.pdf /tmp/out.pdf real 0m1.536s user 0m1.497s sys 0m0.798s",
        "label": 11
    },
    {
        "text": "npe in pdpagenode i get a nullpointer exception when parsing a pdf with tika. http://www.awsg.at/portal/media/4218.pdf java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.pdpagenode.getcount(pdpagenode.java:109) at org.apache.pdfbox.pdmodel.pddocument.getnumberofpages(pddocument.java:943) at org.apache.tika.parser.pdf.pdfparser.extractmetadata(pdfparser.java:105) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:86)",
        "label": 0
    },
    {
        "text": "printpdf does not take the windows default printer orientation into account we have 2 printers, the first one is defined to print in portrait by default in windows, the other one is defined to print in landscape by default in windows. printpdf does not take the default configuration into account. i wrote a little patch that seems to solve this bug",
        "label": 7
    },
    {
        "text": "converted pdf a online validator error good morning, we have a java application that converts a file in pdf / a. if we test at this link http://www.pdf-tools.com/pdf/validate-pdfa-online.aspx we get the following error: validating file \"atto pubblico_pdfa.conv.pdf\" for conformance level pdfa-1b dc:title/*[0] :: missing language qualifier. the document does not conform to the requested standard. the document's meta data is either missing or inconsistent or corrupt. done. can you help me? thanks",
        "label": 1
    },
    {
        "text": "java util zip dataformatexception when parsing a pdf i use the following code to parse a pdf: pdfparser pdfparser = new pdfparser();         pdfparser.parse(test.class.getresourceasstream(\"/testdoc.pdf\"), handler, metadata, pcontext); this results in the following exception: exception in thread \"main\" org.apache.tika.exception.tikaexception: unable to extract pdf content  at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:133)  at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:150)  at com.curecomp.tika.test.main(test.java:28) caused by: java.io.ioexception: java.util.zip.dataformatexception: too many length or distance symbols  at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:82)  at org.apache.pdfbox.cos.cosinputstream.create(cosinputstream.java:69)  at org.apache.pdfbox.cos.cosstream.createinputstream(cosstream.java:162)  at org.apache.pdfbox.pdmodel.font.pdfont.readcmap(pdfont.java:189)  at org.apache.pdfbox.pdmodel.font.pdfont.<init>(pdfont.java:134)  at org.apache.pdfbox.pdmodel.font.pdsimplefont.<init>(pdsimplefont.java:84)  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.<init>(pdtruetypefont.java:164)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:75)  at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:143)  at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60)  at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:815)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:472)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:446)  at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149)  at org.apache.pdfbox.text.legacypdfstreamengine.processpage(legacypdfstreamengine.java:139)  at org.apache.pdfbox.text.pdftextstripper.processpage(pdftextstripper.java:391)  at org.apache.tika.parser.pdf.pdf2xhtml.processpage(pdf2xhtml.java:141)  at org.apache.pdfbox.text.pdftextstripper.processpages(pdftextstripper.java:319)  at org.apache.pdfbox.text.pdftextstripper.writetext(pdftextstripper.java:266)  at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:111)  ... 2 more caused by: java.util.zip.dataformatexception: too many length or distance symbols  at java.util.zip.inflater.inflatebytes(native method)  at java.util.zip.inflater.inflate(inflater.java:259)  at java.util.zip.inflater.inflate(inflater.java:280)  at org.apache.pdfbox.filter.flatefilter.decompress(flatefilter.java:107)  at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:73)  ... 21 more the pdf can be read using adobe reader xi 11.0.12.",
        "label": 11
    },
    {
        "text": "failure to extract custom encoded text pdfbox extracts a binary garble from this file. adobe reader does the same. linux's pdftotext extracts text fairly well. i suspect there's a custom font/encoding node that isn't being processed, but i could be wrong.",
        "label": 1
    },
    {
        "text": "embedded font can't be read i have a pdf that has embedded fonts. when i load the file with the pdfbox-app-1.7.1.jar pdfreader i get the message below. when i look at the pdf the characters are not rendered properly. this works properly on pdf readers of the ipad, ios, and adobeacrobat windows. nov 02, 2012 10:53:21 am org.apache.pdfbox.pdmodel.font.pdtruetypefont getawtfont info: can't read the embedded font hmklbw+helveticaneue-bold nov 02, 2012 10:53:22 am org.apache.pdfbox.pdmodel.font.pdtruetypefont getawtfont info: using font arial instead",
        "label": 1
    },
    {
        "text": "ttfsubsetter nosuchelementexception exception in thread \"main\" java.util.nosuchelementexception at java.util.treemap$privateentryiterator.nextentry(treemap.java:1113) at java.util.treemap$entryiterator.next(treemap.java:1151) at java.util.treemap$entryiterator.next(treemap.java:1146) at org.apache.fontbox.ttf.ttfsubsetter.buildos2table(ttfsubsetter.java:523) at org.apache.fontbox.ttf.ttfsubsetter.writetostream(ttfsubsetter.java:1081) truetypefont x = new ttfparser().parse(\"uvb_____.ttf\"); new ttfsubsetter(x, null).writetostream(new bytearrayoutputstream());",
        "label": 11
    },
    {
        "text": "performance problem with pddocument saveincremental  when signing document  performance problem in class coswriter: constructor of coswriter takes 2 args: coswriter(outputstream os, fileinputstream is) method saveincremental in class pddocument: saveincremental(fileinputstream input, outputstream output) it create coswriter with this args. if i pass fileinputstream into saveincremental then signing the document goes quite a long time. if you pass bufferedinputstream, the signing speed is increases. but alas, this is not possible, because the parameters of the method saveincremental does not allow to do this.",
        "label": 11
    },
    {
        "text": "display font size i (along with others) have found using the font size of text to be very useful when doing things like trying to recover the structure of pdfs. for example, in heuristics like 'text with large font sizes are probably titles'. however, i noticed a few cases where getfontsizeinpt or getfontsize return seemingly very inaccurate results. for example, in the attached pdf the getfontsizeinpt for the title text is over 500. after digging into this a little, as i understand it neither of these methods return the a font size scaled to the display space. getfontsize returns the \"raw\" encoded font size and getfontsizeinpt returns the font size scaled by the text matrix, but not by the current transformation matrix. basically, in order to get reliable font information, it would be helpful if either 1) getfontsizeinpt includes the effect of using the current transformation matrix 2) a new method like getdisplayfontsize is added that returns the font size scaled to the display space as a side note, i have seen several users (including myself), assume that getfontsize returns the font size as would be observed when one opens the pdf, and the been confused when these method occasionally do not return the results expected. i think getfontsize would benefit from a clear note that the results might not include scaling factors that were used when the text was rendered.",
        "label": 11
    },
    {
        "text": "add pddocument save file  and pddocument loadnonseq inputstream    this patch adds methods for saving a pdf to a file and parse from an inputstream using the non sequential parser. it also includes test cases for pddocument save and load methods.",
        "label": 1
    },
    {
        "text": " dorg apache pdfbox rendering usepurejavacmykconversion true  takes much time i have a pdf in which page 1 gets around 45 sec to render when i set the property (-dorg.apache.pdfbox.rendering.usepurejavacmykconversion=true) and without it it takes 20 sec. and something weird happens to me. when i don't set this property (system.setproperty(\"sun.java2d.cmm\", \"sun.java2d.cmm.kcms.kcmsserviceprovider\")) then i get this warning \"warning: could not read jpeg 2000 (jpx) image\" . is it some jar related warning or it happen to u also?",
        "label": 11
    },
    {
        "text": "form fields are missing when rendering hi, i was trying to convert my pdf file to image (jpg or png) but only the grey text (see my attached pdf) were successfully converted to an image file but the blue text cannot. i've try to extract this pdf with several pdfbox versions : 2.0, 1.8.10, and 1.6 but it doesn't work. however, with 1.6, the generated image contains both grey and blue text but in an incorrect layout/alignment. can you please verify this issue? please also let me know if you have any quick fix for this issue. ------------------------------- attached sources : mypdf.pdf : original pdf to be converted out_bufferedimage_1.png : converted with pdfbox 2.0 and 1.8.10 myout_image_1.jpg : converted with pdfbox 2.0 and 1.6 ------------------------------- thanks a lot. best,",
        "label": 11
    },
    {
        "text": " patch  ttf type12 ioexception  invalid characters codes https://developer.apple.com/fonts/ttrefman/rm06/chap6cmap.html you try to read ngroups+1 instead of ngroups",
        "label": 11
    },
    {
        "text": "form field not rendered after being processed by pdfbox  wrong position of same field in pdfbox i have a pdf form that was created with adobe acrobat 7.0 professional. i feed the pdf into pdfbox and write it out again with document= pddocument.load(pdf); document.save(pdf.getcanonicalpath()); i realized that a recently added form field within the pdf is not visible when i use pdfbox-1.1.0. when i use the current pdfbox-1.5.0, the field is visible, but has an incorrect position. the three pdf attachments illustrate the behavior. interestingly, pdfbox handles the pdf correctly, once i save the original pdf under a new file name. the \"save as...\" function in acrobat professional seems to perform some kind of compacting / clean-up within the pdf, which is also reflected by a smaller file size. thanks",
        "label": 8
    },
    {
        "text": "unnecessary using intermediate bytearrayinputstream to copy from given byte array to outputstream in flatefilter decode it is not required to use intermediate bytearrayinputstream to copy from given byte array to outputstream. when we have byte[], it's okay just to call write(byte[]) method of outputstream to write all data at once. as is: // copy data to bytearrayinputstream for reading bais = new bytearrayinputstream(baos.tobytearray()); baos.close(); baos = null; byte[] decodeddata = decodepredictor(predictor, colors, bitsperpixel, columns, bais); bais.close(); bais = new bytearrayinputstream(decodeddata); // write decoded data to result while ((amountread = bais.read(buffer)) != -1) { result.write(buffer, 0, amountread); } bais.close(); bais = null; to be: // copy data to bytearrayinputstream for reading bais = new bytearrayinputstream(baos.tobytearray()); baos.close(); baos = null; byte[] decodeddata = decodepredictor(predictor, colors, bitsperpixel, columns, bais); bais.close(); bais = null; result.write(decodeddata);",
        "label": 1
    },
    {
        "text": "wrong encoding with type1c font when specific encoding is defined the type1c font implementation overwrites the encoding() method of pdfont base class. this results in a lookup of codes to characters as defined in the font. however if an encoding is explicitly given (like winansiencoding) this leads to wrong results if encoding codes do not match glyph codes. in a test document (which unfortunately i cannot make public - an article from elsevier) a type1c font is embedded which defines a copyright sign at glyph position 259. the encoding is defines as winansiencoding. text characters are defined corresponding to the winansiencoding. in case of the copyright sign it is 0xa9 (169) where the font has glyph 'quotesingle' defined. since currently i have no other test cases i implemented following workaround for winansiencoding (which might be relaxed to other pdf encodings as well: in pdtype1cfont.encode() i start with: if ( getencoding() instanceof winansiencoding ) // use pdfont encoding return super.encode( bytes, offset, length ); this resolves the encoding problems for text extraction.",
        "label": 1
    },
    {
        "text": "clone   extract paragraph from pdf file using search string i have working on text mining in pdf file using apache pdfbox for past three months. i am trying to extract the particular paragraph from pdf file using search string. but i can\u2019t extract the paragraph from pdf. is there any other methods to extract same. kindly suggest me.",
        "label": 1
    },
    {
        "text": "modern os x doesn't show jmenubar in pdfdebugger app os x apparently doesn't support `system.setproperty(\"apple.laf.usescreenmenubar\", \"true\");` these days, so that line should be removed from the main method on pdfdebugger. the debugger app is a lot more useful with the menu than without. forcing it to a single value in main disallows overriding it via `-dapple.laf.usescreenmenubar=false`, which means the menubar is invisible and unrecoverable in mac os x. i built from source at head on trunk, and run with the following command: java -jar ./app/target/pdfbox-app-2.1.0-snapshot.jar pdfdebugger my-doc.pdf after removing the aforementioned line and rebuilding, i have access to the menubar (which is handy!).",
        "label": 6
    },
    {
        "text": "patch  fix for appearance of visible signature we're using pdfbox (as backend used by esig dss) for digital signing of documents. we've found out  that visible signature has different look on mac preview app than other pdf viewers. after some investigation we suspect that bbox-es for appearance of signature is not filled correctly by pdfbox. the values are hard coded as [0, 0, 100, 50]. also transformation matrix for translating from form xobject coordinate system into default one has value (1, 0, 0, 1, 0, 0) -> no scaling between default user coordinate system and form xobject coordinate system. therefore i think that the mac preview app draws signature with dimensions 100x50 because no transformation were done. i've attached patch which solves this issue for us. the signature is shown correctly in all pdf viewers now. maybe you can take a look on it and integrate it into your code base, or propose better solution.",
        "label": 11
    },
    {
        "text": "support for multipage tiffs in ccittfactory  makes pdfbox capable of doing tiff2pdf i created a patch based on sergey ushakov's work that handles multipage tiffs. this allows fast and efficient conversion from tiff to pdf the general approach is to provide a new factory method that accepts an image (page) number, and then appropriate page number is located when the ccitt stream is being extracted. there's a minor inefficiency in this approach because the seek starts from the beginning for each page, causing o(n^2) algorithm when extracting every page, but maximum size for file appears to be 2 gb and the cost for finding a single page will still be low, so i bet this will never come up in practice. there is no method that tells how many pages tiff files have. i opted to simply return null from the factory method that accepts page number if there is no such page, so users can use this as condition to break from a tiff to pdf conversion loop.",
        "label": 11
    },
    {
        "text": "org apache pdfbox util pdftextstripper gettext  causes thread to block indefinitely url of the problematic pdf file is http://www.redalyc.org/pdf/540/54017220.pdf my program tries to extract the fulltext of the given pdf file in the following manner: string filename = \"/home/sascha/testfile.pdf\"                   // 1 pddocument pddoc = pddocument.load(filename, true); // 2 pdftextstripper text = new pdftextstripper();             // 3 string fulltext = text.gettext(pddoc);                               // 4 the call in line 4 causes the thread to block indefinitely (runs now for more than two days without making any progress). the file is stored in a local file system (no network interaction occurs). jstack indicates that the thread is not deadlocked: \"main\" prio=10 tid=0x000000004187d800 nid=0x6ed8 runnable [0x00007f9e28e56000]    java.lang.thread.state: runnable         at java.io.bufferedinputstream.fill(bufferedinputstream.java:218)         at java.io.bufferedinputstream.read(bufferedinputstream.java:237)         - locked <0x00000007d73a84a0> (a java.io.bufferedinputstream)         at java.io.filterinputstream.read(filterinputstream.java:66)         at java.io.pushbackinputstream.read(pushbackinputstream.java:122)         at org.apache.pdfbox.io.pushbackinputstream.read(pushbackinputstream.java:91)         at org.apache.pdfbox.pdfparser.baseparser.parsecoshexstring(baseparser.java:1006)         at org.apache.pdfbox.pdfparser.baseparser.parsecosstring(baseparser.java:808)         at org.apache.pdfbox.pdfparser.pdfstreamparser.parsenexttoken(pdfstreamparser.java:260)         at org.apache.pdfbox.pdfparser.pdfstreamparser.access$000(pdfstreamparser.java:46)         at org.apache.pdfbox.pdfparser.pdfstreamparser$1.trynext(pdfstreamparser.java:182)         at org.apache.pdfbox.pdfparser.pdfstreamparser$1.hasnext(pdfstreamparser.java:194)         at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:255)         at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235)         at org.apache.pdfbox.util.operator.invoke.process(invoke.java:67)         at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:554)         at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268)         at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235)         at org.apache.pdfbox.util.operator.invoke.process(invoke.java:67)         at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:554)         at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268)         at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235)         at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215)         at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:455)         at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:379)         at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:335)         at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:254)         at de.kobv.ked.extraction.fulltextextraction.getfulltext(fulltextextraction.java:65) any idea or advice on how to fix that problem? is it possible to set up a timeout for the extraction operation?",
        "label": 1
    },
    {
        "text": " preflight  continue the pdf validation after syntax error currently, the pdf content isn't checked if the pdf syntax is invalid. study the possibility to continue the validation process if the grammar throws an exception. it should be possible but i prefer to check that there aren't bad effects.",
        "label": 3
    },
    {
        "text": "fdfexport import gives strange results 1. create a new, blank pdf in acrobat. 2. add a text form field and set the contents to \"some text\". 3. run exportfdf and then importfdf on this file. the result is a messed-up text box. see the attached files. also i've noticed that the fdf created by pdfbox is very different to the one created by acrobat. here's my code: exportfdf.main(new string[] {\"c:/gilad/input/test.pdf\", \"c:/gilad/input/test.fdf\"} ); importfdf.main(new string[] {\"c:/gilad/input/test.pdf\", \"c:/gilad/input/test.fdf\", \"c:/gilad/input/result.pdf\"} );",
        "label": 8
    },
    {
        "text": "japanese uri improperly decoded pdactionuri.geturi() function returns bad result for the first link annotation in the attached document business.pdf (this doc works fine in acrobat reader). we are using pdfbox 2.0.5 //.. //iterates by all annotations on the first page of doc, searches for first annotation of type pdannotationlink //..   pdannotationlink link = (pdannotationlink) annotation;   pdaction action = link.getaction(); //this would return buggy result: http://\u00e7\u00b5\u201e\u00e5\u0153\u00b6\u00e6\u203a\u00bf\u00e7\u00b6\u017e.com/ string baduri = ((pdactionuri) action).geturi(); //although, here fine result is returned: http://\u7d4c\u55b6\u627f\u7d99.com/ string gooduri = new string(((cosstring)action.getcosobject().getdictionaryobject(\"uri\")).getbytes());",
        "label": 11
    },
    {
        "text": "apache pdfbox textstripper not able to recognise characters having  frutiger lt    fonts when i tried to extract contents from pdf's i am successfully able to extract all text with pdfbox api but getting trouble with fonts having 'frutiger' style. for these i am getting squared boxes in place of characters. it seems pdfbox fontbox supports only 14 utf characters set and none of them is frutiger style fonts. if anybody please can suggest something. that would be of great help. i am in urgent need of the solution.",
        "label": 1
    },
    {
        "text": "our test hangs with custom pdf file on operation pdpage converttoimage  our code is:       string pdfname = \"081111.pdf\";       inputstream pdf = thread.currentthread().getcontextclassloader().getresourceasstream(pdfname);       contentstream stream = new basecontentstream(pdf, pdfname, new mimetype(\"application\", \"pdf\"));       pddocument pdf = pddocument.load(stream.getstream());       pdpage page = (pdpage)pdf.getdocumentcatalog().getallpages().get(0);       bufferedimage image = page.converttoimage(); ...",
        "label": 1
    },
    {
        "text": "pdpage converttoimage not returning rotated image pdpage.converttoimage is not returning a rotated image when rotate: 90 or rotate: 270 is specified in the page dictionary.",
        "label": 1
    },
    {
        "text": "setting a pdfformfield's value with a specific font size causes the font size to change on click setting the font size of a pdfield causes the font size to change on click on the field. it starts out with incorrect font size. when the field is clicked, it displays in the font size correctly. clicking outside the field, reverts back to the incorrect font size. this behavior was also mentioned in pdfbox-1419 in passing. code: pdfformfield.getdictionary.setstring(cosname.da, \"/helv 10 tf 0 g\u201d) pdfformfield.setvalue(\"hello\u201d) a simple example of such a pdf is here.",
        "label": 8
    },
    {
        "text": "exception thrown during rendering page if  decodeparms specified indirectly  like  r  in xobject image problem: exception is thrown during rendering tc11.pdf. empty image is generated. test: java -jar pdfbox-app-1.7.1.jar pdftoimage -resolution 300 tc11.pdf details: there are 2 objects in tc11.pdf. . . . object 7: << /type /xobject /subtype /image /width 2496 /height 3504 /bitspercomponent 1 /colorspace /devicegray /filter [/ccittfaxdecode] /decodeparms [9 0 r] /length 10 0 r >> . . . object 9: << /columns 2496 /rows 3504 /k -1 /blackis1 false >> . . . when rendering the page exception is thrown as the library doesn't resolve indirect reference to object 9 for /decodeparms. resolution: i can specify what is to be changed in ccittfaxdecoderfilter.java and pdccitt.java to resolve the issue.",
        "label": 1
    },
    {
        "text": "matrix transform ignored in axial and radial shadings  in pdftoimage output  see attached example.",
        "label": 11
    },
    {
        "text": "class pddocument should implement java io closeable it would make it possible to use java 7 try-with-resources feature: try (pddocument doc = pddocument.load(outputfile)) { // bla-bla // no need to call doc.close(); explicitly } p.s. actually all org.apache.pdfbox.* classes with method close() could implement java.io.closeable",
        "label": 11
    },
    {
        "text": "npe warn during text extraction caused by character encoding not set during text extraction, the following npe stack is printed with a warn level. 17:34:58,762 warn [pdfstreamengine] java.lang.nullpointerexception java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.font.pdsimplefont.getfontheight(pdsimplefont.java:136) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:408) at org.apache.pdfbox.util.operator.showtextglyph.process(showtextglyph.java:62) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:442) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:366) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:322) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:242) at org.nuxeo.ecm.core.convert.plugins.tests.testpdfencodingwarn.extract(testpdfencodingwarn.java:36) digging in the problem, i've found that the encoding field of the true type font was not set during the dictionary load. thread [main] (suspended (breakpoint at line 113 in pdtruetypefont)) pdtruetypefont.<init>(cosdictionary) line: 113 pdfontfactory.createfont(cosdictionary) line: 116 pdfontfactory.createfont(cosdictionary, map) line: 75 pdresources.getfonts(map) line: 115 pdftextstripper(pdfstreamengine).processsubstream(pdpage, pdresources, cosstream) line: 243 pdftextstripper(pdfstreamengine).processstream(pdpage, pdresources, cosstream) line: 225 pdftextstripper.processpage(pdpage, cosstream) line: 442 pdftextstripper.processpages(list<cosobjectable>) line: 366 pdftextstripper.writetext(pddocument, writer) line: 322 pdftextstripper.gettext(pddocument) line: 242 i've attached the pdf file and test class i've used for reproducing.",
        "label": 1
    },
    {
        "text": "add insertpage  method it would be nice if pddocument had an insertpage function similar to addpage, but takes a number to indicate where to add the new page in the current set of pages.",
        "label": 11
    },
    {
        "text": "extract text from pdf cause nullpointer exception in pdfstreamengine processencodedtext method the xpdfbin-win-3.03 -> pdftotext.exe works fine with this pdf file. tried pdfbox version 1.2.1 too, but same error. [org.apache.pdfbox.util.pdfstreamengine] java.lang.nullpointerexception java.lang.nullpointerexception at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:357) at org.apache.pdfbox.util.operator.showtextglyph.process(showtextglyph.java:62) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:556) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:270) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:237) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:217) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:448) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:372) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:328)",
        "label": 1
    },
    {
        "text": "converttoimage includes  ghost  annotation outlines when using pdpage.converttoimage() to export png files of pages with annotations on them, \"ghost\" outlines of the annotations sometimes appear on the generated image. the outlines do not correspond to the location of the annotations. see the attached files. code used: string inputfilepath = \"c:/gilad/input/3 pages from batch_sequences.pdf\"; pddocument doc = pddocument.load(inputfilepath); for (int p=0; p<doc.getnumberofpages(); p++) { pdpage page = (pdpage) doc.getdocumentcatalog().getallpages().get(p); bufferedimage bimg = page.converttoimage(); string imagepath = filenameutils.getfullpath(inputfilepath) + \"page\"+ integer.tostring(p) + \".png\"; file yourimagefile = new file(imagepath); imageio.write(bimg,\"png\",yourimagefile); }",
        "label": 1
    },
    {
        "text": "long rendering time attached pdf file takes too long (more then 9 secs) to render in pdfdebugger (this is a simplified version of a real life pdf that i can not publish for privacy reasons, it takes 57 seconds to render and it contains 56 images and some text). i have tried with the options provided in https://pdfbox.apache.org/2.0/getting-started.html but performance is the same",
        "label": 11
    },
    {
        "text": "font error in  preflight   when validating the attached pdf a font issue problem when validating the attached pdf/a. 3.1.6 : invalid font definition, width of the character \"367\" in the font program \"abcdee+calibri\"is inconsistent with the width in the pdf dictionary.",
        "label": 3
    },
    {
        "text": "unused pdsignature class should be removed in 1.8.0, the uses of class org.apache.pdfbox.pdmodel.interactive.form.pdsignature have been replace with ....form.pfsignaturefield, but the old ...form.pdsignature class still exists. this can be confusing when upgrading to pdfbox 1.8.0 \u2013 code that tests for the presence of pdsignature instances will compile, but fail to work correctly. removing the old pdsignature will give upgraders a more helpful compilation error. the old ...form.pdsignature class should be removed or the new ...form.pdsignaturefield should be renamed to completely replace it.",
        "label": 1
    },
    {
        "text": " patch  cosdocument  setversion th attribute version in cosdocument is not initialized by default, so that calling setversion does not change the header string.",
        "label": 1
    },
    {
        "text": "pdfstreamengine incorrectly calculates coordinates of characters  when i parse document with pdfstreamengine, in method processtextposition i receive incorrect coordinates of characters. it's happening for documents with version up to 1.5, widht of each character is equal 0 if one of 14 standard fonts is using. pdf specification talks that from version 1.5 standard fonts processing like the all.",
        "label": 1
    },
    {
        "text": "pddocument importpage creates two inputstreams pddocument.importpage creates two inputstreams from page.getcontents(), but uses one (for real). the first is only used to check if it exists.         inputstream in = null;         try         {             in = page.getcontents();             if (in != null)             {                 pdstream dest = new pdstream(this, page.getcontents(), cosname.flate_decode);",
        "label": 1
    },
    {
        "text": "getting unicode mapping error  file was ok in text extraction on attached file is getting many errors like: warning: no unicode mapping for c (131) in font c0hr11_t1gi0361 and then returning gibberish for all but the first 4 strings. in 1.8 all the text characters were correct. fine in acrobat, can copy/paste from there also. this has type 3 fonts. tested against trunk build 20151024.140757-1624",
        "label": 11
    },
    {
        "text": "trash glyphs  regressions there are several regressions from the changes done on the evening of 19.9.2014. because i can't map these to one single change, i had to open a new issue. pdfbox-563-acroform.pdf: trash glyphs at the bottom pdfbox-1735-confidential.pdf p7: trash glyphs on the left pdfbox-2245-052567.pdf: trash glyphs pdfbox-2251-070075.pdf: trash glyphs",
        "label": 6
    },
    {
        "text": "unwanted spaces in text extraction from testing on my internal dataset i believe there might be some regression in the effectiveness of pdftextstripper. here's an example doc i found on the web, which converted better in 1.8 than 2.0. notice that it extracts \"j e a n e t t e a c o s t a ; s e r v i c e m a n a g e r a t m a d f o x b r e w i n g c o m p a n y\". it doesn't seem like there's very much space between the letters in the pdf, so it's curious to me that it didn't do too well. i realize this is an area where we probably can't strive for perfection. yet, it does seem to me that from 1.8 to 2.0 we may have taken a step backwards. i believe there's some sort of regression test for pdftoimage which exports a set of pdfs to images at two different commits and looks at what the differences are. do we have the same sort of thing for pdftextstripper? if not, can we build one by pulling docs off the public web? i'd be willing to contribute to this endeavor.",
        "label": 11
    },
    {
        "text": "tounicode cmap is not written correctly when the entry count is just  the following warning log is output when i execute attached pdfsample.java. org.apache.pdfbox.pdmodel.font.pdfont <init> warn: invalid tounicode cmap in font aakcff+ipamincho org.apache.pdfbox.pdmodel.font.pdtype0font tounicode warn: no unicode mapping for cid+598 (598) in font aakcff+ipamincho : this program creates a simple japanese pdf and read the image. this program reads a font file. you can download the file from the following url. https://ipafont.ipa.go.jp/old/ipafont/download.html#en i investigated the problem and found a bug in tounicodewriter class. in writeto method, a loop count in a operator is calculated by the following line. but the count will be 0 if the srcfrom size is just 100. int count = batch == batchcount - 1 ? srcfrom.size() % 100 : 100; i changed this line to below and i confirmed that the problem was resolved. int count = batch == batchcount - 1 ? srcfrom.size() - 100 * batch : 100;",
        "label": 11
    },
    {
        "text": "parsing  extracting content  a single 5mb pdf file takes 3minutes when i try to extract the attached pdf-file with the following code: ... pdftextstripper stripper = new pdftextstripper(); outputstream os = null; writer writer = null; pddocument document = null; file file = new file( \"takes3mins.pdf\" ); ... document = pddocument.load(file ); file outfile = new file(\"c:/tmp/gugus.txt\"); os = new fileoutputstream(outfile); writer = new outputstreamwriter(os); stripper.writetext(document, writer); ... it takes approx 3minutes. opening it in acrobatreader in a few seconds.",
        "label": 1
    },
    {
        "text": "does not detect paper format [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1435244 originally submitted by nobody on 2006-02-20 06:55. pdfbox does not detect the paper format of the pdf. it always says \"orientation 1\" even after changing it from java: document.getpageformat(0).setorientation(pageformat.landscape); and alternates between \"height 595.0, width 842.0\" and \"height 842.0, width 595.0\" (which both is a1 if interpreted as mm) i tried several pdf-creators (itext, openoffice), but the pdfbox always wants to print letter in portrait orientation. (the pages are a4) settings the orientation in the printer dialog does not help. i believe it get's its info from: /rotate 90/mediabox[0 0 595 842] regards, jpt, j.p.t.@gmx.net (pdfbox 0.7.2, itext 1.3.6)",
        "label": 1
    },
    {
        "text": "bytes cmap entry causes exception i have pdf that has cmap entry consisting of 4 bytes. it is just one entry with that size, other entries have 2-bytes. adobe reader has no problems with that, pdfbox throws exception. i think this exception should not be thrown. it should be skipped or truncated tu 2 bytes and write warning to log.",
        "label": 1
    },
    {
        "text": "indexoutofboundsexception on cmapparser i got the next stacktrace in pdf->html conversion using tika: java.lang.indexoutofboundsexception: index: 0, size: 0  at java.util.arraylist.rangecheck(arraylist.java:635)  at java.util.arraylist.get(arraylist.java:411)  at org.apache.fontbox.cmap.cmapparser.parsebeginbfrange(cmapparser.java:364)  at org.apache.fontbox.cmap.cmapparser.parse(cmapparser.java:136)  at org.apache.pdfbox.pdmodel.font.cmapmanager.parsecmap(cmapmanager.java:73)  at org.apache.pdfbox.pdmodel.font.pdfont.readcmap(pdfont.java:197)  at org.apache.pdfbox.pdmodel.font.pdfont.<init>(pdfont.java:137)  at org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:119)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:83)  at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:143)  at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60)  at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:838)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:495)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:469)  at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150)  at org.apache.pdfbox.text.legacypdfstreamengine.processpage(legacypdfstreamengine.java:139)  at org.apache.pdfbox.text.pdftextstripper.processpage(pdftextstripper.java:391)  at org.apache.tika.parser.pdf.pdf2xhtml.processpage(pdf2xhtml.java:147)  at org.apache.pdfbox.text.pdftextstripper.processpages(pdftextstripper.java:319)  at org.apache.pdfbox.text.pdftextstripper.writetext(pdftextstripper.java:266)  at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:117)  at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:159)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280)",
        "label": 11
    },
    {
        "text": "baseparser tidy up tidy up logic (should not change the parsing result) character.iswhitespace(c) is the only point wich may have site effects (but i assume there is no file-seperator in parsecoshexstring) so this should pass as it passes befor.",
        "label": 11
    },
    {
        "text": "wrong type of referenced length in cosparser i got an exception to extract text from pdf with tika (exception thrown on pdfbox code): org.apache.tika.exception.tikaexception: tika-198: illegal ioexception from org.apache.tika.parser.pdf.pdfparser@2be78cf6  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:286)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280) caused by: java.io.ioexception: wrong type of referenced length object cosobject{11, 0}: cosnull  at org.apache.pdfbox.pdfparser.cosparser.getlength(cosparser.java:908)  at org.apache.pdfbox.pdfparser.cosparser.parsecosstream(cosparser.java:950)  at org.apache.pdfbox.pdfparser.cosparser.parsefileobject(cosparser.java:781)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:742)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:673)  at org.apache.pdfbox.pdfparser.cosparser.parsedictobjects(cosparser.java:633)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:241)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:276)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1132)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1066)  at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:141)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280)  ... 24 more",
        "label": 1
    },
    {
        "text": "gray color images much lighter in testcreatelosslessfromimagergb() i create a grayscale image, and in losslessfactory.createfromimage() i save it as a grayscale image (that part is currently disabled, search and enable the part with bufferedimage.type_byte_gray. when this is enabled, testcreatelosslessfromimagergb() fails the identity test. the expected and the actual images are attached. i traced this effect to pdcolorspace.torgbimageawt(), where i saved the \"src\" and the \"dest\" image and got two different ones. but even the first one is already different to the grayscale image i created in the test. the two attached file pairs were created by writing the bufferedimage src and dst in pdcolorspace.torgbimageawt().",
        "label": 6
    },
    {
        "text": "nullpointerexception cffparser exception in thread \"main\" java.lang.nullpointerexception at org.apache.fontbox.cff.cffparser$format1charset.getcidforgid(cffparser.java:1326) when iscidfont is false byte[] data = ioutils.tobytearray(new fileinputstream(\"broadsheet ldo.otf\")); cffparser p = new cffparser(); cfffont ff = p.parse(data).get(0); ff.getcharset().getcidforgid(0);",
        "label": 1
    },
    {
        "text": "font caching never stops in aix i'm trying to convert pdf to image. when i call pdfrenderer.renderimage(), the log message like belows appears.  warn(filesystemfontprovider.java)[2016-06-10 10:44:39,969]-new fonts found, font cache will be re-built  warn(filesystemfontprovider.java)[2016-06-10 10:44:39,969]-building on-disk font cache, this may take a while it never stops. no response or change since those message appears. i can't attach font cache file because i don't know where it is located. + i attached pdfbox tmp file \"pdfbox377219359369560029tmp\" that i found in /tmp/ directory. tail of the file is like belows <?xpacket begin=\"\u7664? id=\"w5m0mpcehihzreszntczkc9d\"?><x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"adobe xmp core 4.0-c316 44.253921, sun oct 01 2006 17:14:39\"><rdf:rdf xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"><rdf:description rdf:about=\"\" xmlns:pdf=\"http://ns.adobe.com/pdf/1.3/\"><pdf:pdfversion>1.4</pdf:pdfversion><pdf:producer>hancom pdf 1.3.0.480</pdf:producer></rdf:description><rdf:description rdf:about=\"\" xmlns:xap=\"http://ns.adobe.com/xap/1.0/\"><xap:creatortool>hancom pdf 1.3.0.480</xap:creatortool><xap:createdate>2016-05-24t18:54:06+09:00</xap:createdate><xap:modifydate>2016-05-24t18:54:06+09:00</xap:modifydate><xap:metadatadate>2016-05-24t18:54:06+09:00</xap:metadatadate></rdf:description><rdf:description rdf:about=\"\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\"><dc:format>application/pdf</dc:format><dc:title><rdf:seq><rdf:li>\uf9e1\u2465\uaf6d?\u0080 ?\u0080?\uc209\ub13b?\u2479\uc819\u8e42\ub301\ub586?\u317d\ub025 \u63f4\u044a\ud15e?\u044a\ubfbd</rdf:li></rdf:seq></dc:title><dc:date><rdf:seq><rdf:li>2016-05-24t18:54:06+09:00</rdf:li></rdf:seq></dc:date></rdf:description><rdf:description rdf:about=\"\" xmlns:xapmm=\"http://ns.adobe.com/xap/1.0/mm/\"><xapmm:documentid>43d906a6-241d-4e39-b165-0418769b224b</xapmm:documentid><xapmm:instanceid>uuid:4ab60c4f-752d-4c5c-b438-65f54d57fdf1</xapmm:instanceid></rdf:description><rdf:description rdf:about=\"\" xmlns:pdfaid=\"http://www.aiim.org/pdfa/ns/id/\"> <pdfaid:part>1</pdfaid:part> <pdfaid:conformance>b</pdfaid:conformance> </rdf:description></rdf:rdf></x:xmpmeta><?xpacket end=\"w\"?> + i also attached three files found from $user_home/.fontconfig directory which seem to be font cache files.",
        "label": 11
    },
    {
        "text": "wrong postcriptscripttable due to wrong assumption in encoding macromanencoding when parsing a postscripttable of a truetype font (format 2.0: non-standard (for postscript) truetype glyph set.) i wondered about the many wrong \"space\" entries for non-whitespace-glyphs for which ttfdump stated \".notdef\". i found out that org.apache.fontbox.encoding.(macroman)encoding.getname() puts a \"space\" when codetoname doesnt find a name. this method should be changed to return \".notdef\" for unknown codes (means code with no psglyf name) public string getname( int code ) throws ioexception { string name = codetoname.get( code ); if( name == null ) { name = \".notdef\"; } return name; }",
        "label": 1
    },
    {
        "text": "can't show text  glyph  from zapfdingbats font i am unable to add glyphs from the standard zapfdingbats font to a pdf document. the issue seems to be that the encoding for the font (winansiencoding) does not have mappings for the \"non-ascii (???)\" pdf names used in the font (\"axx\"). (however, the pdsimplefont.glyphlist does contain mappings between unicode codepoints and pdf names.) sample code: pddocument document = pddocument.load(new file(\"myfile.pdf\")); pdpage page = document.getpages().get(0); // first page pdpagecontentstream contentstream = new pdpagecontentstream(document, page, appendmode.append, true); pdtype1font font = pdtype1font.zapf_dingbats; string glyph = \"\\u2714\"; contentstream.begintext(); contentstream.setfont(font, fontsize); contentstream.newlineatoffset(10, 10); // towards lower left corner of page contentstream.showtext(glyph); contentstream.endtext(); contentstream.close(); document.save(\"output.pdf\"); document.close(); exception thrown: exception in thread \"main\" java.lang.illegalargumentexception: u+2714 ('a20') is not available in this font's encoding: winansiencoding     at org.apache.pdfbox.pdmodel.font.pdtype1font.encode(pdtype1font.java:345)     at org.apache.pdfbox.pdmodel.font.pdfont.encode(pdfont.java:286)     :",
        "label": 11
    },
    {
        "text": "pdsimplefont determineencoding will never parse embedded cmaps the enconding of a pdsimplefont is determined in determineencoding. it contains a series of ifs. most notably at the end there is a: if (encoding instanceof cosdictionary) { ... } else if (encoding instanceof cosstream) { ... } this is wrong because cosstream is a subclass of cosdictionary, so the program will never get into the cosstream-specific block, which is responsible for the parsing of embedded cmaps. the solution would be to reverse the order of those ifs.",
        "label": 1
    },
    {
        "text": "font not found  couriernew pdf uses non-embedded font \"couriernew\". os contains font: /usr/share/fonts/truetype/msttcorefonts/courier_new.ttf: courier new:style=regular,normal,oby\u00e8ejn\u00e9,standard,????????,normaali,norm\u00e1l,normale,standaard,normal fontmanager is not able to find it and warns: warn  [org.apache.fontbox.util.fontmanager] (http-0.0.0.0-80-6) font not found: couriernew it seems that the problem is in that space in font name \"couriernew\" vs. \"courier new\"",
        "label": 1
    },
    {
        "text": " imagemask true does not work  patch included  i have the following pdf... 10 0 obj << /type /page /mediabox [ 0 0 612.0 792.0 ] /parent 3 0 r /resources << /xobject << /obj4 4 0 r /obj5 5 0 r /obj6 6 0 r /obj7 7 0 r >> /procset [ /pdf /text /imageb /imagec /imagei ] >> /contents [ 8 0 r 9 0 r ] >> endobj which then draws 4 images. the first one is a \"base\" and then rest are image masks 9 0 obj << /filter /flatedecode /length 121 >> stream q 612.00 0 0 792.00 0.00 0.00 cm /obj4 do q q 0.129 g 524.16 0 0 556.80 48.00 127.68 cm /obj5 do q q 0.302 g 220.80 0 0 398.40 48.00 286.08 cm /obj6 do q q 0.204 g 524.16 0 0 469.44 48.00 185.28 cm /obj7 do q endstream endobj 4 0 obj << /type /xobject /subtype /image /width 1275 /height 1650 /bitspercomponent 8 /colorspace /devicegray /filter [ /flatedecode /dctdecode ] /length 50485 >> stream endstream endobj 5 0 obj << /type /xobject /subtype /image /width 2184 /height 2320 /bitspercomponent 1 /imagemask true /filter /ccittfaxdecode /decodeparms << /k -1 /columns 2184 >> /length 15580 >> stream etc ... the current code simply treats the imagemask as an image. since this is just a 1 bit image it has no alpha channel it overwrites the existing image and we simply get the last image drawn. in org.apache.pdfbox.util.operator.pagedrawer.invoke.java method public void process(pdfoperator operator, list<cosbase> arguments) throws ioexception after if (awtimage == null) { log.warn(\"getrgbimage returned null\"); return;//todo pkoch } if you add the following code it fixes the problem. i can not provide the sample doc due to privacy reasons. /** spec 8.9.6.2 if imagemask is true then the image is one bit. black means draw the current colour and white means use the colour on the current image (ie mask). convert the map to an image with an alpha channel so we can lay it on top */ if(image.getimagemask()) { color currentcolour = drawer.getgraphicsstate().getstrokingcolor().getjavacolor(); final int oncolour = 0xff000000 | currentcolour.getrgb(); bufferedimage bia = new bufferedimage(awtimage.getwidth(),awtimage.getheight(),bufferedimage.type_int_argb); for(int y=0;y<awtimage.getheight();y++) unknown macro: { for(int x=0;x<awtimage.getwidth();x++) { bia.setrgb(x, y, (awtimage.getrgb(x, y) & 0x00ffffff) == 0xffffff ? 0x00ffffff : oncolour); } } awtimage = bia; }",
        "label": 1
    },
    {
        "text": "ioexception  number '\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa' is getting too long  stop reading at offset the following stacktrace is shown with extracttext and pdfreader when opening a file previously parsed by 1.8.10. unfortunately the file can not be shared. java.lang.runtimeexception: java.io.ioexception: number '\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa' is getting too long, stop reading at offset 1199435     org.apache.pdfbox.debugger.pdfdebugger.openmenuitemactionperformed(pdfdebugger.java:593)     org.apache.pdfbox.debugger.pdfdebugger.access$400(pdfdebugger.java:113)     org.apache.pdfbox.debugger.pdfdebugger$4.actionperformed(pdfdebugger.java:312)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source) caused by: java.io.ioexception: number '\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa' is getting too long, stop reading at offset 1199435     org.apache.pdfbox.pdfparser.baseparser.readstringnumber(baseparser.java:1379)     org.apache.pdfbox.pdfparser.baseparser.readlong(baseparser.java:1341)     org.apache.pdfbox.pdfparser.baseparser.readobjectnumber(baseparser.java:1278)     org.apache.pdfbox.pdfparser.cosparser.parsefileobject(cosparser.java:739)     org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:721)     org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:652)     org.apache.pdfbox.pdfparser.cosparser.parsedictobjects(cosparser.java:612)     org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:215)     org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:249)     org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:840)     org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:780)     org.apache.pdfbox.debugger.pdfdebugger.parsedocument(pdfdebugger.java:1243)     org.apache.pdfbox.debugger.pdfdebugger.readpdffile(pdfdebugger.java:1165)     org.apache.pdfbox.debugger.pdfdebugger.openmenuitemactionperformed(pdfdebugger.java:587)     org.apache.pdfbox.debugger.pdfdebugger.access$400(pdfdebugger.java:113)     org.apache.pdfbox.debugger.pdfdebugger$4.actionperformed(pdfdebugger.java:312)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)",
        "label": 1
    },
    {
        "text": "pdftextstripper adds spaces after a detached words hello dear developers, i noticed that pdftextstripper sometimes adds spaces after a completely detached words... for example - if you make text extraction for attached file you will se that pdftextstripper adds one space after words: \"qty \" and \"unit price \" but not adds after \"description\" and \"line total\". i think this is a bug, because after words \"qty \" and \"unit price \" should not be present the whitespace. can you please fix it? (see attach) thank you very much, vitalie",
        "label": 1
    },
    {
        "text": "incorrect enumeration of conformances for pdfaidentificationschema pdfaidentificationschema.setconformance(string) make next check for input data: if (value.equals(\"a\") || value.equals(\"b\")) { texttype conf = createtexttype(conformance, value); addproperty(conf); } else { throw new .... } but for pdf/a-2 and pdf/a-3 exist 3 conformances: a, b, u. proof link for pdf/a-2",
        "label": 8
    },
    {
        "text": "text with vertical font not extracted correctly the attached file has a vertical font, although the text is horizontal. extraction with 1.8: noti ce of publi c heari ng the sout h caroli na depart ment of i nsurance will hol d a publi c heari ng i n accordance wit h t he require ments of secti on 38-3- 110? 5? thursday, april 29, 2010 at the conf erence and busi ness cent er at t he grand strand ca mpus of t he horry- georgetown techni cal coll ege, 950 crabtree lane, myrtl e beach, s. c., 29577 fro m 5: 30 p. m.-7: 00 p. m. the purpose of t hi s heari ng i s t o provi de an opportunity t o di scuss and off er i nput concerni ng t he st atus of t he coastal property i nsurance market. the conf erence cent er i s l ocat ed one mil e sout h of t he myrtl e beach i nt ernati onal airport bet ween hi ghway 17 busi ness and hi ghway 17 bypass. the t el ephone nu mber f or t he conf erence and busi ness cent er i s 843-477-2042. extraction with 2.0: n o t i c e o f p u b l i c h e a r i n g t h e s o u t h c a r o l i n a d e p a r t m e n t o f i n s u r a n c e w i l l h o l d a p u b l i c h e a r i n g i n a c c o r d a n c e w i t h t h e r e q u i r e m e n t s o f s e c t i o n 3 8 - 3 - 1 1 0 \ufe355 \ufe36 t h u r s d a y , a p r i l 2 9 , 2 0 1 0 a t t h e c o n f e r e n c e a n d b u s i n e s s c e n t e r a t t h e g r a n d s t r a n d c a m p u s o f t h e h o r r y - g e o r g e t o w n t e c h n i c a l c o l l e g e , 9 5 0 c r a b t r e e l a n e , m y r t l e b e a c h , s . c . , 2 9 5 7 7 f r o m 5 : 3 0 p . m . - 7 : 0 0 p . m . t h e p u r p o s e o f t h i s h e a r i n g i s t o p r o v i d e a n o p p o r t u n i t y t o d i s c u s s a n d o f f e r i n p u t c o n c e r n i n g t h e s t a t u s o f t h e c o a s t a l p r o p e r t y i n s u r a n c e m a r k e t . t h e c o n f e r e n c e c e n t e r i s l o c a t e d o n e m i l e s o u t h o f t h e m y r t l e b e a c h i n t e r n a t i o n a l a i r p o r t b e t w e e n h i g h w a y 1 7 b u s i n e s s a n d h i g h w a y 1 7 b y p a s s . t h e t e l e p h o n e n u m b e r f o r t h e c o n f e r e n c e a n d b u s i n e s s c e n t e r i s 8 4 3 - 4 7 7 - 2 0 4 2 . a brute force change that uses the correct width, and that works only with this file brings this: notice of public hearing the south carolina department of insurance will hold a public hearing in accordance with the requirements of section 38-3- 110 \ufe355 \ufe36 thursday, april 29, 2010 at the conference and business center at the grand strand campus of the horry-georgetown technical college, 950 crabtree lane, myrtle beach, s.c., 29577 from 5:30 p.m.-7:00 p.m. the purpose of this hearing is to provide an opportunity to discuss and offer input concerning the status of the coastal property insurance market. the conference center is located one mile south of the myrtle beach international airport between highway 17 business and highway 17 bypass. the telephone number for the conference and business center is 843-477-2042. the problem is that the pdftextstreamengine doesn't work well with vertical fonts. the red lines in the attached image show that the size is only half of whats needed. it may be related to pdcidfont.getdefaultpositionvector() but changing that isn't enough.",
        "label": 1
    },
    {
        "text": "numberformatexception maybe from pdfbox-2423 pdf from pdfbox-1359 java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage 10946_2004_article_340818.pdf java.lang.numberformatexception at java.math.bigdecimal.<init>(bigdecimal.java:494) at java.math.bigdecimal.<init>(bigdecimal.java:383) at java.math.bigdecimal.<init>(bigdecimal.java:806) at org.apache.pdfbox.cos.cosfloat.setvalue(cosfloat.java:73) at org.apache.pdfbox.cos.cosfloat.<init>(cosfloat.java:41) at org.apache.pdfbox.pdmodel.common.pdrectangle.setupperrightx(pdrectangle.java:237)",
        "label": 6
    },
    {
        "text": "ioexception  invalid dictionary  found  'r' but expected  ' ' at offset  on a valid pdf on the attached file, which loads fine with adobe reader, the pddocument.load() methpod throws the following error: java.io.ioexception: unknown dir object c='>' cint=62 peek='>' peekint=62 at offset 1196 at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:982) at org.apache.pdfbox.pdfparser.baseparser.parsecosdictionaryvalue(baseparser.java:153) at org.apache.pdfbox.pdfparser.baseparser.parsecosdictionarynamevaluepair(baseparser.java:277) at org.apache.pdfbox.pdfparser.baseparser.parsecosdictionary(baseparser.java:210) at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:885) at org.apache.pdfbox.pdfparser.cosparser.parsefileobject(cosparser.java:757) at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:726) at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:657) at org.apache.pdfbox.pdfparser.cosparser.parsetrailervaluesdynamically(cosparser.java:2092) at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:203) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:252) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:957) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:913) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:861) at temp.pdftemp.app.main(app.java:19)",
        "label": 1
    },
    {
        "text": "cosnumber throws ioexception cosnumber.get() throws ioexception 'value is not an integer'. the method parameter was '-2e-006'. is my pdf file wrong? i cannot upload my pdf file due to copyright. sorry. java.io.ioexception: value is not an integer: -2e-006 at org.apache.pdfbox.cos.cosnumber.get(cosnumber.java:96) at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:1084) at org.apache.pdfbox.pdfparser.baseparser.parsecosarray(baseparser.java:802) at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:1011) at org.apache.pdfbox.pdfparser.baseparser.parsecosdictionaryvalue(baseparser.java:179) at org.apache.pdfbox.pdfparser.baseparser.parsecosdictionary(baseparser.java:292) at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:1000) at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:543) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:184) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1069) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1036) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1007) at pdfboxtest.main(pdfboxtest.java:36)",
        "label": 1
    },
    {
        "text": "xmpmetadata getschemasbynamespaceuri  implementation inefficient the implementation of getschemasbynamespaceuri is inefficient, if no namespace mapping is present. you may consider to call \"list<xmpschema> l = getschemas();\" just before the iterator is retrieved.",
        "label": 1
    },
    {
        "text": "font validation problem simple pdf/a fails on \"invalid font definition\", passes on commercial validators.",
        "label": 3
    },
    {
        "text": "parser  java io ioexception  error  expected an integer type  actual 'r' exception in thread \"main\" java.io.ioexception: error: expected an integer type, actual='r' at org.apache.pdfbox.pdfparser.baseparser.readint(baseparser.java:1384) at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:522) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:184) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1069) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1036) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1007) ===============for another pdf========================== exception in thread \"main\" java.io.ioexception: error: expected an integer type, actual='i?\u00ac \b\u0002!' at org.apache.pdfbox.pdfparser.baseparser.readint(baseparser.java:1384) at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:517) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:184) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1069) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1036) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1007)",
        "label": 1
    },
    {
        "text": "pdfimagewriter extracts black images from arabic pdfs when i tried to extract a jpeg image from arabic pdf, i've got a corrupted file with black area which overlays all arabic text on each page. in console i've got only this debug message and no other exceptions and so on: debug (pdpixelmap.java:241) - colormodel: indexcolormodel: #pixelbits = 1 numcomponents = 4 color space = java.awt.color.icc_colorspace@2eeb3c84 transparency = 2 transindex = 1 has alpha = true isalphapre = false this is not only one pdf file. i have about 400-500 files which produces the same thing. code: pdfimagewriter writer = new pdfimagewriter(); pddocument document = pddocument.load(sourcefile); writer.writeimage(document, \"jpg\", \"\", 1, 1, filename);",
        "label": 1
    },
    {
        "text": " patch  alternative patch to speed up testimageioutils this is an alternative to the pdfbox-1850 patch to speed up testimageioutils. rather than using multi-threading, this patch reduces the scope of the testimageioutils test. the purpose of testimageioutils is to check thatimageioutils can write jpeg, bmp and wbmp files without throwing an exception. looking at the mailing list archive http://mail-archives.apache.org/mod_mbox/pdfbox-commits/201112.mbox/%3c20111218154622.3ee76238899c@eris.apache.org%3e we can see that the original issue was that the jpeg compression configuration broke bmp writing. it is therefore sufficient to convert only a single pdf file to each of the output formats in order to test this. the test is not quite so simple though, as testimageioutils is also used for processing embedded images in pdf files and so needs to be tested on appropriate pdf files, this is not something that the current test suite was actually doing. i've therefore added some test pdf files containing pngs, jpegs, and pixmaps. these are from libharu https://github.com/libharu/libharu and are under the zlib/libpng license. because testimageioutils now only needs to be run on three files it takes around 2sec on my machine rather than over 30sec.",
        "label": 1
    },
    {
        "text": "wrong implemented stream reader the baseparser#readuntilendstream(outputstream) method is parsing streams the wrong way. [1] this method will start reading a stream till the keyword \"endstream\" is reached and don't care about the length value inside the dictionary. this implementation brokes nearly every pdf document with a pdf embedded inside a stream [2]. encoder that is used for compressing streams can be block-based (like flatedecode which is mostly used). if a block of data that should be compressed don't spare space after compressing, the encode do not compress this block and mark it as uncompressed. so a stream can containing compressed and uncompressed parts. so if someone try to embed pdf documents with streams inside a stream, the encoder will left most parts of the document uncompressed. such parts can contain plan text like \"endstream\" or other critical keywords that can cause the parser to stop. so we need to read the whole stream length that was wrote inside the dictionary and don't look at \"endstream\" keywords until the end is reached. the current stream parser cause a zipexception with the message \"unexpected end of zlib input stream\". a sample pdf and a patch is coming soon. [1] pdf 32000-1:2008 -> 7.3.8.2 stream extent [2] pdf 32000-1:2008 -> 7.11.4 embedded file streams",
        "label": 12
    },
    {
        "text": "download urls on the website don't work download urls on the website (https://pdfbox.apache.org/download.cgi) don't work even if i choose a mirror with the drop down, it creates urls like: https://pdfbox.apache.org/%5bpreferred%5d/pdfbox/1.8.10/pdfbox-app-1.8.10.jar using browser: chrome version 46.0.2490.71 (64-bit)",
        "label": 8
    },
    {
        "text": "xmpschema java and xmpschema java possible null pointer dereference of bagelement findbugs scan of the code reports code paths which may result in a null pointer reference. c:/workspace/ibi_apps/src/org/apache/jempbox/xmp/xmpschema.java:570 possible null pointer dereference of bagelement c:/workspace/ibi_apps/src/org/apache/jempbox/xmp/xmpschema.java:392 possible null pointer dereference of bagelement the solution is to test for null before attempting to use the objects. a patch file is included peter",
        "label": 1
    },
    {
        "text": "unicode characters displayed with wrong glyps because of interpretation as bit strings the file characters_arial.pdf shows that some unicode values are displayed with wrong glyphs, for example the u2020 which is displayed as two spaces. another issue is that invalid unicode characters are not handled correctly. they should display the invalid character box or something like that. this is demonstrated with a modified version of the file. the method processencodedtext is called when the texts of the document are printed int codelength = 1; for( int i=0; i<string.length; i+=codelength) { // decode the value to a unicode character codelength = 1; string c = font.encode( string, i, codelength ); if( c == null && i+1<string.length) { //maybe a multibyte encoding codelength++; c = font.encode( string, i, codelength ); } this code tries to determine if the values in variable 'string' are 8 or 16 bit values or even a mixture of both types of values <lol>. everything works fine when variable 'string' contains 8 bit values, in most cases. if there is an invalid 8 bit value this character may be dropped together with the following character. the real problem occurs when the data in variable 'string' is encoded as 16 bit values. for many characters this works fine as the first byte is usually not a valid character: for example u0041 is first tried as char 00 with codelength=1 an as there is no entry for unicode 0 in the font it will be re-tried with codelength=2 and then interpreted as u0041. but what happens if the first byte of the 16 bit code is also a valid character code? to check this i created the file characters_arial_changed.pdf where i simply changed the 16-bit string <0041> which displays 'a' to <4141> which is an invalid character in this font. i also changed a 8-bit string nearby from (0041) to the value <4141>. note that there are now two strings with the same value <4141> which have to be displayed in a different way. acrobat reader then shows the invalid character box for the 16 bit string and 'aa' for the 8 bit string above. pdfbox shows 'aa' for both strings. problems are occuring with valid unicode character codes too: unicode u2020 will be shown as two nice spaces in pdfbox where adobe reader shows the correct character. to guess that it is a 16 bit character when the first byte is an invalid character in the current font is the wrong way to handle the string values. if the variable 'string' contains 8 or 16 bit values can't be detected by analysing the values as the example shows. processencodedtext has to handle the data in variable 'string' as 16 bit values when the font which is used has an (unicode-)encoding which uses more than 256 characters, in all other cases it should be interpreted as 8 bit values!!! with an unicode font <4343> or (cc) should show the invalid character box, with an 8 bit font both values should show the text 'cc'. i have included this example in the file too. the adobe documentation says about 8 or 16 bit values in strings for example: \"when the current font is a type 0 font whose encoding entry is identity-h or identity-v, the string to be shown shall contain pairs of bytes representing cids, high-order byte first. when the current font is a cidfont, the string to be shown shall contain pairs of bytes representing cids, high-order byte first. when the current font is a type 2 cidfont in which the cidtogidmap entry is identity and if the truetype font is embedded in the pdf file, the 2-byte cid values shall be identical glyph indices for the glyph descriptions in the truetype font program.\" i guess depending on this information it has to be determined if the string is 8 or 16 bits! in my example pdf files the type 0 font has always the indentity-h set as encoding and so the strings have to be en-/decoded as pure 16 bit strings.",
        "label": 1
    },
    {
        "text": "refactor io interfaces   patch the new (more) conforming pdf parsers (pdfbox-1000, pdfbox-1199) have other access requirements on the input data than the current parser. depending on the component (lexer, parser) a sequential read or random read is needed. in order to support multiple kinds of sources the access should be defined via interfaces which allows different implementations (files, streams, ...). since pdfbox already has a randomaccess interface the most compatible solution is to split it up into an interface hierarchy: randomaccess extends randomaccessread extends sequentialread. attached are the new classes randomaccessread and sequentialread as well as the patch for randomaccess.",
        "label": 12
    },
    {
        "text": "error  destination contains invalid page reference 'null'  is not detected by preflight the attached file from the bavaria test suite should bring the mentioned error, but doesn't. 139 0 obj <</parent 132 0 r/a 138 0 r/next 141 0 r/prev 137 0 r/title(3. possibilities to introduce hydrophilic spacer groups into amphiphilic polymers)>> endobj 138 0 obj <</d[null/fith 430]/s/goto>> endobj",
        "label": 11
    },
    {
        "text": "small regression in text extraction with pdfbox vs  on at least one file in govdocs1, less text is being extracted with pdfbox 1.8.7 than was extracted with 1.8.6. when running the app.jar with extracttext, 1.8.7 is not extracting: designated counties no designation individual assistance all counties are eligible its mapping & analysis centerwashington, dc 05/09/08 -- 09:36 am edt source: disaster federal registry notice05/08/2008 location map mapid 196d109cd27 for hazard mitigation from govdocs1's 894770.pdf.",
        "label": 11
    },
    {
        "text": "ocr generated pdf a has problems with preflight validation /home/fausser/boyd.pdf is not valid, error(s): 2.1.2:invalid graphis object, the info entry of a outputintent dictionary is missing 3.3.1: glyph error, cid 95 is missing from the composite font format \"hiddenhorzocr\" 7.2:error on metadata, modificationdate present in the document catalog dictionary doesn't match with xmp information passes as a valid pdf/a with commercial validators adobe acrobat 10.x and callas",
        "label": 3
    },
    {
        "text": "retaining bookmarks when merging pdf documents [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1374993 originally submitted by nobody on 2005-12-06 19:09. when two pdf documents containing bookmarks are apended,the bookmarks of both the pdf documents must also be appended.",
        "label": 0
    },
    {
        "text": "add ability to read encrypted file   write unencrypted flie currently, the coswriter determines whether or not to use encryption, which makes sense, however there's no way to tell it you don't want to use encryption. so if you open an encrypted document, there's no way to write out an unencrypted document (you can write out a document without a password, but it'll still be encrypted). this means that encrypted documents can't be merged even if the password is known. i have a patch which will allow writing out unencrypted documents. by default it'll work as it did before, but there's a new function which can be called to mark the document to be written out with no protection. i'll upload the patch soon.",
        "label": 7
    },
    {
        "text": "tsa time signature when we was signing document, we was using time from our time. for more security we can use time stamp server. \"trusted timestamping is the process of securely keeping track of the creation and modification time of a document. security here means that no one \u2014 not even the owner of the document \u2014 should be able to change it once it has been recorded provided that the timestamper's integrity is never compromised.\"(wiki)",
        "label": 6
    },
    {
        "text": "cosstring cannot be cast to cosdictionary error there is a pdf in which parsing error occurs...",
        "label": 11
    },
    {
        "text": "securityhandler should not try to decrypt tu entries the securityhandler should not try to decrypt tu entries, just like it does not decrypt contents of signatures. patch attached. unfortunately i cannot share the file which shows the problem with the current behavior. the issue is that it tries to decrypt something not encrypted in the first place.",
        "label": 11
    },
    {
        "text": "invalid font definition   not your usual pdf   passes adobe and pdfapilot validation as pdf a testxpdfa.pdf is not valid, error(s): 3.1.6: invalid font definition, width of the character \"2\" in the font program \"ejcjio+frankruehlclm-medium\"is inconsistent with the width in the pdf dictionary.",
        "label": 3
    },
    {
        "text": "add an example on how to extract embedded files there is no example on how to extract embedded files.",
        "label": 1
    },
    {
        "text": "add dispose  when done with graphics please add dispose() in pdfbox\\filter\\jbig2filter.java pdfbox\\pdmodel\\graphics\\xobject\\pdxobjectimage.java as recommended by javadoc. patches are attached. i've also added @override at some places. the problem is that not having it brings an additional yellow bar in netbeans at the right. which prevents seeing the more important bars.",
        "label": 1
    },
    {
        "text": " premature eof  image will be incomplete  i am trying to extract all the embeded images from pdf file. but some times the images extracted are throwing warnings below. [main] warn  o.a.p.p.g.image.sampledimagereader - premature eof, image will be incomplete the extracted images are half-complete(half- greyed out) i would like to know if any solution available for this. below is my code snippet any help is greatly appreciated.  public static void testpdfboxextractimages() throws exception {      pddocument document = pddocument.load(new file(filename));      pdpagetree list = document.getpages();      for (pdpage page : list) {          pdresources pdresources = page.getresources();          system.out.println(page.getrotation());          for (cosname c : pdresources.getxobjectnames()) {              pdxobject o = pdresources.getxobject(c);              if (o instanceof org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject) {                  file file = new file(\"c:/temp/\" + system.nanotime() + \".png\");                  imageio.write(((org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject)o).getimage(), \"png\", file);              }          }      }  }",
        "label": 11
    },
    {
        "text": "ioexception  error  expected a long type at offset  instead got 'xref' i get this with the attached file when using the non-sequential parser only: exception in thread \"main\" java.io.ioexception: error: expected a long type at offset 1218571, instead got 'xref'         at org.apache.pdfbox.pdfparser.baseparser.readlong(baseparser.java:1689)         at org.apache.pdfbox.pdfparser.baseparser.readobjectnumber(baseparser.java:1617)         at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parsexrefobjstream(nonsequentialpdfparser.java:746)         at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parsexref(nonsequentialpdfparser.java:697)         at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.initialparse(nonsequentialpdfparser.java:480)         at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parse(nonsequentialpdfparser.java:1013)         at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:951)",
        "label": 1
    },
    {
        "text": "java io ioexception is thrown from both nonsequentialpdfparser and pdfparser on parsing of complex pdf document both nonsequentialpdfparser and pdfparser throw java.io.ioexception (different causes). nonsequentialpdfparser: caused by: java.io.ioexception at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:109) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:379) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:291) at org.apache.pdfbox.cos.cosstream.getunfilteredstream(cosstream.java:225) at org.apache.pdfbox.pdfparser.pdfobjectstreamparser.<init>(pdfobjectstreamparser.java:64) at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parseobjectdynamically(nonsequentialpdfparser.java:1493) pdfparser: caused by: java.io.ioexception: error: expected a long type at offset 465, instead gotat org.apache.pdfbox.pdfparser.baseparser.readlong(baseparser.java:1695) at org.apache.pdfbox.pdfparser.baseparser.readobjectnumber(baseparser.java:1623) at org.apache.pdfbox.pdfparser.pdfobjectstreamparser.parse(pdfobjectstreamparser.java:99) at org.apache.pdfbox.cos.cosdocument.dereferenceobjectstreams(cosdocument.java:683) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:255) please, see in attachments full stacktrace for both cases and failing document for reference.",
        "label": 1
    },
    {
        "text": "printing a pdf with an image inside show black  i have a pdf with a image inside. when i print the pdf the image show corrupted similar a black area. in the java console: 25-oct-2011 13:12:39 org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap getrgbimage grave: java.io.streamcorruptedexception: error: data is null java.io.streamcorruptedexception: error: data is null at org.apache.pdfbox.filter.lzwfilter.decode(lzwfilter.java:82) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:301) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:229)",
        "label": 11
    },
    {
        "text": "poor text extraction performance in pdftextstripper java the worst case performance of the suppressduplicateoverlappingtext logic in processtextposition is o(n^2). the patch is to use a treemap to achieve o(n log n) performance. the example pdf took over 2 hours to extract the text before this patch and less than 10 minute after. btw: the extracted text is also quite different compared to adobe reader. not sure which is correct but for this document it doesn't matter.",
        "label": 1
    },
    {
        "text": "extremely long hang during getfields  on a few pdf files when i run oap.examples.fdf.printfields from trunk, the code seems to hang during acroform.getfields(). this is a heavy load hang.",
        "label": 1
    },
    {
        "text": "html output wrongly specifies utf in header when running the command line extracttext with the -html flag, the output file always has the following meta tag specifying utf-16 regardless of the actual output encoding: <meta http-equiv=\"content-type\" content=\"text/html; charset=\"utf-16\"> this causes editors that respect the meta tag (emacs, etc.) to garble the file content.",
        "label": 1
    },
    {
        "text": "setsuppressduplicateoverlappingtext sometimes removes characters that it shouldn't the duplicate detection (in pdftextstripper.java) checks whether the same character was placed \"nearish\" to where we are about to place another and de-dups it if so; this is to catch documents that rewind and overwrite in order to bold word(s). but in some cases i see it removing valid characters (that were not dups).",
        "label": 1
    },
    {
        "text": "file with embedded subset renders no text (tested with the version of today, revision 1512392) the attached file has two embedded font subsets; when rendering no text appears at all. see also pdfbox-1391.",
        "label": 1
    },
    {
        "text": "check rules for colorspace validation some pdf/a validated by adobe products are rejected by preflight due to color space rules. todo : check requirement on the pdf/a specification fix problems",
        "label": 3
    },
    {
        "text": "pdfbox performance issue  pdpage tweaks during parsing / text extraction the pdpage class' getmediabox() and getparent() methods are accessed many times. they are currently slow because the code recalculates the results each time. these should instead be persisted in instance fields so that they are only calculated once unless the underlying object state has changed. i will attach a version of the file that includes the fix.",
        "label": 7
    },
    {
        "text": "get errormessage  flatefilter  stop reading corrupt stream due to a dataformatexception  by extracting text from pdf file we generate pdf-files from xml by transformation to fo and converting it with antennahouse to pdf. we wants to check correct hyphenation in pdf, therefore we extract the text from the pdf. sometimes we get errormessage \"flatefilter: stop reading corrupt stream due to a dataformatexception\" by extracting the text.",
        "label": 11
    },
    {
        "text": "image extraction fails with attached pdf extractimages failed with the following exception: java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.graphics.xobject.pdccitt$tiffwrapper.buildheader(pdccitt.java:651) at org.apache.pdfbox.pdmodel.graphics.xobject.pdccitt$tiffwrapper.<init>(pdccitt.java:497) at org.apache.pdfbox.pdmodel.graphics.xobject.pdccitt$tiffwrapper.<init>(pdccitt.java:488) at org.apache.pdfbox.pdmodel.graphics.xobject.pdccitt.write2outputstream(pdccitt.java:237) at org.apache.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.write2file(pdxobjectimage.java:265) at org.apache.pdfbox.extractimages.processresources(extractimages.java:255) at org.apache.pdfbox.extractimages.extractimages(extractimages.java:180) at org.apache.pdfbox.extractimages.main(extractimages.java:80) at org.apache.pdfbox.pdfbox.main(pdfbox.java:62)",
        "label": 11
    },
    {
        "text": "page to image rendering in pdfbox  poor quality compared to i have a process that needs to convert pages of pdf files to images to be able to detect barcodes. since i've upgrade to pdfbox 2.0 my barcodes are not correctly detected anymore. i noticed the cause was the result of the page to image rendering implemented in pdfbox 2.0. the quality of the image is really poor compared to pdfbox 1.8. see the attached image (comparison.png): on the left you have the image generated with pdfbox 2.0.13 on the right you have the image generated with pdfbox 1.8.16 we can clearly see the difference. both images were generated using the same resolution (200 dpi here): for 2.0.13: bufferedimage image = pdfrenderer.renderimagewithdpi(0, 200, imagetype.binary); for 1.8.16: pdpage page = (pdpage) pdfdocument.getdocumentcatalog().getallpages().get(0); bufferedimage image = page.converttoimage(bufferedimage.type_byte_binary, 200); buffered images were both written to files using: imageio.write(image, \"png\", file);     i've attached the pdf file (barcode-128.pdf) and the generated images (barcode-image-2.0.13.png and barcode-image.1.8.16.png)        ",
        "label": 11
    },
    {
        "text": "arrayindexoutofboundsexception in cmapsubtable processsubtype2 i'm getting this exception when trying to render the first page of a pdf document: exception in thread \"javafx application thread\" java.lang.arrayindexoutofboundsexception: -31593  at org.apache.fontbox.ttf.cmapsubtable.processsubtype2(cmapsubtable.java:524)  at org.apache.fontbox.ttf.cmapsubtable.initsubtable(cmapsubtable.java:96)  at org.apache.fontbox.ttf.cmaptable.read(cmaptable.java:84)  at org.apache.fontbox.ttf.truetypefont.readtable(truetypefont.java:349)  at org.apache.fontbox.ttf.ttfparser.parsetables(ttfparser.java:173)  at org.apache.fontbox.ttf.ttfparser.parse(ttfparser.java:150)  at org.apache.fontbox.ttf.otfparser.parse(otfparser.java:79)  at org.apache.fontbox.ttf.otfparser.parse(otfparser.java:27)  at org.apache.fontbox.ttf.ttfparser.parse(ttfparser.java:106)  at org.apache.fontbox.ttf.otfparser.parse(otfparser.java:73)  at org.apache.pdfbox.pdmodel.font.pdcidfonttype2.<init>(pdcidfonttype2.java:109)  at org.apache.pdfbox.pdmodel.font.pdcidfonttype2.<init>(pdcidfonttype2.java:62)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createdescendantfont(pdfontfactory.java:125)  at org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:192)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:83)  at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:146)  at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60)  at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:848)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:503)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:477)  at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150)  at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:246)  at org.apache.pdfbox.rendering.pdfrenderer.renderpagetographics(pdfrenderer.java:292)  at org.apache.pdfbox.rendering.pdfrenderer.renderpagetographics(pdfrenderer.java:266)  at [my code] you can get the pdf file from https://www.alliedworldinsurance.com/files/files/motor%20insurance%20claim%20form.pdf",
        "label": 11
    },
    {
        "text": "flatefilter  lzwfilter with predictor causes double memory usage the problem occurred in our production during processing file with size 400kb. the file was generated by the scanner with resolution 5960 x 8430 pixels with 8 bit per pixel (unfortunately we have no control over files which should be processed). our analysis showed that problem is in flatefilter.decode where uncompressed data are written into bytearrayoutputstream. since the final size of the file is unknown to outputstream its size is growing by internal call arrays.copyof. by the end of processing file, this leads to usage of memory at two times file size. what we have tried and helped in our case was slightly modification of flatefilter and lzwfilter decode method implementation. here is the code snippet of original method body: @override public decoderesult decode(inputstream encoded, outputstream decoded, cosdictionary parameters, int index) throws ioexception { int predictor = -1; final cosdictionary decodeparams = getdecodeparams(parameters, index); if (decodeparams != null) { predictor = decodeparams.getint(cosname.predictor); } try { if (predictor > 1) { int colors = math.min(decodeparams.getint(cosname.colors, 1), 32); int bitsperpixel = decodeparams.getint(cosname.bits_per_component, 8); int columns = decodeparams.getint(cosname.columns, 1); bytearrayoutputstream baos = new bytearrayoutputstream(); decompress(encoded, baos); bytearrayinputstream bais = new bytearrayinputstream(baos.tobytearray()); predictor.decodepredictor(predictor, colors, bitsperpixel, columns, bais, decoded); decoded.flush(); baos.reset(); bais.reset(); } else { decompress(encoded, decoded); } }  catch (dataformatexception e) { // if the stream is corrupt a dataformatexception may occur log.error(\"flatefilter: stop reading corrupt stream due to a dataformatexception\"); // re-throw the exception throw new ioexception(e); } return new decoderesult(parameters); } and here is our implementation: @override     public decoderesult decode(inputstream encoded, outputstream decoded,                                          cosdictionary parameters, int index) throws ioexception     {         final cosdictionary decodeparams = getdecodeparams(parameters, index);         int predictor = decodeparams.getint(cosname.predictor);         try         {             if (predictor > 1)             {              file tempfile = null;                 fileoutputstream fos = null;                 fileinputstream fis = null;                 try {                  int colors = math.min(decodeparams.getint(cosname.colors, 1), 32);                  int bitsperpixel = decodeparams.getint(cosname.bits_per_component, 8);                  int columns = decodeparams.getint(cosname.columns, 1);                  tempfile = file.createtempfile(\"tmppdf\", null);                  fos = new fileoutputstream(tempfile);                  decompress(encoded, fos);                  fos.close();                  fis = new fileinputstream(tempfile);                  predictor.decodepredictor(predictor, colors, bitsperpixel, columns, fis, decoded);                  decoded.flush();                 } finally {                  ioutils.closequietly(fos);                  ioutils.closequietly(fis);                  try {                    // try to delete but don't care if it fails       tempfile.delete();      } catch(exception e) {       log.error(\"could not delete temp data file\", e);      }                 }             }             else             {                 decompress(encoded, decoded);             }         }          catch (dataformatexception e)         {             // if the stream is corrupt a dataformatexception may occur             log.error(\"flatefilter: stop reading corrupt stream due to a dataformatexception\");             // re-throw the exception             throw new ioexception(e);         }         return new decoderesult(parameters);     } the picture originalfilters.png shows memory usage during processing this file with unmodified filters and the picture modifiedfilters.png shows memory usage during processing same file with modified filters. for testing purposes, we have created two small applications with same main class and main method, but different libraries used (one, called testoriginalfilters uses filters implementation without any change and the second one called testmodifiedfilters uses filters with our modification). since original document contains personal data, we propose given file (test.pdf) with an almost same resolution for internal testing. the application waits for 10 seconds before starting file processing to ensure enough time for starting jvisualvm. the application is also prepared for multi-page documents. the application maintest class: package test; import java.awt.dimension; import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import java.util.arraylist; import java.util.list; import javax.swing.imageicon; import javax.swing.jlabel; import org.apache.pdfbox.io.memoryusagesetting; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.rendering.pdfrenderer; public class maintest {  // this is simple test for amount of memory consumption by pdfbox library  public static void main(string[] args) {   if (args.length != 1) {    throw new illegalargumentexception(\"file is needed to continue\");   }   string filename = args[0];   try {    system.out.println(\"start sleep for 10 second to start jvisualvm\");    thread.sleep(10000);    system.out.println(\"sleep is over\");   } catch (interruptedexception e) {    e.printstacktrace();   }   try {    file datafile = new file(filename);    pddocument document = pddocument.load(datafile, memoryusagesetting.setupmixed(64 * 1024));    int pages = document.getnumberofpages();    pdfrenderer renderer = new pdfrenderer(document);    list<bufferedimage> images = new arraylist<>();    for (int j = 0; j < pages; j++) {     system.out.println(\"procesing page with index: \" + j);     long startime = system.nanotime();     bufferedimage image = renderer.renderimage(j, computezoomfactor(document, j, 500));     system.out.println(\"page with index: \" + j + \" done in \" + ((system.nanotime() - startime)) / 1000000);     jlabel result = new jlabel(new imageicon(image));     result.setpreferredsize(new dimension(image.getwidth(), image.getheight()));     images.add(image);    }    system.out.println(\"processing finished\");   } catch (ioexception ioe) {    ioe.printstacktrace();   }  }  private static float computezoomfactor(pddocument document, int pageindex, float width) {   float docwidth = document.getpage(pageindex).getcropbox().getwidth();   return width > 0 ? (width / docwidth) : 1.0f;  } }",
        "label": 11
    },
    {
        "text": "found token kind name  text nd  but expected nd pdf from pdfbox-759 java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage mathematik_stochastik.pdf java.io.ioexception: found token[kind=name, text=nd] but expected nd at org.apache.fontbox.type1.type1parser.readdef(type1parser.java:698)",
        "label": 6
    },
    {
        "text": "the vertical layout table types 'vhea'  'vmtx'  'vorg' are not supported  ",
        "label": 1
    },
    {
        "text": "split pdf file to single page files  some files are inflated in size a pdf file is split into single pages for inclusion within another document (pdfbox.utils.splitter within our code but same phenomenon observed when splitting using command line pdfsplit tool). som of the pages are almost as large as the original file which causes performance problems for our customers. again, i have a sample pdf to attach.",
        "label": 1
    },
    {
        "text": "nullpointerexception with loaddescriptordictionary i downloaded a ttf from http://www.jtbarton.com/barcodes/code128.ttf and tried to use this with pdfbox 1.6.0 in my jsp. it returns below error java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loaddescriptordictionary(pdtruetypefont.java:339) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:164) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:140) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:127)",
        "label": 6
    },
    {
        "text": "classcastexception  org apache pdfbox cos cosstream cannot be cast to org apache pdfbox cos cosstring i got a classcastexception throught tika html extraction on pdfbox code: org.apache.tika.exception.tikaexception: unexpected runtimeexception from org.apache.tika.parser.pdf.pdfparser@60b1fa63  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:282)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280)  ... 16 more caused by: java.lang.classcastexception: org.apache.pdfbox.cos.cosstream cannot be cast to org.apache.pdfbox.cos.cosstring  at org.apache.pdfbox.cos.cosdictionary.getdate(cosdictionary.java:787)  at org.apache.pdfbox.pdmodel.pddocumentinformation.getcreationdate(pddocumentinformation.java:212)  at org.apache.tika.parser.pdf.pdfparser.extractmetadata(pdfparser.java:256)  at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:146)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280)",
        "label": 11
    },
    {
        "text": "jvm crashes when trying to process the attached pdf's # a fatal error has been detected by the java runtime environment: # exception_access_violation (0xc0000005) at pc=0x6d703bf9, pid=5384, tid=4788 # jre version: 6.0_18-b07 java vm: java hotspot(tm) server vm (16.0-b13 mixed mode windows-x86 ) problematic frame: c [fontmanager.dll+0x13bf9] # if you would like to submit a bug report, please visit: http://java.sun.com/webapps/bugreport/crash.jsp the crash happened outside the java virtual machine in native code. see problematic frame for where to report the bug. # --------------- t h r e a d --------------- current thread (0x6a057400): javathread \"ajp-127.0.0.1-8009-11\" daemon [_thread_in_native, id=4788, stack(0x6cf10000,0x6cf60000)] siginfo: exceptioncode=0xc0000005, reading address 0x00000010 registers: eax=0x00000000, ebx=0x00000000, ecx=0x0000000a, edx=0x69b1c6c8 esp=0x6cf5e89c, ebp=0x6cf5e8b4, esi=0x6aadfdd0, edi=0x6aadfdd0 eip=0x6d703bf9, eflags=0x00010246 top of stack: (sp=0x6cf5e89c) 0x6cf5e89c: 00000000 6aadfdd0 636d6170 6aadfdd0 0x6cf5e8ac: 6d703d33 685e4130 6cf5e924 6d6f3ced 0x6cf5e8bc: 6aadfdd0 00000062 00000000 6cf5e920 0x6cf5e8cc: 6aadfdd0 685e4130 00000001 00000000 0x6cf5e8dc: 00000007 00000000 00000000 00000000 0x6cf5e8ec: 00000000 6a8a3840 00000000 00000000 0x6cf5e8fc: 6a8a3c98 00000000 00000000 00000000 0x6cf5e90c: 6a8a3838 00000000 00000000 00000000 instructions: (pc=0x6d703bf9) 0x6d703be9: 75 51 57 68 70 61 6d 63 56 e8 6f fd ff ff 6a 00 0x6d703bf9: ff 70 10 ff 70 0c ff b6 88 00 00 00 ff b6 90 00 stack: [0x6cf10000,0x6cf60000], sp=0x6cf5e89c, free space=13a6cf5e3d8k native frames: (j=compiled java code, j=interpreted, vv=vm code, c=native code) c [fontmanager.dll+0x13bf9] c [fontmanager.dll+0x3ced] c [fontmanager.dll+0x3da3] java frames: (j=compiled java code, j=interpreted, vv=vm code) j sun.font.filefont.getglyphimage(ji)j+0 j sun.font.filefontstrike.getglyphmetrics(iz)ljava/awt/geom/point2d$float; j sun.font.filefontstrike.getglyphmetrics(i)ljava/awt/geom/point2d$float; j sun.font.standardglyphvector.initpositions()v j sun.font.glyphlist.setfromglyphvector(lsun/java2d/loops/fontinfo;ljava/awt/font/glyphvector;ff)v j sun.java2d.pipe.glyphlistpipe.drawglyphvector(lsun/java2d/sungraphics2d;ljava/awt/font/glyphvector;ff)v j sun.java2d.pipe.validatepipe.drawglyphvector(lsun/java2d/sungraphics2d;ljava/awt/font/glyphvector;ff)v+17 j sun.java2d.sungraphics2d.drawglyphvector(ljava/awt/font/glyphvector;ff)v j org.apache.pdfbox.pdmodel.font.pdsimplefont.writefont(ljava/awt/graphics2d;ljava/awt/geom/affinetransform;ffljava/awt/font/glyphvector;)v+63 j org.apache.pdfbox.pdmodel.font.pdsimplefont.drawstring(ljava/lang/string;[iljava/awt/graphics;fljava/awt/geom/affinetransform;ff)v+253 j org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(lorg/apache/pdfbox/util/textposition;)v+436 j org.apache.pdfbox.util.pdfstreamengine.processencodedtext([b)v j org.apache.pdfbox.util.operator.showtextglyph.process(lorg/apache/pdfbox/util/pdfoperator;ljava/util/list;)v j org.apache.pdfbox.util.pdfstreamengine.processsubstream(lorg/apache/pdfbox/cos/cosstream;)v j org.apache.pdfbox.util.pdfstreamengine.processsubstream(lorg/apache/pdfbox/pdmodel/pdpage;lorg/apache/pdfbox/pdmodel/pdresources;lorg/apache/pdfbox/cos/cosstream;)v+20 j org.apache.pdfbox.util.pdfstreamengine.processstream(lorg/apache/pdfbox/pdmodel/pdpage;lorg/apache/pdfbox/pdmodel/pdresources;lorg/apache/pdfbox/cos/cosstream;)v+43 j org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(ljava/awt/graphics;lorg/apache/pdfbox/pdmodel/pdpage;ljava/awt/dimension;)v+80 j org.apache.pdfbox.pdmodel.pdpage.converttoimage(ii)ljava/awt/image/bufferedimage;+200 j org.apache.pdfbox.pdmodel.pdpage.converttoimage()ljava/awt/image/bufferedimage;+6 j com.otgs.ecom.utils.pdfprocessing.getpageasimage(i)ljava/awt/image/bufferedimage;+29 j com.otgs.ecom.utils.thumbnailgenerator.getpreviewforpdf([b)[b+21 j com.omc.ecom.customer.db.iphone.iattachment.setthumbnail([b)v+59 j com.omc.ecom.customer.db.iphone.iattachment.setimage([bz)v+14 j com.omc.ecom.customer.db.iphone.iattachment.setcompressimage([b)v+3 j com.omc.ecom.service.impl.uploadattachservice.importuploadattachments(lcom/otgs/ecom/base/dbaccess/userinfo;iilcom/oreilly/servlet/multipartrequest;ljava/lang/string;)v+727 j com.otgs.ecom.web.expensereports.expenses.attachments.uploadattachcontroller.uploadimport(ljavax/servlet/http/httpservletrequest;lcom/otgs/ecom/base/dbaccess/userinfo;ii)v+75 j com.otgs.ecom.web.expensereports.expenses.attachments.uploadattachcontroller.handlerequest(ljavax/servlet/http/httpservletrequest;ljavax/servlet/http/httpservletresponse;)lorg/springframework/web/servlet/modelandview;+319 j org.springframework.web.servlet.mvc.simplecontrollerhandleradapter.handle(ljavax/servlet/http/httpservletrequest;ljavax/servlet/http/httpservletresponse;ljava/lang/object;)lorg/springframework/web/servlet/modelandview;+6 j org.springframework.web.servlet.dispatcherservlet.dodispatch(ljavax/servlet/http/httpservletrequest;ljavax/servlet/http/httpservletresponse;)v+279 j org.springframework.web.servlet.dispatcherservlet.doservice(ljavax/servlet/http/httpservletrequest;ljavax/servlet/http/httpservletresponse;)v+231 j org.springframework.web.servlet.frameworkservlet.processrequest(ljavax/servlet/http/httpservletrequest;ljavax/servlet/http/httpservletresponse;)v+111 j org.springframework.web.servlet.frameworkservlet.dopost(ljavax/servlet/http/httpservletrequest;ljavax/servlet/http/httpservletresponse;)v+3 j javax.servlet.http.httpservlet.service(ljavax/servlet/http/httpservletrequest;ljavax/servlet/http/httpservletresponse;)v+139 j javax.servlet.http.httpservlet.service(ljavax/servlet/servletrequest;ljavax/servlet/servletresponse;)v+30 j org.apache.catalina.core.applicationfilterchain.internaldofilter(ljavax/servlet/servletrequest;ljavax/servlet/servletresponse;)v+374 j org.apache.catalina.core.applicationfilterchain.dofilter(ljavax/servlet/servletrequest;ljavax/servlet/servletresponse;)v+101 j org.apache.catalina.core.standardwrappervalve.invoke(lorg/apache/catalina/connector/request;lorg/apache/catalina/connector/response;)v+778 j org.apache.catalina.core.standardcontextvalve.invoke(lorg/apache/catalina/connector/request;lorg/apache/catalina/connector/response;)v j org.jboss.web.tomcat.security.securityassociationvalve.invoke(lorg/apache/catalina/connector/request;lorg/apache/catalina/connector/response;)v+356 j org.jboss.web.tomcat.security.jacccontextvalve.invoke(lorg/apache/catalina/connector/request;lorg/apache/catalina/connector/response;)v+42 j org.apache.catalina.core.standardhostvalve.invoke(lorg/apache/catalina/connector/request;lorg/apache/catalina/connector/response;)v+64 j org.apache.catalina.valves.errorreportvalve.invoke(lorg/apache/catalina/connector/request;lorg/apache/catalina/connector/response;)v+6 j org.jboss.web.tomcat.service.jca.cachedconnectionvalve.invoke(lorg/apache/catalina/connector/request;lorg/apache/catalina/connector/response;)v+35 j org.apache.catalina.core.standardenginevalve.invoke(lorg/apache/catalina/connector/request;lorg/apache/catalina/connector/response;)v+42 j org.apache.catalina.connector.coyoteadapter.service(lorg/apache/coyote/request;lorg/apache/coyote/response;)v+157 j org.apache.coyote.ajp.ajpaprprocessor.process(j)z j org.apache.coyote.ajp.ajpaprprotocol$ajpconnectionhandler.process(j)lorg/apache/tomcat/util/net/aprendpoint$handler$socketstate;+39 j org.apache.tomcat.util.net.aprendpoint$worker.run()v+147 j java.lang.thread.run()v+11 v ~stubroutines::call_stub --------------- p r o c e s s --------------- java threads: ( => current thread ) 0x68df6400 javathread \"rmi renewclean-[127.0.0.1:1098]\" daemon [_thread_blocked, id=5140, stack(0x6e4f0000,0x6e540000)] 0x6857a400 javathread \"jboss system threads(1)-76\" daemon [_thread_blocked, id=2284, stack(0x6b6d0000,0x6b720000)] 0x6873dc00 javathread \"rmi tcp connection(679)-127.0.0.1\" daemon [_thread_in_native, id=2268, stack(0x6ea40000,0x6ea90000)] 0x78095800 javathread \"rmi tcp connection(685)-127.0.0.1\" daemon [_thread_in_native, id=4820, stack(0x6e9f0000,0x6ea40000)] 0x78095400 javathread \"rmi tcp connection(677)-127.0.0.1\" daemon [_thread_in_native, id=2680, stack(0x6e9a0000,0x6e9f0000)] 0x69d4b400 javathread \"rmi tcp connection(689)-127.0.0.1\" daemon [_thread_in_native, id=5688, stack(0x6e950000,0x6e9a0000)] 0x69502400 javathread \"rmi tcp connection(682)-127.0.0.1\" daemon [_thread_in_native, id=332, stack(0x6e900000,0x6e950000)] 0x696e3400 javathread \"rmi tcp connection(683)-127.0.0.1\" daemon [_thread_in_native, id=4372, stack(0x6e8b0000,0x6e900000)] 0x78043400 javathread \"rmi tcp connection(687)-127.0.0.1\" daemon [_thread_in_native, id=4076, stack(0x6e860000,0x6e8b0000)] 0x696e3800 javathread \"rmi tcp connection(691)-127.0.0.1\" daemon [_thread_in_native, id=5180, stack(0x6e630000,0x6e680000)] 0x6af8f400 javathread \"rmi tcp connection(695)-127.0.0.1\" daemon [_thread_in_native, id=3800, stack(0x6e770000,0x6e7c0000)] 0x687af400 javathread \"rmi tcp connection(693)-127.0.0.1\" daemon [_thread_in_native, id=4972, stack(0x6e720000,0x6e770000)] 0x78035800 javathread \"rmi tcp connection(694)-127.0.0.1\" daemon [_thread_in_native, id=892, stack(0x6e680000,0x6e6d0000)] 0x6a628400 javathread \"jboss system threads(1)-75\" daemon [_thread_blocked, id=2596, stack(0x6e5e0000,0x6e630000)] 0x69a94800 javathread \"jboss system threads(1)-73\" daemon [_thread_blocked, id=4920, stack(0x6e540000,0x6e590000)] 0x69f2b800 javathread \"jboss system threads(1)-72\" daemon [_thread_blocked, id=4600, stack(0x6e220000,0x6e270000)] 0x69027400 javathread \"jboss system threads(1)-71\" daemon [_thread_blocked, id=1684, stack(0x6e0e0000,0x6e130000)] 0x780de400 javathread \"rmi tcp connection(697)-127.0.0.1\" daemon [_thread_in_native, id=2360, stack(0x6e4a0000,0x6e4f0000)] 0x6824cc00 javathread \"rmi tcp connection(idle)\" daemon [_thread_blocked, id=5736, stack(0x6e450000,0x6e4a0000)] 0x69770400 javathread \"rmi tcp connection(idle)\" daemon [_thread_blocked, id=2404, stack(0x6e270000,0x6e2c0000)] 0x6a9aa800 javathread \"jboss system threads(1)-70\" daemon [_thread_blocked, id=3288, stack(0x6e180000,0x6e1d0000)] 0x685f1800 javathread \"jboss system threads(1)-69\" daemon [_thread_blocked, id=5460, stack(0x6e1d0000,0x6e220000)] 0x68246800 javathread \"jboss system threads(1)-68\" daemon [_thread_blocked, id=4708, stack(0x6e130000,0x6e180000)] 0x68ba2800 javathread \"rmi tcp connection(696)-127.0.0.1\" daemon [_thread_in_native, id=3420, stack(0x6e6d0000,0x6e720000)] 0x69762000 javathread \"ajp-127.0.0.1-8009-23\" daemon [_thread_blocked, id=3120, stack(0x6dff0000,0x6e040000)] 0x66d20400 javathread \"ajp-127.0.0.1-8009-22\" daemon [_thread_blocked, id=5444, stack(0x6dfa0000,0x6dff0000)] 0x6898a800 javathread \"esamapiserver-3114\" [_thread_in_native, id=1676, stack(0x6e400000,0x6e450000)] 0x68875c00 javathread \"esamapiserver-2805\" [_thread_in_native, id=4384, stack(0x6e3b0000,0x6e400000)] 0x680c6800 javathread \"esamapiserver-2781\" [_thread_in_native, id=2788, stack(0x6e360000,0x6e3b0000)] 0x68526400 javathread \"esamapiserver-2780\" [_thread_in_native, id=5592, stack(0x6e310000,0x6e360000)] 0x68351400 javathread \"esamapiserver-2779\" [_thread_in_native, id=5888, stack(0x6e2c0000,0x6e310000)] 0x6a247400 javathread \"multithreadedhttpconnectionmanager cleanup\" daemon [_thread_blocked, id=2484, stack(0x6da00000,0x6da50000)] 0x68921800 javathread \"ajp-127.0.0.1-8009-21\" daemon [_thread_blocked, id=4896, stack(0x6e090000,0x6e0e0000)] 0x6a9a2400 javathread \"ajp-127.0.0.1-8009-20\" daemon [_thread_blocked, id=4792, stack(0x6e040000,0x6e090000)] 0x68969c00 javathread \"timer-6\" [_thread_blocked, id=4588, stack(0x6daf0000,0x6db40000)] 0x68ca6400 javathread \"ajp-127.0.0.1-8009-19\" daemon [_thread_blocked, id=6048, stack(0x6daa0000,0x6daf0000)] 0x692b1400 javathread \"ajp-127.0.0.1-8009-18\" daemon [_thread_in_native, id=136, stack(0x6da50000,0x6daa0000)] 0x7948b400 javathread \"esamapiserver-1832\" [_thread_in_native, id=4172, stack(0x6d9b0000,0x6da00000)] 0x67196400 javathread \"esamapiserver-1065\" [_thread_in_native, id=5644, stack(0x6d7c0000,0x6d810000)] 0x6982b400 javathread \"esamapiserver-1064\" [_thread_in_native, id=312, stack(0x6d750000,0x6d7a0000)] 0x68e54400 javathread \"esamapiserver-4998\" [_thread_in_native, id=4760, stack(0x6d5a0000,0x6d5f0000)] 0x686fd400 javathread \"esamapiserver-4988\" [_thread_in_native, id=2272, stack(0x6b680000,0x6b6d0000)] 0x6986c400 javathread \"thread-45\" [_thread_in_native, id=3988, stack(0x6d670000,0x6d6c0000)] 0x68edd400 javathread \"connection listener 2\" daemon [_thread_in_native, id=3652, stack(0x6d620000,0x6d670000)] 0x6909b800 javathread \"awt-windows\" daemon [_thread_in_native, id=1812, stack(0x6d550000,0x6d5a0000)] 0x69380400 javathread \"java2d disposer\" daemon [_thread_blocked, id=4676, stack(0x6d350000,0x6d3a0000)] 0x69e4d400 javathread \"esamapiserver-4933\" [_thread_in_native, id=5236, stack(0x6d1a0000,0x6d1f0000)] 0x69ba0800 javathread \"esamapiserver-4931\" [_thread_in_native, id=3156, stack(0x6d0f0000,0x6d140000)] 0x69c7c400 javathread \"rmi scheduler(0)\" daemon [_thread_blocked, id=3680, stack(0x6d0a0000,0x6d0f0000)] 0x6a67f400 javathread \"oob-8,127.0.0.1:4869\" [_thread_blocked, id=4468, stack(0x6b950000,0x6b9a0000)] 0x6908a400 javathread \"esamapiserver-4904\" [_thread_in_native, id=4040, stack(0x6b900000,0x6b950000)] 0x69fadc00 javathread \"oob-7,127.0.0.1:4869\" [_thread_blocked, id=4936, stack(0x6b8b0000,0x6b900000)] 0x671a0400 javathread \"oob-6,127.0.0.1:4869\" [_thread_blocked, id=4568, stack(0x6b860000,0x6b8b0000)] 0x69436800 javathread \"oob-5,127.0.0.1:4869\" [_thread_blocked, id=4152, stack(0x6b810000,0x6b860000)] 0x6a18e800 javathread \"ajp-127.0.0.1-8009-17\" daemon [_thread_blocked, id=5096, stack(0x6d150000,0x6d1a0000)] 0x68db8400 javathread \"ajp-127.0.0.1-8009-16\" daemon [_thread_blocked, id=4100, stack(0x6bbb0000,0x6bc00000)] 0x699a9400 javathread \"ajp-127.0.0.1-8009-15\" daemon [_thread_blocked, id=5632, stack(0x6bb60000,0x6bbb0000)] 0x69ac1400 javathread \"ajp-127.0.0.1-8009-14\" daemon [_thread_blocked, id=4212, stack(0x6d000000,0x6d050000)] 0x6931e400 javathread \"ajp-127.0.0.1-8009-13\" daemon [_thread_blocked, id=1916, stack(0x6cfb0000,0x6d000000)] 0x68c5f400 javathread \"ajp-127.0.0.1-8009-12\" daemon [_thread_blocked, id=5220, stack(0x6cf60000,0x6cfb0000)] =>0x6a057400 javathread \"ajp-127.0.0.1-8009-11\" daemon [_thread_in_native, id=4788, stack(0x6cf10000,0x6cf60000)] 0x68cf9400 javathread \"ajp-127.0.0.1-8009-10\" daemon [_thread_blocked, id=4776, stack(0x6cec0000,0x6cf10000)] 0x66f2a400 javathread \"ajp-127.0.0.1-8009-9\" daemon [_thread_blocked, id=5972, stack(0x6ce70000,0x6cec0000)] 0x68430400 javathread \"ajp-127.0.0.1-8009-8\" daemon [_thread_in_native, id=3332, stack(0x6ce20000,0x6ce70000)] 0x689cb400 javathread \"ajp-127.0.0.1-8009-7\" daemon [_thread_blocked, id=1904, stack(0x6cdd0000,0x6ce20000)] 0x686ed800 javathread \"ajp-127.0.0.1-8009-6\" daemon [_thread_blocked, id=348, stack(0x6cd80000,0x6cdd0000)] 0x6957b400 javathread \"ajp-127.0.0.1-8009-5\" daemon [_thread_blocked, id=3424, stack(0x6cd30000,0x6cd80000)] 0x65b20800 javathread \"ajp-127.0.0.1-8009-4\" daemon [_thread_blocked, id=5988, stack(0x6cce0000,0x6cd30000)] 0x69c4bc00 javathread \"ajp-127.0.0.1-8009-3\" daemon [_thread_blocked, id=5904, stack(0x6cc90000,0x6cce0000)] 0x69c4b400 javathread \"ajp-127.0.0.1-8009-2\" daemon [_thread_blocked, id=4428, stack(0x6bc30000,0x6bc80000)] 0x6a706400 javathread \"ajp-127.0.0.1-8009-1\" daemon [_thread_blocked, id=5124, stack(0x65ee0000,0x65f30000)] 0x6604d400 javathread \"ajp-127.0.0.1-8009-acceptor-0\" daemon [_thread_in_native, id=784, stack(0x6cc40000,0x6cc90000)] 0x6609e400 javathread \"ajp-127.0.0.1-8009-cometpoller-7\" daemon [_thread_blocked, id=4596, stack(0x6cbf0000,0x6cc40000)] 0x68699400 javathread \"ajp-127.0.0.1-8009-cometpoller-6\" daemon [_thread_blocked, id=5488, stack(0x6cba0000,0x6cbf0000)] 0x66e5f000 javathread \"ajp-127.0.0.1-8009-cometpoller-5\" daemon [_thread_blocked, id=3932, stack(0x6cb50000,0x6cba0000)] 0x69790800 javathread \"ajp-127.0.0.1-8009-cometpoller-4\" daemon [_thread_blocked, id=4540, stack(0x6cb00000,0x6cb50000)] 0x68ff2c00 javathread \"ajp-127.0.0.1-8009-cometpoller-3\" daemon [_thread_blocked, id=6116, stack(0x6cab0000,0x6cb00000)] 0x69d74400 javathread \"ajp-127.0.0.1-8009-cometpoller-2\" daemon [_thread_blocked, id=1412, stack(0x6ca60000,0x6cab0000)] 0x6a766400 javathread \"ajp-127.0.0.1-8009-cometpoller-1\" daemon [_thread_blocked, id=5876, stack(0x6ca10000,0x6ca60000)] 0x69421400 javathread \"ajp-127.0.0.1-8009-cometpoller-0\" daemon [_thread_blocked, id=1304, stack(0x6c9c0000,0x6ca10000)] 0x68836800 javathread \"ajp-127.0.0.1-8009-poller-7\" daemon [_thread_in_native, id=3208, stack(0x6c970000,0x6c9c0000)] 0x68a40400 javathread \"ajp-127.0.0.1-8009-poller-6\" daemon [_thread_in_native, id=2800, stack(0x6c920000,0x6c970000)] 0x68aa1400 javathread \"ajp-127.0.0.1-8009-poller-5\" daemon [_thread_in_native, id=1776, stack(0x6c8d0000,0x6c920000)] 0x682f7800 javathread \"ajp-127.0.0.1-8009-poller-4\" daemon [_thread_in_native, id=488, stack(0x6c480000,0x6c4d0000)] 0x66e64c00 javathread \"ajp-127.0.0.1-8009-poller-3\" daemon [_thread_in_native, id=1800, stack(0x6c430000,0x6c480000)] 0x6a211400 javathread \"ajp-127.0.0.1-8009-poller-2\" daemon [_thread_in_native, id=5668, stack(0x6c3e0000,0x6c430000)] 0x68bda400 javathread \"ajp-127.0.0.1-8009-poller-1\" daemon [_thread_in_native, id=780, stack(0x6c390000,0x6c3e0000)] 0x6a20c400 javathread \"ajp-127.0.0.1-8009-poller-0\" daemon [_thread_in_native, id=4976, stack(0x6c340000,0x6c390000)] 0x66037400 javathread \"http-127.0.0.1-8080-acceptor-0\" daemon [_thread_in_native, id=964, stack(0x6c2f0000,0x6c340000)] 0x6921d400 javathread \"http-127.0.0.1-8080-sendfile-0\" daemon [_thread_blocked, id=5556, stack(0x6c2a0000,0x6c2f0000)] 0x686ca800 javathread \"http-127.0.0.1-8080-cometpoller-7\" daemon [_thread_blocked, id=4440, stack(0x6c250000,0x6c2a0000)] 0x68c96400 javathread \"http-127.0.0.1-8080-cometpoller-6\" daemon [_thread_blocked, id=2024, stack(0x6c200000,0x6c250000)] 0x69f98800 javathread \"http-127.0.0.1-8080-cometpoller-5\" daemon [_thread_blocked, id=5788, stack(0x6c1b0000,0x6c200000)] 0x66ff9400 javathread \"http-127.0.0.1-8080-cometpoller-4\" daemon [_thread_blocked, id=4116, stack(0x6c160000,0x6c1b0000)] 0x68910400 javathread \"http-127.0.0.1-8080-cometpoller-3\" daemon [_thread_blocked, id=3884, stack(0x6c110000,0x6c160000)] 0x6a4f9400 javathread \"http-127.0.0.1-8080-cometpoller-2\" daemon [_thread_blocked, id=1052, stack(0x6c0c0000,0x6c110000)] 0x670abc00 javathread \"http-127.0.0.1-8080-cometpoller-1\" daemon [_thread_blocked, id=2892, stack(0x6c070000,0x6c0c0000)] 0x688b7000 javathread \"http-127.0.0.1-8080-cometpoller-0\" daemon [_thread_blocked, id=5928, stack(0x6c020000,0x6c070000)] 0x6a308400 javathread \"http-127.0.0.1-8080-poller-7\" daemon [_thread_blocked, id=5892, stack(0x6bfd0000,0x6c020000)] 0x6a479400 javathread \"http-127.0.0.1-8080-poller-6\" daemon [_thread_blocked, id=4064, stack(0x6bf80000,0x6bfd0000)] 0x687dd800 javathread \"http-127.0.0.1-8080-poller-5\" daemon [_thread_blocked, id=1816, stack(0x6bd30000,0x6bd80000)] 0x68f9a400 javathread \"http-127.0.0.1-8080-poller-4\" daemon [_thread_blocked, id=5380, stack(0x6bce0000,0x6bd30000)] 0x6a46f400 javathread \"http-127.0.0.1-8080-poller-3\" daemon [_thread_blocked, id=4696, stack(0x6bc90000,0x6bce0000)] 0x69308800 javathread \"http-127.0.0.1-8080-poller-2\" daemon [_thread_blocked, id=3072, stack(0x6bb10000,0x6bb60000)] 0x6a67fc00 javathread \"http-127.0.0.1-8080-poller-1\" daemon [_thread_blocked, id=3836, stack(0x6bac0000,0x6bb10000)] 0x6a46fc00 javathread \"http-127.0.0.1-8080-poller-0\" daemon [_thread_blocked, id=5228, stack(0x6ba70000,0x6bac0000)] 0x6a316800 javathread \"thread-5\" [_thread_blocked, id=5192, stack(0x6ba20000,0x6ba70000)] 0x6a50a000 javathread \"jbosslifethread\" [_thread_blocked, id=3444, stack(0x6b9d0000,0x6ba20000)] 0x66fe1400 javathread \"esamapiserver\" [_thread_in_native, id=4572, stack(0x6b7c0000,0x6b810000)] 0x68b4c400 javathread \"thread-25\" [_thread_blocked, id=5796, stack(0x6b770000,0x6b7c0000)] 0x685c0800 javathread \"thread-24\" [_thread_blocked, id=4260, stack(0x6b720000,0x6b770000)] 0x693b5800 javathread \"thread-21\" [_thread_blocked, id=2768, stack(0x6b630000,0x6b680000)] 0x694ba400 javathread \"timer-5\" [_thread_blocked, id=4220, stack(0x6b5e0000,0x6b630000)] 0x6a0bb800 javathread \"thread-19\" [_thread_blocked, id=5752, stack(0x6b590000,0x6b5e0000)] 0x697cbc00 javathread \"thread-18\" [_thread_blocked, id=132, stack(0x6b540000,0x6b590000)] 0x68976400 javathread \"oob-4,127.0.0.1:4869\" [_thread_blocked, id=3432, stack(0x6b4f0000,0x6b540000)] 0x68aafc00 javathread \"oob-3,127.0.0.1:4869\" [_thread_blocked, id=5916, stack(0x6b4a0000,0x6b4f0000)] 0x66e81400 javathread \"connectionvalidator\" daemon [_thread_blocked, id=3044, stack(0x6b450000,0x6b4a0000)] 0x69007c00 javathread \"idleremover\" daemon [_thread_blocked, id=1760, stack(0x6b400000,0x6b450000)] 0x69f33400 javathread \"thread-17\" [_thread_blocked, id=2040, stack(0x6b3b0000,0x6b400000)] 0x68d85400 javathread \"pipelinejobscheduler\" [_thread_blocked, id=2560, stack(0x6b360000,0x6b3b0000)] 0x69fc1c00 javathread \"timer-4,127.0.0.1:4869\" daemon [_thread_blocked, id=1944, stack(0x6b310000,0x6b360000)] 0x69d20c00 javathread \"timer-3,127.0.0.1:4869\" daemon [_thread_blocked, id=3416, stack(0x6b2c0000,0x6b310000)] 0x68f63c00 javathread \"oob-2,127.0.0.1:4869\" [_thread_blocked, id=5076, stack(0x6b270000,0x6b2c0000)] 0x68d6dc00 javathread \"oob-1,127.0.0.1:4869\" [_thread_blocked, id=1732, stack(0x6b220000,0x6b270000)] 0x69efb400 javathread \"timer-2,127.0.0.1:4869\" daemon [_thread_blocked, id=5072, stack(0x6b1d0000,0x6b220000)] 0x68f8bc00 javathread \"udp mcast,127.0.0.1:4869\" [_thread_in_native, id=812, stack(0x6b180000,0x6b1d0000)] 0x69f35c00 javathread \"udp ucast,127.0.0.1:4869\" [_thread_in_native, id=4092, stack(0x6b130000,0x6b180000)] 0x68845800 javathread \"fd_sock server socket acceptor,null\" daemon [_thread_in_native, id=3008, stack(0x6b0e0000,0x6b130000)] 0x69fcfc00 javathread \"timer-1,127.0.0.1:4869\" daemon [_thread_blocked, id=4852, stack(0x6b090000,0x6b0e0000)] 0x68126400 javathread \"timer-4\" [_thread_blocked, id=5760, stack(0x67eb0000,0x67f00000)] 0x696eb400 javathread \"timer-3\" [_thread_blocked, id=2996, stack(0x67e60000,0x67eb0000)] 0x692b5400 javathread \"timer-2\" [_thread_blocked, id=5680, stack(0x67e10000,0x67e60000)] 0x69684400 javathread \"reaper:handler\" daemon [_thread_blocked, id=384, stack(0x67dc0000,0x67e10000)] 0x68b14400 javathread \"reaper:user\" daemon [_thread_blocked, id=4636, stack(0x67d70000,0x67dc0000)] 0x691d1800 javathread \"reaper:template\" daemon [_thread_blocked, id=4264, stack(0x67d20000,0x67d70000)] 0x68f8b400 javathread \"reaper:config\" daemon [_thread_blocked, id=2852, stack(0x67cd0000,0x67d20000)] 0x68ead400 javathread \"org.webmacro.util.threadscheduler\" daemon [_thread_blocked, id=2148, stack(0x67c80000,0x67cd0000)] 0x68a62400 javathread \"uilserverilservice accept thread\" [_thread_in_native, id=4968, stack(0x67c30000,0x67c80000)] 0x65cfb400 javathread \"timeoutfactory-0\" daemon [_thread_blocked, id=4396, stack(0x67be0000,0x67c30000)] 0x68b15800 javathread \"jca poolfiller\" [_thread_blocked, id=2972, stack(0x67b90000,0x67be0000)] 0x68761400 javathread \"timer-1\" daemon [_thread_blocked, id=1552, stack(0x67b40000,0x67b90000)] 0x66d8a400 javathread \"hsqldb timer @1826ac5\" daemon [_thread_blocked, id=2744, stack(0x679f0000,0x67a40000)] 0x6706e400 javathread \"defaultquartzscheduler_quartzschedulerthread\" [_thread_blocked, id=3308, stack(0x679a0000,0x679f0000)] 0x689b3400 javathread \"defaultquartzscheduler_worker-9\" [_thread_blocked, id=3868, stack(0x67950000,0x679a0000)] 0x685a3400 javathread \"defaultquartzscheduler_worker-8\" [_thread_blocked, id=680, stack(0x67900000,0x67950000)] 0x683af800 javathread \"defaultquartzscheduler_worker-7\" [_thread_blocked, id=5336, stack(0x678b0000,0x67900000)] 0x68433800 javathread \"defaultquartzscheduler_worker-6\" [_thread_blocked, id=3084, stack(0x677d0000,0x67820000)] 0x68751400 javathread \"defaultquartzscheduler_worker-5\" [_thread_blocked, id=2676, stack(0x67780000,0x677d0000)] 0x68568800 javathread \"defaultquartzscheduler_worker-4\" [_thread_blocked, id=3040, stack(0x67730000,0x67780000)] 0x66396400 javathread \"defaultquartzscheduler_worker-3\" [_thread_blocked, id=1920, stack(0x676e0000,0x67730000)] 0x68601000 javathread \"defaultquartzscheduler_worker-2\" [_thread_blocked, id=5676, stack(0x67690000,0x676e0000)] 0x69126400 javathread \"defaultquartzscheduler_worker-1\" [_thread_blocked, id=1628, stack(0x67640000,0x67690000)] 0x68949800 javathread \"defaultquartzscheduler_worker-0\" [_thread_blocked, id=2824, stack(0x675f0000,0x67640000)] 0x66e21800 javathread \"workmanager(2)-1\" daemon [_thread_blocked, id=148, stack(0x675a0000,0x675f0000)] 0x69622400 javathread \"thread-6\" daemon [_thread_blocked, id=2700, stack(0x67550000,0x675a0000)] 0x683b7400 javathread \"jbossmq cache reference softner\" daemon [_thread_blocked, id=2792, stack(0x67860000,0x678b0000)] 0x671d6400 javathread \"containerbackgroundprocessor[standardengine[jboss.web]]\" daemon [_thread_blocked, id=5196, stack(0x67500000,0x67550000)] 0x66f58400 javathread \"subscriptionwatchdog\" [_thread_blocked, id=2776, stack(0x66a00000,0x66a50000)] 0x66d54c00 javathread \"serversocketrefresh\" daemon [_thread_blocked, id=3440, stack(0x669b0000,0x66a00000)] 0x66d1ac00 javathread \"acceptorthread#0:3873\" [_thread_in_native, id=292, stack(0x66960000,0x669b0000)] 0x66da3c00 javathread \"serversocketrefresh\" daemon [_thread_blocked, id=4752, stack(0x66910000,0x66960000)] 0x662bb400 javathread \"acceptorthread#0:4446\" [_thread_in_native, id=2764, stack(0x668c0000,0x66910000)] 0x66146800 javathread \"pooledinvokeracceptor#0-4445\" [_thread_in_native, id=2572, stack(0x66870000,0x668c0000)] 0x66e88c00 javathread \"rmi tcp accept-4444\" daemon [_thread_in_native, id=4312, stack(0x66820000,0x66870000)] 0x66e88400 javathread \"listener:4844\" daemon [_thread_in_native, id=1896, stack(0x667d0000,0x66820000)] 0x66e72400 javathread \"thread-4\" daemon [_thread_blocked, id=1084, stack(0x66780000,0x667d0000)] 0x66d09800 javathread \"thread-3\" daemon [_thread_blocked, id=2872, stack(0x66730000,0x66780000)] 0x66c09400 javathread \"listener:4840\" daemon [_thread_in_native, id=1948, stack(0x666e0000,0x66730000)] 0x660b7400 javathread \"jboss system threads(1)-2\" daemon [_thread_in_native, id=5172, stack(0x66690000,0x666e0000)] 0x662f2800 javathread \"gc daemon\" daemon [_thread_blocked, id=4436, stack(0x66640000,0x66690000)] 0x662f2000 javathread \"rmi reaper\" [_thread_blocked, id=3888, stack(0x665f0000,0x66640000)] 0x66eabc00 javathread \"rmi tcp accept-1098\" daemon [_thread_in_native, id=1528, stack(0x665a0000,0x665f0000)] 0x661cfc00 javathread \"jboss system threads(1)-1\" daemon [_thread_in_native, id=3024, stack(0x66550000,0x665a0000)] 0x66dd6800 javathread \"scannerthread\" daemon [_thread_blocked, id=3088, stack(0x66460000,0x664b0000)] 0x66c12400 javathread \"timer-0\" daemon [_thread_blocked, id=5260, stack(0x66410000,0x66460000)] 0x002a8c00 javathread \"destroyjavavm\" [_thread_blocked, id=2228, stack(0x00640000,0x00690000)] 0x65b15800 javathread \"low memory detector\" daemon [_thread_blocked, id=4988, stack(0x65e40000,0x65e90000)] 0x65b13400 javathread \"compilerthread1\" daemon [_thread_blocked, id=1408, stack(0x65df0000,0x65e40000)] 0x65b0d800 javathread \"compilerthread0\" daemon [_thread_blocked, id=3304, stack(0x65da0000,0x65df0000)] 0x65b0c000 javathread \"attach listener\" daemon [_thread_blocked, id=1480, stack(0x65d50000,0x65da0000)] 0x65b0a800 javathread \"surrogate locker thread (cms)\" daemon [_thread_blocked, id=1456, stack(0x65d00000,0x65d50000)] 0x623ad400 javathread \"finalizer\" daemon [_thread_blocked, id=1320, stack(0x65ab0000,0x65b00000)] 0x623abc00 javathread \"reference handler\" daemon [_thread_blocked, id=2780, stack(0x65a60000,0x65ab0000)] other threads: 0x623a9400 vmthread [stack: 0x65a10000,0x65a60000] [id=5344] 0x65b17800 watcherthread [stack: 0x65e90000,0x65ee0000] [id=456] vm state:not at safepoint (normal execution) vm mutex/monitor currently owned by a thread: none heap par new generation total 29504k, used 10015k [0x037f0000, 0x057f0000, 0x057f0000) eden space 26240k, 26% used [0x037f0000, 0x03ed3a50, 0x05190000) from space 3264k, 90% used [0x054c0000, 0x057a41e0, 0x057f0000) to space 3264k, 0% used [0x05190000, 0x05190000, 0x054c0000) concurrent mark-sweep generation total 991232k, used 569428k [0x057f0000, 0x41ff0000, 0x41ff0000) concurrent-mark-sweep perm gen total 195336k, used 116938k [0x41ff0000, 0x4deb2000, 0x61ff0000) dynamic libraries: 0x00400000 - 0x00424000 c:\\java\\jdk1.6.0_18\\bin\\java.exe 0x7c800000 - 0x7c8c3000 c:\\windows\\system32\\ntdll.dll 0x77e40000 - 0x77f42000 c:\\windows\\system32\\kernel32.dll 0x7d1e0000 - 0x7d27c000 c:\\windows\\system32\\advapi32.dll 0x77c50000 - 0x77cf0000 c:\\windows\\system32\\rpcrt4.dll 0x76f50000 - 0x76f63000 c:\\windows\\system32\\secur32.dll 0x7c340000 - 0x7c396000 c:\\java\\jdk1.6.0_18\\jre\\bin\\msvcr71.dll 0x6db70000 - 0x6df9b000 c:\\java\\jdk1.6.0_18\\jre\\bin\\server\\jvm.dll 0x77380000 - 0x77411000 c:\\windows\\system32\\user32.dll 0x77c00000 - 0x77c49000 c:\\windows\\system32\\gdi32.dll 0x76aa0000 - 0x76acd000 c:\\windows\\system32\\winmm.dll 0x76290000 - 0x762ad000 c:\\windows\\system32\\imm32.dll 0x71bc0000 - 0x71bc8000 c:\\windows\\system32\\rdpsnd.dll 0x771f0000 - 0x77201000 c:\\windows\\system32\\winsta.dll 0x77ba0000 - 0x77bfa000 c:\\windows\\system32\\msvcrt.dll 0x71c40000 - 0x71c97000 c:\\windows\\system32\\netapi32.dll 0x76b70000 - 0x76b7b000 c:\\windows\\system32\\psapi.dll 0x6d860000 - 0x6d86c000 c:\\java\\jdk1.6.0_18\\jre\\bin\\verify.dll 0x6d3e0000 - 0x6d3ff000 c:\\java\\jdk1.6.0_18\\jre\\bin\\java.dll 0x6d340000 - 0x6d348000 c:\\java\\jdk1.6.0_18\\jre\\bin\\hpi.dll 0x6d8a0000 - 0x6d8af000 c:\\java\\jdk1.6.0_18\\jre\\bin\\zip.dll 0x6d6c0000 - 0x6d6d3000 c:\\java\\jdk1.6.0_18\\jre\\bin\\net.dll 0x71c00000 - 0x71c17000 c:\\windows\\system32\\ws2_32.dll 0x71bf0000 - 0x71bf8000 c:\\windows\\system32\\ws2help.dll 0x71b20000 - 0x71b61000 c:\\windows\\system32\\mswsock.dll 0x76ed0000 - 0x76efa000 c:\\windows\\system32\\dnsapi.dll 0x76f70000 - 0x76f77000 c:\\windows\\system32\\winrnr.dll 0x76f10000 - 0x76f3e000 c:\\windows\\system32\\wldap32.dll 0x76f80000 - 0x76f85000 c:\\windows\\system32\\rasadhlp.dll 0x6d610000 - 0x6d619000 c:\\java\\jdk1.6.0_18\\jre\\bin\\management.dll 0x68000000 - 0x68035000 c:\\windows\\system32\\rsaenh.dll 0x7c8d0000 - 0x7d0cf000 c:\\windows\\system32\\shell32.dll 0x7d180000 - 0x7d1d2000 c:\\windows\\system32\\shlwapi.dll 0x77420000 - 0x77523000 c:\\windows\\winsxs\\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.3790.4770_x-ww_05fdf087\\comctl32.dll 0x664b0000 - 0x6650a000 c:\\windows\\system32\\hnetcfg.dll 0x71ae0000 - 0x71ae8000 c:\\windows\\system32\\wshtcpip.dll 0x66a50000 - 0x66a6c000 c:\\jboss-4.2.3.ga\\bin\\native\\libtcnative-1.dll 0x66a70000 - 0x66a95000 c:\\jboss-4.2.3.ga\\bin\\native\\libapr-1.dll 0x66aa0000 - 0x66ba7000 c:\\jboss-4.2.3.ga\\bin\\native\\libeay32.dll 0x71bb0000 - 0x71bb9000 c:\\windows\\system32\\wsock32.dll 0x66bb0000 - 0x66be2000 c:\\jboss-4.2.3.ga\\bin\\native\\ssleay32.dll 0x6d6e0000 - 0x6d6e9000 c:\\java\\jdk1.6.0_18\\jre\\bin\\nio.dll 0x6d840000 - 0x6d848000 c:\\java\\jdk1.6.0_18\\jre\\bin\\sunmscapi.dll 0x761b0000 - 0x76243000 c:\\windows\\system32\\crypt32.dll 0x76190000 - 0x761a2000 c:\\windows\\system32\\msasn1.dll 0x76cf0000 - 0x76d0a000 c:\\windows\\system32\\iphlpapi.dll 0x76cd0000 - 0x76ce9000 c:\\windows\\system32\\mprapi.dll 0x76df0000 - 0x76e24000 c:\\windows\\system32\\activeds.dll 0x76dc0000 - 0x76de8000 c:\\windows\\system32\\adsldpc.dll 0x76b80000 - 0x76bae000 c:\\windows\\system32\\credui.dll 0x76a80000 - 0x76a92000 c:\\windows\\system32\\atl.dll 0x77670000 - 0x777a9000 c:\\windows\\system32\\ole32.dll 0x7d0e0000 - 0x7d16b000 c:\\windows\\system32\\oleaut32.dll 0x76e30000 - 0x76e3c000 c:\\windows\\system32\\rtutils.dll 0x7e020000 - 0x7e02f000 c:\\windows\\system32\\samlib.dll 0x770e0000 - 0x771e8000 c:\\windows\\system32\\setupapi.dll 0x6d7b0000 - 0x6d7b6000 c:\\java\\jdk1.6.0_18\\jre\\bin\\rmi.dll 0x6d1f0000 - 0x6d33a000 c:\\java\\jdk1.6.0_18\\jre\\bin\\awt.dll 0x73070000 - 0x73097000 c:\\windows\\system32\\winspool.drv 0x6b9a0000 - 0x6b9c4000 c:\\java\\jdk1.6.0_18\\jre\\bin\\jpeg.dll 0x6d6f0000 - 0x6d744000 c:\\java\\jdk1.6.0_18\\jre\\bin\\fontmanager.dll 0x6b040000 - 0x6b06f000 c:\\java\\jdk1.6.0_18\\jre\\bin\\cmm.dll 0x6d500000 - 0x6d523000 c:\\java\\jdk1.6.0_18\\jre\\bin\\dcpr.dll 0x762b0000 - 0x762f9000 c:\\windows\\system32\\comdlg32.dll vm arguments: jvm_args: -xrs -djava.library.path=c:\\jboss-4.2.3.ga\\bin\\native;c:\\perl\\site\\bin;c:\\perl\\bin;c:\\program files\\support tools\\;c:\\program files\\windows resource kits\\tools\\;c:\\windows\\system32;c:\\windows;c:\\windows\\system32\\wbem;c:\\windows\\system32\\windowspowershell\\v1.0;c:\\gsi-tools\\bin;c:\\program files\\microsoft sql server\\100\\tools\\binn\\vsshell\\common7\\ide\\;c:\\program files\\microsoft sql server\\100\\tools\\binn\\;c:\\program files\\microsoft sql server\\100\\dts\\binn\\;c:\\java\\jdk1.6.0_18\\bin; -dprogram.name=run.bat -xms1000m -xmx1000m -xrs -xx:permsize=128m -xx:maxpermsize=512m -xx:+useconcmarksweepgc -xx:+cmspermgensweepingenabled -xx:+cmsclassunloadingenabled -xx:-reduceinitialcardmarks -dsun.rmi.dgc.client.gcinterval=3600000 -dsun.rmi.dgc.server.gcinterval=3600000 -xx:compilecommand=exclude,net/sf/saxon/event/receivingcontenthandler,startelement -djava.endorsed.dirs=c:\\jboss-4.2.3.ga\\lib\\endorsed java_command: org.jboss.main launcher type: sun_standard environment variables: java_home=c:\\java\\jdk1.6.0_18 path=c:\\jboss-4.2.3.ga\\bin\\native;c:\\perl\\site\\bin;c:\\perl\\bin;c:\\program files\\support tools\\;c:\\program files\\windows resource kits\\tools\\;c:\\windows\\system32;c:\\windows;c:\\windows\\system32\\wbem;c:\\windows\\system32\\windowspowershell\\v1.0;c:\\gsi-tools\\bin;c:\\program files\\microsoft sql server\\100\\tools\\binn\\vsshell\\common7\\ide\\;c:\\program files\\microsoft sql server\\100\\tools\\binn\\;c:\\program files\\microsoft sql server\\100\\dts\\binn\\;c:\\java\\jdk1.6.0_18\\bin; os=windows_nt processor_identifier=x86 family 16 model 2 stepping 3, authenticamd --------------- s y s t e m --------------- os: windows server 2003 family build 3790 service pack 2 cpu:total 2 (4 cores per cpu, 1 threads per core) family 16 model 2 stepping 3, cmov, cx8, fxsr, mmx, sse, sse2, sse3, popcnt, mmxext, 3dnow, 3dnowext, lzcnt, sse4a memory: 4k page, physical 4193500k(1696908k free), swap 6115232k(3935444k free) vm_info: java hotspot(tm) server vm (16.0-b13) for windows-x86 jre (1.6.0_18-b07), built on dec 17 2009 13:29:37 by \"java_re\" with ms vc++ 7.1 (vs2003) time: wed oct 10 16:01:50 2012 elapsed time: 8411 seconds",
        "label": 1
    },
    {
        "text": "pddocumentcatalog getdocumentcatalog getpages getcount  returns   first page is  the attached pdf opens fine in the readers i have checked, but pdfbox has some issues with it. it apparently has 0 pages, but it is possible to get the first page by asking for page number -1. code: pddocument pddocument = pddocument.load(inputstream); int pages = pddocument.getdocumentcatalog().getpages().getcount(); //pages == 0 pdpage page = pddocument.getdocumentcatalog().getpages().get(-1); //page != null this behaviour exists on version 2.0.0.rc2 and on trunk.",
        "label": 6
    },
    {
        "text": " patch  bug in pdpage when the page is rasterized when a pdpage is rasterized, the image created isn't cropped properly. tests are included in this patch",
        "label": 1
    },
    {
        "text": "debugger file open dialog has incorrect filter on mac the file open dialog for mac in the pdfdebugger tool has the file filter set up incorrectly. instead of filtering the filename, it is filtering the directory name. thus you can open any file in a directory that ends with .pdf, but nothing else. see also: filenamefilter.accept javadoc",
        "label": 11
    },
    {
        "text": "optimize calls of getpixel in sampledimagereader and pdimagexobject when calling raster#getpixel() in a loop, it is a good practice to make sure that the result array is allocated only once. sampledimagereader#getstencilimage() and pdimagexobject#applymask() fail to do that. when rendering the attached example, this results in allocating 24 053 760 arrays containing 3 floats, which is about 0.5gb of data if my math is right. also, i have noticed that sampledimagereader#getstencilimage() reads and sets the same data w/o modification if alpha of a pixel != 255. after applying the attached patch, rendering time of the document drops from 8.5s to 7.4s. not as much as i have expected - array allocation and the garbage collector seem to be fast - but still... note: rendering of the document is wrong, it does not find some of its fonts, but that is irrelevant for this issue.",
        "label": 1
    },
    {
        "text": "improve handling of multiline text boxes the current implementation for setting the appearance of content that is added to a multiline text box is incorrect in a number of ways: doesn't position the start of the text in the correct location incorrectly uses font size '0' instead of auto-sizing the font doesn't break up very long lines if the font size is very large, then the next line is started too close to the previous line.",
        "label": 8
    },
    {
        "text": "wrong size in rendering of some artifacts seems that some artifacts get the wrong width when rendering. i've tested my way to that the artifact is a stroked line and it seems the stroke width is larger than a single pixel and stroke width might only be applied to how wide a stroke is and the length of the stroke might have a minimal length? poppler seem to handle this stroke correctly. ----- off topic we do text extraction with pdfbox and use poppler today to extract our images because we had a lot of artifacts earlier but with the tremendous work by the team to solve pdfbox-3000 issues we are looking into using pdfbox for image rendering. a lot of our examples have even more details than the poppler rendered images. great work people.",
        "label": 11
    },
    {
        "text": "pdf printing orientation i try to print a pdf using the following code // adevice is the printer device name // adata is a byte array of my pdf (stored on a db) ....    vprintservice = this.getprintservice(adevice);    vprinterjob = java.awt.print.printerjob.getprinterjob();    vprinterjob.setprintservice(vprintservice);    vpddocument = this.getpddocument(adata);    vpddocument.silentprint(vprinterjob); -- unable to find source-code formatter for language: suppors methods. available languages are: actionscript, ada, applescript, bash, c, c#, c++, cpp, css, erlang, go, groovy, haskell, html, java, javascript, js, json, lua, none, nyan, objc, perl, php, python, r, rainbow, ruby, scala, sh, sql, swift, visualbasic, xml, yaml           public printservice getprintservice(string adevice) throws exception {  javax.print.printservice[] vprintservices = java.awt.print.printerjob.lookupprintservices();     boolean printerfound = false;     for(int i = 0; i < vprintservices.length; i++)     {      if(vprintservices[i].getname().trim().equals(adevice.trim()))          return vprintservices[i];     }   return null; } public pddocument getpddocument(genericbean adata) throws exception {    byte[] vpagedata  =  (byte[])adata.getvalueatkey(\"byte\");    return pddocument.load( new bytearrayinputstream(vpagedata) ); } but if my pdf is landscape and the printer instead as portrait as default, portrait wins and so the report is not well printed. checking the code (based on 1.5.0 and also from lateast trunk) for class pdpageable... probably i found the issue.. and i believe that the implementation is not right (at least from my point of view). get a look to the getpageformat method. as first it get the page format from the job (printerjob) pageformat format = job.defaultpage(); after it get the (optional) print service from the job (printer job) printservice service = job.getprintservice(); // can be null if the printer service is not null and it have landscape as orientation.. it force landscape as orientation in the page format otherwise it force it as portrait but... in my mind, it should get the orientation from the pdf page.. and not from the printer job / print service. i can print documents with different orientation on the same printer and also i can have in the same document pages with different orientation. of couse i can make same mistake and read the code in the wrong way... (i found this project yesterday....) maybe the \"findrotation\" method on the pdpage should be invoked and \"checked\".. or something else.... it this a bug on pdfbox ? thanks roberto",
        "label": 1
    },
    {
        "text": "ttfdatastream read32fixed  discards fractions ttfdatastream.read32fixed() tries to calculate its fractional part by dividing an unsigned short with 65536. but because this method uses an integer division, the fractional value will always be 0. i've attached a simple patch that fixes this.",
        "label": 1
    },
    {
        "text": "decrypting malformed document with signature cause npe i got a encrypted document that was destroyed by the signer. the decrypter can handle it but while searching for signatures, a null check is missing. this cause npe. my patch will cause throw a ioexception if something went wrong while decrypting. another solution is just skipping the object (in my case the referenced object is missing) and continue. maybe a errorhandling for the parser will be a good idea. so the user can decide how importan it is for him to parse a pdf properly and step off if a document isn't conform or continue and risk to lose some information while parsing malformed documents.",
        "label": 1
    },
    {
        "text": "running gc between signing and saving document closes stream running gc between signing and saving document closes stream and signing process fails. it happens only if signature image is added via pdvisiblesigndesigner e.g. import org.apache.commons.io.ioutils; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.interactive.digitalsignature.pdsignature; import org.apache.pdfbox.pdmodel.interactive.digitalsignature.signatureoptions; import org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.pdvisiblesigproperties; import org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.pdvisiblesigndesigner; import java.io.*; import java.net.urisyntaxexception; import static java.lang.thread.currentthread; public class foo { public static void main(string[] args) throws ioexception, urisyntaxexception { byte[] unsignedpdf = getresourceasbytes(\"pdf-sample.pdf\"); try (pddocument doc = pddocument.load(unsignedpdf)) { doc.addsignature( new pdsignature(), is -> new byte[0], getsignatureoptions(doc, getfile(\"util/test-pdf-signature.jpg\")) ); system.gc(); try (fileoutputstream out = new fileoutputstream(file.createtempfile(\"signed\", \".pdf\"))) { doc.saveincremental(out); } } } private static signatureoptions getsignatureoptions(pddocument doc, file signatureimage) throws ioexception { signatureoptions result = new signatureoptions(); pdvisiblesigndesigner visiblesignature; try (inputstream input = new fileinputstream(signatureimage)) { visiblesignature = new pdvisiblesigndesigner(doc, input, 1); } pdvisiblesigproperties visiblesignatureproperties = new pdvisiblesigproperties(); visiblesignatureproperties.setpdvisiblesignature(visiblesignature).buildsignature(); result.setvisualsignature(visiblesignatureproperties); return result; } public static byte[] getresourceasbytes(string filepath) throws ioexception, urisyntaxexception { return ioutils.tobytearray(getfile(filepath).touri()); } public static file getfile(string filepath) throws urisyntaxexception { return new file(currentthread().getcontextclassloader().getresource(filepath).touri()); } } constantly fails with: exception in thread \"main\" java.io.ioexception: cosstream has been closed and cannot be read. perhaps its enclosing pddocument has been closed? at org.apache.pdfbox.cos.cosstream.checkclosed(cosstream.java:77) at org.apache.pdfbox.cos.cosstream.createrawinputstream(cosstream.java:125) at org.apache.pdfbox.pdfwriter.coswriter.visitfromstream(coswriter.java:1203) at org.apache.pdfbox.cos.cosstream.accept(cosstream.java:383) at org.apache.pdfbox.cos.cosobject.accept(cosobject.java:158) at org.apache.pdfbox.pdfwriter.coswriter.dowriteobject(coswriter.java:522) at org.apache.pdfbox.pdfwriter.coswriter.dowriteobjects(coswriter.java:460) at org.apache.pdfbox.pdfwriter.coswriter.dowritebody(coswriter.java:444) at org.apache.pdfbox.pdfwriter.coswriter.visitfromdocument(coswriter.java:1099) at org.apache.pdfbox.cos.cosdocument.accept(cosdocument.java:419) at org.apache.pdfbox.pdfwriter.coswriter.write(coswriter.java:1370) at org.apache.pdfbox.pdmodel.pddocument.saveincremental(pddocument.java:1276) at foo.main(foo.java:27)",
        "label": 11
    },
    {
        "text": "javadoc on website is marked as being in german all javadoc files on pdfbox.apache.org start with <html lang=\"de\"> which makes some browsers wrongly assume the text is in german, and offer to translate it.   presumably this may cause some issues with search engine results when requesting only english results, though i have not personally experienced this.  this is probably a minor/trivial issue. could possibly be fixed explicitly setting the locale option in maven-javadoc-plugin, though i have not tested whether this does fix the issue. ",
        "label": 8
    },
    {
        "text": "images extraction hi, it seems i have 2 identical pdf documents. but i can't extract images from both. can you help me? thanks christian",
        "label": 1
    },
    {
        "text": "npe in pdtruetypefont makefontdescriptor i get an npe with the attached file: java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.makefontdescriptor(pdtruetypefont.java:337)  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.getfontdescriptor(pdtruetypefont.java:150)  at org.apache.pdfbox.pdmodel.font.pdfont.getfontheight(pdfont.java:350)",
        "label": 6
    },
    {
        "text": "regression from  ioexception  xref for points to wrong object  the following stacktrace is shown with extracttext and pdfreader when opening a file previously parsed by 1.8.10: java.lang.runtimeexception: java.io.ioexception: xref for 171:0 points to wrong object: 173:0     org.apache.pdfbox.debugger.pdfdebugger.openmenuitemactionperformed(pdfdebugger.java:593)     org.apache.pdfbox.debugger.pdfdebugger.access$400(pdfdebugger.java:113)     org.apache.pdfbox.debugger.pdfdebugger$4.actionperformed(pdfdebugger.java:312)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source) caused by: java.io.ioexception: xref for 171:0 points to wrong object: 173:0     org.apache.pdfbox.pdfparser.cosparser.parsefileobject(cosparser.java:746)     org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:721)     org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:652)     org.apache.pdfbox.pdfparser.cosparser.parsedictobjects(cosparser.java:612)     org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:215)     org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:249)     org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:840)     org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:780)     org.apache.pdfbox.debugger.pdfdebugger.parsedocument(pdfdebugger.java:1243)     org.apache.pdfbox.debugger.pdfdebugger.readpdffile(pdfdebugger.java:1165)     org.apache.pdfbox.debugger.pdfdebugger.openmenuitemactionperformed(pdfdebugger.java:587)     org.apache.pdfbox.debugger.pdfdebugger.access$400(pdfdebugger.java:113)     org.apache.pdfbox.debugger.pdfdebugger$4.actionperformed(pdfdebugger.java:312)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(unknown source)",
        "label": 1
    },
    {
        "text": "unsupportedoperationexception stacktrace: java.lang.unsupportedoperationexception  at java.util.abstractlist.add(abstractlist.java:148)  at java.util.abstractlist.add(abstractlist.java:108)  at org.apache.pdfbox.pdfparser.cosparser.parsedictobjects(cosparser.java:611)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:241)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:276)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1132)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1066)  at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:141)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280)",
        "label": 11
    },
    {
        "text": "npe with corrupt pdf document [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1326521 originally submitted by pjwalstrom on 2005-10-14 01:35. i have a corrupted pdf-document, which displays the following error when acrobat is opened: \"there was an error opening this document. the file is damaged and could not be repaired\". i am using pdfbox 0.7.2 with lucene, and when i try to index the document with the following command org.apache.lucene.document.document doc = lucenepdfdocument.getdocument(filetoindex); i get a npe: 2005-10-12 14:33:16,041 error [stderr] java.lang.nullpointerexception 2005-10-12 14:33:16,041 error [stderr] at org.pdfbox.pdmodel.pdpagenode.getallkids(pdpagenode.java:194) 2005-10-12 14:33:16,041 error [stderr] at org.pdfbox.pdmodel.pdpagenode.getallkids(pdpagenode.java:182) 2005-10-12 14:33:16,041 error [stderr] at org.pdfbox.pdmodel.pddocumentcatalog.getallpages(pddocumentcatalog.java:162) 2005-10-12 14:33:16,042 error [stderr] at org.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:220) 2005-10-12 14:33:16,042 error [stderr] at org.pdfbox.searchengine.lucene.lucenepdfdocument.addcontent(lucenepdfdocument.java:278) 2005-10-12 14:33:16,042 error [stderr] at org.pdfbox.searchengine.lucene.lucenepdfdocument.getdocument(lucenepdfdocument.java:187) shouldn't pdfbox throw anything else than a npe when dealing with corrupt documents? a corruptpdfexception would do.",
        "label": 1
    },
    {
        "text": "ioexception  expected number  actual cosarray  on a valid pdf on the attached pdf file, which opens fine with adobe reader, the pddocument.load() method errors with the following message: \"expected number, actual=cosarray{[cosobject{7, 0}, cosname{xyz}, cosnull{}, cosnull{}, cosnull{}]} at offset 497\"",
        "label": 1
    },
    {
        "text": "type3 font that is getting zero height text  even in latest although most type3 fonts are now getting a valid height, this one file is still getting zero height string[549.5999,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=6.090027]p string[555.68994,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=5.1156006]a string[560.80554,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=5.1156006]g string[565.92114,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=4.8720093]e string[570.79315,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=2.6796265] string[573.4728,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=5.1156006]3 string[578.5884,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=2.6796265] string[581.268,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=5.1156006]o string[586.3836,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=2.6796265]f string[589.06323,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=2.6796265] string[591.74286,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=5.1156006]3 string[70.32,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=7.5515976]a string[77.8716,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.333603]c string[84.2052,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.333603]c string[90.5388,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.820801]o string[97.359604,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.820801]u string[104.180405,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.820801]n string[111.001205,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=3.6539993]t string[114.655205,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=3.1668015] string[117.82201,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=9.744003]m string[127.56601,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.333603]e string[133.89961,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.0899963]s string[139.98961,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.0899963]s string[146.0796,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.333603]a string[152.41321,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.820801]g string[159.23401,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.333603]e string[165.56761,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.0899963]s",
        "label": 11
    },
    {
        "text": "merging pdfs with a form is not retaining the field name values hi, we are using pdfbox-app-2.0.0. i have 3 pdf forms a.pdf, b.pdf & c.pdf. each of these forms are filled before i attempt to merge them. i can merge any two of these in any combination and the results looks good. if i merge any of these forms to the previous merge result then iam loosing field name values in the result and also the form is not editable. example:- a.pdf merged with b.pdf to get ab.pdf if i merge ab.pdf with a.pdf, the resultant merged form will not have form field values in all the pages. it does have form field values in some pages. is there a limitation or restriction on merging same pdf forms more than once ? thanks, -reddy",
        "label": 8
    },
    {
        "text": "parsing error  skipping object parsing error, skipping object java.io.ioexception: expected='endstream' actual='' org.apache.pdfbox.io.pushbackinputstream@38011d45 at org.apache.pdfbox.pdfparser.baseparser.parsecosstream(baseparser.java:439) at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:552) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:184) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1088) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1053) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:74) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:197) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:197) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:135) at org.apache.tika.tika.parsetostring(tika.java:357) at edu.uci.ics.crawler4j.crawler.binaryparser.parse(binaryparser.java:37) at edu.uci.ics.crawler4j.crawler.webcrawler.handlebinary(webcrawler.java:223) at edu.uci.ics.crawler4j.crawler.webcrawler.processpage(webcrawler.java:462) at edu.uci.ics.crawler4j.crawler.webcrawler.run(webcrawler.java:129) at java.lang.thread.run(thread.java:662) did not found xref object at specified startxref position 0 this is the sample url where i am facing this problem:- http://www.qualcomm.com/documents/files/rev-b-enhanced-mobile-broadband-for-all.pdf any suggestions why is it happening...!! or its a bug??",
        "label": 1
    },
    {
        "text": "regression  nullpointerexception in subsetting the attached test files runs without problems with 2.0.0 but fails with 2.0.1. something must have changed concerning the subsetting of ttf files. basically i'm trying to reuse a truetypefont for several pdfs to avoid parsing it over and over again.",
        "label": 6
    },
    {
        "text": "parsing of a type1 font fails with a numberformatexception when rendering the attached pdf, parsing of a font fails with a numberformatexception. many nullpointerexceptions and \"missing fonts\" are being reported then. the pdf rendered fine in our modified 1.7.x where fonts were read using awt. i did not try with current 1.8.x. stack traces are attached. note: this is just a file from my test suite, not a production problem. i am not sure whether the parser or the pdf is wrong, but the fact that it renders fine in acrobat and in 1.7.x indicates that the former is true. the offending font is f2, if i catch and ignore the runtime exception in pdresources#getfonts() then it is reported as missing in the pagedrawer.",
        "label": 6
    },
    {
        "text": "java io ioexception  missing root object specification in trailer java.io.ioexception: missing root object specification in trailer. java.io.ioexception: missing root object specification in trailer.     org.apache.pdfbox.pdfparser.cosparser.parsetrailervaluesdynamically(cosparser.java:2156)     org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:222)     org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:271)     org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:987)     org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:943)     org.apache.pdfbox.debugger.pdfdebugger.parsedocument(pdfdebugger.java:1369)     org.apache.pdfbox.debugger.pdfdebugger.readpdffile(pdfdebugger.java:1283)     org.apache.pdfbox.debugger.pdfdebugger.readpdffile(pdfdebugger.java:1266)     org.apache.pdfbox.debugger.pdfdebugger.main(pdfdebugger.java:254)     org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:85) this worked in 2.0.4. files with the same issue (not attached): 015664.pdf 023505.pdf 047586.pdf 051613.pdf 069020.pdf <= smallest, attached here 193175.pdf 287698.pdf 303385.pdf 526394.pdf 587123.pdf 643304.pdf",
        "label": 1
    },
    {
        "text": "type3 font glyphs overlapped page 6 of this file http://chrishecker.com/images/3/33/gdmogl.pdf (the author insists that it isn't put on another website) above the box there is the text \"for further info\" but the glyphs are overlapping each other. problem is in the t5 font at root/pages/kids/[5]/resources/font/t5",
        "label": 11
    },
    {
        "text": "typo on usage message   pdfdbox  instead of  pdfbox  silly diff below index: tools/src/main/java/org/apache/pdfbox/tools/pdfbox.java =================================================================== \u2014 tools/src/main/java/org/apache/pdfbox/tools/pdfbox.java (revision 1623301) +++ tools/src/main/java/org/apache/pdfbox/tools/pdfbox.java (working copy) @@ -113,7 +113,7 @@ private static void showmessageandexit() { system.err.println(\"pdfdbox version: \\\"\"+ version.getversion()+ \"\\\"\"); + system.err.println(\"pdfbox version: \\\"\"+ version.getversion()+ \"\\\"\"); system.err.println(\"\\nusage: java pdfbox-app-x.y.z.jar <command> <args..>\"); system.err.println(\"\\npossible commands are:\\n\"); system.err.println(\" convertcolorspace\");",
        "label": 11
    },
    {
        "text": "extracttext add space at start of text java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar extracttext insurance_form.pdf output has extra space \" section 1 \u2013 owner details:\"",
        "label": 1
    },
    {
        "text": "issue in renderingmode isstroke method isstroke() method in renderingmode class returns false result for stroke_clip instance. it happens because in current realization pdfbox checks stroke value twice instead of checking on stroke and stroke_clip.",
        "label": 11
    },
    {
        "text": "illegalargumentexception  root cannot be null i got a pdf,,, in which pdfbox gives errors while parsing it. exception in thread \"main\" java.lang.illegalargumentexception: root cannot be null         at org.apache.pdfbox.pdmodel.pdpagetree.<init>(pdpagetree.java:75)         at org.apache.pdfbox.pdmodel.pddocumentcatalog.getpages(pddocumentcatalog.java:129)         at org.apache.pdfbox.pdmodel.pddocument.getnumberofpages(pddocument.java:1411) this did not happen with 2.0.7.",
        "label": 1
    },
    {
        "text": "pdf box crash when using pdftoimage or pdfdebug when we try to do a pdftoimage or pdfdebug the attached pdf makes the jvm crash. see also attached screenshot. we we hook a profiler to see what happens in our application when we try to load it and convert it to an image we don't see any strange things happening in memory or cpu usage. only that our application jvm crashes.",
        "label": 11
    },
    {
        "text": "pdccitt doesn't use color space the method getrgbimage() in pdccitt doesn't use a possible color space to decode the image leading to wrong colors.",
        "label": 1
    },
    {
        "text": "pdf with outputintent with alternative colorspace with incorrect component count validates as reported by \"a20god\", copied from linked verapdf issue: == the alternate entry of the output intent's destoutputprofile (which is not to be ignored in pdf/a-1, in contrast to pdf/a-2) is a device color space which violates 6.2.3.3 (devicecmyk vs. rgb output intent) does not have the same number of components as the icc profile (4 vs. 3), see pdf reference 1.4 table 4.16.",
        "label": 11
    },
    {
        "text": "font manager fails to set standardfont on fedora release 13 (goddard), fontmanager fails to find either of the two enumerated standardfonts, arial or timesnewroman. the stack trace look something like this: org.apache.pdfbox.util.pdfstreamengine - java.lang.nullpointerexception java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.font.pdtype1font.getawtfont(pdtype1font.java:243) at org.apache.pdfbox.pdmodel.font.pdsimplefont.drawstring(pdsimplefont.java:97) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:193) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:509)",
        "label": 1
    },
    {
        "text": "illegalargumentexception  dimensions  width height  are too large caused by: java.lang.illegalargumentexception: dimensions (width=99999 height=99999) are too large     org.apache.pdfbox.rendering.tilingpaint.getimage(tilingpaint.java:138)     org.apache.pdfbox.rendering.tilingpaint.<init>(tilingpaint.java:69)     org.apache.pdfbox.rendering.pagedrawer.getpaint(pagedrawer.java:263)     org.apache.pdfbox.rendering.pagedrawer.getnonstrokingpaint(pagedrawer.java:599)     org.apache.pdfbox.rendering.pagedrawer.fillpath(pagedrawer.java:675)     org.apache.pdfbox.contentstream.operator.graphics.fillnonzerorule.process(fillnonzerorule.java:36)     org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:829)     org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:485)     org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:453)     org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:156)     org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:196)     org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:145)     org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:68)     org.apache.pdfbox.debugger.pagepane.pagepane$renderworker.doinbackground(pagepane.java:238)     org.apache.pdfbox.debugger.pagepane.pagepane$renderworker.doinbackground(pagepane.java:219)     java.lang.thread.run(thread.java:745) the problem is large xstep and ystep values in a pattern.",
        "label": 11
    },
    {
        "text": "speed up lzwfilter decoding i noticed that the lzw decoder performance can be improved: it's allocating a new byte[] for every byte it visits in the stream. this is actually an o(n^2) cost, but n is typically fairly small. i changed lzwdictionary to use its own private growable byte[] to accumulate each added byte. i also changed it to not pre-enroll all initial (0-255) codes, but instead add it (lazily) on demand if the code is used. i also randomized the testfilters test, and mixed in some \"more predictable\" patterns, so we get better testing of the filters. if the test fails it prints the seed used for the random numbers, so we can reproduce the failure.",
        "label": 1
    },
    {
        "text": "npe while rendering files with type3 fonts i get this npe with the files of pdfbox-1145, pdfbox-1794, pdfbox-2023 in 1.8 only: java.lang.nullpointerexception at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:210) at org.apache.pdfbox.pdmodel.font.type3streamparser.createimage(type3streamparser.java:59) at org.apache.pdfbox.pdmodel.font.pdtype3font.createimageifnecessary(pdtype3font.java:80) at org.apache.pdfbox.pdmodel.font.pdtype3font.drawstring(pdtype3font.java:102) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:256) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:499) at org.apache.pdfbox.util.operator.showtext.process(showtext.java:45) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:557) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:135) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:801) at org.apache.pdfbox.util.testpdftoimage.dotestfile(testpdftoimage.java:232) at org.apache.pdfbox.util.testpdftoimage.testrenderimage(testpdftoimage.java:344) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) at java.lang.reflect.method.invoke(method.java:606) at junit.framework.testcase.runtest(testcase.java:168) at junit.framework.testcase.runbare(testcase.java:134) at junit.framework.testresult$1.protect(testresult.java:110) at junit.framework.testresult.runprotected(testresult.java:128) at junit.framework.testresult.run(testresult.java:113) at junit.framework.testcase.run(testcase.java:124) at junit.framework.testsuite.runtest(testsuite.java:232) at junit.framework.testsuite.run(testsuite.java:227) at junit.textui.testrunner.dorun(testrunner.java:116) at junit.textui.testrunner.start(testrunner.java:180) at junit.textui.testrunner.main(testrunner.java:138) at org.apache.pdfbox.util.testpdftoimage.main(testpdftoimage.java:394) after fixing pdfstreamengine.processstream() like this         if (apage == null)         {             graphicsstate = new pdgraphicsstate();         }         else         {             graphicsstate = new pdgraphicsstate(apage.findcropbox());         } i get another npe: java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.font.type3streamparser.createimage(type3streamparser.java:60) at org.apache.pdfbox.pdmodel.font.pdtype3font.createimageifnecessary(pdtype3font.java:80) at org.apache.pdfbox.pdmodel.font.pdtype3font.drawstring(pdtype3font.java:102) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:256) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:506) at org.apache.pdfbox.util.operator.showtext.process(showtext.java:45) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:564) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:275) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:242) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:222) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:135) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:801) at org.apache.pdfbox.util.testpdftoimage.dotestfile(testpdftoimage.java:232) at org.apache.pdfbox.util.testpdftoimage.testrenderimage(testpdftoimage.java:344) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) at java.lang.reflect.method.invoke(method.java:606) at junit.framework.testcase.runtest(testcase.java:168) at junit.framework.testcase.runbare(testcase.java:134) at junit.framework.testresult$1.protect(testresult.java:110) at junit.framework.testresult.runprotected(testresult.java:128) at junit.framework.testresult.run(testresult.java:113) at junit.framework.testcase.run(testcase.java:124) at junit.framework.testsuite.runtest(testsuite.java:232) at junit.framework.testsuite.run(testsuite.java:227) at junit.textui.testrunner.dorun(testrunner.java:116) at junit.textui.testrunner.start(testrunner.java:180) at junit.textui.testrunner.main(testrunner.java:138) at org.apache.pdfbox.util.testpdftoimage.main(testpdftoimage.java:394)",
        "label": 1
    },
    {
        "text": "wrong length in stream decoding after exception  results in endless loop  when reading streams from pdf files pdfbox may get stuck and don't return. this happens for instance if a stream with flatedecode filter is read but flate decoder is unable to read encoded data. the reason is that in cosstream in method dodecode(cosname, int) the filter is first applied using length specified by pdf and in case of an error the filter is applied with length parameter set to 'writtenlength'. however 'writtenlength' is read from unfilteredstream which was newly created in first try - so written length is 0 which results in some endless loop in flate decoder. the solution: read written length before first try and (in case we have several filter) make sure that writtenlength is not 0. the fixed method: private void dodecode( cosname filtername, int filterindex ) throws ioexception { filtermanager manager = getfiltermanager(); filter filter = manager.getfilter( filtername ); inputstream input; boolean done = false; ioexception exception = null; long position = unfilteredstream.getposition(); long length = unfilteredstream.getlength(); long writtenlength = unfilteredstream.getlengthwritten(); // tb: in case we need it later if( length == 0 ) { //if the length is zero then don't bother trying to decode //some filters don't work when attempting to decode //with a zero length stream. see zlib_error_01.pdf unfilteredstream = new randomaccessfileoutputstream( file ); done = true; } else { //ok this is a simple hack, sometimes we read a couple extra //bytes that shouldn't be there, so we encounter an error we will just //try again with one less byte. for( int trycount=0; !done && trycount<5; trycount++ ) { try { input = new bufferedinputstream( new randomaccessfileinputstream( file, position, length ), buffer_size ); unfilteredstream = new randomaccessfileoutputstream( file ); filter.decode( input, unfilteredstream, this, filterindex ); done = true; } catch( ioexception io ) { length--; exception = io; } } if( !done ) { //if no good stream was found then lets try again but with the //length of data that was actually read and not length //defined in the dictionary length = writtenlength; if( length != 0 ) { for( int trycount=0; !done && trycount<5; trycount++ ) { try { input = new bufferedinputstream( new randomaccessfileinputstream( file, position, length ), buffer_size ); unfilteredstream = new randomaccessfileoutputstream( file ); filter.decode( input, unfilteredstream, this, filterindex ); done = true; } catch( ioexception io ) { length--; exception = io; } } } } } if( !done ) { throw exception; } }",
        "label": 1
    },
    {
        "text": "character missing in text extraction the attached file brings this text extraction: 1.8.6: for safe! clean! abundant water?in our homes! rivers! lakes! and streams?is one of our 1.8.7: for safe! clean! abundant water?in our homes! rivers! lakes! and streams?is one of our 1.8.8: for safe! clean! abundant water?n our homes! rivers! lakes! and streams?s one of our 2.0: for safe! clean! abundant water\u0096in our homes! rivers! lakes! and streams\u0096is one of our ar: for safe! clean! abundant water\u0096in our homes! rivers! lakes! and streams\u0096is one of our so the \"i\" has been lost in the 1.8.8 version. (2.0 and ar have a character that is invisible when viewing this issue, but can be seen when editing)",
        "label": 1
    },
    {
        "text": "class pddocument method getpagemap returns a classcastexception trying to get the map of bookmarks to page numbers by using method getpagemap but throws a java.lang.classcastexception: org.apache.pdfbox.pdmodel.pdpage",
        "label": 1
    },
    {
        "text": "text extraction getting zero font height  bad widths  and   for text in this pdf with type fonts attached file is just line one from a file where every piece of text has these problems. all the other lines were removed with nitro to make a small test case. this is the output from printtextlocations example: string[211.92,356.8801 fs=58.0 xscale=58.0 height=1.75392 space=190528.28 width=1.7052002]? string[129.84,347.04 fs=58.0 xscale=58.0 height=2.72832 space=288435.66 width=2.679596]? string[70.32,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=7.0643997]? string[77.3844,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=4.8720016]? string[82.2564,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]? string[88.590004,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.577202]? string[95.167206,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]? string[101.2572,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]? string[107.590805,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]? string[113.6808,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=4.8720016]? string[118.5528,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=3.1668015]? string[121.719604,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]? string[128.0532,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.577194]? string[134.63042,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]? string[140.72041,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=3.1667938]? string[522.95984,293.28 fs=58.0 xscale=58.0 height=1.36416 space=150394.36 width=1.4616089]? fontsize is way too big (should be more like 8), value for space is ridiculous, height is too small. and each character is coming through as a '?'. the original file has this on every piece of text. in acrobat everything looks fine, both in the original and in this test case.",
        "label": 11
    },
    {
        "text": "read pdf xfa form contents [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1269854 originally submitted by benlitchfield on 2005-08-24 17:50. i uploaded the document \"test-read.pdf\" at ftp.pdfbox.org. you can fill in the form fields on the first page and try to read the content as per my code. for some reason, it just reads only the original form content and ignores any of the entry i make. also, i saw an rfe for doing export/import for xdp. do you know whether this would be available soon?",
        "label": 1
    },
    {
        "text": "truetype font loaded in  and previous  does not load in i have been using a particular truetype font with many previous versions of pdfbox. it loaded and worked fine up to version 1.6.0. now at level 1.7.0, i get a nullpointerexception when attempting to load this ttf file: exception: java.lang.nullpointerexception java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loaddescriptordictionary(pdtruetypefont.java:319) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:166) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:142) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:129) at test.<init>(test.java:23) at test.main(test.java:36) my testcase (simply performing a loadttf()) works with 1.6.0 of pdfbox. this font is certainly an oldie, but it does validate using \"font book\" on my mac. that program looks through a truetype font, checking all internal tables for correctness. i have attached a copy of the .ttf file.",
        "label": 1
    },
    {
        "text": "angle units are not consistent hi devs, i've noticed that the angle units are not consistent throughout pdfbox. for instance, org.apache.pdfbox.pdmodel.pdpage.setrotation() needs a angle in degrees while org.apache.pdfbox.pdmodel.edit.pdpagecontentstream.settextrotation() needs an angle in radians... the javadoc does not specify which units are taken as arguments. it would save devs a bit of time to know that all angles are to be provided in degrees or radians. thanks and keep up the good work !! jy",
        "label": 11
    },
    {
        "text": "text extraction fails with type fonts text extraction fails with the attached file. it succeeds with acrobat reader, with pdf.js and with pdfbox 1.8. this is not a general type 3 problem. text extraction works with pdfbox-2959-reduced.pdf.",
        "label": 11
    },
    {
        "text": "pdoutlineitem can not use the function getdestination  to get the pdpagedestination  the getdestination() returns null. i found that ,if i want to get the destination,i must use the function getaction() to get the cosdictionary,then to get the destination array,then creat destination by my self. so the function getdestination() just use for a manual destination,this is trouble me!",
        "label": 1
    },
    {
        "text": "java awt geom noninvertibletransformexception  determinant is  i have this error trying to parse a specific pdf file: o.a.p.p.g.s.axialshadingcontext [axialshadingcontext.java:115] error - java.awt.geom.noninvertibletransformexception: determinant is -0.0  java.awt.geom.noninvertibletransformexception: determinant is -0.0         at java.awt.geom.affinetransform.createinverse(affinetransform.java:2668)         at org.apache.pdfbox.pdmodel.graphics.shading.axialshadingcontext.<init>(axialshadingcontext.java:110)         at org.apache.pdfbox.pdmodel.graphics.shading.axialshadingpaint.createcontext(axialshadingpaint.java:67)         at sun.java2d.pipe.alphapaintpipe.startsequence(alphapaintpipe.java:84)         at sun.java2d.pipe.aashapepipe.rendertiles(aashapepipe.java:168)         at sun.java2d.pipe.aashapepipe.renderpath(aashapepipe.java:159)         at sun.java2d.pipe.aashapepipe.fill(aashapepipe.java:68)         at sun.java2d.pipe.pixeltoparallelogramconverter.fill(pixeltoparallelogramconverter.java:164)         at sun.java2d.pipe.validatepipe.fill(validatepipe.java:160)         at sun.java2d.sungraphics2d.fill(sungraphics2d.java:2527)         at org.apache.pdfbox.rendering.pagedrawer.shadingfill(pagedrawer.java:921)         at org.apache.pdfbox.contentstream.operator.graphics.shadingfill.process(shadingfill.java:41)         at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:815)         at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:472)         at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:446)         at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149)         at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:189)         at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:208)         at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:139)",
        "label": 11
    },
    {
        "text": "illegalstateexception in ttfsubsetter hi encountered a rare exception with an empty ttf subset: ==> [1] caused by java.lang.illegalstateexception: subset is empty 1.: org.apache.fontbox.ttf.ttfsubsetter.writetostream(ttfsubsetter.java:921) 2.: org.apache.pdfbox.pdmodel.font.truetypeembedder.subset(truetypeembedder.java:304) 3.: org.apache.pdfbox.pdmodel.font.pdtype0font.subset(pdtype0font.java:162) 4.: org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1102) 5.: com.helger.pdflayout.pagelayoutpdf.renderto(pagelayoutpdf.java:276) unfortunately i don't know yet what was causing the problem, but i will provide you with more details on monday (if necessary). if there is nothing to subset - i think the call should simply be ignored??? or maybe this is a problem because of the \"uni\" name bug (in 2.0.0-rc2) i reopened lately?",
        "label": 1
    },
    {
        "text": "basic implementation of crypt filter i got an exception when trying to merge some documents which read \"unknown stream filter:cosname {crypt} \". i've looked around and it found this is a feature which was introduced in version 1.5 of the pdf spec. pdfbox doesn't have this filter implemented yet. this should be implemented per section 7.6.5 \"crypt filters\" of the pdf specification (for reference, i'm looking at version 1.7 of the spec). i only have one example pdf which requires this filter and it uses the default encryption (identity), so this will be the only type of crypt filter which will be implemented for now. since i don't have an example which has a filter \"name\", i will only be implementing the case where the default is used as i have no test case for name==identity. if the \"name\" is specified, it will throw an exception (currently it throws an exception for any crypt filter).",
        "label": 1
    },
    {
        "text": "drop loggingobject the current loggingobject base class breaks the \"composition over inheritance\" principle. a more standard logging pattern is to use a separate logger instance: private static final log log = logfactory.getlog(thisclass.class);",
        "label": 7
    },
    {
        "text": "optional content groups with same names can't have different visibility according to pdf specs, it is possible to create oc groups with the same name. their visibility should be determined using object references (object number and generation number). the current implementation of pdoptionalcontentproperties does not allow to create and check visibility of two different groups with the same name because all checks are done using group name, not group object key. provided pdf demonstrates this issue. the attached patch adds an ability to use pdoptionalcontentgroup as key to check and set group visibility.",
        "label": 11
    },
    {
        "text": "cosdocument and pdfmerger may not close all io resources if closing of one fails as observed on the users mailing list cosdocument.close and pdfmergerutility.mergedocuments might not close all io resources if closing of one of the resources fails",
        "label": 8
    },
    {
        "text": "image printed with colors inverted when printing a test pdf page, the colors of one embedded image has its colors inverted (black and white)",
        "label": 1
    },
    {
        "text": " patch  bullet character not rendered see attached file. in winansiencoding, any unused code greater than 040 maps to the bullet character. the attached patch takes that into account to render characters that don't use the standard encoding for bullet.",
        "label": 1
    },
    {
        "text": "stream parsing still incorrect if length value is wrong pdfbox-2016 did getunfilteredstream, can you also do getfilteredstream http://svn.us.apache.org/viewvc/pdfbox/trunk/pdfbox/src/main/java/org/apache/pdfbox/cos/cosstream.java?r1=1585781&r2=1585780&pathrev=1585781",
        "label": 11
    },
    {
        "text": "nullpointerexception when getting fields from a pdf file i am getting a nullpointerexception thrown from pdfield.java line 540. the problem is that the code calls cosarray.getobject on line 539, which can return a null. line 540 uses the returned value without first checking for null, thus throwing npe when the value is null. the following is the stack trace: java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.interactive.form.pdfield.getkids(pdfield.java:540) at org.apache.pdfbox.pdmodel.interactive.form.pdfieldfactory.isbutton(pdfieldfactory.java:159) at org.apache.pdfbox.pdmodel.interactive.form.pdfieldfactory.createfield(pdfieldfactory.java:68) at org.apache.pdfbox.pdmodel.interactive.form.pdacroform.getfields(pdacroform.java:203) ...",
        "label": 1
    },
    {
        "text": "illegalstateexception  pdfbox bug  encoding should not be null  this seems to be a follow-up of pdfbox-2489 (some of the files that had the old bug are now ok, but not this one): exception in thread \"main\" java.lang.illegalstateexception: pdfbox bug: encoding should not be null!  at org.apache.pdfbox.pdmodel.font.pdsimplefont.isfontsymbolic(pdsimplefont.java:205)  at org.apache.pdfbox.pdmodel.font.pdfont.issymbolic(pdfont.java:440)  at org.apache.pdfbox.pdmodel.font.pdsimplefont.readencoding(pdsimplefont.java:111)  at org.apache.pdfbox.pdmodel.font.pdtype1font.<init>(pdtype1font.java:228)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:65)",
        "label": 6
    },
    {
        "text": "font spacing [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1485049 originally submitted by nobody on 2006-05-09 14:29. in the last line of the drawstring method of org.pdfbox.pdmodel.font.pdtruetypefont.java, the locations are casted to int's. this produces undesireable results when displaying a pdf. removing the cast, produces more pleasant-looking font spacing.",
        "label": 7
    },
    {
        "text": "single radio button group has no children (continuation of https://issues.apache.org/jira/browse/pdfbox-2617) a group of radio-buttons is an object of the pdradiocollection class and each child of that group is an pdcheckbox object. however, if the group only contains one widget the getkids method of the pdradiocollection object returns null. there should be at least one child for any such group.",
        "label": 8
    },
    {
        "text": "pdtype1font  helvetica  encode getting nullpointerexception hi, i have been trying to revert to previous pdfbox-2.0.0 versions, which is why the error is from a previous build, but this is applicable to the latest (2.0.0-20150204.015951-1042) too. i am getting this error, which i was not getting a month ago. regards... error: java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.font.pdtype1font.encode(pdtype1font.java:309) [pdfbox-2.0.0-20150129.080600-1013.jar:2.0.0-snapshot] at org.apache.pdfbox.pdmodel.font.pdfont.encode(pdfont.java:267) [pdfbox-2.0.0-20150129.080600-1013.jar:2.0.0-snapshot] at org.apache.pdfbox.pdmodel.pdpagecontentstream.showtext(pdpagecontentstream.java:316) [pdfbox-2.0.0-20150129.080600-1013.jar:2.0.0-snapshot]",
        "label": 6
    },
    {
        "text": "spaces  numbers and some letters not display correctly hello, many characters in the attached pdf are displayed wrong as you can see in the result.png. especially numbers and spaces are not displayed correctly. sometimes i can see the numbers, sometimes not. i could not find out the reason yet. perhaps someone already had this problem and can help me with that?! to display the pdf i use the following code: pddocument document = parsedocument(file); list pages = document.getdocumentcatalog().getallpages(); pdpage page = (pdpage)pages.get(0); image pageimage = page.converttoimage(); imageicon imageicon = new imageicon(pageimage); documentpanel.add(new jlabel(imageicon)); the problem occurs when i convert the pdf to an image but also when i show it in a pdpagepanel. thank you very much marco siefert",
        "label": 1
    },
    {
        "text": "ascii85filter does not use or recognize the correct end of data terminator the ascii85filter and underlying stream implementations use a single tilde (~) as the terminator. the specified adobe ascii85 terminator sequence for both pdf and postscript is ~>.",
        "label": 11
    },
    {
        "text": "java util zip dataformatexception  incorrect header check after parsing the file from pdfbox-1606 with the \"old\" parser, and doing renderutil.converttoimage() i get this: 27.09.2013 16:56:06.685 error [main] org.apache.pdfbox.filter.flatefilter:134 - flatefilter: stop reading corrupt stream due to a dataformatexception 27.09.2013 16:56:06.691 error [main] org.apache.pdfbox.filter.flatefilter:134 - flatefilter: stop reading corrupt stream due to a dataformatexception 27.09.2013 16:56:06.692 error [main] org.apache.pdfbox.filter.flatefilter:134 - flatefilter: stop reading corrupt stream due to a dataformatexception 27.09.2013 16:56:06.692 error [main] org.apache.pdfbox.filter.flatefilter:134 - flatefilter: stop reading corrupt stream due to a dataformatexception ioexception for file pdfbox-1606.pdf 27.09.2013 16:56:06.693 error [main] org.apache.pdfbox.filter.flatefilter:134 - flatefilter: stop reading corrupt stream due to a dataformatexception java.io.ioexception 27.09.2013 16:56:06.693 error [main] org.apache.pdfbox.filter.flatefilter:134 - flatefilter: stop reading corrupt stream due to a dataformatexception 27.09.2013 16:56:06.693 error [main] org.apache.pdfbox.filter.flatefilter:134 - flatefilter: stop reading corrupt stream due to a dataformatexception 27.09.2013 16:56:06.694 error [main] org.apache.pdfbox.filter.flatefilter:134 - flatefilter: stop reading corrupt stream due to a dataformatexception 27.09.2013 16:56:06.694 error [main] org.apache.pdfbox.filter.flatefilter:134 - flatefilter: stop reading corrupt stream due to a dataformatexception 27.09.2013 16:56:06.695 error [main] org.apache.pdfbox.filter.flatefilter:134 - flatefilter: stop reading corrupt stream due to a dataformatexception at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:136) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:317) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:237) at org.apache.pdfbox.cos.cosstream.getunfilteredstream(cosstream.java:170) at org.apache.pdfbox.pdfparser.pdfstreamparser.<init>(pdfstreamparser.java:108) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:219) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:199) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:153) at org.apache.pdfbox.util.renderutil.renderpage(renderutil.java:221) at org.apache.pdfbox.util.renderutil.converttoimage(renderutil.java:185) at org.apache.pdfbox.util.renderutil.converttoimage(renderutil.java:143) at pdfboxpageimageextraction.extractimages.dopdf(extractimages.java:162) at pdfboxpageimageextraction.extractimages.main(extractimages.java:98) caused by: java.util.zip.dataformatexception: incorrect header check at java.util.zip.inflater.inflatebytes(native method) at java.util.zip.inflater.inflate(inflater.java:259) at java.util.zip.inflater.inflate(inflater.java:280) at org.apache.pdfbox.filter.flatefilter.decompress(flatefilter.java:167) at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:96) ... 13 more it does not happen when i use the nonsequential parser. i don't really care much about this, except that i can't use the file for tests because these use the \"old\" parser. i therefore suggest: 1) @deprecate the load() call 2) change testimageioutils.java so that it uses the loadnonseq call",
        "label": 1
    },
    {
        "text": "java inaccessibleobjectexception java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.1.0-snapshot.jar pdftoimage expected.pdf exception in thread \"main\" java.lang.reflect.inaccessibleobjectexception: unable to make member of class com.sun.imageio.plugins.jpeg.jpegimagereader accessible: module java.desktop does not export com.sun.imageio.plugins.jpeg to unnamed module @72d1ad2e at sun.reflect.reflection.throwinaccessibleobjectexception(java.base@9-ea/reflection.java:420) at java.lang.reflect.accessibleobject.checkcansetaccessible(java.base@9-ea/accessibleobject.java:174) at java.lang.reflect.field.checkcansetaccessible(java.base@9-ea/field.java:170) at java.lang.reflect.field.setaccessible(java.base@9-ea/field.java:164) at org.apache.pdfbox.filter.dctfilter.decode(dctfilter.java:119)",
        "label": 11
    },
    {
        "text": "fractional font sizes are reported scaled non-integer font sizes are apparently reported by pdfbox scaled by a factor of 10. for example, a font size of \"32.1\" comes out as 321.",
        "label": 11
    },
    {
        "text": "pdf not converted to image converting the enclosed test.pdf to an image gives me a white page. acrobat reader shows the pdf without a problem. this is the output of pdftoimage: m\u00f5r 31, 2015 10:09:09 am org.apache.pdfbox.util.pdfstreamengine processoperator information: unsupported/disabled operation: bmc m\u00f5r 31, 2015 10:09:09 am org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap getrgbimage schwerwiegend: something went wrong ... the pixelmap doesn't contain any data. m\u00f5r 31, 2015 10:09:09 am org.apache.pdfbox.util.operator.pagedrawer.invoke process warnung: getrgbimage returned null m\u00f5r 31, 2015 10:09:09 am org.apache.pdfbox.util.pdfstreamengine processoperator information: unsupported/disabled operation: emc m\u00f5r 31, 2015 10:09:09 am org.apache.pdfbox.util.pdfstreamengine processoperator information: unsupported/disabled operation: bdc m\u00f5r 31, 2015 10:09:09 am org.apache.pdfbox.util.pdfimagewriter writeimage information: writing: test1.jpg",
        "label": 11
    },
    {
        "text": "font getwidths empty for an embedded type0 font `getwidths` returns an empty array for the font identified as ddbado+calibri on the attached pdf. is this expected behaviour? thanks. manuel aristar\u00e1n",
        "label": 1
    },
    {
        "text": "pdfield getfullyqualifiedname  returns name adding suffix ' null' we have several pdf files where each one contains one pdf form with their own fields. we need to read all pdf fields and list them into a txt file. the problem comes when a pdf form has duplicated field names, so the field.getfullyqualifiedname() returns the name of the field wrong, adding '.null' at the final of field's names. -->situation: 1) pdf file containing a pdf form 2) the pdf form contains lot of fields, some of their field's names are duplicated, like for example 'applicant.city'. 3) when i try to list all of field's names, duplicate field's names comes with a suffix '.null' --> this only happends on duplicated field's names. ---------------------------------------------------------------------------------------------- -->example: 1) pdf form with 4 fields whos names are: 'applicant.name', 'applicant.phone', 'applicant.ssn', 'applicant.name'. 2)after running the code shown bellow, the result list is: 'applicant.name.null', 'applicant.phone', 'applicant.ssn', 'applicant.name.null'. ---------------------------------------------------------------------------------------------- -->attach the code for listing all pdf form field's names: public static set<string> printfields( pddocument doc ) throws ioexception { pddocumentcatalog doccatalog = doc.getdocumentcatalog(); pdacroform acroform = doccatalog.getacroform(); list fields = acroform.getfields(); iterator fieldsiter = fields.iterator(); set<string> fieldset = new hashset<string>(); while ( fieldsiter.hasnext() ) { pdfield field = (pdfield)fieldsiter.next(); // string fieldfullname = processfield(field); fieldset.addall( processfield( field ) ); } return fieldset; } private static set<string> processfield( pdfield field ) throws ioexception { list kids = field.getkids(); set<string> result = new hashset<string>(); if( kids != null ){ iterator kidsiter = kids.iterator(); while ( kidsiter.hasnext() ){ object pdfobj = kidsiter.next(); if( pdfobj instanceof pdfield ) { pdfield kid = (pdfield)pdfobj; result.addall( processfield( kid ) ); } } }else { //system.out.println( \"field.getfullyqualifiedname(): \" + field.getfullyqualifiedname() ); result.add( field.getfullyqualifiedname() ); } return result; } -------------------------------------------------------------------------------- field.getfullyqualifiedname() is returning duplicated field's names with a prefix '.null'. thanks in advance.",
        "label": 1
    },
    {
        "text": "pdfbox prints landscape documents as portrait when we have a pdf document that has landscape orientation and try to print it using pdfbox api itp prints in portrait orientation and crops ale right part of the document.",
        "label": 1
    },
    {
        "text": "more specific tifffaxdecoder exceptions ",
        "label": 11
    },
    {
        "text": "regression in text extraction between and looks like a character mapping issue crept in some time between 1.8.5 and 1.8.6 on this file? with both seq and nonseq parsers, the correct text was extracted via extracttext in 1.8.5. in 1.8.6, java -jar pdfbox-app-1.8.6.jar extracttext yields text starting with: 7>pflk>i 9>nh ;bnrf@b =%;% .bm>npjbkp lc peb 3kpbnfln 9>@fcf@ -l>op ;@fbk@b >ka 5b>nkfkd -bkpbn :bob>n@e 9nlgb@p ;qjj>nt .b@bj?bn (&&* \"&++&,-+\u00e6$( #&+-&%+$-& !).&)-*+\u00e6&,",
        "label": 1
    },
    {
        "text": " patch  parser for type fonts this patch adds a parser for type 1 fonts to fontbox and makes use of it in pdfbox for rendering type 1 glyphs. this should fix various issues with the jvm crashing and rendering fonts incorrectly. it was necessary to modify type1charstringparser to handle the `callothersubr` command and correctly handle subroutines. likewise, type1charstring was modified to support \"flex\". this patch does not remove the awt fallback for non-embedded and standard 14 fonts because an entirely new fallback system is needed and suitable fonts will need to be shipped as part of pdfbox. this needs to be discussed on the mailing list and/or in follow-on issue. note: to keep this patch small i have not replaced any of the existing ad-hoc type 1 parsing code in pdtype1font and preflight. those classes retain their original code which can be replaced in subsequent patches/refactoring. i can open follow-on issues for these. ~~~ as well as the patch, the these files were added: + /pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/font/type1glyph2d.java + /fontbox/src/main/java/org/apache/fontbox/encoding/customencoding.java + /fontbox/src/main/java/org/apache/fontbox/type1/token.java + /fontbox/src/main/java/org/apache/fontbox/type1/type1charstringreader.java + /fontbox/src/main/java/org/apache/fontbox/type1/type1font.java + /fontbox/src/main/java/org/apache/fontbox/type1/type1lexer.java + /fontbox/src/main/java/org/apache/fontbox/type1/type1mapping.java + /fontbox/src/main/java/org/apache/fontbox/type1/type1parser.java and this file was removed: /pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/font/cffglyph2d.java",
        "label": 1
    },
    {
        "text": " patch  indexoutofboundsexception reading embedded opentype font java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage opentype.pdf pdftoimage failed with the following exception: java.lang.indexoutofboundsexception: index: 2, size: 2 at java.util.sublist.rangecheck(abstractlist.java:755) at java.util.sublist.get(abstractlist.java:639) at java.util.collections$synchronizedlist.get(collections.java:2477) at org.apache.fontbox.cff.type2charstring.drawcurve(type2charstring.java:356) 7zip attachment",
        "label": 6
    },
    {
        "text": "softmask needs consider colormodel of input image i'm currently following a rendering problem of a poster. while doing so i found a first lead, that resulted in a first patch. the pdf i'll attach contains an image with a mask applied to it. if rendering works correctly, only a single green \"ok\" should be visible. with pdfbox 2.0.3 and head i get a white sheet. i tracked this down into softmask.java. there a source raster is sampled by querying the pixel data via getpixel(int,int,int[]). this will only work correctly for rgba input sources. in my case the input image is an rgb image and getpixel does not overwrite the initial 0 value in the rgba value array. the attached patch uses the colormodel corresponding to the source raster to convert into the components. this correctly returns the alpha value of an rgb image as 255.",
        "label": 11
    },
    {
        "text": "classcastexception in pdannotationlink getaction  caused by: java.lang.classcastexception: org.apache.pdfbox.cos.cosstring cannot be cast to org.apache.pdfbox.cos.cosdictionary  at org.apache.pdfbox.pdmodel.interactive.annotation.pdannotationlink.getaction(pdannotationlink.java:88) seva alekseyev raised this issue on tika-2121. i confirmed that it happens with pdfbox 2.0.3. i haven't confirmed trunk yet.",
        "label": 11
    },
    {
        "text": "tab characters in pdtextfield cause error when using  flatten  pdf form gets filled in, then call i call .flatten(fields, true) which last i knew was undocumented, but anyway i needed the refreshappearences for pdfviewers that don't support acroforms like pdf.js if a tab character some how gets entered into the pdtextfield it chokes. i am worried other somewhat common characters might have similar issues, but haven't experimented so far. using rc2 of pdfbox and fontbox. and fonts in pdfform elements were all set to arial. relavent stacktrace: u+0009 is not available in this font's encoding. stacktrace follows: java.lang.illegalargumentexception: u+0009 is not available in this font's encoding at org.apache.pdfbox.pdmodel.font.pdtruetypefont.encode(pdtruetypefont.java:358) at org.apache.pdfbox.pdmodel.font.pdfont.encode(pdfont.java:283) at org.apache.pdfbox.pdmodel.font.pdfont.getstringwidth(pdfont.java:312) at org.apache.pdfbox.pdmodel.interactive.form.plaintextformatter.format(plaintextformatter.java:193) at org.apache.pdfbox.pdmodel.interactive.form.appearancegeneratorhelper.insertgeneratedappearance(appearancegeneratorhelper.java:373) at org.apache.pdfbox.pdmodel.interactive.form.appearancegeneratorhelper.setappearancecontent(appearancegeneratorhelper.java:237) at org.apache.pdfbox.pdmodel.interactive.form.appearancegeneratorhelper.setappearancevalue(appearancegeneratorhelper.java:144) at org.apache.pdfbox.pdmodel.interactive.form.pdtextfield.constructappearances(pdtextfield.java:263) at org.apache.pdfbox.pdmodel.interactive.form.pdacroform.refreshappearances(pdacroform.java:287) at org.apache.pdfbox.pdmodel.interactive.form.pdacroform.flatten(pdacroform.java:211)",
        "label": 8
    },
    {
        "text": "support smask  s  alpha the smask feature /s /alpha is either not implemented or not working at all. i have two files that are wrongly rendered with the current software, and correctly rendered when the feature is disabled (!). as a first step, i am disabling it for now and attach test files. johns proposed patch has also disabled the feature, so i think we can agree on that.",
        "label": 11
    },
    {
        "text": "overlaypdf logic should be moved into a library class we're finding that the overlaypdf command line utility fixes problems observed when using the overlay class. however, with the overlay class we can operate it as a library call, but the overlaypdf command line utility can't be, particularly given we work with pddocuments. i've just had someone copy the entire overlaypdf class into one of our own and modify it to accept pre-loaded pddocuments instead of filenames. it would be far more constructive to extract the core logic into a library class and have the cli class drive it. if we had a proper clone method it would be good to create a completely new pddocument to serve as the new returned document instead of mutating the inputs too...",
        "label": 1
    },
    {
        "text": "cannot read jbig2 image  jbig2 imageio is not installed error - error while creating a xobject org.apache.pdfbox.filter.missingimagereaderexception: cannot read jbig2 image: jbig2-imageio is not installed at org.apache.pdfbox.filter.jbig2filter.decode(jbig2filter.java:70) at org.apache.pdfbox.filter.filter.decode(filter.java:58) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:365) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:278) at org.apache.pdfbox.cos.cosstream.getdecoderesult(cosstream.java:235) at org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject.<init>(pdimagexobject.java:94) at org.apache.pdfbox.pdmodel.graphics.pdxobject.createxobject(pdxobject.java:65) at org.apache.pdfbox.pdmodel.pdresources.getxobjects(pdresources.java:247) at org.apache.pdfbox.util.pdfstreamengine.getxobjects(pdfstreamengine.java:658) at org.apache.pdfbox.util.operator.invoke.process(invoke.java:53) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:608) at org.coin.util.pdf.pdfbox.textlocation.processoperator(textlocation.java:277) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:311) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:266) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:248) at org.coin.util.pdf.pdfbox.textlocation.locatetext(textlocation.java:193) at org.coin.util.pdf.pdfbox.textlocation.contains(textlocation.java:70) at org.coin.util.pdf.pdfbox.textlocation.contains(textlocation.java:52) at mt.paraph.folder.util.referenceinfo.containsreferencetag(referenceinfo.java:204) at mt.paraph.folder.paraphfolder.hasrefreplacementbychronoseal(paraphfolder.java:3525)",
        "label": 11
    },
    {
        "text": "expected a long type at offset  instead got 'xref' this reads as a duplicate of pdfbox-2441, pdfbox-3179 and several others marked as resolved in 2.0.0 however this bug is reproducible in pdfbox 2.0.0 as well as pdfbox 2.0.7. the attached pdf file is parsable by chrome (pdfium), mozilla (pdf.js), edge, windows 10 reader and adobe acrobat but fails using pdfbox 2.0.0 and pdfbox 2.0.7 with the following error. exception in thread \"main\" java.io.ioexception: error: expected a long type at offset 52152, instead got 'xref'         at org.apache.pdfbox.pdfparser.baseparser.readlong(baseparser.java:1358)         at org.apache.pdfbox.pdfparser.baseparser.readobjectnumber(baseparser.java:1286)         at org.apache.pdfbox.pdfparser.cosparser.parsefileobject(cosparser.java:760)         at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:742)         at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:673)         at org.apache.pdfbox.pdfparser.cosparser.parsedictobjects(cosparser.java:633)         at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:241)         at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:276)         at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1011)         at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:949)         at org.apache.pdfbox.tools.printpdf.main(printpdf.java:140)         at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:72) caused by: java.lang.numberformatexception: for input string: \"xref\"         at java.lang.numberformatexception.forinputstring(unknown source)         at java.lang.long.parselong(unknown source)         at java.lang.long.parselong(unknown source)         at org.apache.pdfbox.pdfparser.baseparser.readlong(baseparser.java:1353)         ... 11 more we do not generate this pdf file so we are unaware of the origin but the creator has given permission to share this file publicly for troubleshooting purposes. we can ask any questions to the creator upon request.",
        "label": 11
    },
    {
        "text": "pdfbox extractext problems with  \u00aa  pdfbox have problems to detect \u00aa in some pdf's. examples: i have in my pdf: 1\u00aa when i extract text: p i have in my pdf: 2\u00aa when i extract text: 22 i have in my pdf: 3\u00aa when i extract text: 32 and there are a lot of more examples related with \"\u00aa\"",
        "label": 12
    },
    {
        "text": "are there any option to read bookmarks rather than table of contents  i have noticed that getdocumentcatalog getdocumentoutline  reads only table of contents not bookmarks  are there any option to read bookmarks rather than table of contents. i have noticed that getdocumentcatalog().getdocumentoutline() reads only table of contents not bookmarks.",
        "label": 11
    },
    {
        "text": "negativearraysizeexception in horizontalmetricstable read i get this exception with the attached file: java.lang.negativearraysizeexception  at org.apache.fontbox.ttf.horizontalmetricstable.read(horizontalmetricstable.java:63)  at org.apache.fontbox.ttf.truetypefont.readtable(truetypefont.java:286)  at org.apache.fontbox.ttf.ttfparser.parsetables(ttfparser.java:146)  at org.apache.fontbox.ttf.ttfparser.parse(ttfparser.java:122)  at org.apache.fontbox.ttf.ttfparser.parse(ttfparser.java:96)  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.<init>(pdtruetypefont.java:108)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:81)  at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:171)  at org.apache.pdfbox.util.pdfstreamengine.getfonts(pdfstreamengine.java:556)",
        "label": 6
    },
    {
        "text": "text size renders wrong file from pdfbox-1421 java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage ha.pdf file from pdfbox-679 java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage zzz.pdf",
        "label": 6
    },
    {
        "text": "pdfrenderer renderimagewithdpi exception with certain pdfs i use the pdfrender in my application and noticed that the renderimagewithdpi method throws an exception with certain pdf files. the bug can be reproduced with the pdfbox-app command below. the medibank.pdf file is available via my google drive account: https://drive.google.com/file/d/0b7b7_uxpgidgb2djytndnmvtvta/view?usp=sharing $ java -jar pdfbox-app-2.0.0-20150819.113526-1604.jar pdftoimage medibank.pdf aug 20, 2015 3:53:43 pm org.apache.pdfbox.rendering.ttfglyph2d getpathforgid warning: no glyph for 119 (cid 0077) in font glyphlessfont exception in thread \"main\" java.io.eofexception: premature eof at org.apache.fontbox.ttf.ttfdatastream.readunsignedbyte(ttfdatastream.java:117) at org.apache.fontbox.ttf.glyfsimpledescript.readflags(glyfsimpledescript.java:196) at org.apache.fontbox.ttf.glyfsimpledescript.<init>(glyfsimpledescript.java:77) at org.apache.fontbox.ttf.glyphdata.initdata(glyphdata.java:58) at org.apache.fontbox.ttf.glyphtable.getglyph(glyphtable.java:161) at org.apache.pdfbox.pdmodel.font.pdcidfonttype2.getpath(pdcidfonttype2.java:418) at org.apache.pdfbox.pdmodel.font.pdtype0font.getpath(pdtype0font.java:486) at org.apache.pdfbox.rendering.ttfglyph2d.getpathforgid(ttfglyph2d.java:141) at org.apache.pdfbox.rendering.ttfglyph2d.getpathforcharactercode(ttfglyph2d.java:93) at org.apache.pdfbox.rendering.pagedrawer.drawglyph2d(pagedrawer.java:343) at org.apache.pdfbox.rendering.pagedrawer.showfontglyph(pagedrawer.java:324) at org.apache.pdfbox.contentstream.pdfstreamengine.showglyph(pdfstreamengine.java:727) at org.apache.pdfbox.contentstream.pdfstreamengine.showtext(pdfstreamengine.java:684) at org.apache.pdfbox.contentstream.pdfstreamengine.showtextstrings(pdfstreamengine.java:592) at org.apache.pdfbox.contentstream.operator.text.showtextadjusted.process(showtextadjusted.java:38) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:798) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:460) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:437) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:148) at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:179) at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:205) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:136) at org.apache.pdfbox.rendering.pdfrenderer.renderimagewithdpi(pdfrenderer.java:95) at org.apache.pdfbox.tools.pdftoimage.main(pdftoimage.java:236) at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:89)",
        "label": 11
    },
    {
        "text": "add method to subset fonts for document pre save i have a custom coswriter which compresses all streams and runs a sha1 sum over each object, only writing one instance of each object with the same sha1 sum. this really helps compress pdfs. i use this by calling mycustomcoswriter.write(pddocument); the trouble is that i have no way of calling the font subsetting that happens in pddocument.save(). could we have a method to perform that font subsetting manually?",
        "label": 6
    },
    {
        "text": "cidset should be pdf a 2b compatible from esteban nicolas ruiz in the user mailing list: i have created pdf/a-2b document with pdfbox and i have found that the font subsetting provided by pdfbox doesn't match the following requirement from the specification: specification: iso 19005-2:2011, clause: 6.2.11.4, test number: 4 if the fontdescriptor dictionary of an embedded cid font contains a cidset stream, then it shall identify all cids which are present in the font program, regardless of whether a cid in the font is referenced or used by the pdf or not. that is: some cids which are in the cidtogidmap don't appear in the cidset. maybe it is a bug or you can add an option to generate the cidset to be consistent with the cidtogidmap. additional details (including a sample pdf file) here: https://github.com/verapdf/verapdf-library/issues/907",
        "label": 11
    },
    {
        "text": "correct javadoc comment found a strange class referenced in the https://pdfbox.apache.org/docs/2.0.13/javadocs/org/apache/pdfbox/preflight/validator_a1b.html   >this class is a simple main class used to check the validity of a pdf file. usage : java >net.awl.edoc.pdfa.validator <file path>   should be: this class is a simple main class used to check the validity of a pdf file. usage : java org.apache.pdfbox.preflight.validator_a1b  <file path>        ",
        "label": 11
    },
    {
        "text": "npe on org apache pdfbox pdmodel font pdtype0font readencoding i got a nullpointerexception on file attached. the file can see using pdf reader (i tested using chrome): java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.font.pdtype0font.readencoding(pdtype0font.java:208)  at org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:129)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:83)  at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:143)  at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60)  at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:838)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:495)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:469)  at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150)  at org.apache.pdfbox.text.legacypdfstreamengine.processpage(legacypdfstreamengine.java:139)  at org.apache.pdfbox.text.pdftextstripper.processpage(pdftextstripper.java:391)  at org.apache.tika.parser.pdf.pdf2xhtml.processpage(pdf2xhtml.java:147)  at org.apache.pdfbox.text.pdftextstripper.processpages(pdftextstripper.java:319)  at org.apache.pdfbox.text.pdftextstripper.writetext(pdftextstripper.java:266)  at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:117)  at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:159)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280)",
        "label": 11
    },
    {
        "text": "unable to find resource 'org apache pdfbox jempbox pom 0' in repository maven central  http repo1 maven org maven2  the pom.xml file of jempbox is missing in the central repository. it is named \"pom.xml\" there but it should have been named \"jempbox-1.0.0.pom\"",
        "label": 7
    },
    {
        "text": "indexoutofboundsexception when reading from inputstreamsource fuzzing pdf loading with jqf triggered an indexoutofboundsexception. java.lang.indexoutofboundsexception  at java.io.pushbackinputstream.read(pushbackinputstream.java:170)  at org.apache.pdfbox.pdfparser.inputstreamsource.read(inputstreamsource.java:62)  at org.apache.pdfbox.pdfparser.inputstreamsource.readfully(inputstreamsource.java:113)  at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:907)  at org.apache.pdfbox.pdfparser.baseparser.parsecosarray(baseparser.java:631)  at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:874)  at org.apache.pdfbox.pdfparser.pdfobjectstreamparser.parse(pdfobjectstreamparser.java:84)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectstream(cosparser.java:994)  at org.apache.pdfbox.pdfparser.cosparser.retrievecosdictionary(cosparser.java:2277)  at org.apache.pdfbox.pdfparser.cosparser.searchfortraileritems(cosparser.java:2235)  at org.apache.pdfbox.pdfparser.cosparser.rebuildtrailer(cosparser.java:2216)  at org.apache.pdfbox.pdfparser.cosparser.retrievetrailer(cosparser.java:279)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:171)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:220)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1160)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1057)     ... the code used for fuzzing is pddocument.load(inputstream)",
        "label": 1
    },
    {
        "text": "renaming a field and not able to set value to the saved pdf document   i will explain what i want to do. 1. i have a pdf document with fields and let us call this 'source_original.pdf'. the field names in this pdf document have to be renamed and stored as 'source_target.pdf'. i then have to set/change the values of form-fields in 'source_target.pdf'. the issue i am facing is given below: 1. i renamed the form fields in 'source_original.pdf\" using the code given in my earlier mail (below) and saved it as 'source_target.pdf'. 2. i checked the form fields in 'source_target.pdf\" and form-fields were renamed correctly. 3. however when i tried to set/change values of form-fields in 'source_target.pdf' using pdfbox code, i was not able to do so. i used itext to set/change values of form-fields in 'source_target.pdf' and was successful. but we want to use only pdfbox. to summarize - we are not able to set/change values of form fields of a pdf document whose form-fields have been renamed. there is no issue if the form-fields are renamed manually using adobe acrobat 9. the issue is only when the form-fields are renamed using pdfbox option - setpartialname(newfieldname); > only to be sure, changing values in 'source_original.pdf' works with the same code you use to > manipulate 'source_target.pdf'?? yes i have attached the 2 files - \"source_original.pdf' and 'source_target.pdf', ----- code try { pddocument pdfdocument = pddocument.load(pdfsource); try { if (pdfdocument.isencrypted()) { pdfdocument.decrypt(\"\"); } pddocumentcatalog doccatalog = pdfdocument.getdocumentcatalog(); pdacroform acroform = doccatalog.getacroform(); if (acroform != null) { list pdffields = acroform.getfields(); if (pdffields != null) { pdfield pdffield; for (int i = 0; i < pdffields.size(); i++) { pdffield = (pdfield) pdffields.get; string fieldname = pdffield.getpartialname(); if( pdffieldnames.containskey(fieldname) ) { string newfieldname = (string) pdffieldnames.get(fieldname); pdffield.setpartialname(newfieldname); } } pdfdocument.save(pdfoutput); } else { return \"no acro form fields found in pdf document \" + pdfsource + \"!\"; } } else { return \"pdf document \" + pdfsource + \" not able to access!\"; } } catch (exception e) { return \"pdf document \" + pdfsource + \" is encrypted! cannot process.\"; } pdfdocument.close(); } catch (exception e) { return \"pdf document \" + pdfsource + \" cannot be found!\"; }",
        "label": 1
    },
    {
        "text": "text corruption i use pdfbox 1.8.8 and try to add new text to existing pdf file. the problem is that text added by me is looking compressed for this specific pdf original pdf (i think this file is source of problem) (it is working for other pdfs). pdfbox generated file image of problem with explanation it was not shown in all originally but i fixed problem with this command (set font display mode) content.appendrawcommands(\"0 tr \");   i was working with pdf matrix and checked almost everything ... and do not see way how may i fix the problem... content.settextmatrix(1, 0, 0, 1, 0, 0); questions: 1) why pdfbox not ignore page font settings and use default options of font on page? 2) what mode was used in my pdf to archive such kind transformation how i may fix problem to show font correctly? private static void writepdfboxstamp(pddocument document, int page,         float topleftx, float toplefty, float width, float height,         string text, float  itemfontsize, int[] color, int rotation) throws ioexception {     pdpage pdfpage = (pdpage) document.getdocumentcatalog().getallpages().get(page);     pdpagecontentstream content = new pdpagecontentstream(document, pdfpage, true, true);     // cosdictionary pagefonts = pdfpage.getresources().getcosdictionary();     //border draw     float linewidth = 2;     float bottomleftx = topleftx;     float bottomlefty = toplefty - height;     float toprightx = topleftx + width;     float toprighty = toplefty;     float radius = 10;     content.setlinewidth(linewidth);     content.setstrokingcolor(new color(color[0], color[1], color[2]));     content.setnonstrokingcolor(new color(color[0], color[1], color[2]));     pdfont font = pdtype1font.helvetica_bold;     int fontsize = (int) itemfontsize;     float linesheight = font.getfontdescriptor().getfontboundingbox()             .getheight()             / 1000 * fontsize;     float txtlinewidth = font.getstringwidth(text)             / 1000 * fontsize;     content.setfont(font, fontsize);     content.begintext();     content.setfont(font, fontsize);     float  postextx = topleftx + (width-txtlinewidth)/2;     float  postexty = toplefty  - height/2 - linesheight/2 + linewidth;     if (rotation > 0) {         int  step = 0;         // clockwise rotation         if (rotation == 90) {             step = 6;             postextx = topleftx + (width + linesheight)/2 - linewidth;             postexty = toplefty - (height + txtlinewidth)/2;         }         if (rotation == 270) {             step = -6;             postextx = topleftx + (width - linesheight/2)/2;             postexty = toplefty - (height - txtlinewidth)/2;         }         content.settextrotation(-step*math.pi*0.25, postextx, postexty);     } else {         content.movetextpositionbyamount(postextx,postexty);     }     content.appendrawcommands(\"0 tr \"); //set normal text procession     content.drawstring(text);     content.endtext();     content.stroke();     content.close(); }",
        "label": 1
    },
    {
        "text": "define the behaviour of the streamvalidationhelper define the behaviour of the streamvalidationhelper when the cosstream provided by the pddocument.getdocument().getobject() is missing from the xref table. currently, control on stream is done except for the length validation because we are using the offset provided by the xreftable. the way to check the stream length was developed at the beginning of the preflight project. maybe there are a better way using the pdfbox object to process it now or perhaps no control must be done if the object is missing from the xref table",
        "label": 3
    },
    {
        "text": "suggestion for log4j xml example inside preflight source as posted by roberto nibali to the mailing list: i recently ran some tests using the preflight core, and wondered about the following message: java -jar preflight-app/target/preflight-app-2.0.0-snapshot.jar xml batch ./opensource/pdftests/ log4j:warn no appenders could be found for logger (org.apache.pdfbox.pdfparser.cosparser). log4j:warn please initialize the log4j system properly. log4j:warn see http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info. the online pdfbox faq (kind of) told me how to solve this. however, using the example log4j.xml from pdfbox yields the following: java -dlog4j.configuration=file:./preflight/src/test/resources/log4j.xml -jar preflight-app/target/preflight-app-2.0.0-snapshot.jar xml batch ./opensource/pdftests/ log4j:error no appender named [console] could be found. log4j:error no appender named [rolling-file] could be found. my suggestion is to replace it with this for starters: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <!doctype log4j:configuration system \"log4j.dtd\"> <log4j:configuration debug=\"true\" xmlns:log4j='http://jakarta.apache.org/log4j/'>         <appender name=\"console\" class=\"org.apache.log4j.consoleappender\">             <layout class=\"org.apache.log4j.patternlayout\">                 <param name=\"conversionpattern\" value=\"%d{yyyy-mm-dd hh:mm:ss} %-5p %c{1}:%l - %m%n\" />             </layout>         </appender>         <root>                 <level value=\"debug\" />                 <appender-ref ref=\"console\" />         </root> </log4j:configuration> additionally, the faq entries should be updated with a correct example regarding the 'java -jar ...\" case.",
        "label": 11
    },
    {
        "text": "pdfont getstringwidth results in stackoverflow when loading a true type font and calling getstringwidth(\"\u00e9\") will result in a stackoverflow. calling the method with a 'regular' character is ok. example code pddocument doc = new pddocument(); // load a font which is in pdfbox pdtruetypefont font = pdtruetypefont.loadttf(doc, getclass().getresourceasstream(\"/org/apache/pdfbox/resources/ttf/liberationsans-regular.ttf\")); font.getstringwidth(\"\u00e9\u00e9\");",
        "label": 6
    },
    {
        "text": "wrong appearance generation for rotated acroforms fields when filling a pdf field that is rotated the resulting generated pdf has the correct format. but when you generate an image of the pdf the image has the text in those rotated fields as not rotated. i have tried a variety of templates and they all do the same thing: view the preview of the pdf and see unrotated text. open the pdf and see the correctly rotated text. note that i generate the same pdf using itext 5.5.9 and the preview is correct, the text is correctly rotated. i'm basically bouncing back and forth between itext and pdfbox trying to find a working solution. if it makes any difference i'm using an fdf file to fill with itext and an xfdf file for pdfbox because i can't figure out how to load an fdf in 2.0.1.",
        "label": 8
    },
    {
        "text": "fontbox's ttfdatastream doesn't set timezone in readinternationaldate ttfdatastream doesn't set the timezone for the calendar. gregoriancalendar defaults to the system's timezone. this means that people in different timezones will get slightly different dates. (tika-1325). one ttf spec (https://developer.apple.com/fonts/ttrefman/rm06/chap6.html) doesn't specify the timezone, but my guess would be utc...except that it is apple, so maybe it's cupertino.",
        "label": 11
    },
    {
        "text": "illegalargumentexception  root cannot be null with truncated file   exception in thread \"main\" java.lang.illegalargumentexception: root cannot be null         at org.apache.pdfbox.pdmodel.pdpagetree.<init>(pdpagetree.java:75)         at org.apache.pdfbox.pdmodel.pddocumentcatalog.getpages(pddocumentcatalog.java:129) this was ok with 2.0.6. tim allison please move that file to the \"truncated\" subdir.",
        "label": 1
    },
    {
        "text": "improve textposition isdiacritic and icu4jimpl normalizediac performance character.gettype with ctext.charat(0) and index range checks are invoked unnecessarily three times instead of only one time. current 1.6.0 implementation: public boolean isdiacritic() { string ctext = this.getcharacter(); return (ctext.length() == 1 && (character.gettype(ctext.charat(0)) == character.non_spacing_mark || character.gettype(ctext.charat(0)) == character.modifier_symbol || character.gettype(ctext.charat(0)) == character.modifier_letter)); } please use something like this: public boolean isdiacritic() { final string ctext = this.getcharacter(); if (ctext.length() != 1) return false; final int type = character.gettype(ctext.charat(0)); return (type == character.non_spacing_mark || type == character.modifier_symbol || type == character.modifier_letter); } check the icu4jimpl.normalizediac method also",
        "label": 1
    },
    {
        "text": "truetype glyphs render incorrectly i've done a extensive testing of pdfbox under the new java 7, update 1 & update 2 releases, and am noticing severe image quality issues when converting a pdf to an image. attached is the same pdf turned converted to an image under java 6, then again with java 7 with the same code. the java 7 version looks pretty bad. this is with jdk 1.7 update 1 & 2 (for solaris x64, running headless, and os x running java 7 preview update 2 with default with no addition vm args to the default java command). i've also tested against the latest code in svn (the images below are from the most current version). the good image below is from a recent version of the jdk 1.6 (and it has always looked good on at least jdk1.5+). to test, i used code like this: import java.awt.image.bufferedimage; import java.io.file; import java.io.ioexception; import javax.imageio.imageio; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.pdpage; public final class pdftoimagetest {   public static bufferedimage tobufferedimage(final string pdffile, final int resolution)     throws ioexception {     pddocument document = null;     try {       document = pddocument.load(pdffile);       final pdpage page = (pdpage) document.getdocumentcatalog().getallpages().get(0);       final bufferedimage result = page.converttoimage(bufferedimage.type_int_argb, resolution);       return result;     } finally {       if (document != null) {         document.close();       }     }   }   public static void main (string[] args) throws ioexception {     imageio.write(tobufferedimage(args[0], 108), \"png\", new file(args[1]));   } }",
        "label": 11
    },
    {
        "text": "checkout fails on passwordsample 128bit pdf because of virus scanner i wanted to checkout the current pdfbox snapshot but the file /trunk/pdfbox/src/test/resources/org/apache/pdfbox/encryption/passwordsample-128bit.pdf cannot be checked out (because of the virus scanner??? - same for passwordsample-40bit.pdf) can you ensure that the files are virus free? svn error is svn: e175013",
        "label": 11
    },
    {
        "text": "outofmemoryerror at org apache fontbox cff indexdata initdata indexdata java  when trying to render the attached pdf, the following exception is thrown: ~~~ at org.apache.fontbox.cff.indexdata.initdata(indexdata.java:95) at org.apache.fontbox.cff.cffparser.readindexdata(cffparser.java:151) at org.apache.fontbox.cff.cffparser.parsecidfontdicts(cffparser.java:474) at org.apache.fontbox.cff.cffparser.parsefont(cffparser.java:429) at org.apache.fontbox.cff.cffparser.parse(cffparser.java:109) at org.apache.pdfbox.pdmodel.font.pdcidfonttype0.<init>(pdcidfonttype0.java:90) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createdescendantfont(pdfontfactory.java:121) at org.apache.pdfbox.pdmodel.font.pdtype0font.<init>(pdtype0font.java:108) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:83) at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:93) at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:50) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:802) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:464) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:438) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149) at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:160) at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:203) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:136) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:69) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:56) ... ~~~ the pdf has its issues - the warning is shown when opening in adobe reader: embedded font ywwlar+cairofont-1-0 cannot be selected. some characters may not be shown or printed correctly. the expected behavior is to either ignore the error with some characters rendered incorrectly, or to throw a better exception.",
        "label": 11
    },
    {
        "text": "overlay should implement closeable `org.apache.pdfbox.multipdf.overlay` class has `close` method but it doesn't implement closeable interface. other classes, such as pddocument, do implement it. attached patch.",
        "label": 11
    },
    {
        "text": "false negative    invalid font definition  width   of the character   in the font program  bnglnn lucidamath symbol  is inconsistent with the width   in the pdf dictionary  org.apache.pdfbox.preflight.font.util.glyphexception: width (633.0) of the character \"60\" in the font program \"bnglnn+lucidamath-symbol\" is inconsistent with the width (0.0) in the pdf dictionary. at org.apache.pdfbox.preflight.font.container.fontcontainer.checkwidthsconsistency(fontcontainer.java:181) at org.apache.pdfbox.preflight.font.container.fontcontainer.checkglyphwidth(fontcontainer.java:130) at org.apache.pdfbox.preflight.content.preflightcontentstream.validtext(preflightcontentstream.java:342) at org.apache.pdfbox.preflight.content.preflightcontentstream.validstringarray(preflightcontentstream.java:276) at org.apache.pdfbox.preflight.content.preflightcontentstream.validstringarray(preflightcontentstream.java:272) at org.apache.pdfbox.preflight.content.preflightcontentstream.checkshowtextoperators(preflightcontentstream.java:190) at org.apache.pdfbox.preflight.content.preflightcontentstream.processoperator(preflightcontentstream.java:155) at org.apache.pdfbox.contentstream.pdfstreamengine.processsubstream(pdfstreamengine.java:226) at org.apache.pdfbox.contentstream.pdfstreamengine.processsubstream(pdfstreamengine.java:196) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:152) at org.apache.pdfbox.preflight.content.preflightcontentstream.validpagecontentstream(preflightcontentstream.java:76) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validatecontent(singlepagevalidationprocess.java:184) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:87) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:56) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:45) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168)",
        "label": 6
    },
    {
        "text": "unable re write pddocument addsignature  first of all congratulation for the new version! with pdfbox 1.8.x i was able to re-write the addsignature() function in order to sign in an existing empty visible signature field. when i wanted to redo the same with this new version, i failed because the setter cosdocument.setsignatureinterface() does not exist anymore and i found no way to set the signature interface without re-writing a ton of java classes. now i may have a clean solution: make some attributes protected in pddocument in order to extend it and override some functions. you may have a better idea. thank you.",
        "label": 1
    },
    {
        "text": "type3 glyphs with partial black background the file from pdfbox-1628 is rendered with a black background.",
        "label": 6
    },
    {
        "text": "change the wrapped exception to extend exception and pass the wrapped exception for more standard better printout of wrapped exceptions wrapped exceptions are now handled by java. so wrapped exception can be replaced with the following code for better exception reporting/handling. including better integrations with logging utilities such as slf4j which \"understand\" java wrapped exceptions. /* licensed to the apache software foundation (asf) under one or more contributor license agreements. see the notice file distributed with this work for additional information regarding copyright ownership. the asf licenses this file to you under the apache license, version 2.0 (the \"license\"); you may not use this file except in compliance with the license. you may obtain a copy of the license at * http://www.apache.org/licenses/license-2.0 * unless required by applicable law or agreed to in writing, software distributed under the license is distributed on an \"as is\" basis, without warranties or conditions of any kind, either express or implied. see the license for the specific language governing permissions and limitations under the license. */ package org.apache.pdfbox.exceptions; /** an exception that that holds a sub exception. * actually, this class is no longer required as this is now better suppored by java.lang.exception. @author <a href=\"mailto:ben@benlitchfield.com\">ben litchfield</a> @version $revision: 1.2 $ */ public class wrappedexception extends exception { /** constructor comment. * @param e the root exception that caused this exception. */ public wrappedexception( exception e ) { super(e); } }",
        "label": 12
    },
    {
        "text": "saving a document containing a xfa form creates invalid pdf when saving a pddocument containing a pdxfa form the pdf file can no longer be opened by adobe acrobat or gnome's evince document viewer.",
        "label": 10
    },
    {
        "text": "color map not correctly copied when pdf file is split a customer has a pdf file which we split (pdfbox.util.splitter) for inclusion in a document. when i split the file using the pdfsplit tool, the same problem occurs. on some pages, the color map appears to be altered such that background and text are rendered in different colors (yellow/lilac instead of white/blackish). the pdf the customer supplies is probably a scanned document but the metadata claims it is created using pdf-xchange viewer 2.5.195.0. the odd thing is that only a subset of pages are affected in a consistent fashion. i can supply the original pdf file on request for you to look at.",
        "label": 1
    },
    {
        "text": "org apache fontbox cff cffparser readentry sometimes throws java lang illegalargumentexception it happened on one of my pdfs. traceback: processing p5.pdf... exception in thread \"main\" java.lang.reflect.invocationtargetexception at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:62) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) at java.lang.reflect.method.invoke(method.java:483) at org.eclipse.jdt.internal.jarinjarloader.jarrsrcloader.main(jarrsrcloader.java:58) caused by: java.lang.illegalargumentexception at org.apache.fontbox.cff.cffparser.readentry(cffparser.java:209) at org.apache.fontbox.cff.cffparser.readdictdata(cffparser.java:177) at org.apache.fontbox.cff.cffparser.parsetype1dicts(cffparser.java:608) at org.apache.fontbox.cff.cffparser.parsefont(cffparser.java:466) at org.apache.fontbox.cff.cffparser.parse(cffparser.java:115) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:99) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:60) at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:121) at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:50) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:798) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:460) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:437) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:148) at org.apache.pdfbox.text.pdftextstreamengine.processpage(pdftextstreamengine.java:117) at org.apache.pdfbox.text.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.text.pdftextstripper.processpages(pdftextstripper.java:303) at org.apache.pdfbox.text.pdftextstripper.writetext(pdftextstripper.java:248)",
        "label": 11
    },
    {
        "text": "failure to render file with utf8 cid tt fonts the glyphs in the attached file are not rendered correctly. from sanyam g. in the user mailing list: i tried to convert the first page of the attached pdf to image and got the attached resulting output please note this pdf uses utf8 character set and not ascii character set. for ascii character set pdfs it works fine.",
        "label": 6
    },
    {
        "text": "building on openjdk throws javax imageio iioexception originally captured here: http://stackoverflow.com/questions/26531191/pdfbox-throws-writeimage-error-when-building-on-openjdk i get this error when building with openjdk: ------------------------------------------------------------------------------- test set: org.apache.pdfbox.pdmodel.graphics.image.jpegfactorytest ------------------------------------------------------------------------------- tests run: 6, failures: 0, errors: 2, skipped: 0, time elapsed: 0.804 sec <<< failure! - in org.apache.pdfbox.pdmodel.graphics.image.jpegfactorytest testcreatefromimageint_argb(org.apache.pdfbox.pdmodel.graphics.image.jpegfactorytest)  time elapsed: 0.387 sec  <<< error! javax.imageio.iioexception: invalid argument to native writeimage         at com.sun.imageio.plugins.jpeg.jpegimagewriter.writeimage(native method)         at com.sun.imageio.plugins.jpeg.jpegimagewriter.writeonthread(jpegimagewriter.java:1058)         at com.sun.imageio.plugins.jpeg.jpegimagewriter.write(jpegimagewriter.java:360)         at javax.imageio.imagewriter.write(imagewriter.java:615)         at javax.imageio.imageio.dowrite(imageio.java:1612)         at javax.imageio.imageio.write(imageio.java:1578)         at org.apache.pdfbox.pdmodel.graphics.image.validateximage.validate(validateximage.java:63)         at org.apache.pdfbox.pdmodel.graphics.image.jpegfactorytest.testcreatefromimageint_argb(jpegfactorytest.java:141) testcreatefromimage4byte_abgr(org.apache.pdfbox.pdmodel.graphics.image.jpegfactorytest)  time elapsed: 0.147 sec  <<< error! javax.imageio.iioexception: invalid argument to native writeimage         at com.sun.imageio.plugins.jpeg.jpegimagewriter.writeimage(native method)         at com.sun.imageio.plugins.jpeg.jpegimagewriter.writeonthread(jpegimagewriter.java:1058)         at com.sun.imageio.plugins.jpeg.jpegimagewriter.write(jpegimagewriter.java:360)         at javax.imageio.imagewriter.write(imagewriter.java:615)         at javax.imageio.imageio.dowrite(imageio.java:1612)         at javax.imageio.imageio.write(imageio.java:1578)         at org.apache.pdfbox.pdmodel.graphics.image.validateximage.validate(validateximage.java:63)         at org.apache.pdfbox.pdmodel.graphics.image.jpegfactorytest.testcreatefromimage4byte_abgr(jpegfactorytest.java:182) i'm aware openjdk does not have a native jpeg encoder, and i can build with oracle jdk: java_home=\"/path/to/oracle/jdk\" mvn clean compile",
        "label": 11
    },
    {
        "text": "problem with text extraction i want to make a parser that will parse some bookie pdf list with odds. i have two files. one is working flawlessly and the other one have problems although the two files are almost in identical form. the file uploaded (listamillenium.pdf) has problems with text extraction and the other file (listameridian.pdf) is working fine. this is the code i used: try { doc = pddocument.load(\"listamillenium.pdf\"); pdftextstripper stripper = new pdftextstripper(); stripper.setstartpage( 6 ); stripper.setendpage( 6 ); stripper.setsortbyposition(true); stripper.setshouldseparatebybeads(true); stripper.setsuppressduplicateoverlappingtext(true); stripper.setwordseparator(\"~\"); stripper.writetext(doc, sw); } finally { if (doc != null) { doc.close(); } } on page 6 of the uploaded document (listamillenium.pdf) you can see the output lines like this: nedelja 37 - 14.09. utorak, 15.09. sreda i 16.09. \u010detvrtak~strana 6 ~football~uefa europa league~rezultat~kona\u010dan ishod~dupla \u0161ansa~poluvreme-kraj~hen~hendikep ~dan~\u010das~\u0161ifra~45~90~1~x~2~1x~12~x2~1-1~1-x~1-2~x-1~x-x~x-2~2-1~2-x~2-2~h~h1~hx~h2 ~cet~19:00~4041*~salzburg~man. city~5.60~3.25~1.60~2.06~1.24~1.07~10.5~13.5~32.0~10.5~5.65~4.25~35.0~13.0~2.50~1~2.06~3.50~2.07 cet~19:00~4042*~juventus~lech p.~1.20~5.25~10.5~1.08~3.50~1.50~21.0~70.0~4.75~9.00~20.0~40.0~19.0~27.0-1~1.40~3.85~3.50 ~cet~19:00~4043*~aris~atl. madrid~3.50~3.20~1.95~1.67~1.25~1.21~7.00~13.0~30.0~7.25~5.05~4.80~30.0~13.0~3.25~1~1.67~3.30~2.80 cet~19:00~4044*~leverkusen~rosenborg~1.35~4.00~8.30~1.01~1.16~2.70~1.95~17.0~50.0~4.05~7.00~17.0~35.0~15.0~15.0-1~1.63~3.70~2.70 cet~19:00~4045*~lille~sporting l.~1.80~3.20~4.10~1.15~1.25~1.80~2.95~13.0~30.0~4.65~5.25~7.95~30.0~13.0~7.80-1~2.45~3.45~1.80 cet~19:00~4046*~levski sofia~gent~2.00~3.20~3.35~1.23~1.25~1.64~3.35~13.0~30.0~4.85~5.00~7.00~30.0~13.0~6.75-1~2.95~3.25~1.63 ~cet~19:00~4047*~dinamo z.~villarreal~3.35~3.20~2.00~1.64~1.25~1.23~6.75~13.0~30.0~7.00~5.00~4.85~30.0~13.0~3.35~1~1.63~3.25~2.95 cet~19:00~4048*~club brugge~paok~2.10~3.15~3.15~1.26~1.26~1.58~3.50~13.0~30.0~4.95~5.00~6.65~30.0~13.0~6.40-1~3.20~3.25~1.57 cet~19:00~4049*~az alkmaar~sheriff tiraspol~1.50~3.40~6.70~1.04~1.23~2.26~2.25~15.0~40.0~4.15~6.05~12.5~32.0~14.0~11.5-1~1.87~3.60~2.24 cet~19:00~4050*~dinamo k.~bate~1.40~3.75~7.65~1.02~1.18~2.52~2.05~17.0~40.0~4.10~6.65~15.0~32.0~14.0~14.0-1~1.70~3.70~2.52 cet~19:00~4051*~sparta p.~palermo~2.50~3.05~2.60~1.37~1.27~1.40~4.45~12.5~30.0~5.65~5.00~5.80~28.0~12.5~4.65-1~4.40~3.20~1.40 ~cet~19:00~4052*~lausanne~cska moscow~6.70~3.40~1.50~2.26~1.23~1.04~11.5~14.0~32.0~12.5~6.05~4.15~40.0~15.0~2.25~1~2.24~3.60~1.87 ~cet~21:05~4053*~anderlecht~zenit~2.60~3.05~2.50~1.40~1.27~1.37~4.65~12.5~28.0~5.80~5.00~5.65~30.0~12.5~4.45~1~1.40~3.20~4.40 cet~21:05~4054*~aek~hajduk~1.60~3.25~5.60~1.07~1.24~2.06~2.50~13.0~35.0~4.25~5.65~10.5~32.0~13.5~10.5-1~2.07~3.50~2.06 cecet~21:021:05~4055*~stuttgart~y. boys~1.60~3.25~5.60~1.07~1.24~2.06~2.50~13.0~35.0~4.25~5.65~10.5~32.0~13.5~10.5-1~2.07~3.50~2.06 last line in this listing has problems. it has duplicate values somehow. you can find this issue on almost every page of this list. other lists (that i have not uploaded) have same problems. as i said, other file (listameridian.pdf) does not have this issue. maybe this will help you fix this and it will surely help me.",
        "label": 7
    },
    {
        "text": "out of memory exception when parsing ttf file when parsing the attached ttf file with fontbox, i get an outofmemoryerror (heap space) when parsing via an input stream. if i parse via a file, fontbox seems to never return.",
        "label": 1
    },
    {
        "text": "outofmemoryerror in text extraction tests as reported on dev@: testtextstripper failed: testextract(org.apache.pdfbox.util.testtextstripper) time elapsed: 7.32 sec <<< error! java.lang.outofmemoryerror: java heap space at com.ibm.icu.impl.ucharacternamereader.read(ucharacternamereader.java:90) i can reproduce it by adding a <argline>-xmx128m</argline> option to the surefire plugin configuration in pdfbox/pom.xml. the same problem doesn't occur with 1.2.1.",
        "label": 7
    },
    {
        "text": "avoid using temporary files in pdjpeg the current code writes the pdf to a tmp file and then read it back. this can be done in-memory using the inputstream constructors.",
        "label": 1
    },
    {
        "text": "java lang outofmemoryerror while parsing pdf file [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1581061 originally submitted by hui85 on 2006-10-19 23:47. i want to parse text from a pdf file and use pdftextstripper. most of the pdf files work. but in the following case i get an outofmemoryerror. the pdf file i want to parse is about 312k and my jvm xmx is about 512m. i get the following stacktrace: java.lang.outofmemoryerror at java.util.zip.inflater.inflatebytes(native method) at java.util.zip.inflater.inflate(unknown source) at java.util.zip.inflaterinputstream.read(unknown source) at org.pdfbox.filter.flatefilter.decode(flatefilter.java:97) at org.pdfbox.cos.cosstream.dodecode(cosstream.java:319) at org.pdfbox.cos.cosstream.dodecode(cosstream.java:249) at org.pdfbox.cos.cosstream.getunfilteredstream(cosstream.java:173) at org.pdfbox.pdfparser.pdfstreamparser.<init>(pdfstreamparser.java:91) at org.pdfbox.cos.cosstream.getstreamtokens(cosstream.java:135) at org.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:189) at org.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:160) at org.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:355) at org.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:268) at org.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:220) i use pdfbox-0.7.3, tested on win 2000, jvm 1.4.2. the file that causes the error is to big to attach (271k zipped). please mail me and i will send it. [comment on sourceforge] originally sent by benlitchfield. logged in: yes user_id=601708 see test-1581061.pdf [comment on sourceforge] originally sent by benlitchfield. logged in: yes user_id=601708 thanks, please email the pdf to ben@benlitchfield.com or upload to ftp.pdfbox.org thanks, ben",
        "label": 12
    },
    {
        "text": "accessing xml forms  patch provided  [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1420152 originally submitted by mig-o on 2006-01-31 00:42. hi all, i have to modify forms in the new pdf1.6 format, so it seems like its up to me to implement it (since no one has done before). i will provide my development as a series of patches (just in case i give up, and get other things to do, my work is not lost then this one allows to get the xml in the form. it adds getter-functions to the pdxfa, that return org.w3c.element-objects for the xfa. i will have to try modifing them by hand, and will provide write support in the next patch. some questions left open: is it okey to handle errors like i did with runtimeexceptions? maybe i missed the point in my modification of cosdictionarymap.convertbasictypestomap(). i like it more like it is the wys i did, but maybe it breks something on your side so please check. i added getstreamasstring-functions to cosstream, since most interesting streams are ascii anyway. [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552835&aid=1420152&file_id=165613 patch.txt (text/plain), 6546 bytes patch to add limited, basic access to xml-forms. [comment on sourceforge] originally sent by benlitchfield. logged in: yes user_id=601708 thanks for taking the time to submit a patch, but we should talk a little about how we want this designed. today forms are written in two ways, the old way using cosdictionary and the new way using xml forms. it would be nice if there was a single api that people could use that would update fields in both spots. need to think about how we can do that. such that both old and new get written properly and people who use pdfbox don't have to write it in both spots. also, despite popular belief i have never met anyone that actually wants to work in xml object model, most people would rather use a standard java object model. for example, i would be willing to bet that most people would rather see public xfaconfig getconfigxml() rather than public element getconfigxml() returing an xml element means that the user is required to go look at the xfa documentation to know what is in there and handle any details themselves. if a xfaconfig(or whatever name) was returned that could do it for them. maybe the xfaconfig simply holds as a data member an element object and is really just a wrapper, just like most pdmodel objects are just wrappers to cosdictionaries. ben",
        "label": 1
    },
    {
        "text": "pdpage getcontentstreams  always returns empty when content stream field is an array ",
        "label": 11
    },
    {
        "text": "problem reading signed documents without new line after  eof if a document without an new line after %%eof was signed incremental, the first object in the revision will be wrote directly behind the %%eof without a blank or a new line this will look like this: %%eof1 obj <<......>> the adobe reader can read such documents, the pdfbox skip it. i looked inside the pdf specification and can't find more details about such kind of documents, so i think this is a valid document. in case that some readers can handle it, i added a \"new line\" before writing the incremental update with the pddocument.saveincremental method.",
        "label": 0
    },
    {
        "text": "outofmemoryerror in glyfcompositedescrip hi all, the application i\u2019m working on is a web service that accepts pdf documents and combines them in a single larger pdf. client submits a bunch of pdfs and we create a single pdf out of them. in some rare cases one of the pdf documents submitted has a glitch in it that causes adobe reader to throw errors when viewing the final document (attached). when i tried to check the buggy pdf with the approach outlined here: https://pdfbox.apache.org/cookbook/pdfavalidation.html i was getting an outofmemoryerror in the glyfcompositedescrip class, here is the full stack trace: java.lang.outofmemoryerror: java heap space at org.apache.fontbox.ttf.glyfcompositedescript.<init>(glyfcompositedescript.java:58) at org.apache.fontbox.ttf.glyphdata.initdata(glyphdata.java:62) at org.apache.fontbox.ttf.glyphtable.initdata(glyphtable.java:69) at org.apache.fontbox.ttf.truetypefont.initializetable(truetypefont.java:280) at org.apache.fontbox.ttf.abstractttfparser.parsetables(abstractttfparser.java:128) at org.apache.fontbox.ttf.ttfparser.parsetables(ttfparser.java:80) at org.apache.fontbox.ttf.abstractttfparser.parsettf(abstractttfparser.java:109) at org.apache.fontbox.ttf.ttfparser.parsettf(ttfparser.java:25) at org.apache.fontbox.ttf.abstractttfparser.parsettf(abstractttfparser.java:84) at org.apache.fontbox.ttf.ttfparser.parsettf(ttfparser.java:25) at org.apache.pdfbox.preflight.font.descriptor.truetypedescriptorhelper.processfontfile(truetypedescriptorhelper.java:84) at org.apache.pdfbox.preflight.font.descriptor.fontdescriptorhelper.validate(fontdescriptorhelper.java:97) at org.apache.pdfbox.preflight.font.simplefontvalidator.processfontdescriptorvalidation(simplefontvalidator.java:82) at org.apache.pdfbox.preflight.font.simplefontvalidator.validate(simplefontvalidator.java:55) at org.apache.pdfbox.preflight.process.reflect.fontvalidationprocess.validate(fontvalidationprocess.java:69) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatefonts(resourcesvalidationprocess.java:96) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178) at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75) at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:77) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:191) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:78) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validatexobjectresources(xobjformvalidator.java:178) at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:75) while i can\u2019t send on the pdf in question due to the sensitivity of the contents in it, i did a bit of digging and debugging to find out why this is happening. in the glyfcompositedescrip classes constructor there is a do \u2026 while loop that is constructing glyfcompositecomp objects and adding them to the components list of glyfcompositedescrip. in the constructor of the glyfcompositecomp a signed short is read from the ttfdatastream in the flags field, that field in turn is used in the glyfcompositedescrip constructor to check if any more components are there to be read. here is the code in question: public glyfcompositedescript(ttfdatastream bais, glyphtable glyphtable) throws ioexception { \u2026 do { comp = new glyfcompositecomp(bais); //this is where the outofmemoryerror happens components.add(comp); } while ((comp.getflags() & glyfcompositecomp.more_components) != 0); //here the flags are used to check if more components are there \u2026 } protected glyfcompositecomp(ttfdatastream bais) throws ioexception { flags = bais.readsignedshort(); \u2026 } in the case of the corrupted pdf, that we get from time to time, the bais.readsignedshort() call in glyfcompositecomp results in a value of -1 and once it hits that value the condition in the glyfcompositedescript constructor\u2019s loop will always result in 32 (!=0). basically, it ends up in an infinite loop and keeps constructing glyfcompositecomp objects until the memory runs out. the main question here is, has anyone ever encountered a pdf corruption that causes this behaviour and how would one have to go about checking the pdf document for this sort of corruptions without causing the application to run out of memory? we\u2019re not required to fix the document, just check if it\u2019s valid. if it\u2019s not valid then we just reject the document. ideally i\u2019d also like to know what the corruption could be so that i can at least give a hint to the client software as to what is causing this document to be rejected (i do understand that without the actual pdf that\u2019s causing this it might be impossible to tell that).",
        "label": 1
    },
    {
        "text": "textposition created with wrong text size both totalverticaldisplacementdisp and fontsizetextpx shall use textxctm to get actual size, not textmatrix. i.e. line 503 of pdfstreamengine shall be (int)(fontsizetext * textxctm.getxscale()) affected file in attach.",
        "label": 1
    },
    {
        "text": "nullpointerexception when writing pdf to image java.lang.nullpointerexception: null at org.apache.fontbox.cff.afmformatter.printfontmetrics(afmformatter.java:76) ~[fontbox-1.3.1.jar:na] at org.apache.fontbox.cff.afmformatter.printfont(afmformatter.java:57) ~[fontbox-1.3.1.jar:na] at org.apache.fontbox.cff.afmformatter.format(afmformatter.java:50) ~[fontbox-1.3.1.jar:na] at org.apache.pdfbox.pdmodel.font.pdtype1cfont.preparefontmetric(pdtype1cfont.java:529) ~[pdfbox-1.3.1.jar:na] at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:404) ~[pdfbox-1.3.1.jar:na] at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:123) ~[pdfbox-1.3.1.jar:na] at org.apache.pdfbox.pdmodel.font.pdtype1font.getawtfont(pdtype1font.java:214) ~[pdfbox-1.3.1.jar:na] at org.apache.pdfbox.pdmodel.font.pdsimplefont.drawstring(pdsimplefont.java:97) ~[pdfbox-1.3.1.jar:na] at org.apache.pdfbox.pdmodel.font.pdtype0font.drawstring(pdtype0font.java:68) ~[pdfbox-1.3.1.jar:na] at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:190) [pdfbox-1.3.1.jar:na] at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:472) [pdfbox-1.3.1.jar:na] at org.apache.pdfbox.util.operator.showtext.process(showtext.java:45) ~[pdfbox-1.3.1.jar:na] at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:529) [pdfbox-1.3.1.jar:na] at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) [pdfbox-1.3.1.jar:na] at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) [pdfbox-1.3.1.jar:na] at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) [pdfbox-1.3.1.jar:na] at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) [pdfbox-1.3.1.jar:na] at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) [pdfbox-1.3.1.jar:na] at org.apache.pdfbox.util.pdfimagewriter.writeimage(pdfimagewriter.java:135) [pdfbox-1.3.1.jar:na] oddly, even though this exception gets thrown, image file gets written and seems to be ok.",
        "label": 1
    },
    {
        "text": "error reading stream  expected 'endstream' actual '' in non truncated files when pdf files are truncated, one of the most common exceptions in pdfbox 2.0.0 is: java.io.ioexception: error reading stream, expected='endstream' actual='' at offset 165888  at org.apache.pdfbox.pdfparser.cosparser.parsecosstream(cosparser.java:999)  at org.apache.pdfbox.pdfparser.cosparser.parsexrefobjstream(cosparser.java:326)  at org.apache.pdfbox.pdfparser.cosparser.parsexref(cosparser.java:287)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:192)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:249)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:847) there are two files in govdocs1 that are not truncated and trigger this exception in 2.0.0, but were parsed by pdfbox 1.8.11 with the classic parser.",
        "label": 1
    },
    {
        "text": "yellow text not using heavy font http://acroeng.adobe.com/test_files/images/jpeg2000//sf-triplebonus_02.pdf java -cp pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar:lib/jai_imageio.jar org.apache.pdfbox.tools.pdftoimage sf-triplebonus_02.pdf",
        "label": 6
    },
    {
        "text": "updated to bouncycastle you may want to consider updating to bc 1.55 - https://www.bouncycastle.org/releasenotes.html",
        "label": 11
    },
    {
        "text": "word concatenation in not in attached file is reduced from govdocs file 092465.pdf. text extraction with 1.8: day. some market watchers were text extraction with 2.0: day. somemarketwatcherswere text extraction with adobe reader: day. somemarket watchers were printtextlocations 1.8: string[36.0,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=6.4154396]d string[42.41544,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.2499504]a string[47.66539,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.837944]y string[53.503334,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=2.6249733]. string[60.01537,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.5124474]s string[65.52782,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.7329483]o string[71.260765,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=9.271416]m string[80.53218,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.0294495]e string[87.505165,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=9.271416]m string[96.77868,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.2499466]a string[102.028625,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=4.147461]r string[106.17609,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.837944]k string[112.01403,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.0294495]e string[117.04348,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=3.422966]t string[122.40893,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=8.75692]w string[131.16585,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.249954]a string[136.4158,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=3.4229736]t string[139.83878,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=4.661957]c string[144.50073,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=6.1109467]h string[150.61168,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.0294495]e string[155.64113,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=4.147461]r string[159.78859,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=4.45195]s string[166.18617,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=8.756912]w string[174.94308,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.0294495]e string[179.97253,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=4.147461]r string[184.12,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.0294495]e printtextlocations 2.0: string[36.0,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=6.4154396]d string[42.41544,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.2499504]a string[47.66539,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.837944]y string[53.503334,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=2.6249733]. string[60.01537,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.5124474]s string[65.52782,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.7329483]o string[71.260765,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=9.271416]m string[80.53218,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.0294495]e string[87.505165,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=9.271416]m string[96.77868,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.2499466]a string[102.028625,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=4.147461]r string[106.17609,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.837944]k string[112.01403,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.0294495]e string[117.04348,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=3.422966]t string[122.40893,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=8.75692]w string[131.16585,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.249954]a string[136.4158,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=3.4229736]t string[139.83878,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=4.661957]c string[144.50073,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=6.1109467]h string[150.61168,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.0294495]e string[155.64113,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=4.147461]r string[159.78859,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=4.45195]s string[166.18617,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=8.756912]w string[174.94308,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.0294495]e string[179.97253,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=4.147461]r string[184.12,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.0294495]e",
        "label": 11
    },
    {
        "text": "pddocument load  error  expected a long type at offset  instead got 'df 4' simple pddocument.load failed to heal attached pdf (pdfbox 2.0.0 rc2): exception in thread \"main\" java.io.ioexception: error: expected a long type at offset 2, instead got 'df-1.4' at org.apache.pdfbox.pdfparser.baseparser.readlong(baseparser.java:1340) at org.apache.pdfbox.pdfparser.baseparser.readobjectnumber(baseparser.java:1268) at org.apache.pdfbox.pdfparser.cosparser.parsexrefobjstream(cosparser.java:321) at org.apache.pdfbox.pdfparser.cosparser.parsexref(cosparser.java:287) at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:189) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:246) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:855) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:811) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:765) reproduced using 2.0.0 rc2 from maven and with code from trunk svn. file in question: http://coobers.com/bucket/ikona_free.pdf",
        "label": 1
    },
    {
        "text": "stackoverflow exception pdf from pdfbox-1365 pddocument x = pddocument.load(new file(\"out_pdfa.pdf\")); x.getpage(0).getcosobject().tostring(); x.close();",
        "label": 11
    },
    {
        "text": "wrong extracted text using pdfbox hello , i am using pdfbox v1.4 to extract some text from a pdf, but some words are not extracted right. for example words : \"nefteiugansk\" is read: \"ne\u017eeiugansk\" \"fiancee\" is read: \"\u00e4anc\u00e9e\" \"first\" is read: \"\u00e4rst\" please check the attached file to test this. best regards",
        "label": 1
    },
    {
        "text": "add getmaxlength  and setmaxlength  methods to pdtextbox basically, this would be a handy way of getting or setting the (int) value of the maxlen property, which represents the maximum number of characters a text field can contain (documented in table 229 of pdf 32000-1:2008). also, it would be nice if \"maxlen\" could be added as a constant to cosname to facilitate this.",
        "label": 1
    },
    {
        "text": "add xml output option to preflight as part of a recent spruce hackathon (http://wiki.opf-labs.org/display/spr/home) we added xml output to preflight. it would be good if preflight was able to offer this sort of output by default. example outputs from our code are here: https://github.com/petecliff/pdfeh/tree/master/sample_preflight_outputs our xml output code is here: https://github.com/willp-bl/preflight-app-mod you might want to implement it your own way? as an aside; we have a format corpus of test files here: https://github.com/openplanets/format-corpus use of the files and contributions are encouraged! thanks",
        "label": 4
    },
    {
        "text": "xmpschemabasic setcreatedate and setmodifydate don't work if already set when setting xmpschemabasic with in certain pdfs , setcreatedate and setmodifydate do not work if the dates are already set in the pdf. so this will not work as expected: xmpschemabasic bi = xmp.getbasicschema(); bi.setcreatedate(somedate); bi.setmodifydate(anotherdate); setting other metadata fields works as expected, except for these two. i found a workaround . if i set the fields to null, before setting them to a new value everything works as expected: xmpschemabasic bi = xmp.getbasicschema(); bi.setcreatedate(null); bi.setcreatedate(somedate); bi.setmodifydate(null); bi.setmodifydate(anotherdate); but still it feels like there is something wrong with the way setting these two dates work.",
        "label": 11
    },
    {
        "text": "strange signs after pdftohtml parsing  after parsing pdf to html i've got a strange signs which supposed to be nice letter (not chinese or japanese). i've noticed that font description for them is universpro-roman-identity-h. how can get it generated properly?",
        "label": 1
    },
    {
        "text": "dates falsely detected as different by preflight the two attached files pass pdf/a-1b tests with pdf-tools, but not with preflight.",
        "label": 11
    },
    {
        "text": "various text extraction performance improvements even after mel's recent patches i've found a number of small performance bottlenecks that we could get rid of.",
        "label": 7
    },
    {
        "text": "incorrect ordering of compound arabic glyphs some arabic pdfs contain compound glyphs for stylistic reasons. such glyphs encode two letters: fi, si, li, lj, lm, etc. before a line gets sent to the bidirectional algorithm, all characters have been sorted into a visual order, except for these pairs. this is because they are handled as one unit and maintain their original (logical) order. the bidi algorithm straightens out most characters, but reverses the glyph pairs. to fix this, the output of font.encode() should be examined and reversed on the spot if it contains pairs of arabic characters. possibly you need to add a stub method to pdfstreamengine (in method processencodedtext) that pdftextstripper can override (in sort mode only).",
        "label": 7
    },
    {
        "text": "use saveincremental  method on a document opened with an inputstream does not work it does not seem possible to use the saveincremental() method on a pdf document opened with an inputstream instead of a file. more details on stackoverflow : http://stackoverflow.com/questions/29123436/how-to-sign-an-inputstream-from-a-pdf-file-with-pdfbox-2-0-0",
        "label": 1
    },
    {
        "text": "invalid font definition megazine.pdf.pdf is not valid, error(s): 3.1.6 : invalid font definition, width of the character \"129\" in the font program \"ppacdg+arialmt\"is inconsistent with the width in the pdf dictionary.",
        "label": 3
    },
    {
        "text": "use pdoutlineitem finddestinationpage  cannot get pdpage  return was null overview i try to extract bookmarks of a pdf, but i could not get a destination page. pdf http://www.line6.jp/products/pod-hd-x/img-pod-hd-x-resource/pod-hd-500x-advanced-guide.pdf code main.pdfbookmarkextractor.java package main; import java.io.file; import java.io.ioexception; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.pdpage; import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.pddocumentoutline; import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.pdoutlineitem; import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.pdoutlinenode; public class pdfbookmarkextractor {  public static void main(string args[]) throws exception {   pdfbookmarkextractor extractor = new pdfbookmarkextractor();   extractor.extract();  }  public void extract() {   file pdf = new file(\"pod-hd-500x-advanced-guide.pdf\");   try (pddocument document = pddocument.load(pdf)) {    pddocumentoutline outline =  document.getdocumentcatalog().getdocumentoutline();    this.getbookmarks(document, outline);   } catch(ioexception e) {    e.printstacktrace();   }  }  private void getbookmarks(pddocument document, pdoutlinenode outlinenode) throws ioexception {   pdoutlineitem current = outlinenode.getfirstchild();   while(current != null) {    this.getbookmark(document, current, 0);    current = current.getnextsibling();   }  }  private int getbookmark(pddocument document, pdoutlineitem current, int indentcount) throws ioexception {   pdpage page = current.finddestinationpage(document);   stringbuilder sb = new stringbuilder();   for(int i=0; i<indentcount; i++) {    sb.append(\"\\t\");   }   sb.append(current.gettitle());   sb.append(\"[\").append(page).append(\"]\");   system.out.println(sb);   if(current.haschildren()) {    for(pdoutlineitem child : current.children()) {     this.getbookmark(document, child, indentcount + 1);    }   }   return indentcount;  } } result pod\u00ae hd500 \u30a2\u30c9\u30d0\u30f3\u30b9\u30c9\u30fb\u30ac\u30a4\u30c9[org.apache.pdfbox.pdmodel.pdpage@5910e440] 1 - \u6982\u8981[null]  \u30db\u30fc\u30e0\u30fb\u30d3\u30e5\u30fc[null]   \u30c1\u30e5\u30fc\u30ca\u30fc\u30fb\u30e2\u30fc\u30c9[null]   \u30bf\u30c3\u30d7\u30fb\u30c6\u30f3\u30dd[null]   \u63a5\u7d9a[null]   pod hd500\u30a8\u30c7\u30a3\u30c3\u30c8\u30fb\u30bd\u30d5\u30c8\u30a6\u30a8\u30a2[null]  2 - \u30b7\u30b9\u30c6\u30e0\uff65\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7[org.apache.pdfbox.pdmodel.pdpage@26a1ab54]   \u30b7\u30b9\u30c6\u30e0\u30fb\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b[org.apache.pdfbox.pdmodel.pdpage@26a1ab54]   \u30da\u30fc\u30b8 1\u3001setup\uff1autilities[org.apache.pdfbox.pdmodel.pdpage@3d646c37]   \u30da\u30fc\u30b8 2\u3001setup\uff1autilities[org.apache.pdfbox.pdmodel.pdpage@41cf53f9] [...snip...] problem i think pdnametreenode#getvalue has problems. org.apache.pdfbox.pdmodel.common.pdnametreenode.java     /**      * the name to retrieve.      *      * @param name the name in the tree.      * @return the value of the name in the tree.      * @throws ioexception if an there is a problem creating the destinations.      */     public t getvalue( string name ) throws ioexception     {         t retval = null;         map<string, t> names = getnames();         if( names != null )         {             retval = names.get( name );         }         else         {             list<pdnametreenode<t>> kids = getkids();             if (kids != null)             {                 for( int i=0; i<kids.size() && retval == null; i++ )                 {                     pdnametreenode<t> childnode = kids.get( i );                     // [problem] cannot get retval.                     // because \"kids\" were not sorted by name                     if( childnode.getlowerlimit().compareto( name ) <= 0 &&                         childnode.getupperlimit().compareto( name ) >= 0 )                     {                         retval = childnode.getvalue( name );                     }                 }             }             else             {                 log.warn(\"nametreenode does not have \\\"names\\\" nor \\\"kids\\\" objects.\");             }         }         return retval;     }",
        "label": 11
    },
    {
        "text": "fonts not rendered correctly fonts are not correctly rendered when using pdfbox 2.0.0rc3 to extract images from a pdf. here is the pdf i am using for testing and two examples of images (the wrongly rendered characters are the red ones in the yellow box): https://drive.google.com/open?id=0b9ji30i4c2kmcndczgyxbk5tele",
        "label": 1
    },
    {
        "text": "pdf files content lost when multiples pdf files merged in to one file i am trying to merge six pdf files. in the merged document, i am seeing some boxes in place of text. text got replaced by boxes and images got lost. the code used for merging is given below: public static void main (string args[]) { string[] docletnamesaspdf = { \"rp_overviewpart1.pdf\", \"rp_overviewpart2.pdf\", \"rp_overviewpart3.pdf\", \"rp_overviewpart4.pdf\", \"rp_overviewpart5.pdf\", \"rp_overviewpart6.pdf\" } ; pddocument dest = pddocument.load(docletnamesaspdf[0]); pddocument src = pddocument.load(docletnamesaspdf[1]); dest = mergepdfs(dest, src); for (int i = 2; i < docletnamesaspdf.length; i++) { src = pddocument.load(docletnamesaspdf[i]); dest = mergepdfs(dest, src); } try { dest.save(\"mergeddoc.pdf\"); } catch (cosvisitorexception e) { ; } src.close(); dest.close(); } public pddocument mergepdfs(pddocument dest, pddocument src) throws ioexception { new pdfmergerutility().appenddocument(dest, src); return dest; } please let me know what is wrong with the code and how can we resolve this issue.",
        "label": 1
    },
    {
        "text": "fix crash on invalid xref need to search for a correct xref start address example file: http://digitalcorpora.org/corp/nps/files/govdocs1/020/020747.pdf exception in thread \"main\" java.io.ioexception: error: expected an integer type, actual='ref' at org.apache.pdfbox.pdfparser.baseparser.readint(baseparser.java:1622) using the code: pdftextstripper ts = new pdftextstripper(); printwriter out = new printwriter(new filewriter(new file (pfile+\".txt\"))); randomaccess scratchfile = new randomaccessfile(file.createtempfile(\"pdfbox-\", \".tmp\"), \"rw\"); pddocument doc = pddocument.loadnonseq(new file(pfile), scratchfile) ts.setforceparsing(true); ts.writetext(doc, out); related: pdfbox-1757",
        "label": 1
    },
    {
        "text": "java awt geom illegalpathstateexception  missing initial moveto in path definition i get this exception : java.awt.geom.illegalpathstateexception: missing initial moveto in path definition  at java.awt.geom.path2d$float.needroom(path2d.java:280)  at java.awt.geom.path2d.closepath(path2d.java:1769)  at org.apache.pdfbox.rendering.pagedrawer.closepath(pagedrawer.java:693)  at org.apache.pdfbox.contentstream.operator.graphics.closepath.process(closepath.java:35)  at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:788)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:454)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:425)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:398)  at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:164)  at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:164)  at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:213) similar to pdfbox-2189. i can't include the pdf file for privacy reason but i think a similar solution applied for the other bug could fix this problem too",
        "label": 11
    },
    {
        "text": "null metadata in in some files that had metadata in with old parser tilman's observation on 'microsoft' below revealed 1) that we should use our bodycontenthandler so that title metadata doesn't slip into the body content and 2) the title and all metadata values from pddocumentinformation is null for at least: nz/nzazktqykdd2hsbcsjjn6xsea4kjeonu         path p = paths.get(\"..nzazktqykdd2hsbcsjjn6xsea4kjeonu\");         pddocument d = pddocument.load(p.tofile());         assertnull(d.getdocumentinformation().gettitle());         assertequals(8, d.getdocumentinformation().getmetadatakeys().size()); manually reviewing a handful of documents in the metadata/metadata_value_count_diffs.csv file here, this looks to be quite pervasive...unless i'm botching the right way to load the documents and metadata.",
        "label": 11
    },
    {
        "text": "problem while extracting font from pdfontsetting  used in pdextendedgraphicsstate  pdfontsetting.getfont() : public pdfont getfont() throws ioexception     {         pdfont retval = null;         cosbase font = fontsetting.get( 0 );         if( font instanceof cosdictionary )         {             retval = pdfontfactory.createfont( (cosdictionary)font );         }         return retval;     } if font is referenced as indirect object this method returns null, while font is valid and present in document. example : 10 0 obj << /font [13 0 r 60000] /type /extgstate >> endobj 13 0 obj << /basefont /asjkfo+arial-boldmt /encoding /winansiencoding /firstchar 65 /fontdescriptor 16 0 r /lastchar 65 /subtype /truetype /type /font /widths [722] >> endobj",
        "label": 11
    },
    {
        "text": "pdpagexyzdestination jumps one page too far [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1549236 originally submitted by nobody on 2006-08-30 05:05. when using pdpagexyzdestination with zoom -1, top 0 and left 0 (other valeus, too) it jumps one page further than it should. this also means that pdpagexyzdestination can't jump to the first page",
        "label": 11
    },
    {
        "text": "improve vertical text drawing as an experiment when i converted some pdf into image using pdftoimage, i got unexpected image which has horizontally located text even its encoding was identity-v. after trying attached patch file as workaround, i could see improvement. (even though it remains deviations of text location partially..) (related article) http://mail-archives.apache.org/mod_mbox/pdfbox-users/201408.mbox/%3c53fc4bc8.8070003%40marino.co.jp%3e",
        "label": 6
    },
    {
        "text": "add printrequestattributeset parameter to silentprint  the current implementation is not allow us to set the printer , paper attribute. could you please implement the silentprint() to accept printrequestattributeset as parameter. affected version from pdfbox-app-2.0.0-20140506.050443-277jar to pdfbox-app-2.0.0-20140506.050443-301jar .",
        "label": 6
    },
    {
        "text": "metadata   trapped property using the latest trunk, the attached pdf fails to validate even though commercial validators like adobe acrobat 10.x and adobe pdfgenerator pass as valid pdf/a. java -classpath ./preflight-1.8.0-snapshot-jar-with-dependencies.jar org.apache.pdfbox.preflight.validator_a1b /home/fausser/ghostpdlpdfa.pdf log4j:warn no appenders could be found for logger (org.apache.pdfbox.util.pdfstreamengine). log4j:warn please initialize the log4j system properly. the file/home/fausser/ghostpdlpdfa.pdf is not valid, error(s) : 3.1.3 : invalid font definition, the fontfile is invalid 3.3.1 : glyph error, the character \"71\" in the font program \"rirfih+cmbx12\"is missing from the charater encoding. 3.1.3 : invalid font definition, the fontfile is invalid 3.3.1 : glyph error, the character \"112\" in the font program \"fnwtpn+cmr10\"is missing from the charater encoding. 3.3.1 : glyph error, the character \"78\" in the font program \"fnwtpn+cmr10\"is missing from the charater encoding. 3.1.3 : invalid font definition, the fontfile is invalid 3.3.1 : glyph error, the character \"136\" in the font program \"muljmx+sfrm1000\"is missing from the charater encoding. 3.1.3 : invalid font definition, the fontfile is invalid 3.3.1 : glyph error, the character \"112\" in the font program \"posezb+cmbx10\"is missing from the charater encoding. 3.3.1 : glyph error, the character \"47\" in the font program \"fnwtpn+cmr10\"is missing from the charater encoding. 3.3.1 : glyph error, the character \"82\" in the font program \"rirfih+cmbx12\"is missing from the charater encoding. 7.1.1 : error on metadata, cannot find a description for 'trapped' property",
        "label": 4
    },
    {
        "text": "nullpointerexception on validimagecolorspace java.lang.nullpointerexception at org.apache.pdfbox.preflight.content.contentstreamengine.validimagecolorspace(contentstreamengine.java:330) at org.apache.pdfbox.preflight.content.contentstreamwrapper.processoperator(contentstreamwrapper.java:178) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215) at org.apache.pdfbox.preflight.content.contentstreamwrapper.validpagecontentstream(contentstreamwrapper.java:76) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validatecontent(singlepagevalidationprocess.java:179) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:87) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:52) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:58) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:47) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73) i cannot submit an exemple pdf, because the one with the errors are confidential. they were generated with pdfcreator (winword 2010, print into) not all the pdf generated the same way have the same error critical for us because we need to validate the pdfs before uploading them to our server.",
        "label": 11
    },
    {
        "text": "unreading of trailing content after 'endobj' is missing new line byte  fix included  i have several journal pdfs where the last xref section starts like endobj xref 0 92 0000000000 65535 f 0000000044 00000 n in this cases the pdf parser reads the endobj line completely and unreads \" xref\". however the newline (in this case ^d) is lost. this is already documented in the method readline() within pdfparser: \"note: if you later unread the results of this function, you'll need to add a newline character to the end of the string.\" currently i get an error like: \"expected='obj' actual='655'\" because the 'xref' is read as 'xref0'. the fix: in pdfparser insert before line 579 (the unreading of trailing characters after 'endobj') the lines: // add a space first in place of the newline consumed by readline() pdfsource.unread( space_byte ); thus we get: if (endobjectkey.startswith( \"endobj\" ) ) { /* * some pdf files don't contain a new line after endobj so we * need to make sure that the next object number is getting read separately * and not part of the endobj keyword. ex. some files would have \"endobj28\" * instead of \"endobj\" */ // add a space first in place of the newline consumed by readline() pdfsource.unread( space_byte ); pdfsource.unread( endobjectkey.substring( 6 ).getbytes(\"iso-8859-1\") ); }",
        "label": 0
    },
    {
        "text": "flatten fails on first form element only i've create an pdf form using libreoffice 5. for this document, the first form element refuses to turn up filled when filling + flattening using pdfbox 2.0.9 als well as trunk (512d016ad08a70dfb512f99d54092f8b586e8345). it turns out that resolveneedstranslation does not encounter any pdformxobject for the first element of this pdf form element but still returns false, although translation is still needed. i've created a patch in https://github.com/michael-dev/pdfbox/tree/bugfix/flattencorrectly . i used evince 3.18.2 on ubuntu xenial as pdf viewer. please see attached example pdf form and the different results using pdfbox 2.0.9 and with the above patch applied. the code used here is in example.java.",
        "label": 8
    },
    {
        "text": "java lang arrayindexoutofboundsexception  coordinate out of bounds  in org apache pdfbox pdmodel graphics image losslessfactory createfromimage method org.apache.pdfbox.pdmodel.graphics.image.losslessfactory.createalphafromargbimage raise an exception on int[] pixels = alpharaster.getpixels(0, 0,                 alpharaster.getsamplemodel().getwidth(),                 alpharaster.getsamplemodel().getheight(),                 (int\\[]) null); when alpharaster.getsamplemodel().getwidth() or alpharaster.getsamplemodel().getheight() is greater than image.getwidth() or image.getheight() (e.g. when bufferedimage created by java.awt.image.bufferedimage.getsubimage)",
        "label": 11
    },
    {
        "text": "setting a value on a pdradiocollection fails [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1178663 originally submitted by mystikspiral on 2005-04-07 09:15. if a pdradiocollection is instantiated for a group of radio buttons that have no default value selected, the setvalue call fails when the pdcheckbox.getonvalue() method is invoked. if the same group of radio buttons is modified so that one of them is the default selection, the code executes without error and the value is set successfully. simplified example (see attached file): field: applicant.gender export value 1: male export value 2: female pdradiocollection gender theform.getfield(applicant.gender); gender.setvalue(\"male\"); <--exception thrown thanks. [comment on sourceforge] originally sent by benlitchfield. logged in: yes user_id=601708 the fix that you describe uses a try catch npe block, i would like to try to come up with a better solution. i don't see that file on the ftp site, can you try to upload it again. ben [comment on sourceforge] originally sent by mystikspiral. logged in: yes user_id=1245859 this issue is resolved as well, with no additional code change. after i implemented a resolution to bug 1178668, this issue went away. so it would seem that the lack of a default value was not the true cause of the error, more it was the processing of the kids as that default value was searched for. [comment on sourceforge] originally sent by mystikspiral. logged in: yes user_id=1245859 uploading file to ftp.pdfbox.org called \"radiobuttons_nodefault.pdf\" because the upload as an attachment to this report failed beacause the size restrictions were exceeded. sorry for any confusion.",
        "label": 1
    },
    {
        "text": "glyphlist registers  wrong  adobe name for  u 02dc small tilde  the adobe glyph list contains both \"ilde;02dc\" (line 2304) and \"tilde;02dc\" (line 3826), so the unicode conversion of extendedroman 0x98 (152) \"small tilde\" fails: java.lang.illegalargumentexception: u+02dc ('ilde') is not available in this font times-roman encoding: winansiencoding at org.apache.pdfbox.pdmodel.font.pdtype1font.encode(pdtype1font.java:425) at org.apache.pdfbox.pdmodel.font.pdfont.encode(pdfont.java:323) at org.apache.pdfbox.pdmodel.pdpagecontentstream.showtext(pdpagecontentstream.java:414) at pdftest.pdfencodingerror.main(pdfencodingerror.java:18)",
        "label": 11
    },
    {
        "text": "java compile error mvn clean install -dskiptests xmpbox/src/main/java/org/apache/xmpbox/dateconverter.java:[403,34] package javax.xml.bind does not exist",
        "label": 11
    },
    {
        "text": "iterate pdoutlinenode children give an outline item, i need to walk through all its children. the items at each level of the hierarchy form a linked list, chained together through their prev and next entries and accessed through the first and last entries in the parent item so i created a simple patch to allow this kind of code: if(node !=null){        for (pdoutlineitem current : node.children()) {                 //do something with the                    } } given an item, pdoutlinenode.children returns an iterable that walks through the children until there is no next or next is equals to the starting element.",
        "label": 11
    },
    {
        "text": "tiff files with fillorder can't be converted to pdf i have issues with some tiff-files that has the tag fillorder=2 resulting in a corrupt pdf when trying to convert them with pdfbox. there's no warning or anything, but the resulting pdf can't be viewed. example code to reproduce: import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.pdpage; import org.apache.pdfbox.pdmodel.pdpagecontentstream; import org.apache.pdfbox.pdmodel.common.pdrectangle; import org.apache.pdfbox.pdmodel.graphics.image.ccittfactory; import org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject; import java.io.file; import java.io.ioexception; public class tifffillorder {  public static void main(string[] args) throws ioexception {   pddocument document = new pddocument();   pdimagexobject tif = ccittfactory.createfromfile(document, new file(args[0]));   pdpage page = new pdpage();   document.addpage(page);   pdpagecontentstream content = new pdpagecontentstream(document, page, pdpagecontentstream.appendmode.append, true);   content.drawimage(tif, 0, 0, pdrectangle.a4.getwidth(), pdrectangle.a4.getheight());   content.close();   document.save(new file(args[1]));  } } i can't attach an example since it contains personal information, but found this in another jira-issue that has the same problem: https://issues.apache.org/jira/secure/attachment/12558110/wing.tif it looks like tifffaxdecoder has support for this, but the value 1 is always sent to the constructor and the tag for fillorder (266) is never parsed.",
        "label": 11
    },
    {
        "text": "incorrect color space processing for inline images getting wrong color space for inline images because of abbreviations. (pdf reference 1.4, chapter 4.8.6). according to specification inline images can use directly (not by names) only 4 color spaces: devicegray (gray), devicecmyk (cmyk), devicergb (rgb), indexed (i).",
        "label": 11
    },
    {
        "text": "strange behavior in textpositioncomparator when extracting text for the pdf (see attachement) with setsortbyposition(true), the output does not follow nor the visual position of the elements, nor the document structure. here is the output of pdftextstripper : 11111 333333333333333 : 222222222 the expected output would be : 11111 : 222222222 333333333333333 the string \u00ab 11111 : \u00bb is defined in only one instruction : [(1) -9.555729866 (1) 17.5939998627 (1) 3.5597500801 (1) 1.9403500557 (1) 4.1794600487 ( ) -0.1493600011 (:) -4.7775301933 ( ) 250 ] tj how explain that the 3... is inserted inside ? (note : the pdf has been deflated and edited for \u00ab anonymising \u00bb the text. i also removed a picture, wich explain the xref error )",
        "label": 1
    },
    {
        "text": "pages lost the file from pdfbox-3785 has only 1 page, but should have 11. possibly also khvpci4ww5c5nyxytg4ufwb53tkqaqvi",
        "label": 1
    },
    {
        "text": "a drawing error occured [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1542907 originally submitted by nobody on 2006-08-18 15:54. i am using the example code to draw a jpg onto a pdf. there are no errors thrown but when i open the pdf the following error message is thrown - \"a drawing error occured\". any help is appreciated. email address krreddy@gmail.com code below /** copyright (c) 2005, www.pdfbox.org all rights reserved. * redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * 1. redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. neither the name of pdfbox; nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. * this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the regents or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. * http://www.pdfbox.org * */ package edu.mayo.pcs.pdf; import java.awt.print.printerexception; import java.io.fileinputstream; import java.io.filenotfoundexception; import java.io.ioexception; import org.pdfbox.exceptions.cosvisitorexception; import org.pdfbox.pdmodel.pddocument; import org.pdfbox.pdmodel.pdpage; import org.pdfbox.pdmodel.edit.pdpagecontentstream; import org.pdfbox.pdmodel.font.pdfont; import org.pdfbox.pdmodel.font.pdtype1font; import org.pdfbox.pdmodel.graphics.xobject.pdjpeg; import org.pdfbox.pdmodel.graphics.xobject.pdxobjectimage; /** this is an example that creates a simple document. * the example is taken from the pdf file format specification. * @author ben litchfield (ben@csh.rit.edu) @version $revision: 1.5 $ */ public class imagetopdf { /** create the second sample document from the pdf file format specification. * @param file the file to write the pdf to. @param image the filename of the image to put in the pdf. * @throws ioexception if there is an error writing the data. @throws cosvisitorexception if there is an error writing the pdf. */ public void createpdffromimage(string file, string image) throws printerexception, cosvisitorexception { pddocument doc = null; try { doc = new pddocument(); pdpage page = new pdpage(); doc.addpage(page); pdfont font = pdtype1font.helvetica_bold; pdpagecontentstream contentstream = new pdpagecontentstream(doc, page); contentstream.begintext(); contentstream.setfont(font, 12); contentstream.movetextpositionbyamount(100, 700); contentstream.drawstring(\"this is a text pdf doc\"); contentstream.endtext(); pdxobjectimage ximage = null; if (image.tolowercase().endswith(\".jpg\")) { ximage = new pdjpeg(doc, new fileinputstream(image)); } contentstream.drawimage(ximage, 20, 200); contentstream.close(); doc.save(file); } catch (filenotfoundexception e) { // todo auto-generated catch block e.printstacktrace(); } catch (ioexception e) { // todo auto-generated catch block e.printstacktrace(); } } /** this will create a pdf document with a single image on it. <br /> see usage() for commandline * @param args command line arguments. */ public static void main(string[] args) { imagetopdf app = new imagetopdf(); try { app.createpdffromimage(\"xyz.pdf\", \"mc.jpg\"); } catch (exception e) { e.printstacktrace(); } } /** this will print out a message telling how to use this example. */ private void usage() { system.err.println(\"usage: \" + this.getclass().getname() + \" <output-file> <image>\"); } }",
        "label": 1
    },
    {
        "text": "performance improvement in pdpagecontentstream setfont small performance improvement. instead of         if (font.willbesubset() && !document.getfontstosubset().contains(font))         {             document.getfontstosubset().add(font);         } i suggest to replace it with         if (font.willbesubset())         {             document.getfontstosubset().add(font);         } since the effort for \"set.add\" and \"set.contains\" are very similar",
        "label": 11
    },
    {
        "text": "cache font bounding boxes for performance in text extraction hi, i have been using pdfbox by way of tika for a while for text extraction from pdfs. i had a chance to fire up a profiler recently and found that getboundingbox() in the pdxxfont.java classes are called fairly frequently \u2013 in particular from pdftextstreamengine.showglyph(). i've attached a patch that caches the boundingbox object alongside the pdfont object inside of pdtextstate. there are a variety of other ways to accomplish the same thing \u2013 caching inside of the various font objects themselves, etc. i wrote a little test program to measure the speed difference against a few randomly selected files. the program just uses pdftextstripper to retrieve raw text from a pdf. here's what i found: ====plain==== file: bamboocheatsheet.pdf duration: 60037555619 rate: 81.6 files/sec file: flu.pdf duration: 60019978409 rate: 34.46666666666667 files/sec file: megacli_user_guide.pdf duration: 60641314800 rate: 1.1833333333333333 files/sec file: odbc-perl.pdf duration: 60008216404 rate: 19.466666666666665 files/sec file: verticaarchitecturewhitepaper.pdf duration: 60084726865 rate: 7.433333333333334 files/sec file: writingaresume.pdf duration: 60015267784 rate: 59.4 files/sec ===boundingbox caching=== file: bamboocheatsheet.pdf duration: 60005724588 rate: 106.1 files/sec file: flu.pdf duration: 60021410660 rate: 41.916666666666664 files/sec file: megacli_user_guide.pdf duration: 60107488363 rate: 1.7833333333333334 files/sec file: odbc-perl.pdf duration: 60017784515 rate: 29.9 files/sec file: verticaarchitecturewhitepaper.pdf duration: 60012261509 rate: 9.05 files/sec file: writingaresume.pdf duration: 60007995996 rate: 76.5 files/sec cheers",
        "label": 11
    },
    {
        "text": "improve pdpagecontentstream api the pdpagecontentstream api uses some methods with incorrect and misleading names, and some unusual choices of parameters. these can be fairly easily cleaned up.",
        "label": 6
    },
    {
        "text": "can't sign pdf document with forms or annotations it is not possible to sign a pdf document which contains a form. there is no exception traces. please find attached 8 documents : a document with a visual signature form (does not work) (doc1) a probably latex generated document (does not work) (doc2) a document with an annotation (does not work) (doc3withannot) and the same document without annotation ( which works well ) (doc3withoutannot) and their signed release.",
        "label": 1
    },
    {
        "text": "glyphs overlapping in rendering see attachment, this is reduced (but uncompressed) from the original pdf. all the glyphs render at about the same position. i did some tracing, the widths of the glyphs are about the same as the values within tj.",
        "label": 6
    },
    {
        "text": "npe in appearancegeneratorhelper setappearancevalue  if no rectangle in widget as reported in the linked stackoveflow question, can be reproduced with the createsimpleform example by removing the widget.setrectangle(rect);. java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.interactive.form.appearancegeneratorhelper.setappearancevalue(appearancegeneratorhelper.java:137) at org.apache.pdfbox.pdmodel.interactive.form.pdtextfield.constructappearances(pdtextfield.java:263) at org.apache.pdfbox.pdmodel.interactive.form.pdterminalfield.applychange(pdterminalfield.java:225) at org.apache.pdfbox.pdmodel.interactive.form.pdtextfield.setvalue(pdtextfield.java:218) i'll throw an ioexception.",
        "label": 8
    },
    {
        "text": "newly added mdp functionality breaks pdfs  changes introduced in pdfbox-3017, pdfbox-3699 broke the signing functionality. a perfectly valid pdf (in 2.0.4) doesn't pass the acrobat preflight test now: \"incorrect value type for this key\" and \"general file format error\" \"the required key /transformmethod is missing\" and \"an unexpected value is associated with the key.\" more details see the attached screenshot. i executed the \"createvisiblesignature.java\" code. and if the lines are commented the error is gone.",
        "label": 11
    },
    {
        "text": "static initialization deadlock between cosnumber cosinteger problem using tika 1.10 (pdf box 1.8.10) to parse pdf documents in a multi-threaded application, processing unexpectedly halted. investigating the output of a kill -3, we found: \"pool-2-thread-18\" #50 prio=5 os_prio=0 tid=0x00002af088a67000 nid=0xc9b9 in object.wait() [0x00002af0dc803000]    java.lang.thread.state: runnable   at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:1348) x 15 \"pool-2-thread-13\" #45 prio=5 os_prio=0 tid=0x00002af0cf910800 nid=0xc9b4 in object.wait() [0x00002af0dc2ff000]    java.lang.thread.state: runnable   at org.apache.pdfbox.cos.cosdocument.getobjectfrompool(cosdocument.java:720)   at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:685) x 2 \"pool-2-thread-11\" #43 prio=5 os_prio=0 tid=0x00002af0cfba6000 nid=0xc9b2 in object.wait() [0x00002af0dc0fc000]    java.lang.thread.state: runnable   at org.apache.pdfbox.cos.cosnumber.<clinit>(cosnumber.java:33)   at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:1348) x 1 upon further investigation, it appears that there is a risk for deadlock when baseparser calls cosnumber.get() and cosdocument call cosinteger.get(). i was able to semi-reliably replicate this issue with the below spock test: import org.apache.pdfbox.cos.cosinteger import org.apache.pdfbox.cos.cosnumber import spock.lang.specification class threadingissuespec extends specification{     def \"testy test\"(){         setup:         thread thread = new thread(new runnable(){             @override             void run() {                 for (int i =0; i<100; i++){                     cosnumber.get(\"-\")                 }             }         })         thread.start()         for(int i =0; i<100; i++) {             cosinteger.get(\"-\")         }         thread.join()         expect:         1==1     } } (you'll likely need to run this several times before the test hangs, but it does eventually hang) i updated my tika dep to 1.14 (pdf box 2.0.3) and was still able to replicate this issue.",
        "label": 11
    },
    {
        "text": "decouple implementation specific forms handling from interactive form pd model the interactive.form pd model currently holds classes reflecting the various fields intermixed with appearance generation and layout handling. in order to separate the pd model from the service of forms filling and appearance generation this functionality shall be moved into a new package.",
        "label": 8
    },
    {
        "text": "helv and zadb overridden due to change: pdfbox-3943: create /helv and /zadb entries if they don't exist, regardless if /dr existed or not   was working ok in 2.0.7, in 2.0 branch pdacroform verifyorcreatedefaults(): is: if (!defaultresources.getcosobject().containskey(\"helv\")) should be checking key in the font dictionary before calling defaultresources.put",
        "label": 11
    },
    {
        "text": "page render without barcode i have tryed this code:         try {             pddocument doc = pddocument.load(f);             pdpage page = (pdpage) doc.getdocumentcatalog().getallpages().get(0);             bufferedimage image;             image = page.converttoimage();             file outputfile = new file(\"/home/daniel/image.png\");             imageio.write(image, \"png\", outputfile);         } catch (ioexception ex) {             logger.getlogger(impresora.class.getname()).log(level.severe, null, ex);         } using the pdf attached and get the png attached in the rendering process i get the following error... in the 'converttoimage()' call 2014-11-14 13:56:12,592 warn [org.apache.pdfbox.util.pdfstreamengine] - <java.lang.arrayindexoutofboundsexception> java.lang.arrayindexoutofboundsexception     at java.lang.system.arraycopy(native method)     at org.apache.pdfbox.pdmodel.graphics.xobject.pdinlinedimage.createimage(pdinlinedimage.java:218)     at org.apache.pdfbox.util.operator.pagedrawer.begininlineimage.process(begininlineimage.java:69)     at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:557)     at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268)     at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235)     at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215)     at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:139)     at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:801)     at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:732) one for each of the 4 barcodes in pdf file as you can see, te page is rendered ok but without any barcode how could i render completily ok?",
        "label": 11
    },
    {
        "text": "pdftextstripper has problem with documents with mixed language directions when the input document of pdftextstripper is a combination of right-to-left and left-to-right languages, the output characters of one language is reversed. a sample bilingual pdf document is attached. pdftextstripper has a variable \"isrtldominant\" in \"writepage\" function, which is defined as follows: boolean isrtldominant = rtlcount > ltrcount; this class clearly count the number of rtl characters and decide if the whole content should be revered or not. it's not true, it must operate on each word, not the whole document.",
        "label": 8
    },
    {
        "text": "java io ioexception  found token kind name  text    but expected literal for type1 font i get this with the attached file on page 3: java.io.ioexception: found token[kind=name, text= ] but expected literal         at org.apache.fontbox.type1.type1parser.read(type1parser.java:727)         at org.apache.fontbox.type1.type1parser.readcharstrings(type1parser.java:658)         at org.apache.fontbox.type1.type1parser.parsebinary(type1parser.java:522)         at org.apache.fontbox.type1.type1parser.parse(type1parser.java:64) the cause is that the font has a few null bytes (see attached font file). these are regarded as literals. my solution would be to skip them in type1lexer them like we skip spaces, but to put out a warning. wdyt?",
        "label": 11
    },
    {
        "text": "bouncycastle  ambigous constructor usage pdfbox\\pdmodel\\encryption\\publickeysecurityhandler.java: envelopeddata env = new envelopeddata(null, derset, encryptedcontentinfo, null); is ambigous if one would use the latest (1.49) version of bouncycastle and doesn't compile. one has to choose one of the two constructors by setting a type for the last \"null\". looking at the constructor for 1.48, the solution would be: solution: envelopeddata env = new envelopeddata(null, derset, encryptedcontentinfo, (asn1set) null);",
        "label": 10
    },
    {
        "text": " an error exists on this page  acrobat may not display the page correctly  after generate the pdf. open it within adobe reader x has no problem, but if print it, a window pops up with \"an error exits on this page. acrobat may not display the page correctly. please contact the person who created the pdf document to correct the problem\", printed result looks ok. it seems there is no such popup message on adobe reader 9.",
        "label": 1
    },
    {
        "text": "add duplex and printscaling to viewer preferences org.apache.pdfbox.pdmodel.interactive.viewerpreferences.pdviewerpreferences currently doesn't support viewer preferences duplex and printscaling (defined in pdf reference 1.7, table 8.1). i created a simple patch to the above mentioned class including the two preferences. notes: 1. they require pdfversion 1.7 and 1.6 respectively. i don't know if this is the reason why they are not currently available and i also don't know if there's a way in pdfbox to make sure that the document version is consistent with the version required by the preferences. 2. since the target jdk version is 1.5 i suggest to refactor the viewer preferences area to use enums instead of string constants (ex. right now i think nothing prevents to set a reading_direction constant as a non_full_screen_mode) making the code more robust.",
        "label": 1
    },
    {
        "text": "incorrect rendering when  matte entry the image softmask in the attached file has a /matte 0 0 0 entry. pdfbox displays the pdf differently than adobe reader, the reflection shown by pdfbox is barely visible. when the /matte entry is deleted, then it is barely visible in adobe reader too. so the /matte entry does make some difference, although i don't understand how. in the pdf specification, the formula shown is c' = m + \u03b1 x (c - m). so 0 should have no effect?! i looked at the code of pdf.js, they have a special handling when alpha is 0, don't know why.",
        "label": 11
    },
    {
        "text": "performance improvement in pdpagecontentstream drawstring there is a simple way of improving the performance of drawstring by replacing string.writepdf( buffer ); appendrawcommands( new string( buffer.tobytearray(), \"iso-8859-1\")); appendrawcommands( space ); with string.writepdf( buffer ); appendrawcommands( buffer.tobytearray() ); appendrawcommands( space ); as the appendrawcommands(string) simple does a appendrawcommands(str.getbytes( \"iso-8859-1\" )); therefore this optimization should spare the string creation as well as the conversion back to a byte array.",
        "label": 1
    },
    {
        "text": "type fonts are not processed by pdpage createimage pdtype3font does not fetch the correct charprocs entry for a character. when that is corrected, one finds that type3streamparser is incomplete and cannot process the charprocs stream.",
        "label": 1
    },
    {
        "text": "glyph error  cid   passes compercial validators as a valid pdf a seybold.pdf.pdf is not valid, error(s) : 3.3.1 : glyph error, cid 0 is missing from the composite font format \"tradegothic-identity-h-identity-h\"",
        "label": 3
    },
    {
        "text": "quotedbl causes nullpointerexception i have a pdf document using (besides others) the font couriernewps-boldmt and text with this font containing a double quote. when calling pdfont.encode, this results in a nullpointerexception due to the following: the font encoding is built using pdf /differences which overwrites the original \"quotedbl\" at index 34 with an \"a\". the entries for quotedblbase/left/right are left unchanged. as a result, the inverted font does not contain \"quotedbl\" as key. within encode, the character code 34 gets assigned the name \"quotedbl\", which is then not found in the inverse encoding (pdtruetypefont.encode -> int code = inverted.get(name)) right before this code line causing the nullpointerexception, there is a check whether ttf.hasglyph(\"quotedbl\") (which in this case is false) and, if not, whether ttf.hasglyph(\"uni0022\") (which in this case is true); however, this has no consequence for the continuation of the code, which then crashes, since inverted.get(\"quotedbl\") is null (which is assigned to an int). i believe, this is a bug in pdfbox, but have no idea, whether the handling within encode should be changed (maybe using the \"else\" part in case ttf.hasglyph(\"quotedbl\") is false or whether code 34 should be assigned to quotedblbase in the first place, or even something else. i attached the file (test.pdf) where the error occurs and a jar (main is com.juergisapps.pdfconverter.test) that reproduces the problem. you may also see http://stackoverflow.com/questions/7140476/pdf-font-mapping-error juergen",
        "label": 6
    },
    {
        "text": "invalid date formats this is with the latest from svn, revision: 773978 from a sample of 13304 pdf documents generated in a very wide variety of ways, i got 94 invalid date formats, it seems that all of these have the stack trace of, caused by: java.io.ioexception: error converting date:friday, july 11, 2008 at org.apache.pdfbox.util.dateconverter.tocalendar(dateconverter.java:240) at org.apache.pdfbox.util.dateconverter.tocalendar(dateconverter.java:120) at org.apache.pdfbox.cos.cosdictionary.getdate(cosdictionary.java:783) at org.apache.pdfbox.pdmodel.pddocumentinformation.getcreationdate(pddocumentinformation.java:218) at message_analyzer.extractor.pdfextractor.getcontent(pdfextractor.java:50) some examples of invalid dates are, 20070430193647+713'00' tue aug 21 10:35:22 2007 tuesday, november 04, 2008 200712172:2:3 unknown 20090319 200122 9:47 5/12/2008 i don't think there is any hope of parsing all these date formats. if would be nice if this was not a fatal error, and the parser could continue without a creation date. is the policy of pdfbox to be as forgiving as possible when reading pdf documents? maybe tocalendar should return a new calendar() if parsing fails, rather than throwing.",
        "label": 1
    },
    {
        "text": "double negative float we have a document where the content stream contains a float with double negative so something like --242.0 and this result in a wrong operator:   0 -242.0 72.08 td while it should be -242.0 72.08 td compared to acrobat reader or pdf.js, this results in missing text when rendering the page. here is a relevant section in pdf.js source code:  if (ch === 0x2d) { // '-'         sign = -1;         ch = this.nextchar();         if (ch === 0x2d) { // '-'           // ignore double negative (this is consistent with adobe reader).           ch = this.nextchar();         } } ",
        "label": 11
    },
    {
        "text": "image clipping area rounding error creating images with pdfbox and merging them together when you have two pages that connect will create a white line between the images. we have looked into the issue and tried to fix it and found that the clipping area is a bit to tight so the images will not be rendered correctly. my guess is that this is due to a rounding error when using floats.  most of the graphics functions in java use double precision and pdfbox uses floats so when using layer upon layer of bounding boxes intersecting the clipping area it might get skewed to a bad bounding box. i've added a patch to this issue with the code we use as a workaround today. it's by no means the final solution to the problem but it resolves the white line issue. to be sure that you get the error when generating the images use the following command ``` java -jar pdfbox-app-3.0.0-snapshot.jar pdftoimage -dpi 150 -quality 0.95 -format jpg page-1.pdf ``` we run java 8 on our machines.",
        "label": 11
    },
    {
        "text": "extractimages example doesn't work correctly [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1558429 originally submitted by pergi on 2006-09-14 01:22. the process never enter in the second while while( iter.hasnext() ) { pdpage page = (pdpage)iter.next(); pdresources resources = page.getresources(); map images = resources.getimages(); if( images != null ) { iterator imageiter = images.keyset().iterator(); while( imageiter.hasnext() ) { string key = (string)imageiter.next(); pdxobjectimage image = (pdxobjectimage)images.get( key ); string name = getuniquefilename( key, image.getsuffix () ); system.out.println( \"writing image:\" + name ); image.write2file( name ); } } } ps: attached is an example file [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1558429&file_id=193486 regolamento2005pisa.pdf (application/pdf), 60535 bytes",
        "label": 1
    },
    {
        "text": "fdf parsing is unreliable when xref are missing the following simple fdf is not parsed correctly. the fields list returned by fdfdocument.load(fdfpath).getcatalog().getfdf().getfields(); is null. note that xrefs are optional in fdf %fdf-1.2 %\u00e2\u00e3\u00ef\u00f3 1 0 obj <<  /fdf << /fields [ << /v (sample body)/t (body)>> << /v (sample to)/t (to)>>  ]  >>  >>  endobj trailer << /root 1 0 r  >> %%eof",
        "label": 1
    },
    {
        "text": "nullpointerexception in pdtruetypefont java if glyf table is missing caused by: java.lang.nullpointerexception: null     org.apache.pdfbox.pdmodel.font.pdtruetypefont.getpath(pdtruetypefont.java:444)     org.apache.pdfbox.pdmodel.font.pdtruetypefont.getnormalizedpath(pdtruetypefont.java:502)     org.apache.pdfbox.rendering.glyphcache.getpathforcharactercode(glyphcache.java:71)     org.apache.pdfbox.rendering.pagedrawer.showfontglyph(pagedrawer.java:350)     org.apache.pdfbox.contentstream.pdfstreamengine.showglyph(pdfstreamengine.java:756)     org.apache.pdfbox.debugger.pagepane.debugpagedrawer.showglyph(debugpagedrawer.java:59)     org.apache.pdfbox.contentstream.pdfstreamengine.showtext(pdfstreamengine.java:713)     org.apache.pdfbox.contentstream.pdfstreamengine.showtextstring(pdfstreamengine.java:572)     org.apache.pdfbox.contentstream.operator.text.showtext.process(showtext.java:55) the cause is the change in pdfbox-3395; previously pdfbox would consider the font to be bad and replace it. now we don't do that because the glyf table is not always needed. i'm throwing a checked exception for now but a better solution should be found. adobe reader displays glyphs.",
        "label": 6
    },
    {
        "text": "blank rendering when negative page rotation http://acroeng.adobe.com/test_files/images//altimage.pdf http://acroeng.adobe.com/test_files/images//germanpaper.pdf java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage altimage.pdf",
        "label": 11
    },
    {
        "text": "truetype glyphs not displayed in rendering on windows on windows 10, most glyphs from pdfbox-1743 are not displayed, only \"test\" is shown, for the other lines only squares are shown. the embedded fonts are broken so pdfbox uses the os fonts. the format type of the postscript table is 3, which means that no postscript information is provided. apple advises against this.",
        "label": 11
    },
    {
        "text": "embeddedfiles example does not work running the embeddedfiles example does not work properly. obviously it has stopped working with version 1.1.0 already at least. i've tried the same example with pdfbox 0.7.3 and there it is working without any problems. although it seems (according to the document's size) that the file is embedded, there is no entry visible in the pdf's attachment/document section ...",
        "label": 1
    },
    {
        "text": "bar chart converted from pdf is totally a black area  the bar charts converted from pdf is totally a black area. the code is as following:                   pdfimagewriter imagewriter = new pdfimagewriter(); boolean success = imagewriter.writeimage(document, imageformat, password, startpage, endpage, outputprefix, imagetype, resolution); if (!success) {   logger.error( \"error: no writer found for image format '\" + imageformat + \"'\" );          system.exit(1); } i will attach the ppt and png files later",
        "label": 11
    },
    {
        "text": "npe in pdfont getfontwidth  trying to run extracttext on the attached pdf will result in a lot of the following exceptions: jun 24, 2011 11:44:54 am org.apache.pdfbox.util.pdfstreamengine processoperator warning: java.lang.nullpointerexception java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.font.pdfont.getfontwidth(pdfont.java:787) at org.apache.pdfbox.pdmodel.font.pdsimplefont.getfontwidth(pdsimplefont.java:1 at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.ja at org.apache.pdfbox.util.operator.showtext.process(showtext.java:45) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java: at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:22 at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:442) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:366 at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:322) at org.apache.pdfbox.extracttext.startextraction(extracttext.java:256) at org.apache.pdfbox.extracttext.main(extracttext.java:76)",
        "label": 1
    },
    {
        "text": "encryption webpage doesnt compile change: pddocument doc = pddocument.load(\"filename.pdf\"); to: pddocument doc = pddocument.load(new file(\"filename.pdf\")); https://pdfbox.apache.org/2.0/cookbook/encryption.html",
        "label": 8
    },
    {
        "text": "surprising memory consumption when extracting images extractimages seems to fail to release memory resources on some files in both pdfbox 1.8.5 and trunk. on this file 4mb file http://digitalcorpora.org/corp/nps/files/govdocs1/239/239665.pdf, if extracting every image on every page (and there are many, many duplicate images), there is an oom with -xmx1g. if there is no xmx and there is > 2.5g available, extractimages will work. with some experimentation, the triggers seem to be jpeg images that have masks. i'm not sure, though, whether the issue is with pdfbox or java. commandlines: 1.8.5: java -xmx1g -cp pdfbox-app-1.8.5.jar org.apache.pdfbox.extractimages 239665.pdf 2.0_snapshot: java -xmx1g -cp pdfbox-app-2.0.0-snapshot.jar org.apache.pdfbox.tools.extractimages -addkey 239665.pdf results: 1.8.5: 906 files before oom exception in thread \"main\" java.lang.outofmemoryerror: java heap space         at java.util.arrays.copyof(arrays.java:2271)         at java.io.bytearrayoutputstream.grow(bytearrayoutputstream.java:113)         at java.io.bytearrayoutputstream.ensurecapacity(bytearrayoutputstream.ja va:93)         at java.io.bytearrayoutputstream.write(bytearrayoutputstream.java:140)         at org.apache.pdfbox.pdmodel.common.pdstream.getbytearray(pdstream.java: 514)         at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdp ixelmap.java:217)         at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.write2outputstr eam(pdpixelmap.java:363)         at org.apache.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.write2file( pdxobjectimage.java:254)         at org.apache.pdfbox.extractimages.processresources(extractimages.java:2 02)         at org.apache.pdfbox.extractimages.extractimages(extractimages.java:160)         at org.apache.pdfbox.extractimages.main(extractimages.java:65) 2.0_snapshot: 428 files before oom exception in thread \"main\" java.lang.outofmemoryerror: java heap space         at java.util.arrays.copyof(arrays.java:2271)         at java.io.bytearrayoutputstream.grow(bytearrayoutputstream.java:113)         at java.io.bytearrayoutputstream.ensurecapacity(bytearrayoutputstream.ja va:93)         at java.io.bytearrayoutputstream.write(bytearrayoutputstream.java:140)         at org.apache.pdfbox.io.ioutils.copy(ioutils.java:70)         at org.apache.pdfbox.io.ioutils.tobytearray(ioutils.java:52)         at org.apache.pdfbox.pdmodel.graphics.image.sampledimagereader.from8bit( sampledimagereader.java:171)         at org.apache.pdfbox.pdmodel.graphics.image.sampledimagereader.getrgbima ge(sampledimagereader.java:154)         at org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject.getimage(pdim agexobject.java:171)         at org.apache.pdfbox.tools.extractimages.write2file(extractimages.java:2 31)         at org.apache.pdfbox.tools.extractimages.processresources(extractimages. java:206)         at org.apache.pdfbox.tools.extractimages.extractimages(extractimages.jav a:164)         at org.apache.pdfbox.tools.extractimages.main(extractimages.java:69)",
        "label": 1
    },
    {
        "text": "problem with static code in cosinteger cosnumber there is a serious problem with the static blocks in cosinteger and the static final variables zero, one, two, three in cosnumber. see test case coming soon.",
        "label": 7
    },
    {
        "text": "pdfbox doesn't respect different setting of  da at pdannotationwidget level to  da at pdfield level see the attached file \"sf1152.pdf\" and locate the \"bureau\" field. if you open this document in acrobat the font size shows as auto and functions as such in acrobat/acrobat reader. however, pdfbox thinks the font size is set to 9. i confirmed this in both pdfdebugger and in our rendering code. the second attachment \"testsf1152-ll.pdf\" shows the behavior from pdfbox not picking up the correct auto font size. the value is truncated unless you click inside the field or delete the value and replace it. the following code shows the problem:             final pddocument document = pddocument.load(classloader.getsystemresourceasstream(\"sf1152.pdf\"));             final pdacroform form = document.getdocumentcatalog().getacroform();             final pdtextfield field = (pdtextfield)form.getfield(\"bureau\");             final cosdictionary dict = field.getcosobject();             string defaultappearance = ((cosstring)dict.getdictionaryobject(cosname.da)).getstring();             system.out.println(defaultappearance); results in: /helv 9 tf 0 0 0.5 rg if i manually set the font size to auto using: dict.setstring(cosname.da, \"/helv 0 tf 0 0 0.5 rg\"); the pdf renders correctly. but we shouldn't have to manipulate font sizes in code when it's set correctly in the pdf.",
        "label": 8
    },
    {
        "text": "opening pdf document after encrypting it with pdfbox throws illegalblocksizeexception i'm trying to encrypt pdf document as per [1] like this: pddocument doc = pddocument.loadnonseq(getclass().getresourceasstream(\"/testform_protected.pdf\"), null); int keylength = 128; // 40 or 128; 256 will be available in version 2.0 accesspermission ap = doc.getcurrentaccesspermission(); standardprotectionpolicy spp = new standardprotectionpolicy(\"12345\", \"\", ap); spp.setencryptionkeylength(keylength); spp.setpermissions(ap); doc.protect(spp); file outfile = new file(\"./target/testform_saved.pdf\"); doc.save(outfile); doc.close(); pddocument loaded = pddocument.loadnonseq(outfile, null); it works fine but opening the encrypted document with pdfbox (last line of above code) throws: org.apache.pdfbox.exceptions.wrappedioexception  at org.apache.pdfbox.pdmodel.encryption.securityhandler.encryptdata(securityhandler.java:371)  at org.apache.pdfbox.pdmodel.encryption.securityhandler.decryptstring(securityhandler.java:577)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.decryptstring(nonsequentialpdfparser.java:1571)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.decryptdictionary(nonsequentialpdfparser.java:1535)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.decrypt(nonsequentialpdfparser.java:1596)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parseobjectdynamically(nonsequentialpdfparser.java:1460)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parseobjectdynamically(nonsequentialpdfparser.java:1343)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.initialparse(nonsequentialpdfparser.java:383)  at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parse(nonsequentialpdfparser.java:886)  at org.apache.pdfbox.pdmodel.pddocument.loadnonseq(pddocument.java:1273)  at org.apache.pdfbox.pdmodel.pddocument.loadnonseq(pddocument.java:1256)  at com.remion.bronto.proex.pdf.pdfboxencryptiontest.testencryptdecrypt(pdfboxencryptiontest.java:30)  at sun.reflect.nativemethodaccessorimpl.invoke0(native method)  at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)  at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)  at java.lang.reflect.method.invoke(method.java:606)  at org.testng.internal.methodinvocationhelper.invokemethod(methodinvocationhelper.java:84)  at org.testng.internal.invoker.invokemethod(invoker.java:714)  at org.testng.internal.invoker.invoketestmethod(invoker.java:901)  at org.testng.internal.invoker.invoketestmethods(invoker.java:1231)  at org.testng.internal.testmethodworker.invoketestmethods(testmethodworker.java:127)  at org.testng.internal.testmethodworker.run(testmethodworker.java:111)  at org.testng.testrunner.privaterun(testrunner.java:767)  at org.testng.testrunner.run(testrunner.java:617)  at org.testng.suiterunner.runtest(suiterunner.java:334)  at org.testng.suiterunner.runsequentially(suiterunner.java:329)  at org.testng.suiterunner.privaterun(suiterunner.java:291)  at org.testng.suiterunner.run(suiterunner.java:240)  at org.testng.suiterunnerworker.runsuite(suiterunnerworker.java:52)  at org.testng.suiterunnerworker.run(suiterunnerworker.java:86)  at org.testng.testng.runsuitessequentially(testng.java:1224)  at org.testng.testng.runsuiteslocally(testng.java:1149)  at org.testng.testng.run(testng.java:1057)  at org.testng.remote.remotetestng.run(remotetestng.java:111)  at org.testng.remote.remotetestng.initandrun(remotetestng.java:204)  at org.testng.remote.remotetestng.main(remotetestng.java:175) caused by: javax.crypto.illegalblocksizeexception: input length must be multiple of 16 when decrypting with padded cipher  at com.sun.crypto.provider.ciphercore.dofinal(ciphercore.java:750)  at com.sun.crypto.provider.ciphercore.dofinal(ciphercore.java:676)  at com.sun.crypto.provider.aescipher.enginedofinal(aescipher.java:313)  at javax.crypto.cipher.dofinal(cipher.java:1970)  at org.apache.pdfbox.pdmodel.encryption.securityhandler.encryptdata(securityhandler.java:351)  ... 35 more opening the saved document with acrobat works fine. [1] http://pdfbox.apache.org/1.8/cookbook/encryption.html",
        "label": 11
    },
    {
        "text": "into existing signature embedded signed timestamp for validation i would like to contribute a new example for embedded timestamping. the timestamp is beeing embedded into the existing signature (which has so be prepared big enough for it). so that the document does not get changed. this step is a preparation for the ltv and includes some reorganisation for validation-purposes. exec:java -x -dexec.mainclass=\"org.apache.pdfbox.examples.signature.validation.createembeddedvalidation\" -dexec.args=\"${infile} -tsa ${tsa}\" createsignature has been changed to add signatureoptions, where we can choose the size of the signature.",
        "label": 11
    },
    {
        "text": "npe when converting page to image i have a pdf that throws an npe in version 2.0.0 when rendering a specific page to an image. i've tested the pdf with 1.8.6 and it worked correctly. it logged a warning (java.io.ioexception: error: unknown shading type 0) but did not throw any exceptions. i will attach the pdf. let me know if you need any more info. ! java.lang.nullpointerexception: null ! at org.apache.pdfbox.pdmodel.graphics.color.pdpattern.topaint(pdpattern.java:125) ~[pdfbox-2.0.0-snapshot.jar:na] ! at org.apache.pdfbox.rendering.pagedrawer.getnonstrokingpaint(pagedrawer.java:710) ~[pdfbox-2.0.0-snapshot.jar:na] ! at org.apache.pdfbox.rendering.pagedrawer.fillpath(pagedrawer.java:773) ~[pdfbox-2.0.0-snapshot.jar:na] ! at org.apache.pdfbox.util.operator.graphics.fillnonzerorule.process(fillnonzerorule.java:36) ~[pdfbox-2.0.0-snapshot.jar:na] ! at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:564) ~[pdfbox-2.0.0-snapshot.jar:na] ! at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268) ~[pdfbox-2.0.0-snapshot.jar:na] ! at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235) ~[pdfbox-2.0.0-snapshot.jar:na] ! at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:189) ~[pdfbox-2.0.0-snapshot.jar:na] ! at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:168) ~[pdfbox-2.0.0-snapshot.jar:na] ! at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:228) ~[pdfbox-2.0.0-snapshot.jar:na] ! at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:160) ~[pdfbox-2.0.0-snapshot.jar:na] ! at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:83) ~[pdfbox-2.0.0-snapshot.jar:na]",
        "label": 11
    },
    {
        "text": "warnung  changing font on     from  amakea timesnewroman  to the default font pdfbox does not produce the correct fonts in the png file created with the following code and i get a lot of warnings: pddocument document = null; try { document = pddocument.load(pdffile); list pages = document.getdocumentcatalog().getallpages(); int p = 0; for (object pobj : pages) { pdpage page = (pdpage) pobj; ++p; bufferedimage bim = page.converttoimage(); // test with output in memory, to see the size bytearrayoutputstream memout = new bytearrayoutputstream(); boolean memoutok = imageio.write(bim, \"png\", memout); if (!memoutok) system.err.println (\"mem write failed for \" + p); memout.reset(); memout.close(); // test with output to png file string fname = string.format(\"%s-%02d.png\", prefix, p); boolean foutok = imageio.write(bim, \"png\", new file(fname)); if (!foutok) system.err.println (\"file write failed for \" + p); .... apr 26, 2012 2:41:11 pm org.apache.pdfbox.util.pdfstreamengine processoperator information: unsupported/disabled operation: i apr 26, 2012 2:41:12 pm org.apache.pdfbox.util.pdfstreamengine processoperator information: unsupported/disabled operation: ri apr 26, 2012 2:41:12 pm org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring warnung: changing font on < > from <amakea+timesnewroman> to the default font apr 26, 2012 2:41:13 pm org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring warnung: changing font on < > from <amakea+timesnewroman> to the default font apr 26, 2012 2:41:13 pm org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring warnung: changing font on <o> from <amakme+arial,bold> to the default font apr 26, 2012 2:41:13 pm org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring",
        "label": 1
    },
    {
        "text": "nullpointerexception when reading a gif file with a transparent color nullpointerexception while reading a gif file before writing it to a pdf file. i am able to write jpg's successfully to the pdf. the code snippet that i use to write to a pdf. can you please help ? public void generatepdf() throws ioexception,cosvisitorexception,filenotfoundexception  {   pddocument report_pdf = new pddocument();   pdpage pdfpage1 = new pdpage(pdpage.page_size_letter);   pdrectangle text_dimensions = pdfpage1.getmediabox();   pdxobjectimage pdfimage = null;   pdpagecontentstream stream = new pdpagecontentstream(report_pdf, pdfpage1);   stream.setfont(pdtype1font.helvetica, 30);   stream.begintext();   stream.movetextpositionbyamount(130,text_dimensions.getheight()-50);   stream.drawstring(\"hello\");   stream.endtext();   bufferedimage awtimage = imageio.read(new file(\"/var/tmp/test1.gif\"));    //pdfimage = new pdjpeg(report_pdf,awtimage);   pdfimage = new pdpixelmap(report_pdf, awtimage);   stream.drawimage(pdfimage, 60, 120 );         //stream.drawxobject(pdfimage, 150, 400, pdfimage.getwidth()*10, pdfimage.getheight()*20);   stream.close();   report_pdf.addpage(pdfpage1);   report_pdf.save(new file(\"/var/tmp/report.pdf\"));  } throws an error exception in thread \"main\" java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.extractalphaimage(pdxobjectimage.java:499)  at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.createimagestream(pdpixelmap.java:122)  at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.<init>(pdpixelmap.java:86)  at org.reports.reportgenerator.reportgenerator.generatepdf(reportgenerator.java:122)",
        "label": 11
    },
    {
        "text": "method createcolormodel not implemented for pdcalgray the method createcolormodel is not implemented for the class pdcalgray - when called, it throws an ioexception:  /**      * create a java colorspace for this colorspace.      *      * @return a color space that can be used for java awt operations.      *      * @throws ioexception if there is an error creating the color space.      */ protected colorspace createcolorspace() throws ioexception     {         throw new ioexception( \"not implemented\" );     } the exception thrown is catched elsewhere (by an aspect?) but it leads to an ugly stacktrace in the logfile .. : 2013-09-24 09:32:11,858 error - pdpixelmap : java.io.ioexception: not implemented java.io.ioexception: not implemented  at org.apache.pdfbox.pdmodel.graphics.color.pdcalgray.createcolormodel(pdcalgray.java:114)  at ...  at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:781) ....",
        "label": 6
    },
    {
        "text": "avoid constructing debug messages if debug log is off concatenation and formatting of strings takes some time. if a debug message is written to the log at a frequently called place, it should be surrounded by an if(log.isdebugenabled()). using the if everywhere does not do any harm either. attached patch changes two classes which were sticking out in the profiler. the difference in performance is not that big, but, in my application, each millisecond counts.",
        "label": 11
    },
    {
        "text": "extractimages finds never rendered images the file from pdfbox-2101 is still causing unexpectedly high memory use with extractimages when compared to pdftoimage. given that pdftoimage uses the same caching strategy, it's not really a caching issue, though we might still want to think about that. the pdf contains 55 images on the first page which are never rendered and extractimages runs out of memory trying to extract them all. given that pdfs often contain junk like this, i suggest that extractimages only extract images which are actually drawn to the page at some point.",
        "label": 6
    },
    {
        "text": "pdnametreenode  keys in names shall be sorted according to pdf 32000-1:2008 page 89, paragraph following table 36, the keys in names shall be sorted. so the parameter for setnames(map) and the return value for getnames() should better be a sortedmap.",
        "label": 7
    },
    {
        "text": "copyright adam pdfonttest.java and decompressobjectstreams.java has: copyright 2011 adam.",
        "label": 1
    },
    {
        "text": "arrayindexoutofboundsexception pdimagexobject applymask java.lang.arrayindexoutofboundsexception: 3 at java.awt.image.samplemodel.getpixel(samplemodel.java:712) at java.awt.image.raster.getpixel(raster.java:1539) at org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject.applymask(pdimagexobject.java:272) java -cp pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar org.apache.pdfbox.tools.pdftoimage out.pdf",
        "label": 11
    },
    {
        "text": "embbed file problem [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552833&aid=1486424 originally submitted by nobody on 2006-05-11 04:25. hello, i'm trying to embbed several pdf files (1.6- with xfa form inside) in a single pdf container (1.6 - with xfa form inside). the first time, if i embbed a pdf file with pdfbox and reopen later the resulted file in acrobat, all works good. file1 + attachment1 + attachment2-->file2 file 2 contains attachment1 + attachment2 --> ok but if i retry to attach an additional attachment to the previous resulted file, if i reopen the generated pdf in acrobat, acrobat can open it (with a warning - \"le type de paramtre fourni par la proc\u00e9dure pds est incorrect\" - sorry, i have a french version), but the content that is openned is the one from the first previous first attachment i made (attachment1) and not the content contained in the main pdf (file1). file2+ attachment 3 --> file 3 corrupted pdf file . file3 show the content of attachment 1 and contains attachment 2 and attachement 3. is this a bug or does i make someting false? the file is about 500kb, so i cannot attached this to this message. denis pilet dpilet@iware.ch [comment on sourceforge] originally sent by benlitchfield. logged in: yes user_id=601708 sorry for the delay in the response, i believe this is fixed in cvs but not yet released, please give that version a try and let me know if you are still having an issue. http://www.pdfbox.org/dist ben",
        "label": 1
    },
    {
        "text": "add code for ccitt compression the class org.apache.pdfbox.pdmodel.graphics.image.ccittfactory contains code to create a pdimagexobject from an existing tiff file. unlike the corresponding jpegfactory it does not provide any code to create a pdimagexobject from a bufferedimage. the main reason is that pdfbox contains only code to decompress ccitt group 3/4 files, code for compression is missing. based on the compression code in apache commons imaging i implemented the missing method and i'm willing to contribute it. i can provide a patch, but i would need advise whether it's preferable to duplicate code from apache commons imaging or to create a dependency on it.",
        "label": 11
    },
    {
        "text": "ligatures and some glyphs missing ligatures are missing in the attached file (\"filter\", \"identification\") and some glyphs (on first page, below \"bat observations\" a glyph is missing after the italic \"t\").",
        "label": 6
    },
    {
        "text": "pdfbox won't embed a font for a form field if field is empty when working with acroforms, attempting to se the font of a form field, the font will only properly embed if the form field contains at least one character. fonts set on empty fields do not embed. the font is only embedded if it is actually used. example code:         final pdfont formfont = loadfontresourcewithdef(pdf, default_font_path,                 def_document_font);         final pdresources resources = acroform.getdefaultresources();         final string fontname = resources.add(formfont).getname();         acroform.setdefaultresources(resources);         this.defaultappearancestring = \"/\" + fontname + \" 0 tf 0 g\";     }     public static pdfont loadfontresourcewithdef(pddocument doc,             string fontpath, pdfont deffont) {         pdtype0font resfont = null;         try {             final inputstream is = this.getclass().getresourceasstream(fontpath);             if (is != null) {                 resfont = pdtype0font.load(doc, is);             }         } catch (ioexception e) {             log(\"error loading font \" + fontpath, e);         }         return resfont != null ? resfont : deffont;     } presume that i have verified that the font actually is loaded into the formfont variable. some time later, i iterate over the fields in the acroform and, for each field, do this:             if (field instanceof pdtextfield) {                 final pdtextfield textfield = (pdtextfield) field;                 textfield.setdefaultappearance(defaultappearancestring);             }",
        "label": 11
    },
    {
        "text": "stream parsing still incorrect if length value is wrong from issue pdfbox-1333 - \"in 1.7.0 stream parsing in baseparser was optimized to use length value if available. the advantage is faster parsing and independence of 'endstream' bytes sequences in stream. however the disadvantage is that streams with wrong length values cannot be parsed anymore\" - etc. this issue was marked as fixed now that cosstreams can once again be parsed by reading all the way to 'endstream'. however, the resulting cosstream object still contains the expected length, not the true length. when parsing the cosstream with a pdfstreamparser, the call to cosstream#getunfilteredstream uses getlength() instead of getlengthwritten to limit the amount of data that can be read. this can truncate the stream and means that incorrect length values still lead to missing data, and so limits the usefulness of the last fix. changing the call to getlengthwritten should solve the problem.",
        "label": 11
    },
    {
        "text": "create a module with examples instead having them in pdfbox jar the package org.apache.pdfbox.examples (and its subpackage) contains examples on how to use pdfbox. the size of these classes in the generated jar not so big (100 kb, 3% of the size), but it is a first step in reduction of pdfbox jar size. moreover, it would be easier to add examples depending on preflight in a separate jar. if there is enough vote, i can do it.",
        "label": 4
    },
    {
        "text": "ttc fonts not supported for substitution issue: the character position is seen wrong in some cases in pdfreader. description: the character position (coordinate) seems irregular in pdfreader. please refer the link below for input pdf \"http://www.city.yotsukaido.chiba.jp/shisei/jigyoshamuke/nyusatsu/nyusatsu/teishi.files/simeiteisi12.4.pdf\" 1. open this pdf both in pdfreader and adobe reader. 2. consider the input characters \u300c102269 \u5de5\u4e8b\u6210\u7e3e\u300d 3. some character positions are seen incorrectly. for example, the x coordinate of the character \"\u5de5\" is between the digit \"1\" and \"0\".",
        "label": 6
    },
    {
        "text": "implement apache project branding requirements we should implement the requirements from http://www.apache.org/foundation/marks/pmcs.html latest in q1 next year.",
        "label": 1
    },
    {
        "text": "allow setting extended graphics state in pdpagecontentstream i use pdextendedgraphicsstate to draw with transparency. for this to work, i register the extended graphics state, then call pdpagecontentstream.appendrawcommands(\"/name gs\\n\"); appendrawcommands() has been deprecated in 2.0.0. i need a way of doing this, so please either un-deprecate appendrawcommands(), or add something like: public void setextendedgraphicsstate(pdextendedgraphicsstate state) {     cosname egsname = resources.add(state);     writeoperand(egsname);     writeoperator(\"gs\"); }",
        "label": 11
    },
    {
        "text": "pddocument load filename pdf  hangs for pdf files having size the below code i am using for loading my pdf. but my pdf file is not a zero sized files and having full permission and it is not a corrupt file also. but i ddint get any error after code. it just hangs. it is working in local, but not working in server . (created ,jar files and then exe, then the .exe will excuted in the server) java using 1,4 pddocument pdf=pddocument.load(\"d: filename.pdf\"); pdf.print(); please provide me why the same code is not working in server.",
        "label": 1
    },
    {
        "text": "special characters are not correctly handled anymore when printing or exporting to image i've just upgraded pdfbox from 1.2.1 to 1.3.1 and special characters (like '\u00e9', '\u00b0', '\u00e0', ...) are not correctly handled anymore when printing or exporting to image. these characters are remplaced by '\u00f8' or blank spaces. everything was working flawlessly with pdfbox 1.2.1.",
        "label": 1
    },
    {
        "text": "add tika parsers for pdf and ttf the pdf and ttf parsers in apache tika rely more on improvements in pdfbox than on those in tika, so it would make more sense for that code to reside inside apache pdfbox. having the code inside pdfbox would allow for tighter integration with pdfbox internals and avoid need to wait for an official pdfbox release before new features can be used inside the pdf and ttf parsers. to do this, i'd migrate the code pdf and ttf parser classes and related test cases and files from tika to the pdfbox and fontbox components. we'd add an optional dependency to tika-core to these components, so people who don't use or need tika wouldn't be affected. i'll attach a patch with the proposed changes.",
        "label": 7
    },
    {
        "text": "black shapes in the background of some rendered pages of some pdfs rendering the sample pdf attached to images results in black shapes in the background of some rendered pages as appearing in the attached sample images (1-4), page 5 is rendered properly. the images attached were generated using java -jar pdfbox-app-2.0.0-snapshot.jar pdftoimage black-pages-sample.pdf against the latest codebase on the trunk as of today (2014-11-11 at 11:15 am gmt).",
        "label": 6
    },
    {
        "text": "indexoutofboundsexception  while parsing few pdf's hi team, the text extraction works fine with most pdf's but it failed for couple of them with the below error: the pdf can be found here http://cid-a3aa7f7d9888874d.office.live.com/self.aspx/public/getting%5e_started%5e_with%5e_flex3.pdf . let me know if this is a bug or an issue with the pdf. java.lang.indexoutofboundsexception: index: 2,size: 2 at java.util.sublist.rangecheck(abstractlist.java:864) at java.util.sublist.get(abstractlist.java:737) at org.apache.fontbox.cff.charstringconverter.drawcurve(charstringconverter.java:415) at org.apache.fontbox.cff.charstringconverter.handletype2command(charstringconverter.java:277) at org.apache.fontbox.cff.charstringconverter.handlecommand(charstringconverter.java:81) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:53) at org.apache.fontbox.cff.charstringconverter.handletype2command(charstringconverter.java:307) at org.apache.fontbox.cff.charstringconverter.handlecommand(charstringconverter.java:81) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:53) at org.apache.fontbox.cff.charstringconverter.convert(charstringconverter.java:64) at org.apache.fontbox.cff.cfffont$mapping.totype1sequence(cfffont.java:374) at org.apache.fontbox.cff.afmformatter.renderfont(afmformatter.java:126) at org.apache.fontbox.cff.afmformatter.printfontmetrics(afmformatter.java:64) at org.apache.fontbox.cff.afmformatter.printfont(afmformatter.java:57) at org.apache.fontbox.cff.afmformatter.format(afmformatter.java:50)",
        "label": 1
    },
    {
        "text": "incorrect output when word spacing is achieved by matrix translation when extracting text in a pdf document in which word spacing is achieved by matrix translation, in versions 1.3.x and 1.4 the different words are being merged. this situation doesn't happen in 1.2 branch. after investigating a bit, the error was introduced with a refactoring of the pdfstreamengine class, and is related to textmatrixend computation. in 1.2 branch the characterspacingwidth was added after computing the textmatrixend, but in 1.3 (and 1.4) this characterspacingwidth is preadded to the textmatrixend, so the system is unable to detect a new word.",
        "label": 1
    },
    {
        "text": "randomaccessbuffer consumes too much memory  randomaccessbuffer holds uncompressed image during operation because it is what exactly pdfbox extractimages do. but holding uncompressed image instead of compressed one in memory consumes too much memory, not excluding many pdf xobjects that can use filter to compress itself. it would be good if pdfbox provides option that reverts to cosobject state just before the randomaccess object created(the state that pdf xobject stream parsed and cosdictionary objects haven't created because user doesn't requested it using get____() method.) it is crucial feature so that pdfbox can analyze huge pdf file(>100mb). in current source, one must close cosstream unless required(and i know closed stream cannot reopened again.) class name | shallow heap | retained heap -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- org.apache.pdfbox.cos.cosobject @ 0x5ad4940 | 24 | 8,187,264 <class> class org.apache.pdfbox.cos.cosobject @ 0x58c4020 0 0 generationnumber org.apache.pdfbox.cos.cosinteger @ 0x5ad0080 24 24 baseobject org.apache.pdfbox.cos.cosstream @ 0x5b25ea0 32 8,187,216   <class> class org.apache.pdfbox.cos.cosstream @ 0x58c3e00 8 8   items java.util.linkedhashmap @ 0x5b2a0f0 56 552   file org.apache.pdfbox.io.randomaccessbuffer @ 0x5b2a128 48 8,186,528     <class> class org.apache.pdfbox.io.randomaccessbuffer @ 0x5ad2b00 8 8     currentbuffer byte[16384] @ 0x590f360 16,400 16,400     bufferlist java.util.arraylist @ 0x5b2e200 24 8,170,080   '- total: 3 entries     filteredstream org.apache.pdfbox.io.randomaccessfileoutputstream @ 0x5b2a158 32 32   decoderesult org.apache.pdfbox.filter.decoderesult @ 0xa65f618 16 16   unfilteredstream org.apache.pdfbox.io.randomaccessfileoutputstream @ 0xa71ab18 32 32 '- total: 6 entries   objectnumber org.apache.pdfbox.cos.cosinteger @ 0x5b25ec0 24 24 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "label": 1
    },
    {
        "text": "previous revision is damaged after signing ihave pdf file which was signed by some other application. when i try to sign it with pdfbox, previous revision is damaged. i have discussion at stackoverflow, with michael klink. http://stackoverflow.com/questions/19903884/pdf-document-is-modified-by-another-revision/19905271?noredirect=1#19905271 when we see some changes merely was structural. some changes was just rounding problem - pdfbox-1778. when i test, problem of damaged signature was caused from structural change [when there must be direct reference, there was indirect reference and etc..] so we solve that problem. i will upload damaged pdf document, fixed pdf, and the patch too.",
        "label": 1
    },
    {
        "text": "text extraction   words on same line detection failing in x the ability to extract a line of text as it appears in the pdf is no longer working in the 2.x version of pdfbox. java -jar pdfbox-app-1.8.4.jar extracttext -console -sort ~/desktop/text-extraction-issues.pdf results in: . . . your code        our code                            description                                              qty    price ex   total ex   11sp             100129630       irwin vice-grip 11 c-clamp swivel pad           4         00.00      000.00 ir-0352          100094584       irwin 600mm tool bag                            1         00.00       00.00 em81.9           100088913       empire torpedo level aluminium                  1         00.00       00.00 20566-618r       100023443       lenox recipro blade 150x20x0.9mm 18tpi 5p        3          0.00       00.00 . . . while java -jar pdfbox-app-2.0.2.jar extracttext -console -sort ~/desktop/text-extraction-issues.pdf results in: . . . your code        our code                            description                                              qty    price ex   total ex   irwin vice-grip 11 c-clamp swivel pad     11sp             100129630              4         00.00      000.00 irwin 600mm tool bag                      ir-0352          100094584              1         00.00       00.00 empire torpedo level aluminium            em81.9           100088913              1         00.00       00.00 lenox recipro blade 150x20x0.9mm 18tpi 5p 20566-618r       100023443              3          0.00       00.00 . . .",
        "label": 11
    },
    {
        "text": " patch  improved signing of existing signature fields short: the handling of signing existing signature fields must be improved (and this patch is part of that effort). details and background the current implementation for visible signatures always adds new signature fields when signing documents. in that case for that signature everything has to be definied (field properties, coordinates etc.). another quite common use case is the use of an existing signature field which should be signed. there are basically two different roles: the document creator who creates the document with all its texts, graphics and form fields. the creator knows best where everything should be positioned and is even sometimes bound by certain regulations etc. the document creator defines his intend with the \"usage rights\" and may add a usage right signature. then later a document user e.g. a customer fills out form fields and signs those predefined signature fields. in that case the coordinates and a lot of attributes are alrady defined and there is no need (and sometimes it is even forbidden) to change the physical attributes of those signature fields. the only two things which are of interest is to set the signature dictionary and to recreate the appearance. in the current implementation however one needs to define the coordinates of an existing signature field again. but not enough since the screen coordinates in java (and in the pdfbox pdvisiblesigbuilder) and pdf coordinates have a different origin one must convert those existing pdf coordinates to screen coordinates which are later converted to pdf coordinates again. this is cumbersome, error prone and totally unecessary... with the supplied patch there is no conversion of coordinates anymore.",
        "label": 11
    },
    {
        "text": "nullpointerexception in org apache pdfbox pdmodel graphics pdshading tostring  when getdomain  returns null the problem is that the tostring method is called on objects which may have been returned as null the suggested fix to this, in the attached patch is to check if null, then write an empty string string s = \"shading \" + shadingname + \"\\n\" + \"\\tshadingtype: \" + getshadingtype() + \"\\n\" + \"\\tcolorspace: \" + scolorspace + \"\\n\" + \"\\tantialias: \" + getantialias() + \"\\n\" + \"\\tcoords: \" + (getcoords() != null ? getcoords().tostring() : \"\") + \"\\n\" + \"\\tdomain: \" + (getdomain() != null ? getdomain().tostring() : \"\") + \"\\n\" + \"\\tfunction: \" + sfunction + \"\\n\" + \"\\textend: \" + (getextend() != null ? getextend().tostring() : \"\") + \"\\n\" + \"\\traw value:\\n\" + <error message as dumped to log> info [main] (pdfstreamengine.java557) - unsupported/disabled operation: bdc info [main] (pdfstreamengine.java557) - unsupported/disabled operation: bx warn [main] (shfill.java63) - java.lang.nullpointerexception java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.graphics.pdshading.tostring(pdshading.java:204) at org.apache.pdfbox.pdfviewer.pagedrawer.shfill(pagedrawer.java:398) at org.apache.pdfbox.util.operator.pagedrawer.shfill.process(shfill.java:58) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) info [main] (pdfstreamengine.java557) - unsupported/disabled operation: ex info [main] (pdfstreamengine.java557) - unsupported/disabled operation: emc </error message as dumped to log>",
        "label": 1
    },
    {
        "text": "null pointerexception ./hyperlink_withmarks.pdf :: exception in thread \"main\" java.lang.nullpointerexception at org.apache.pdfbox.preflight.font.type0fontvalidator.processcmapasstream(type0fontvalidator.java:257) at org.apache.pdfbox.preflight.font.type0fontvalidator.checkcmapencoding(type0fontvalidator.java:211) at org.apache.pdfbox.preflight.font.type0fontvalidator.checkencoding(type0fontvalidator.java:188) at org.apache.pdfbox.preflight.font.type0fontvalidator.validate(type0fontvalidator.java:77) at org.apache.pdfbox.preflight.process.reflect.fontvalidationprocess.validate(fontvalidationprocess.java:62) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:49) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatefonts(resourcesvalidationprocess.java:89) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:68) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:49) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validateresources(singlepagevalidationprocess.java:158) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:77) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:49) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:56) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:45) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168) at org.apache.pdfbox.preflight.validator_a1b.runsimple(validator_a1b.java:158) at org.apache.pdfbox.preflight.validator_a1b.main(validator_a1b.java:125)",
        "label": 3
    },
    {
        "text": "preflight doesn't report on non embedded font see the following file: http://dl.dropbox.com/u/9523497/test_noembeddedfonts.pdf this pdf uses (truetype) fonts that are not embedded (arial). however, preflight does not report on this! (as a double-check i also analysed the file with acrobat 9's preflight module, which correctly identifies the problem.) additional info: i used build #562 (14-nov-2012 23:05:44), preflight-1.8.0-20121114.230701-58-jar-with-dependencies.jar from the command line. (strangely the all-in jar of the more recent build #563 doesn't seem to work at all on my system, but that's another story.)",
        "label": 3
    },
    {
        "text": "incorrect property names for lists when i write code as follows: pddocument document = pddocument.load(new file(file_path)); domxmpparser parser = new domxmpparser(); xmpmetadata metadata = parser.parse(document.getdocumentcatalog().getmetadata().getstream().getunfilteredstream()); metadata.removeschema(metadata.getpdfidentificationschema()); outputstream res = new fileoutputstream(result_xml); new xmpserializer().serialize(metadata, res, true); i got xml which contain following tag: <dc:creator>     <rdf:seq>         <rdf:creator>tomioka, satoshi</rdf:creator>     </rdf:seq> </dc:creator> but instead of rdf:creator must be rdf:li. this problem reproducible also for others dublincoreshema properties which contains lists.",
        "label": 8
    },
    {
        "text": "acroform flattening will cause hidden fields become visible hi! when i flatten a pdf file containing both visible and hidden fields, the hidden ones surprisingly become visible. i believe that the hidden ones should be kept hidden, e.g. by dropping them completely before flattening. i made a workaround which removes hidden fields from the document before flattening but it would make sense that the library would do this automatically, and therefore i suspect that this is a bug. cheers!",
        "label": 8
    },
    {
        "text": "addtional cmap files from adobe due some restrictions in the license of the cmap files from adobe (see legal-36) we have to remove them from svn. a standard package is already available by download [1]. but there are still some additional cmap files left in svn which have to be removed. most of them are included in the packages i found on [2] and [3]. [1] http://repo2.maven.org/maven2/com/adobe/pdf/pcfi/2009.06.14/pcfi-2009.06.14.jar [2] ftp://ftp.oreilly.com/pub/examples/nutshell/cjkv/adobe/ [3] http://www.adobe.com/devnet/opentype/archives/glyphlist.txt",
        "label": 7
    },
    {
        "text": "pdftextstripper doesn't always write paragraph start in some cases pdftextstripper writes more paragraph ends than paragraph starts.",
        "label": 11
    },
    {
        "text": "pdfprintable has subsampling but it can not be used we are happily using version 2.0.9 with subsampling. during that, i have noticed that memory consumption is unusually high during printing for a particular file. decompressing and rendering this file was without issues (we have created an instance of pdfrenderer and set subsampling to true). during debugging i notice that in the  pdfprintable when calling renderer.renderpagetographics the renderer has this feature turned off. the reason is very simple. pdfprintable creates its own pdfrenderer in the constructor and does not set subsampling on / does not allow this feature to be set from outside. i did some test with a modified version of pdfprintable (setting always subsampling to true in the very same constructor the renderer is instantiated) and it shows significantly better results for memory consumption - in my case it was from outofmemory with xmx1g to no problem with xmx420m (i did not bother to test with lower xmx).   i am not sure if this was the intention but i do not think so since there is at least one if asking about subsampling and with this configuration, it is pointless since it always will be false.",
        "label": 11
    },
    {
        "text": "pdpage converttoimage destroys rtl text hello, pdpage converttoimage() doesnt work well with rtl languages. all i need to do, is export a pdf to jpg and divide it to 2 parts: left.jpg, right.jpg i managed to do everything fine but the jpg has mixed up text. what can i do?",
        "label": 1
    },
    {
        "text": "extracttext missing most of text in this pdf file  due to font bounding box with minus infinity attached pdf file is missing most of the text when processed by the extracttext example program i traced it down to pdfontdescriptordictionary.getfontboundingbox() getting a rectange for cosname.font_bbox that contained a ymin value of minus infinity. that method then creates a pdrectangle which calculates a bounding box with a ymin value of -65,329, and results in an enormous text size, and things go downhill from there. the text cannot be matched up, and most of it ends up being discarded. i was able to hack a fix by doing a check in the constructor pdrectangle.pdrectangle( cosarray array ) for big negative numbers and setting them to 0. with that change, all the text came through as expected. however, i don't have enough familiarity with the code to understand what a real fix ought to look like. the pdf file looks to be fine by other programs such as acrobat and nitropdf",
        "label": 11
    },
    {
        "text": "classcastexception in preflight  pdannotationwidget cannot be cast to pdfield java.lang.classcastexception: org.apache.pdfbox.pdmodel.interactive.annotation.pdannotationwidget cannot be cast to org.apache.pdfbox.pdmodel.interactive.form.pdfield  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.explorefields(acroformvalidationprocess.java:107)  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.validefield(acroformvalidationprocess.java:155)  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.explorefields(acroformvalidationprocess.java:107)  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.validefield(acroformvalidationprocess.java:155)  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.explorefields(acroformvalidationprocess.java:107)  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.validefield(acroformvalidationprocess.java:155)  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.explorefields(acroformvalidationprocess.java:107)  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.validefield(acroformvalidationprocess.java:155)  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.explorefields(acroformvalidationprocess.java:107)  at org.apache.pdfbox.preflight.process.acroformvalidationprocess.validate(acroformvalidationprocess.java:60)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88)  at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168)  at pdfboxpageimageextraction.preflighttest.main(preflighttest.java:44)",
        "label": 11
    },
    {
        "text": "the text content extracted by pdfbox is not as the same as it is displayed in adobe reader hello, i useed pdfbox extract text content from the pdf document in the appendix, founded the extracted text is \"\u5e74\u9884\" but the text displayed in adobe reader is \"\u5e74\u671f\". i want to know how to get the correct text content (as adobe reader showing) from this kind of pdf documents by pdfbox.",
        "label": 1
    },
    {
        "text": "multiple text operations on page cause npe in ttfsubsetter when multiple begintext/endtext pairs are called within one page, the contentstream.close() fails with: java.lang.nullpointerexception  at org.apache.fontbox.ttf.ttfsubsetter.getunicodecmap(ttfsubsetter.java:96)  at org.apache.fontbox.ttf.ttfsubsetter.<init>(ttfsubsetter.java:85)  at org.apache.pdfbox.pdmodel.font.truetypeembedder.subset(truetypeembedder.java:296)  at org.apache.pdfbox.pdmodel.font.pdtype0font.subset(pdtype0font.java:112)  at org.apache.pdfbox.pdmodel.edit.pdpagecontentstream.close(pdpagecontentstream.java:2049)  at org.marsik.elshelves.backend.services.stickerservicetest.testfailingunicodepdf(stickerservicetest.java:60)  at sun.reflect.nativemethodaccessorimpl.invoke0(native method)  at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)  at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)  at org.junit.runners.model.frameworkmethod$1.runreflectivecall(frameworkmethod.java:47)  at org.junit.internal.runners.model.reflectivecallable.run(reflectivecallable.java:12)  at org.junit.runners.model.frameworkmethod.invokeexplosively(frameworkmethod.java:44)  at org.junit.internal.runners.statements.invokemethod.evaluate(invokemethod.java:17)  at org.junit.runners.parentrunner.runleaf(parentrunner.java:271)  at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:70)  at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:50)  at org.junit.runners.parentrunner$3.run(parentrunner.java:238)  at org.junit.runners.parentrunner$1.schedule(parentrunner.java:63)  at org.junit.runners.parentrunner.runchildren(parentrunner.java:236)  at org.junit.runners.parentrunner.access$000(parentrunner.java:53)  at org.junit.runners.parentrunner$2.evaluate(parentrunner.java:229)  at org.junit.runners.parentrunner.run(parentrunner.java:309)  at org.junit.runner.junitcore.run(junitcore.java:160)  at com.intellij.junit4.junit4ideatestrunner.startrunnerwithargs(junit4ideatestrunner.java:74)  at com.intellij.rt.execution.junit.junitstarter.preparestreamsandstart(junitstarter.java:211)  at com.intellij.rt.execution.junit.junitstarter.main(junitstarter.java:67)  at sun.reflect.nativemethodaccessorimpl.invoke0(native method)  at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)  at com.intellij.rt.execution.application.appmain.main(appmain.java:134) this can be reproduced using the following test case. package org.marsik.elshelves.backend.services; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.pdpage; import org.apache.pdfbox.pdmodel.common.pdrectangle; import org.apache.pdfbox.pdmodel.edit.pdpagecontentstream; import org.apache.pdfbox.pdmodel.font.pdfont; import org.apache.pdfbox.pdmodel.font.pdtype0font; import org.junit.test; public class stickerservicetest {     @test     public void testworkingunicodepdf() throws exception {         pddocument document = new pddocument();         pdfont titlefont = pdtype0font.load(document, this.getclass().getresourceasstream(\"/dejavusans-bold.ttf\"));         pdpage page = new pdpage(pdrectangle.a4);         document.addpage(page);         pdpagecontentstream contentstream = new pdpagecontentstream(document, page);         contentstream.begintext();         contentstream.setfont(titlefont, 12);         contentstream.newlineatoffset(0, 100);         contentstream.showtext(\"p\u011bkn\u00fd \u017elu\u0165ou\u010dk\u00fd k\u016f\u0148 \u00fap\u011bl \u010f\u00e1belsk\u00e9 \u00f3dy\");         contentstream.endtext();         contentstream.close();         document.close();     }     @test     public void testfailingunicodepdf() throws exception {         pddocument document = new pddocument();         pdfont titlefont = pdtype0font.load(document, this.getclass().getresourceasstream(\"/dejavusans-bold.ttf\"));         pdpage page = new pdpage(pdrectangle.a4);         document.addpage(page);         pdpagecontentstream contentstream = new pdpagecontentstream(document, page);         contentstream.begintext();         contentstream.setfont(titlefont, 12);         contentstream.newlineatoffset(0, 100);         contentstream.showtext(\"p\u011bkn\u00fd \u017elu\u0165ou\u010dk\u00fd k\u016f\u0148 \u00fap\u011bl \u010f\u00e1belsk\u00e9 \u00f3dy\");         contentstream.endtext();         contentstream.begintext();         contentstream.setfont(titlefont, 12);         contentstream.newlineatoffset(0, 200);         contentstream.showtext(\"p\u011bkn\u00fd \u017elu\u0165ou\u010dk\u00fd k\u016f\u0148 \u00fap\u011bl \u010f\u00e1belsk\u00e9 \u00f3dy\");         contentstream.endtext();         contentstream.close();         document.close();     } }",
        "label": 6
    },
    {
        "text": "pdf tiff conversion is not happening properly we are trying to convert pdf to tiff using the below code, the tiff images are not coming well (width is shrinking, please see the attachment of pdf file and converted tiff file). pddocument document = pddocument.load(pdffile); list<pdpage> pages = document.getdocumentcatalog().getallpages(); for (int i = 0; i < pages.size(); i++) { pdpage page = (pdpage) pages.get; bufferedimage image = page.converttoimage(12, 300); // convert this image to tiff file. } to overcome this problem i modified below code in 'org.apache.pdfbox.util.operator.pagedrawer.invoke' to adjust the width and height. // my page width is always 2479 int imagewidth = awtimage.getwidth(); if(imagewidth > 2479) { imagewidth = 2479; } // my page height is always 3508 int imageheight = awtimage.getheight(); if(imageheight > 3508) { imageheight = 3508; } now images are coming fine, it is very slow in processing, not even processing 25 pdfs per hour, also it has memory leaks, it uses lot of resources, it is killing other process with outofmemory errors.",
        "label": 1
    },
    {
        "text": "exception access violation in fontmanager dll when converting the attached pdf to a png using pdfimagewriter.writeimage i receive an exception_access_violation in fontmanager.dll. this is similar to pdfbox-780 but using the pdf attached to that issue doesn't produce the error. this error doesn't occur with 1.7 but i do get the warning \"could not parse predefined cmap file for 'adobe-identity-ucs'\".",
        "label": 1
    },
    {
        "text": "when merging certain pdf's several odd looking empty pages occur in the result unfortunately i cannot attach a input file for this case as it contains confidential customer data, but i'll try to explain the problem in depth so you hopefully are able to track it down. when we merge certain pdf's with the pdfmergerutility the result contains several empty pages at the end of the document. it seems like that only certain pdf versions are effected (i.p.: 1.5 (acrobat 6.x)). i tracked the problem down to the the following part in the appenddocument method of the pdfmergerutility:  //finally append the pages         list<pdpage> pages = srccatalog.getallpages();         iterator<pdpage> pageiter = pages.iterator();         while( pageiter.hasnext() )         {             pdpage page = pageiter.next();             pdpage newpage =                 new pdpage( (cosdictionary)cloner.clonefornewdocument( page.getcosdictionary() ) );             newpage.setcropbox( page.findcropbox() );             newpage.setmediabox( page.findmediabox() );             newpage.setrotation( page.findrotation() );             destination.addpage( newpage );         } the problem is that call to srccatalog.getallpages(); returns for example 6 pdpage objects, but for the same input document, the call to source.getnumberofpages() returns only 2. thus we add 4 odd empty pages to the result document. i hope this description is good enough to figure out the problem. don't hesitate to ask for further details.",
        "label": 6
    },
    {
        "text": "classcastexception  cosinteger cannot be cast to cosdictionary i get the below exceptions when calling pdfdoc.getdocumentcatalog().getallpages(). the code continues after the first exception because i've called pddocument.load(\"c:/cancersummreport_34914.pdf\", true) setting the load \"force\" param to true. the second exception causes the code to abort. (i will try uploading the pdf that causes this problem) 2010-09-02 16:47:47,521 [main] warn (pdfparser.java:189) - parsing error, skipping object java.io.ioexception: error: expected an integer type, actual='bj' at org.apache.pdfbox.pdfparser.baseparser.readint(baseparser.java:1310) at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:497) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:179) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:878) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:843) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:768) at com.xyz.framework.functionaltests.pdfboxbug.main(pdfboxbug.java:16) 2010-09-02 16:47:47,552 [main] warn (baseparser.java:215) - invalid dictionary, found:? but expected:'' exception in thread \"main\" java.lang.classcastexception: org.apache.pdfbox.cos.cosinteger cannot be cast to org.apache.pdfbox.cos.cosdictionary at org.apache.pdfbox.pdmodel.pddocument.getdocumentcatalog(pddocument.java:414) at com.xyz.framework.functionaltests.pdfboxbug.main(pdfboxbug.java:18)",
        "label": 7
    },
    {
        "text": "symbol glyphs not aligned symbol glyphs not aligned in rendering",
        "label": 11
    },
    {
        "text": "stack overflow error in main  no output file produced  when i analyse attached pdf with preflight, it crashes with \"exception in thread \"main\" java.lang.stackoverflowerror\". using the xml option this exception is not wrapped in an exceptionthrown element, but no output is produced at all. to put this in perspective: the offending pdf is part of a dataset of 15,000 pdfs, and it was the only one resulting in this behaviour, so it doesn't look like a common error.",
        "label": 1
    },
    {
        "text": "infinite read loop in bufferedrandomaccesssfile when reading an input file using the bufferedrandomaccesssfile an infinite loop will occur once the buffer is drained and the value leftover becomes 0, since the read method will continue to return 0 as the -1 result from fillbuffer() is never propagated upstream and any code that is executing in a loop using -1 as an indicator that the file has been fully read will never exit. an example of where this occurs can be found here: https://github.com/apache/pdfbox/blob/782ac20dcea7b2e5bb6848f4da9a68c00b4d69a3/fontbox/src/main/java/org/apache/fontbox/ttf/ttfdatastream.java#l264",
        "label": 11
    },
    {
        "text": "incorrect key for color space in pdgroup according to the specification of pdf reference 1.4 (1.7), paragraph 7.5.5, transparency group may contain color space in the 'cs' key, but in the method pdgroup.getcolorspace () the search is implemented with the use of 'colorspace' key.",
        "label": 11
    },
    {
        "text": "failure to render opentype  truetype  for the attached test pdf, the \"opentype (truetype)\" text line is not rendered correctly.",
        "label": 6
    },
    {
        "text": "maven pom xml   directory structure incorrect for the fontbox incubating release the version number in the pom.xml for the fontbox 0.8-incubating release is incorrectly set to \"0.8.0-incubator\" rather than \"0.8.0-incubating\" also the directory structure in the maveb2 repo is also incorrect: http://repo1.maven.org/maven2/org/apache/pdfbox/fontbox/0.8.0-incubator/ ..it should be http://repo1.maven.org/maven2/org/apache/pdfbox/fontbox/0.8.0-incubating/ i believe this needs a new releass to fix this.",
        "label": 7
    },
    {
        "text": "restore backward compatibility between overlay and overlaypdf there is a major difference with the way the overlay pages are handled between the overlay tool from pdfbox 1.6.x and the latest overlaypdf in 1.8.6. in the original version, when using a multi-page pdf overlay, all pages from the overlay would be combined with the original document. the latest version only uses the first page of the overlay. example with a 6 page document and a 2 page (a, b) overlay: expected behavior: a, b, a, b, a, b current behavior: a, a, a, a, a, a here's the reference to the documentation of the original behavior taken from http://svn.apache.org/viewvc/pdfbox/tags/1.6.0/pdfbox/src/main/java/org/apache/pdfbox/overlay.java?view=markup /** * overlay on document with another one.<br> * e.g. overlay an invoice with your company layout<br> * <br> * how it (should) work:<br> * if the document has 10 pages, and the layout 2 the following is the result:<br> * <pre> * document: 1234567890 * layout  : 1212121212 * </pre> * <br> * * @author mario ivankovits (mario@ops.co.at) * @author <a href=\"ben@benlitchfield.com\">ben litchfield</a> * * @version $revision: 1.7 $ */ public class overlay { ...",
        "label": 1
    },
    {
        "text": "error reading the double l when trying to read some pdf with words containing ll , the library draws only one of the l. perform a test with the itextpdf library and working properly.",
        "label": 11
    },
    {
        "text": "all lines that use a given font stop rendering if '\u00f6' is inserted   arrayindexoutofboundsexception in ttfsubfont buildposttable when using a couple of different courier fonts, if i insert the character '\u00f6' into a line of the pdf any other line that uses the same font will no longer display. other styles of the same font still work fine. example file: http://s000.tinyupload.com/?file_id=72100196724522466317 this happens in 1.8.8, 1.8.11, and the unreleased 1.8.12 but does not happen in 2.0.0. to display the pdf i've been using the pdfbox app jars for the respective versions which gives the following error: mar 22, 2016 11:52:58 am org.apache.pdfbox.util.pdfstreamengine processoperator warning: java.lang.arrayindexoutofboundsexception: 18 java.lang.arrayindexoutofboundsexception: 18 at org.apache.fontbox.ttf.ttfsubfont.buildposttable(ttfsubfont.java:969) at org.apache.fontbox.ttf.ttfsubfont.writetostream(ttfsubfont.java:1131) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.rebuildttf(pdtruetypefont.java:556) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.getawtfont(pdtruetypefont.java:478) at org.apache.pdfbox.pdmodel.font.pdsimplefont.drawstring(pdsimplefont.java:110) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:260) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:504) at org.apache.pdfbox.util.operator.showtext.process(showtext.java:56) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:562) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:269) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:236) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:216) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:139) at org.apache.pdfbox.pdfviewer.pdfpagepanel.paint(pdfpagepanel.java:121) at javax.swing.jcomponent.paintchildren(jcomponent.java:889) at javax.swing.jcomponent.paint(jcomponent.java:1065) at javax.swing.jcomponent.paintchildren(jcomponent.java:889) at javax.swing.jcomponent.paint(jcomponent.java:1065) at javax.swing.jcomponent.paintchildren(jcomponent.java:889) at javax.swing.jcomponent.paint(jcomponent.java:1065) at javax.swing.jviewport.paint(jviewport.java:728) at javax.swing.jcomponent.paintchildren(jcomponent.java:889) at javax.swing.jcomponent.paint(jcomponent.java:1065) at javax.swing.jcomponent.paintchildren(jcomponent.java:889) at javax.swing.jcomponent.paint(jcomponent.java:1065) at javax.swing.jcomponent.paintchildren(jcomponent.java:889) at javax.swing.jcomponent.paint(jcomponent.java:1065) at javax.swing.jlayeredpane.paint(jlayeredpane.java:586) at javax.swing.jcomponent.paintchildren(jcomponent.java:889) at javax.swing.jcomponent.painttooffscreen(jcomponent.java:5217) at javax.swing.bufferstrategypaintmanager.paint(bufferstrategypaintmanager.java:290) at javax.swing.repaintmanager.paint(repaintmanager.java:1272) at javax.swing.jcomponent.paint(jcomponent.java:1042) at java.awt.graphicscallback$paintcallback.run(graphicscallback.java:39) at sun.awt.sungraphicscallback.runonecomponent(sungraphicscallback.java:79) at sun.awt.sungraphicscallback.runcomponents(sungraphicscallback.java:116) at java.awt.container.paint(container.java:1975) at java.awt.window.paint(window.java:3912) at javax.swing.repaintmanager$4.run(repaintmanager.java:842) at javax.swing.repaintmanager$4.run(repaintmanager.java:814) at java.security.accesscontroller.doprivileged(native method) at java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(protectiondomain.java:76) at javax.swing.repaintmanager.paintdirtyregions(repaintmanager.java:814) at javax.swing.repaintmanager.paintdirtyregions(repaintmanager.java:789) at javax.swing.repaintmanager.prepaintdirtyregions(repaintmanager.java:738) at javax.swing.repaintmanager.access$1200(repaintmanager.java:64) at javax.swing.repaintmanager$processingrunnable.run(repaintmanager.java:1732) at java.awt.event.invocationevent.dispatch(invocationevent.java:311) at java.awt.eventqueue.dispatcheventimpl(eventqueue.java:756) at java.awt.eventqueue.access$500(eventqueue.java:97) at java.awt.eventqueue$3.run(eventqueue.java:709) at java.awt.eventqueue$3.run(eventqueue.java:703) at java.security.accesscontroller.doprivileged(native method) at java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(protectiondomain.java:76) at java.awt.eventqueue.dispatchevent(eventqueue.java:726) at java.awt.eventdispatchthread.pumponeeventforfilters(eventdispatchthread.java:201) at java.awt.eventdispatchthread.pumpeventsforfilter(eventdispatchthread.java:116) at java.awt.eventdispatchthread.pumpeventsforhierarchy(eventdispatchthread.java:105) at java.awt.eventdispatchthread.pumpevents(eventdispatchthread.java:101) at java.awt.eventdispatchthread.pumpevents(eventdispatchthread.java:93) at java.awt.eventdispatchthread.run(eventdispatchthread.java:82)",
        "label": 11
    },
    {
        "text": "pdchoicefield setvalue  does not always work when the choices are not pairs i have a pdf that appears to work in adobe reader, but for some reason the choices include both strings and pairs. the following code change allows this mixed case to be supported, and also seems to clean up the code a bit. if you could apply this as a patch in the trunk i would be grateful. $ svn diff src/main/java/org/apache/pdfbox/pdmodel/interactive/form/pdchoicefield.java index: src/main/java/org/apache/pdfbox/pdmodel/interactive/form/pdchoicefield.java =================================================================== --- src/main/java/org/apache/pdfbox/pdmodel/interactive/form/pdchoicefield.java (revision 832877) +++ src/main/java/org/apache/pdfbox/pdmodel/interactive/form/pdchoicefield.java (working copy) @@ -63,37 +63,34 @@          }          else          { -            cosbase option = options.getobject( 0 ); -            if( option instanceof cosarray ) -            { -                for( int i=0; i<options.size() && indexselected == -1; i++ ) -                { -                    cosarray keyvaluepair = (cosarray)options.get( i ); -                    cosstring key = (cosstring)keyvaluepair.getobject( 0 ); -                    cosstring value = (cosstring)keyvaluepair.getobject( 1 ); -                    if( optionvalue.equals( key.getstring() ) || optionvalue.equals( value.getstring() ) ) -                    { -                        //have the parent draw the appearance stream with the value -                        super.setvalue( value.getstring() ); -                        //but then use the key as the v entry -                        getdictionary().setitem( cosname.getpdfname( \"v\" ), key ); -                        indexselected = i; -                    } -                } -            } -            else -            { -                for( int i=0; i<options.size() && indexselected == -1; i++ ) -                { -                    cosstring value = (cosstring)options.get( i ); -                    if( optionvalue.equals( value.getstring() ) ) -                    { -                        super.setvalue( optionvalue ); -                        indexselected = i; -                    } -                } -            } +               for( int i=0; i<options.size() && indexselected == -1; i++ ) { +                       cosbase option = options.getobject( i ); +                       if( option instanceof cosarray ) +                       { +                               cosarray keyvaluepair = (cosarray)option; +                               cosstring key = (cosstring)keyvaluepair.getobject( 0 ); +                               cosstring value = (cosstring)keyvaluepair.getobject( 1 ); +                               if( optionvalue.equals( key.getstring() ) || optionvalue.equals( value.getstring() ) ) +                               { +                                       //have the parent draw the appearance stream with the value +                                       super.setvalue( value.getstring() ); +                                       //but then use the key as the v entry +                                       getdictionary().setitem( cosname.getpdfname( \"v\" ), key ); +                                       indexselected = i; +                               } +                       } +                       else +                       { +                               cosstring value = (cosstring)option; +                               if( optionvalue.equals( value.getstring() ) ) +                               { +                                       super.setvalue( optionvalue ); +                                       indexselected = i; +                               } +                       } +               }          } +          if( indexselected == -1 )          {              throw new ioexception( \"error: '\" + optionvalue + \"' was not an available option.\");",
        "label": 1
    },
    {
        "text": "extractimages ignores  prefix extractimages utility ignores the -prefix option, doesn't output expected filenames. string name = getuniquefilename( key, image.getsuffix() ); should be string name = getuniquefilename( prefix, image.getsuffix() );",
        "label": 1
    },
    {
        "text": "testpublickeyencryption java [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1517226 originally submitted by nobody on 2006-07-04 15:27. hello, if i start the example, i got the following error-message (with j2sdk1.4.2_12 and adobe acrobat 7.0): org.pdfbox.exceptions.cosvisitorexception: unsupported keysize or algorithm parameters at org.pdfbox.pdfwriter.coswriter.write (coswriter.java:1019) at org.pdfbox.pdmodel.pddocument.save (pddocument.java:735) at org.pdfbox.pdmodel.pddocument.save (pddocument.java:716) at test.pdfbox.encryption.testpublickeyencryption.testpro tectionerror(testpublickeyencryption.java:132) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke (nativemethodaccessorimpl.java:39) at sun.reflect.delegatingmethodaccessorimpl.invoke (delegatingmethodaccessorimpl.java:25) at java.lang.reflect.method.invoke (method.java:324) at junit.framework.testcase.runtest (testcase.java:154) at junit.framework.testcase.runbare (testcase.java:127) at junit.framework.testresult$1.protect (testresult.java:106) at junit.framework.testresult.runprotected (testresult.java:124) at junit.framework.testresult.run (testresult.java:109) at junit.framework.testcase.run (testcase.java:118) at junit.framework.testsuite.runtest (testsuite.java:208) at junit.framework.testsuite.run (testsuite.java:203) at org.eclipse.jdt.internal.junit.runner.remotetestrunner .runtests(remotetestrunner.java:478) at org.eclipse.jdt.internal.junit.runner.remotetestrunner .run(remotetestrunner.java:344) at org.eclipse.jdt.internal.junit.runner.remotetestrunner .main(remotetestrunner.java:196)",
        "label": 1
    },
    {
        "text": "coswriter visitfromstream  does not close inputstream  we use pdfbox inside apache-karaf to write complex pdf files. therefore we are including several cosstreams in the pdf file to be written. some of the cosstream's use a scratch file for storing the stream content. inspecting the open files of my apache-karaf unveiled, that these scratch files a still open after writing the pddocument and closing it. therefore i inspected the code inside coswriter.visitfromstream(cosstream) and found out, the the inputstream name 'input' opened right at the beginning is never closed. please add a finally-clause, which robustely closes this input stream. i inspected pdfbox-1.4.0 and the current svn revision under http://svn.apache.org/viewvc/pdfbox/trunk/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/coswriter.java?revision=1092855&view=markup i would be very nice, if this issue could be fixed before pdfbox-1.6.0 tia and best regards, wolfgang",
        "label": 1
    },
    {
        "text": "never add documents when we don't create index [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1477554 originally submitted by fanch444 on 2006-04-27 03:14. if we want to reindex a folder and we call the index method of indexfiles with the parameter create to false, it doesn't add any documents. the problem is at line 166 in src.org.pdfbox.searchengine.lucene.indexfiles (version 0.7.2) the index method calls two times the same method with same parameters: indexdocs(root, index, create); i think it should change the line 166 in indexdocs(root, index, true); public void index( file root, boolean create, string index ) { try { date start = new date(); writer = new indexwriter(index, new standardanalyzer(), create); writer.maxfieldlength = 1000000; if (!create) { // delete stale docs deleting = true; indexdocs(root, index, create); } indexdocs(root, index, create); // add new docs system.out.println(\"optimizing index...\"); writer.optimize(); writer.close(); date end = new date(); system.out.print(end.gettime() - start.gettime()); system.out.println(\" total milliseconds\"); } catch( exception e ) { e.printstacktrace(); } }",
        "label": 1
    },
    {
        "text": "domxmpparser fails to parse date xmp specifies yyyy-mm-ddthh:mmtzd as valid date format, but the parser fails to parse 2011-11-20t10:09z with the following exception: org.apache.xmpbox.xml.xmpparsingexception: failed to instanciate property in xap:createdate at org.apache.xmpbox.xml.domxmpparser.createproperty(domxmpparser.java:361) at org.apache.xmpbox.xml.domxmpparser.parsechildrenasproperties(domxmpparser.java:311) at org.apache.xmpbox.xml.domxmpparser.parsedescriptionroot(domxmpparser.java:240) at org.apache.xmpbox.xml.domxmpparser.parse(domxmpparser.java:204) at org.apache.xmpbox.xml.domxmpparser.parse(domxmpparser.java:111) at pmedit.testdcdates.testdateformat(testdcdates.java:110) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:62) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) at java.lang.reflect.method.invoke(method.java:498) at org.junit.runners.model.frameworkmethod$1.runreflectivecall(frameworkmethod.java:50) at org.junit.internal.runners.model.reflectivecallable.run(reflectivecallable.java:12) at org.junit.runners.model.frameworkmethod.invokeexplosively(frameworkmethod.java:47) at org.junit.internal.runners.statements.invokemethod.evaluate(invokemethod.java:17) at org.junit.runners.parentrunner.runleaf(parentrunner.java:325) at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:78) at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:57) at org.junit.runners.parentrunner$3.run(parentrunner.java:290) at org.junit.runners.parentrunner$1.schedule(parentrunner.java:71) at org.junit.runners.parentrunner.runchildren(parentrunner.java:288) at org.junit.runners.parentrunner.access$000(parentrunner.java:58) at org.junit.runners.parentrunner$2.evaluate(parentrunner.java:268) at org.junit.runners.parentrunner.run(parentrunner.java:363) at org.apache.maven.surefire.junit4.junit4provider.execute(junit4provider.java:252) at org.apache.maven.surefire.junit4.junit4provider.executetestset(junit4provider.java:141) at org.apache.maven.surefire.junit4.junit4provider.invoke(junit4provider.java:112) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:62) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) at java.lang.reflect.method.invoke(method.java:498) at org.apache.maven.surefire.util.reflectionutils.invokemethodwitharray(reflectionutils.java:189) at org.apache.maven.surefire.booter.providerfactory$providerproxy.invoke(providerfactory.java:165) at org.apache.maven.surefire.booter.providerfactory.invokeprovider(providerfactory.java:85) at org.apache.maven.surefire.booter.forkedbooter.runsuitesinprocess(forkedbooter.java:115) at org.apache.maven.surefire.booter.forkedbooter.main(forkedbooter.java:75) caused by: java.lang.illegalargumentexception: failed to instanciate property at org.apache.xmpbox.type.typemapping.instanciatesimpleproperty(typemapping.java:204) at org.apache.xmpbox.xml.domxmpparser.managesimpletype(domxmpparser.java:424) at org.apache.xmpbox.xml.domxmpparser.createproperty(domxmpparser.java:348) ... 34 more caused by: java.lang.reflect.invocationtargetexception at sun.reflect.generatedconstructoraccessor5.newinstance(unknown source) at sun.reflect.delegatingconstructoraccessorimpl.newinstance(delegatingconstructoraccessorimpl.java:45) at java.lang.reflect.constructor.newinstance(constructor.java:423) at org.apache.xmpbox.type.typemapping.instanciatesimpleproperty(typemapping.java:184) ... 36 more caused by: java.lang.illegalargumentexception: 2011-11-20t10:09 at com.sun.org.apache.xerces.internal.jaxp.datatype.xmlgregoriancalendarimpl$parser.read(xmlgregoriancalendarimpl.java:2837) at com.sun.org.apache.xerces.internal.jaxp.datatype.xmlgregoriancalendarimpl$parser.skip(xmlgregoriancalendarimpl.java:2843) at com.sun.org.apache.xerces.internal.jaxp.datatype.xmlgregoriancalendarimpl$parser.parse(xmlgregoriancalendarimpl.java:2766) at com.sun.org.apache.xerces.internal.jaxp.datatype.xmlgregoriancalendarimpl.<init>(xmlgregoriancalendarimpl.java:435) at com.sun.org.apache.xerces.internal.jaxp.datatype.datatypefactoryimpl.newxmlgregoriancalendar(datatypefactoryimpl.java:536) at javax.xml.bind.datatypeconverterimpl._parsedatetime(datatypeconverterimpl.java:422) at javax.xml.bind.datatypeconverterimpl.parsedatetime(datatypeconverterimpl.java:417) at javax.xml.bind.datatypeconverter.parsedatetime(datatypeconverter.java:327) at org.apache.xmpbox.dateconverter.fromiso8601(dateconverter.java:369) at org.apache.xmpbox.dateconverter.tocalendar(dateconverter.java:101) at org.apache.xmpbox.type.datetype.isgoodtype(datetype.java:98) at org.apache.xmpbox.type.datetype.setvalue(datetype.java:118) at org.apache.xmpbox.type.abstractsimpleproperty.<init>(abstractsimpleproperty.java:59) at org.apache.xmpbox.type.datetype.<init>(datetype.java:57) ... 40 more",
        "label": 11
    },
    {
        "text": "converted pdf a online validator error good morning, we have a java application that converts a file in pdf / a. if we test at this link http://www.pdf-tools.com/pdf/validate-pdfa-online.aspx we get the following error: validating file \"atto pubblico_pdfa.conv.pdf\" for conformance level pdfa-1b dc:title/*[0] :: missing language qualifier. the document does not conform to the requested standard. the document's meta data is either missing or inconsistent or corrupt. done. can you help me? thanks",
        "label": 1
    },
    {
        "text": "classcastexception when loading pdf fuzzing pdf loading with jqf triggered a classcastexception. all attached files trigger the exception for a different class but are basically the same. org.apache.pdfbox.cos.cosarray cannot be cast to org.apache.pdfbox.cos.cosobject java.lang.classcastexception: org.apache.pdfbox.cos.cosarray cannot be cast to org.apache.pdfbox.cos.cosobject     at org.apache.pdfbox.pdfparser.cosparser.checkpagesdictionary(cosparser.java:2337)     at org.apache.pdfbox.pdfparser.cosparser.checkpages(cosparser.java:2321)     at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:193)     at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:220)     at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1160)     at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1057)     ... the code used for fuzzing is pddocument.load(inputstream) throwing an exception is ok since no other pdf reader i tried is able to load the files. but it should not be an classcastexception.",
        "label": 11
    },
    {
        "text": "not able to loadnonseq document larger than 2gb when i try to open open a document larger than 2gb (i have test with a 21gb document) using the method pddocument.loadnonseq(). the pdfparser trigger me the following error: exception in thread \"main\" java.io.ioexception: error: expected an integer type, actual='22580639698' at org.apache.pdfbox.pdfparser.baseparser.readint(baseparser.java:1608) at org.apache.pdfbox.pdfparser.pdfparser.parsestartxref(pdfparser.java:677) at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.initialparse(nonsequentialpdfparser.java:237) at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parse(nonsequentialpdfparser.java:574) at org.apache.pdfbox.pdmodel.pddocument.loadnonseq(pddocument.java:1124) at org.apache.pdfbox.pdmodel.pddocument.loadnonseq(pddocument.java:1107) the problem seems to come from baseparser which try to return int type.",
        "label": 1
    },
    {
        "text": "java lang illegalargumentexception  color parameter outside of expected range  red when calling page.converttoimage() for a pdf file from the ghostscript installation, i get this stack trace: 06.08.2013 11:46:52.086 warn [main] org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate:244 - unable to create the color instance [74.0, 0.0, 0.0] in color space lab{ }; guessing color ... color interpolation failed; using black instead java.lang.illegalargumentexception: color parameter outside of expected range: red java.lang.illegalargumentexception: color parameter outside of expected range: component 0 at java.awt.color.<init>(color.java:538) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:190) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:121) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:216) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:485) at org.apache.pdfbox.util.operator.showtext.process(showtext.java:45) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:529) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:258) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:205) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:141) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:781) at pdfboxpageimageextraction.extractimages.dopdf(extractimages.java:118) at pdfboxpageimageextraction.extractimages.main(extractimages.java:67) the file is rendered, but the color of the third text is incorrect.",
        "label": 1
    },
    {
        "text": "pdf generated with pdfmergerutility error out when opening  two pdf files - pdf_1 and pdf_2, after merged by pdfmergerutility, pdf_1 + pdf_2: error out when opening the merged pdf, when browsing down to the pdf_2 part. pdf_2 + pdf_1: works. this issue is different than pdfbox-515. for this problem, pdf is gernerated in both way, but when opening, get errors.",
        "label": 1
    },
    {
        "text": "can't assign an arbitrary string value to an editable acroform combobox if the field flags \"combo\" and \"edit\" of an acro form choice field are both set, the field is an editable combo box and can hold arbitrary string values. see iso32000-1:2008 section 12.7.4.4 \"choice fields\", table 230 \"field flags specific to choice fields\". problem: the implementation of the method org.apache.pdfbox.pdmodel.interactive.form.pdchoicefield#setvalue(string) does not check for the special case of an editable combo box and raises an exception, if you try to set a value not in the options list. the provided patch fixes the problem.",
        "label": 1
    },
    {
        "text": "printimagelocations outputs utter nonsense as observed by michael klink in this answer: the current 2.0.0-snapshot version of that sample returns utter nonsense; you might want to fix this and yes he's right. i compared the output of both versions, the 1.8 is correct, while the 2.0 version brings some tiny values.",
        "label": 11
    },
    {
        "text": "create pdfmergerutility example with improved metadata handling create example as suggested by alexander kriegisch in pdfbox-3323.",
        "label": 11
    },
    {
        "text": "cannot analyze signatures   wrong type of referenced length object cosobject dear colleagues, from one of our customer, we have got a pdf. according them and the adobe there is a pkcs7 signature but according the dss 5.2 there is no. i attached this voucher. what do you think? one of dss developer quickly checked their log and we got: e.e.e.d.p.pdfbox.pdfboxsignatureservice : cannot analyze signatures : wrong type of referenced length object cosobject unknown macro: {8, 0} : cosdictionary java.io.ioexception: wrong type of referenced length object cosobject : cosdictionary at org.apache.pdfbox.pdfparser.cosparser.getlength(cosparser.java:908) ~[pdfbox-2.0.7.jar!/:2.0.7] at org.apache.pdfbox.pdfparser.cosparser.parsecosstream(cosparser.java:950) ~[pdfbox-2.0.7.jar!/:2.0.7] at org.apache.pdfbox.pdfparser.cosparser.parsefileobject(cosparser.java:781) ~[pdfbox-2.0.7.jar!/:2.0.7] at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:742) ~[pdfbox-2.0.7.jar!/:2.0.7] at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:673) ~[pdfbox-2.0.7.jar!/:2.0.7] at org.apache.pdfbox.pdfparser.cosparser.parsedictobjects(cosparser.java:633) ~[pdfbox-2.0.7.jar!/:2.0.7] at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:241) ~[pdfbox-2.0.7.jar!/:2.0.7] at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:276) ~[pdfbox-2.0.7.jar!/:2.0.7] at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1224) ~[pdfbox-2.0.7.jar!/:2.0.7] at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1201) ~[pdfbox-2.0.7.jar!/:2.0.7] at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1182) ~[pdfbox-2.0.7.jar!/:2.0.7] at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1165) ~[pdfbox-2.0.7.jar!/:2.0.7] at eu.europa.esig.dss.pdf.pdfbox.pdfboxsignatureservice.getsignatures(pdfboxsignatureservice.java:321) [dss-pades-5.2.jar!/:na]",
        "label": 1
    },
    {
        "text": "matrix tocosarray  has constant return another anomaly in the matrix:     public cosarray tocosarray()     {         cosarray array = new cosarray();         array.add(new cosfloat(0));         array.add(new cosfloat(1));         array.add(new cosfloat(3));         array.add(new cosfloat(4));         array.add(new cosfloat(6));         array.add(new cosfloat(7));         return array;     }",
        "label": 11
    },
    {
        "text": "extracttext china pdf  but pdfbox distinguish korea the pdf is ok since error ",
        "label": 1
    },
    {
        "text": "printing fails for pages in landscape format printing fails for pdfs with mixed page orientations",
        "label": 1
    },
    {
        "text": "npe in acroform getvalueasstring the most common exception in the first run of 2.0.0-trunk against govdocs1 is this: java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.interactive.form.pdnonterminalfield.getvalueasstring(pdnonterminalfield.java:181)  at org.apache.tika.parser.pdf.pdf2xhtml.addfieldstring(pdf2xhtml.java:615)  at org.apache.tika.parser.pdf.pdf2xhtml.processacrofield(pdf2xhtml.java:580)  at org.apache.tika.parser.pdf.pdf2xhtml.extractacroform(pdf2xhtml.java:567)  at org.apache.tika.parser.pdf.pdf2xhtml.enddocument(pdf2xhtml.java:201)  at org.apache.pdfbox.text.pdftextstripper.writetext(pdftextstripper.java:250)  at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:137)  at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:132)",
        "label": 8
    },
    {
        "text": "find out why trunk createvisiblesignature example produces incorrect output pdf to evaluate apache's pdfbox library, i created a simple sample based on trunk createvisiblesignature and createsignature. the reason for combining those 2 samples was that each provided features that i wanted to test. the created \"mix\" example is in signpdfpoc.java. the initial problem i faced is related to the sentence closing the signatureoptions right before calling saveincremental on the relevant document object. once i moved the 'options.close()' sentence to a better position (see pdfbox-3010), signpdfpoc started to produce correct output, signed, pdf files. and once i added my test certificate chain to the trusted identities, the signature validates correctly. after examining the produced, signed, pdf, both via signature panel on adobe reader and via the file itself (binary), i got stuck on \"field: signature1\". i initially supposed that pdvisiblesigndesigner.signaturefieldname was used for that purpose. but it does not seem to be the case. moreover, for invisible signatures, no pdvisiblesigndesigner is used, so there must be a different way. so i decided to build and execute the original createvisiblesignature from trunk to check whether it did something different regarding \"field: signature1\" that i could have missed in my \"mix\" example. this is how i found out that the trunk createvisiblesignature example produces incorrect pdf files. or i must be doing something terribly wrong that, in advanced, i apologize for. i attach complete zip files for reproducing the observation: mix_example_correct_signed_pdf trunk_createvisiblesignature_example_incorrect_signed_pdf simply add the .zip suffix, unpack and run the corresponding _execute.sh script. there are already .class files available. the needed dependencies are also present. as test p12 containing a certificate chain, test pdf file and test image.",
        "label": 11
    },
    {
        "text": "catalog cannot be found there are several files producing the same exception within the tika test arena: caused by: java.io.ioexception: catalog cannot be found    org.apache.pdfbox.cos.cosdocument.getcatalog(cosdocument.java:363)     org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:200)     org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:230)     org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:854)     org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:797)     org.apache.pdfbox.debugger.pdfdebugger.parsedocument(pdfdebugger.java:1216)     org.apache.pdfbox.debugger.pdfdebugger.readpdffile(pdfdebugger.java:1144)     org.apache.pdfbox.debugger.pdfdebugger.readpdffile(pdfdebugger.java:1129)     org.apache.pdfbox.debugger.pdfdebugger.access$13(pdfdebugger.java:1126)     org.apache.pdfbox.debugger.pdfdebugger$11.actionperformed(pdfdebugger.java:1230)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$1.dointersectionprivilege(protectiondomain.java:76)     java.security.protectiondomain$1.dointersectionprivilege(protectiondomain.java:87)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$1.dointersectionprivilege(protectiondomain.java:76) 1.8.10 (non sequential parser only) and 2.0.0 are producing the same exception.",
        "label": 1
    },
    {
        "text": "slow rendering of pdf file with devicen jpeg file (file submitted by soon keong tan on the user mailing list) there is a large jpeg file (5349 x 3806) that uses a devicen colorspace which in turn is based on cmyk. there's some slowness due to the type0 convert function from devicen to cmyk, but this is less than 10%. most time is from converting the cmyk to rgb, one pixel at a time. (because of the devicen colorspace we can't use bulk conversion, which may or may not be faster) jdk: 1.7.0_72 benchmarks: (1) 1.8.13 - 1.5 mins (2) 2.0.5 - 6.18 mins (3) 2.0.8 - 6.35 mins",
        "label": 1
    },
    {
        "text": "security manager fails related to pdfbox-3145 pdf from pdfbox-5 java -djava.security.manager -djava.security.policy=security.policy -jar ~/pdf-box-svn/app/target/pdfbox-app-2.1.0-snapshot.jar pdftoimage chinese.pdf",
        "label": 11
    },
    {
        "text": "java lang classcastexception  org apache fontbox cff charstringcommand cannot be cast to java lang integer p.59 of the attached file fails with java.lang.classcastexception: org.apache.fontbox.cff.charstringcommand cannot be cast to java.lang.integer  at org.apache.fontbox.cff.type1charstringparser.parse(type1charstringparser.java:110)  at org.apache.fontbox.cff.type1charstringparser.parse(type1charstringparser.java:89)  at org.apache.fontbox.cff.type1charstringparser.parse(type1charstringparser.java:72)  at org.apache.fontbox.type1.type1font.gettype1charstring(type1font.java:151)  at org.apache.fontbox.type1.type1font$mapping.gettype1charstring(type1font.java:207)  at org.apache.pdfbox.pdfviewer.font.type1glyph2d.<init>(type1glyph2d.java:93)  at org.apache.pdfbox.pdfviewer.font.type1glyph2d.<init>(type1glyph2d.java:65) start parsing '002.zip002167.pdf'  at org.apache.pdfbox.rendering.pagedrawer.createglyph2d(pagedrawer.java:556)",
        "label": 6
    },
    {
        "text": "pdfbox performance issue  encoding java getcharacter  method tweak during parsing / text extraction the encoding.getcharacter(cosname) method is invoked repeatedly. it includes a string test that is performed up front but should only occur rarely. the code should be restructured slightly to only perform that test later. i.e. it should succeed fast and fail slow. i'll post an attachment that rewrites the method slightly. the performance gains is fairly significant.",
        "label": 7
    },
    {
        "text": "pdbox throws indexoutofboundsexception  severe offset errors as well  the pdf file comes up in adobe okay. it has an unusally font. and the load complains about incorrect offsets. jun 12, 2015 12:27:10 pm org.apache.pdfbox.pdfparser.cosparser validatestreamlength severe: the end of the stream doesn't point to the correct offset, using workaround to read the stream, found 576 but expected 6095 jun 12, 2015 12:27:10 pm org.apache.pdfbox.pdfparser.cosparser validatestreamlength severe: the end of the stream doesn't point to the correct offset, using workaround to read the stream, found 6513 but expected 8951 exception in thread \"main\" java.lang.indexoutofboundsexception: index: 10, size: 10  at java.util.arraylist.rangecheck(arraylist.java:635)  at java.util.arraylist.get(arraylist.java:411)  at org.apache.pdfbox.io.randomaccessbuffer.nextbuffer(randomaccessbuffer.java:395)  at org.apache.pdfbox.io.randomaccessbuffer.read(randomaccessbuffer.java:260)  at org.apache.pdfbox.pdfparser.baseparser.readuntilendstream(baseparser.java:412)  at org.apache.pdfbox.pdfparser.cosparser.parsecosstream(cosparser.java:922)  at org.apache.pdfbox.pdfparser.cosparser.parsefileobject(cosparser.java:725)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:686)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:639)  at org.apache.pdfbox.pdfparser.cosparser.parsedictobjects(cosparser.java:600)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:198)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:225)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:976)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:865)  at com.smartfin.backend.sfreceipts.offline.pdftoimage2_0redotesterfor.getimagefrompdf(pdftoimage2_0redotesterfor.java:47)  at com.smartfin.backend.sfreceipts.offline.pdftoimage2_0redotesterfor.getimagefrompdf(pdftoimage2_0redotesterfor.java:39)  at com.smartfin.backend.sfreceipts.offline.pdftoimage2_0redotesterfor.main(pdftoimage2_0redotesterfor.java:199)  at sun.reflect.nativemethodaccessorimpl.invoke0(native method)  at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)  at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)  at java.lang.reflect.method.invoke(method.java:606)  at com.intellij.rt.execution.application.appmain.main(appmain.java:140) process finished with exit code 1",
        "label": 1
    },
    {
        "text": "npe at org apache pdfbox pdmodel interactive form pdappearance calculatefontsize pdappearance java  using svn trunk revision 1291094 (2012-02-18) getting the following stack trace when trying to call pdfield.setvalue() on a acroform field in the attached document; java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.interactive.form.pdappearance.calculatefontsize(pdappearance.java:551) at org.apache.pdfbox.pdmodel.interactive.form.pdappearance.insertgeneratedappearance(pdappearance.java:371) at org.apache.pdfbox.pdmodel.interactive.form.pdappearance.setappearancevalue(pdappearance.java:281) at org.apache.pdfbox.pdmodel.interactive.form.pdvariabletext.setvalue(pdvariabletext.java:131) reason seems to be that pdapperance.getfontandupdateresources() returns null, in turn because the font dictionary for the da of the field (\"/cour 11 tf 0 g\") is not present in the document.",
        "label": 8
    },
    {
        "text": "incorrect defaultrgb color space obtain i got stackoverflowexception for following code: cosdictionary resourcesdict = new cosdictionary(); cosdictionary colorspacesdict = new cosdictionary(); colorspacesdict.setitem(cosname.default_cmyk, cosname.devicecmyk); resourcesdict.setitem(cosname.colorspace, colorspacesdict); pdresources resources = new pdresources(resourcesdict); resources.getcolorspace(cosname.default_cmyk); pdcolorspace.create(cosbase, pdresources) ignore possible cycle default -> device -> default - > device -> ......",
        "label": 11
    },
    {
        "text": "parenttree objects do not match karray objects after merge after merging tagged documents together, the second page of the resulting document is no longer valid.  when the field objects are cloned in pdfmergerutility, the new and old objects are stored in a map named objmapping.  this is used to replace the old references with the new references for the acroform, k array, and annotation list.  however the parenttree is not updated to this new object reference.  this results in the k array and the parent tree having different references to the same object.  this causes issues when using an a11y reader like jaws, and also causes problems displaying the tags in adobe dc. here is a failing unit test that was created in pdfmergerutilitytest to demonstrate the issue.  it was created using an example from w3: https://www.w3.org/wai/wcag20/techniques/working-examples/pdf3/reading-order.pdf public void teststructuretreemerge3() throws ioexception {     pdfmergerutility pdfmergerutility = new pdfmergerutility();     pddocument src = pddocument.load(new file(srcdir, \"reading-order.pdf\"));     pddocument dst = pddocument.load(new file(srcdir, \"reading-order.pdf\"));     pdfmergerutility.appenddocument(dst, src);     src.close();     dst.save(new file(targettestdir, \"reading-order-merged.pdf\"));     dst.close();     pddocument doc = pddocument.load(new file(targettestdir, \"reading-order-merged.pdf\"));     asserttrue(checkannotationmatches(doc.getdocumentcatalog().getstructuretreeroot().getkarray(), doc.getdocumentcatalog().getacroform().getfields(), (cosarray)doc.getdocumentcatalog().getstructuretreeroot().getparenttree().getcosobject().getdictionaryobject(cosname.nums))); } private boolean checkannotationmatches(cosarray karray, list<pdfield> acroformfields, cosarray numbersarray) {     for (int i = 0; i < karray.size(); i++) {         cosbase entry = karray.get(i);         if (entry instanceof cosarray){             cosarray entryasarray = (cosarray) entry;             if (!checkannotationmatches(entryasarray, acroformfields, numbersarray)) {                 return false;             }         } else if (entry instanceof cosinteger) {             //do nothing, just need to screen these out so next line doesn't blow up         } else if (((cosobject) entry).getobject() instanceof cosdictionary){             cosdictionary entrydictionary = (cosdictionary)((cosobject) entry).getobject();             if (entrydictionary.getitem(cosname.k) != null) {                 cosbase kids = entrydictionary.getitem(cosname.k);                 if (kids != null) {                     if (kids instanceof cosinteger) {                         //do nothing, don't care about marked content tags                     } else if (kids instanceof cosdictionary) {                         cosdictionary kidsasdictionary = (cosdictionary) kids;                         if (!checkformatches(kidsasdictionary.getdictionaryobject(cosname.obj), acroformfields, numbersarray)) {                             return false;                         }                     } else if (kids instanceof cosarray) {                         cosarray kidsasarray = (cosarray) kids;                         if (!checkannotationmatches(kidsasarray, acroformfields, numbersarray)) {                             return false;                         }                     }                 }             } else if (entrydictionary.getdictionaryobject(cosname.obj) != null) {                 if (!checkformatches(entrydictionary.getdictionaryobject(cosname.obj), acroformfields, numbersarray)) {                     return false;                 }             }         }     }     return true; } private boolean checkformatches(cosbase objectreference, list<pdfield> acroformfields, cosarray numbersarray) {     boolean result = false;     for (pdfield field : acroformfields) {         if (field.getcosobject() == objectreference && numbersarray.indexofobject(objectreference.getcosobject()) > 0) {             result = true;         }     }     return result; }",
        "label": 11
    },
    {
        "text": "indexed color images have wrong colors after encryption [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1323753 originally submitted by loppermann on 2005-10-11 04:27. when a pdf including an index-color image is encrypted, the colors get mixed up. the pallette seems to remain intact, but the colors of the pixels are wrong. test code: (bitmaptest.pdf is attached) package pdfboxtest; import org.pdfbox.pdmodel.pddocument; import org.pdfbox.pdmodel.encryption.*; import java.io.*; public class main { public static void main(string[] args) { try { pdstandardencryption enc = new pdstandardencryption(); enc.setversion(pdencryptiondictionary.version2_variable_length_algorithm); enc.setrevision(pdstandardencryption.revision3); enc.setlength(128); pddocument doc = pddocument.load(\"bitmaptest.pdf\"); doc.setencryptiondictionary(enc); doc.encrypt(\"owner\", \"\"); doc.save(\"result.pdf\"); doc.close(); } catch (exception e) { e.printstacktrace(); } } } [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1323753&file_id=152105 bitmaptest.pdf (application/pdf), 14049 bytes pdf containg an indexed color image [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1323753&file_id=152106 result.pdf (application/pdf), 13927 bytes result.pdf file with messed up colors [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1323753&file_id=152108 main.java (application/octet-stream), 743 bytes test case source [comment on sourceforge] originally sent by loppermann. logged in: yes user_id=1359988 i haven't found anything about exceptions for strings in the spec. on the otherhand, acrobar reader as well as pdfbox clearly seem not to decrypt the palette string. i am not an expert at cryptography, but i imagine, that this could have the following reason: since palettes are often known (windows standard palette, web-palette etc.) encrypting them, might give an attacker a reasonable guess at what the cleartext of the encrypted string should look like. hence, if he was able to use a clear-text attack against the palette string he could use the extracted key for all other streams in the file. since the a palette does not include very sensitive information by itself, it might be a more secure choice to not encrypt it at all, in order to protect from such clear-text attacks. [comment on sourceforge] originally sent by benlitchfield. logged in: yes user_id=601708 strings should be encrypted, but there are some exceptions. thanks for looking further into this for me. i will check with the pdf reference to see if it says anything. the exceptions are usually security related so i would be surprised if it was not suppose to encrypted, there it might be something related. ben [comment on sourceforge] originally sent by loppermann. logged in: yes user_id=1359988 ok, if all strings are not encrypted, docuemnt information will get messed up, i.e. it will be encrypted during decryption [comment on sourceforge] originally sent by loppermann. logged in: yes user_id=1359988 my observation of the palatte staying intact seems to be wrong. after some more testing and debugging, i see, that the palette seems to get encrypted, which i think it should not be. due to the symmetric nature of rc4, encrypting, decrypting and encrypting again will yield the right palette. so even pdfbox does not try to decypt the palette string it has encrypted when opening and decrypting the pdf. when i disable the encryption of strings in the pdfwriter, everything seems to work fine. i haven't found this in the spec yet, with which i'm not so familiar. i will keep looking though. so if in fact strings should not be encrypted (and the fact that they are not decrypted seems to imply this), the fix is simply to take out the encryption of strings in pdfwriter. [comment on sourceforge] originally sent by loppermann. logged in: yes user_id=1359988 attached test case [comment on sourceforge] originally sent by loppermann. logged in: yes user_id=1359988 attached result.pdf file with messed up colors",
        "label": 0
    },
    {
        "text": "wrong color in rendering the circle with \"bellas modas\" has the wrong color, it should be white and was white yesterday, and now it is brown.",
        "label": 11
    },
    {
        "text": "pddocument load good day! i have one problem with the pdf-box application 1.8.4. use in java-applet. on code \"pddocument.load\" antivirus blocks and nothing happens, no exceptions or other events. when i disable the antivirus, then all is well. this code: import org.apache.pdfbox.io.*; import org.apache.pdfbox.io.randomaccessfile; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.pdpageable; import javax.print.attribute.hashprintrequestattributeset; import javax.print.attribute.standard.mediasizename; import javax.print.attribute.standard.orientationrequested; import java.applet.applet; import java.awt.*; import java.awt.print.printerexception; import java.awt.print.printerjob; import java.io.*; import java.net.url; public class print extends applet { private boolean containsfile(file dir, string filename) { for (string childfilename : dir.list()) { if (childfilename.equals(filename)) { return true; } } return false; } public void init() { try { printerjob job = printerjob.getprinterjob(); pddocument document = null; try { if (getparameter(\"file\") != null && !getparameter(\"file\").equals(\"\")) { string file1 = getparameter(\"file\"); if (getparameter(\"url\") == null || getparameter(\"url\").equals(\"1\") ) { if (getparameter(\"login\") != null && !getparameter(\"login\").equals(\"\")) { file1 += \"&login=\"+getparameter(\"login\"); } if (getparameter(\"pass\") != null && !getparameter(\"pass\").equals(\"\")) { file1 += \"&pass=\"+getparameter(\"pass\"); } url url = new url(file1); file home = new file(system.getproperty(\"user.home\")); file dir = new file(home, \"print\"); if (!dir.exists()) { dir.mkdir(); } int number = 0; while (containsfile(dir, \"print\" + number + \".pdf\")) { number++; } file file = new file(dir, \"print\" + number + \".pdf\"); fileoutputstream writer = new fileoutputstream(file); inputstream is = url.openstream(); int read = 0; byte[] bytes = new byte[1024]; while ((read = is.read(bytes)) != -1) { writer.write(bytes, 0, read); } writer.close(); file = new file(dir, \"print\" + number + \".pdf\"); document = pddocument.load(file); } else { document = pddocument.load(file1); } } else { document = pddocument.load(file); } } catch (ioexception e) { e.printstacktrace(); } try { job.setpageable(new pdpageable(document, job)); } catch (printerexception e) { e.printstacktrace(); } job.setjobname(\"print envelope\"); hashprintrequestattributeset psettings = new hashprintrequestattributeset(); psettings.add(orientationrequested.landscape); if (getparameter(\"type\") != null) { if (getparameter(\"type\").equalsignorecase(\"dl\")) { psettings.add(mediasizename.iso_designated_long); } else if (getparameter(\"type\").equalsignorecase(\"c4\")) { psettings.add(mediasizename.iso_c4); } else if (getparameter(\"type\").equalsignorecase(\"c5\")) { psettings.add(mediasizename.iso_c5); } else if (getparameter(\"type\").equalsignorecase(\"c6\")) { psettings.add(mediasizename.iso_c6); } } else { psettings.add(mediasizename.iso_a4); } if (job.printdialog(psettings)) { try { job.print(psettings); } catch (printerexception e) { } } } catch (exception ex) { } } }",
        "label": 1
    },
    {
        "text": "classcastexception in pdextendedgraphicsstate getfontsetting  i get this with the attached file: java.lang.classcastexception: org.apache.pdfbox.cos.cosdictionary cannot be cast to org.apache.pdfbox.cos.cosarray 013/013975.pdf  at org.apache.pdfbox.pdmodel.graphics.state.pdextendedgraphicsstate.getfontsetting(pdextendedgraphicsstate.java:385)  at org.apache.pdfbox.pdmodel.graphics.state.pdextendedgraphicsstate.copyintographicsstate(pdextendedgraphicsstate.java:121)  at org.apache.pdfbox.util.operator.setgraphicsstateparameters.process(setgraphicsstateparameters.java:49)",
        "label": 6
    },
    {
        "text": "scale to fit with dpi yields incorrect margins when leveraging print margins using setimageablearea: works fine when scale_to_fit and dpi 0 are provided (vector-quality printing) works fine when actual_size and non-zero dpi are provided does not work when scale_to_fit and non-zero dpi are provided. code to reproduce public static void main(string[] args) throws exception {     pddocument pdf = pddocument.load(new url(args[0]).openstream());     printerjob job = printerjob.getprinterjob();     paper paper = new paper();     paper.setsize(612, 792); //8.5 x 11 in     paper.setimageablearea(72, 72, 468, 648); //1 inch margins     pageformat page = job.getpageformat(null);     page.setpaper(paper);     //vector print - works as expected, margins applied and scaled properly     job.setprintable(new pdfprintable(pdf, scaling.scale_to_fit, false, 0, false), page);     job.print();     //unscaled raster print - works as expected, margins applied and document cut off     job.setprintable(new pdfprintable(pdf, scaling.actual_size, false, 72, false), page);     job.print();     //scaled raster print - unexpected results, same scale as vector print, but same cut off as unscaled raster print     job.setprintable(new pdfprintable(pdf, scaling.scale_to_fit, false, 72, false), page);     job.print();     pdf.close(); }",
        "label": 11
    },
    {
        "text": "implement some caching of pdimagexobject markus barbey mentioned on the mailing list that pagedrawer.drawimage(pdimage) has a new instance every time, because the caching in pdresources is disabled, so the caching of the bufferedimage is useless. it is indeed disabled, see near the bottom of pdfbox-2370. i'll enable it for cases where pdimagexobject does not need anything from the resources. an image could be in several pages with the same colorspace name, but that name could be something different in different pages. (very unlikeky, but possible!)",
        "label": 11
    },
    {
        "text": "double negative number we have an issue similar to the pdfbox-3589. the pdf contains /italicangle --16.33, and the exception we are getting is: exception in thread \"main\" java.io.ioexception: error expected floating point number actual='--16.33'  at org.apache.pdfbox.cos.cosfloat.<init>(cosfloat.java:82)  at org.apache.pdfbox.cos.cosnumber.get(cosnumber.java:115)  at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:947)  at org.apache.pdfbox.pdfparser.baseparser.parsecosdictionaryvalue(baseparser.java:152)  at org.apache.pdfbox.pdfparser.baseparser.parsecosdictionarynamevaluepair(baseparser.java:279)  at org.apache.pdfbox.pdfparser.baseparser.parsecosdictionary(baseparser.java:212)  at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:862)  at org.apache.pdfbox.pdfparser.cosparser.parsefileobject(cosparser.java:899)  ... such \"numbers\" probably violate the specification, but the behaviour of pdfbox should be consistent, so the second minus sign should be ignored here as well.",
        "label": 11
    },
    {
        "text": "correct validation of widget annotations for pdf a the technical corrigendum 2 for iso 19005-1:2005 (pdf/a-1) added a clause for widget annotations: for all annotation dictionaries containing an ap key, the appearance dictionary that it defines as its value shall contain only the n key. if an annotation dictionary\u2019s subtype key has a value of widget and its ft key has a value of btn, the value of the n key shall be an appearance subdictionary; otherwise the value of the n key shall be an appearance stream. we currently (only) validate with the original clause of iso 19005-1:2005 (pdf/a-1) which has if an annotation dictionary contains the ap key, the appearance dictionary that it defines as its value shall contain only the n key, whose value shall be a stream defining the appearance of the annotation. previous versions of pdfbox report an error for such a widget 5.3.1 : invalid field value in an annotation definition, the n appearance must be a stream",
        "label": 11
    },
    {
        "text": "pdfbox takes ages to render page of the attached pdf for some reason, page 2 of this pdf document takes ages to render, while all other pages work fine.",
        "label": 1
    },
    {
        "text": "doesn't convert properly russian characters [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1537323 originally submitted by amashtakov on 2006-08-09 04:44. hi, i've tried to extract text from attached pdf using both stable release pdfbox-0.7.2 and recent nightly build pdfbox-0.7.3-dev-20060809 and the following code snipped: // 1. parse document pdfparser parser = new pdfparser(is); parser.parse(); cos = parser.getdocument(); // 2. extract text pdftextstripper stripper = new pdftextstripper(); string text = stripper.gettext(new pddocument(cos)); // 3. dump output fileoutputstream os = new fileoutputstream(\"file.txt\"); outputstreamwriter ow = new outputstreamwriter(os, \"utf-8\"); ow.write(text); ow.flush(); despite of russian contents of original pdf, the output file doesn't contain any \"valid\" russian character(s). i've also tried to convert the same pdf with the foolabs-xpdf tool - the output contains valid utf-8 russian text. ps: i couldn't attach file because of sourcecforge size limit. (the size is ~545k). is it possible to pass it to dev. team ?",
        "label": 1
    },
    {
        "text": "problem with org apache xmpbox dateconverter with 2015-12-08t12:07-05:00 we are getting an exception in fromiso8601() method, but it's a legal date due to iso8601 specification. one possible solution can be tracking all date strings without seconds.",
        "label": 11
    },
    {
        "text": "text extraction garbled in this file  was ok in text extraction worked in 1.8, no longer in 2.0. text extraction in adobe reader works too.",
        "label": 11
    },
    {
        "text": "comment on  org apache pdfbox util splitter createnewdocumentifnecessary  is out of date the header comment on the `createnewdocumentifnecessary` method suggests that the method can be overridden in subclasses this is not true since the method is private. the example in the method will not work. the header comment for `splitatpage` should be updated with the example since it is the method will will be used to implement that example.",
        "label": 6
    },
    {
        "text": "pdftoimage  image of pdf is resized and drawn multiple times at top of output image hi, all the pdfs created with simple scan (https://launchpad.net/simple-scan) are not correctly converted into images. a single page is resized and drawn multiple times at the top of the output image. using the pdfbox app on windows with the newest orcale java 7 causes a java heap error.",
        "label": 1
    },
    {
        "text": "pdfcloneutility does not handle cosstreamarray a document which has cosstreamarray's, cannot be cloned. there is no handling for cosstreamarray.",
        "label": 11
    },
    {
        "text": "content stream missing in truncated file this truncated file was displaying in 2.0.5 and not the content stream is null.",
        "label": 1
    },
    {
        "text": "pdftextstripper character suppression when parsing the file posted as an example for pdfbox-659, i noticed that numerous characters were missing from the extracted text. they are getting 'suppressed' in the pdftextstripper.processtextposition(textposition) method in a section that is meant to try to filter duplicate chars found in some ms word - generated documents. the problem is that the filter is over-zealous (in the case of this document) and matches real characters against other real characters in the text. example this is some text that has the letter 'e' in it multiple times. the filter might match one of the later 'e's to an earlier 'e' incorrectly (for example, the one at the end of 'some'), resulting in the extracted text: this is some text that has the letter 'e' in it multiple tims. . from what i can tell this is because it is using the raw, padded coordinates rather than resolved coordinates. the example pdf document (see pdfbox-659) has pages that use both positive and negative raw coordinates that upon my cursory inspection don't always resolve on the same offset point. the suppression test logic compares textposition elements that seem to have different offsets, possibly due to different amounts of padding. thus the 'overlap' that it detects is wrong. its not comparing apples to apples. the document renders perfectly in acrobat, so i believe we are not handling the coordinates correctly. a workaround is possible through suppressing the filtering by setting the pdftextstripper.setsuppressduplicateoverlappingtext(boolean) attribute to false. but that is just hiding the fact that the logic is wrong.",
        "label": 1
    },
    {
        "text": "signature dictionary is not decrypted in encrypted files changes in pdfbox-2801 and pdfbox-2469 result in the signature dictionary not being decrypted in encrypted files. because these aren't visible signatures, this is noticed only when looking at the signature dictionary in pdfdebugger. see also this thread in the dev mailing list: https://mail-archives.apache.org/mod_mbox/pdfbox-dev/201512.mbox/browser example files: pdfbox-2711 045697.pdf 050289.pdf 070413.pdf 346444.pdf i hit that problem while wondering what to do about pdfbox-2729, and wondered why the \"too good to be true\" solution of gladkovsky gleb worked at all, because his solution did encrypt the signature parts. i did not find anything in the \"32000\" spec that the signature dictionary is not to be encrypted. from maruan sahyoun: from iso32000-2: encryption applies to all strings and streams in the document's pdf file, with the following exceptions: the values for the id entry in the trailer any strings in an encrypt dictionary any strings that are inside streams such as content streams and compressed object streams, which themselves are encrypted any hexadecimal strings representing the value of the contents key in a signature dictionary",
        "label": 11
    },
    {
        "text": "npe with file with pdfdocencoding i get an npe with the attached file: sep 19, 2014 11:24:34 pm org.apache.pdfbox.pdmodel.font.pdsimplefont readencoding warnung: unknown encoding: cosname{pdfdocencoding} exception in thread \"main\" java.lang.nullpointerexception  at org.apache.pdfbox.encoding.dictionaryencoding.<init>(dictionaryencoding.java:91)  at org.apache.pdfbox.pdmodel.font.pdsimplefont.readencoding(pdsimplefont.java:126)  at org.apache.pdfbox.pdmodel.font.pdtype1font.<init>(pdtype1font.java:259)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:65)  at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:171)  at org.apache.pdfbox.util.pdfstreamengine.getfonts(pdfstreamengine.java:519)  at org.apache.pdfbox.util.operator.text.setfontandsize.process(setfontandsize.java:49)  at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:482)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:241)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:199)  at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:153)  at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:181)  at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:228)  at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:160)  at org.apache.pdfbox.rendering.pdfrenderer.renderimagewithdpi(pdfrenderer.java:109)  at org.apache.pdfbox.tools.pdftoimage.main(pdftoimage.java:265)  at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:89)",
        "label": 6
    },
    {
        "text": "renderingproblem at pdfreader when making the pdfreader frame smaller so the pdf doesnt fit the frame the pdf is painted over the upper, lower and right margin i.e. the scrollbars and the lower panel. having a look at the code, i found the problem. in all relevant methods of pdfdrawer i removed graphics.setclip(getgraphicsstate().getcurrentclippingpath()); now the pdf is rendered within the right margins.",
        "label": 1
    },
    {
        "text": "classcastexception in pdresources the code (added in revision 1606860) cosobject cosobject = (cosobject)dict.getitem(objname); in the method getxobjects() in pdresources fails with a classcastexception: org.apache.pdfbox.cos.cosstream cannot be cast to org.apache.pdfbox.cos.cosobject the document issuing this exception is created using the following code: pddocument doc = new pddocument();  pdpage page = new pdpage(); doc.addpage(page); pdimagexobject image = jpegfactory.createfromstream(doc, imagestream); try (pdpagecontentstream contentstream = new pdpagecontentstream(doc, page, false, false)) {     contentstream.drawimage(image, 20, 20); }",
        "label": 11
    },
    {
        "text": "classcastexception in cosparser fuzzing pdf loading with jqf triggered an classcastexception. java.lang.classcastexception: org.apache.pdfbox.cos.cosstring cannot be cast to org.apache.pdfbox.cos.cosdictionary  at org.apache.pdfbox.pdfparser.cosparser.parsedictionaryrecursive(cosparser.java:2919)  at org.apache.pdfbox.pdfparser.cosparser.parsedictionaryrecursive(cosparser.java:2927)  at org.apache.pdfbox.pdfparser.cosparser.parsedictionaryrecursive(cosparser.java:2927)  at org.apache.pdfbox.pdfparser.cosparser.parsedictionaryrecursive(cosparser.java:2927)  at org.apache.pdfbox.pdfparser.cosparser.parsedictionaryrecursive(cosparser.java:2927)  at org.apache.pdfbox.pdfparser.cosparser.preparedecryption(cosparser.java:2865)  at org.apache.pdfbox.pdfparser.cosparser.retrievetrailer(cosparser.java:284)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:171)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:220)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1160)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1057)     ... the code used for fuzzing is pddocument.load(inputstream)",
        "label": 11
    },
    {
        "text": "enhance documentation for pdfbox task to track enhancements to the documentation or website as part of pdfbox 2.0.0 update javadoc (current as of writing) migration guide",
        "label": 8
    },
    {
        "text": "nonsequentialparser does not tolerate missing  eof markers the nonsequentialparser throws an exception when parsing a file with a missing or corrupted %%eof marker. all pdf-viewers i tried however handle this kind of documents without problems. the attached patch makes the parser ignore missing %%eof when in lenient mode. i cannot attach the original file presenting this problem, since it is a bank statement, but i have attached a small document with the same issue that i have created for testing.",
        "label": 1
    },
    {
        "text": "pdstream exception when using a cast for some pdf/a, getdictionaryobject does not return cosstream but other cosdictionary (super class) public pdmetadata getmetadata() { pdmetadata retval = null; cosstream mdstream = (cosstream)stream.getdictionaryobject( cosname.metadata ); if( mdstream != null ) { retval = new pdmetadata( mdstream ); } return retval; } org.apache.pdfbox.cos.cosdictionary cannot be cast to org.apache.pdfbox.cos.cosstream at org.apache.pdfbox.pdmodel.common.pdstream.getmetadata(pdstream.java:508) at net.padaf.preflight.font.abstractfontvalidator.checkfontfilemetadata(abstractfontvalidator.java:162) at net.padaf.preflight.font.type1fontvalidator.checkfontfileelement(type1fontvalidator.java:228) at net.padaf.preflight.font.type1fontvalidator.checkfontdescriptor(type1fontvalidator.java:125) at net.padaf.preflight.font.simplefontvalidator.validate(simplefontvalidator.java:264) at net.padaf.preflight.helpers.fontvalidationhelper.validatefont(fontvalidationhelper.java:107) at net.padaf.preflight.helpers.fontvalidationhelper.innervalidate(fontvalidationhelper.java:90) at net.padaf.preflight.helpers.abstractvalidationhelper.validate(abstractvalidationhelper.java:87) at net.padaf.preflight.abstractvalidator.runvalidation(abstractvalidator.java:134) at net.padaf.preflight.pdfa1bvalidator.validate(pdfa1bvalidator.java:90) at net.padaf.preflight.validator_a1b.main(validator_a1b.java:47)",
        "label": 3
    },
    {
        "text": " bullet  character is not rendered in this pdf is a \"bullet\" character which is not rendered. there is some problem with translating code to glyph. that character has code 127 (0x7f), but mapping for it is not found 14:33:17,966 debug type1glyph2d:127 - fkoyit+myriadpro-cond: glyph mapping for 127 not found embedded font contains definition for \"bullet\" character. but \"bullet\" character has code 183 in mapping table (from standardencoding, i suppose).",
        "label": 1
    },
    {
        "text": "pdfontdescriptorafm always returns false for issymbolic  a font with a font with a descriptor like this, it creates a descriptor of class pdfontdescriptorafm which will never read the flags (4) and return true for issymbolic(). i am trying to extract the text from the pdf and would like to exclude symbolic fonts. font: /lastchar = 1 /basefont = /oeobnb+woodtypeornaments-two /type = /font /subtype = /type1 /encoding = 26 0 r /widths = [1000] /fontdescriptor = 28 0 r /tounicode = 27 0 r /firstchar = 1 fontdescriptor: /capheight = 0 /fontbbox = [0, -404, 1944, 753] /charset = /dash5 /fontfile3 = 33 0 r /type = /fontdescriptor /descent = 0 /stemv = 26 /flags = 4 /ascent = 0 /fontname = /oeobnb+woodtypeornaments-two /stemh = 26 /italicangle = 0",
        "label": 1
    },
    {
        "text": "importing bufferedimage into pdpixelmap is broken in try to import a bufferedimage in a pddocument with pdpixelmap bufferedimage with type_4byte_abgr works fine with pdfbox 1.8.4 (though, the pdf file contains instruction /colorspace /devicegray) bufferedimage with type_4byte_abgr produces an unreadable pdf with pdfbox 1.8.5 (though, the pdf file contains instruction /colorspace /devicergb). code used to demonstrate the problem is as follows (image has also been colored with some graphics instructions to demonstrate that 1.8.4 is working) : try {             pddocument doc = new pddocument();             pdpage page = new pdpage();             doc.addpage(page);             bufferedimage awtimage = new bufferedimage(100,100, bufferedimage.type_4byte_abgr);             pdpixelmap ximage = new pdpixelmap(doc, awtimage);             pdpagecontentstream contentstream = new pdpagecontentstream(doc, page);             contentstream.drawxobject(ximage, 200, 200, 100, 100);             contentstream.close();             doc.save(\"c:\\\\temp\\\\pdf\\\\test185_4babgr.pdf\");         } catch(cosvisitorexception|ioexception e) {             e.printstacktrace();         } i also tried with a bufferedimage with type_int_argb but it throws an exception with pdfbox 1.8.4 and 1.8.5 : exception in thread \"main\" java.lang.illegalargumentexception: raster integerinterleavedraster: width = 100 height = 100 #bands = 1 xoff = 0 yoff = 0 dataoffset[0] 0 is incompatible with colormodel colormodel: #pixelbits = 8 numcomponents = 1 color space = java.awt.color.icc_colorspace@1dc80063 transparency = 1 has alpha = false isalphapre = false  at java.awt.image.bufferedimage.<init>(bufferedimage.java:630)  at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.createimagestream(pdpixelmap.java:107) my main purpose was to use a bufferedimage with a cmyk colorspace, but pdpixelmap seems to accept 1 component and 3 component colorspace only.",
        "label": 11
    },
    {
        "text": "adobe encrypted document doesn't parse correct  acrobat compatibility  trying to parse and receive some information from encrypted documents created with adobe 9 with compatibility to acrobat 9, cause an error while decrypting informations. i tested documents with follow compatibility: acrobat 3 (40-bit rc4) -> works acrobat 5 & 6 (128-bit rc4) -> work acrobat 7 (128-bit aes) -> work acrobat 9 (256-bit aes) -> doesn't work the follow error will be thrown. exception in thread \"main\" java.lang.arrayindexoutofboundsexception at java.lang.system.arraycopy(native method) at org.apache.pdfbox.pdmodel.encryption.standardsecurityhandler.computeencryptedkey(standardsecurityhandler.java:591) at org.apache.pdfbox.pdmodel.encryption.standardsecurityhandler.computeuserpassword(standardsecurityhandler.java:628) at org.apache.pdfbox.pdmodel.encryption.standardsecurityhandler.isuserpassword(standardsecurityhandler.java:812) at org.apache.pdfbox.pdmodel.encryption.standardsecurityhandler.preparefordecryption(standardsecurityhandler.java:213) at org.apache.pdfbox.pdmodel.encryption.standardsecurityhandler.decryptdocument(standardsecurityhandler.java:154) at org.apache.pdfbox.pdmodel.pddocument.openprotection(pddocument.java:1509) at org.apache.pdfbox.pdmodel.pddocument.decrypt(pddocument.java:919) at de.bos_bremen.pdftoolbox.testing.test.main(test.java:45)",
        "label": 10
    },
    {
        "text": "pdf page rotation is not working pdftoimage creates empty images when pdf with page rotation is provided as input. rotation logic in pdpage is not correct. because of this problem pdf contents are rendered outside the graphics area. hence it creates empty images. patch file is below. tested on pdf http://eeweb.poly.edu/~yao/ee3414/image_filtering.pdf --------------------------------------------------------------------- \u2014 /data/pdf/pdfbox/pdfbox-svn/trunk/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/pdpage.java 2012-10-14 08:45:34.275123749 +0530 +++ /data/pdf/pdfbox/pdfbox-1.7.1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/pdpage.java 2012-10-14 13:37:16.887054874 +0530 @@ -708,8 +708,13 @@ //todo the following reduces accuracy. it should really be a dimension2d.float. dimension pagedimension = new dimension( (int)widthpt, (int)heightpt ); bufferedimage retval = null; float rotation = (float)math.toradians(findrotation()); if (rotation != 0) + int rotationangle = findrotation(); + //pdf spec does not say rotation angle should be within 360 degrees + //restrict rotation to -360 to +360 degrees range. + rotationangle = rotationangle % 360; + float rotation = (float)math.toradians(rotationangle); + //flip the image horizontally only for +/-90 and +/-270 degree rotation + if ((rotationangle % 180) != 0) { retval = new bufferedimage( heightpx, widthpx, imagetype ); } @@ -722,7 +727,26 @@ graphics.clearrect( 0, 0, retval.getwidth(), retval.getheight() ); if (rotation != 0) { graphics.translate(retval.getwidth(), 0.0f); + int translatex = 0; + int translatey = 0; + switch(rotationangle) { + case -270: + case 90: + translatex = retval.getwidth(); + break; + + case -90: + case 270: + translatey = retval.getheight(); + break; + + case -180: + case 180: + translatex = retval.getwidth(); + translatey = retval.getheight(); + break; + } + graphics.translate(translatex,translatey); graphics.rotate(rotation); } graphics.scale( scaling, scaling ); ---------------------------------------------------------------------",
        "label": 1
    },
    {
        "text": "very slow rendering of scanned document it takes extremely long to render this file to image. depends on computer but it can take 15s+ to render 1 page. when i skip drawing of inserted image /im0, then rendering is fast. so there is something wrong with drawing that image in pagedrawer.drawimage(image awtimage, affinetransform at) when i comment out line graphics.drawimage(awtimage, imagetransform, null); then rendering process takes 6s",
        "label": 11
    },
    {
        "text": "pdftoimage indexoutofboundsexception when i convert the pdf test file to image i get a exception : (i test with the latest trunk commit git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1663941) > java -jar ./app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage -imagetype png testfile.pdf exception in thread \"main\" java.lang.indexoutofboundsexception: index: 0, size: 0 at java.util.arraylist.rangecheck(arraylist.java:635) at java.util.arraylist.get(arraylist.java:411) at org.apache.pdfbox.contentstream.operator.text.showtext.process(showtext.java:38) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:802) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:464) at org.apache.pdfbox.contentstream.pdfstreamengine.processannotation(pdfstreamengine.java:301) at org.apache.pdfbox.contentstream.pdfstreamengine.showannotation(pdfstreamengine.java:382) at org.apache.pdfbox.rendering.pagedrawer.showannotation(pagedrawer.java:791) at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:164) at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:203) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:136) at org.apache.pdfbox.rendering.pdfrenderer.renderimagewithdpi(pdfrenderer.java:95) at org.apache.pdfbox.tools.pdftoimage.main(pdftoimage.java:236) at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:89) pages 1 to 6 are ok, only the seventh page is ko",
        "label": 11
    },
    {
        "text": "improve xref self healing mechanism when more than one xref table this is a follow-up issue to pdfbox-2250: the xref repair algorithm simply searches for the nearest offset, which may fail if more than one xref table is present ... once we have a sample pdf which can't be parsed with the simple algorithm, we can open a new issue. and here's one: exception in thread \"main\" java.io.ioexception: error: expected a long type at offset 1180, instead got '50/filter/flatedecode/decodeparms'         at org.apache.pdfbox.pdfparser.baseparser.readlong(baseparser.java:1690) that file does have more than one xref table.",
        "label": 1
    },
    {
        "text": "less pages shown with the non sequential parser the attached file has 3 pages when rendered with the non-sequential parser and 7 pages when rendered with the old parser.",
        "label": 1
    },
    {
        "text": "winansiencoding   the code  copyrigth  inserted twice hi, we are using pdfbox to explore the pdf file structure in padaf. (pdf/a validation tool) we have an issue on font validation. for each character we have to check the width consistency of the glyph in the pdffont dictionary and the glyph width in the font program. however, the winansiencoding defines the copyright character twice with two different names. (\"copyright\" and \"circlecopyrt\") when we ask the name of the character, pdfbox returns \"circlecopyrt\" and this name is missing from our font program. the \"circlecopyrt\" isn't the name used in the pdf reference appendix, so we can remove it because it is declared in a custom encoding dictionary. do you agree with that point? best regards, eric",
        "label": 1
    },
    {
        "text": "handling of invalid annotation border we came across a doc where a link annotation border was set to an array of one element [0], maybe pdannotation::getborder should check the array instance has a valid size too. java.lang.runtimeexception: java.util.concurrent.executionexception: java.lang.indexoutofboundsexception: index: 2, size: 1     org.apache.pdfbox.debugger.pagepane.pagepane$renderworker.done(pagepane.java:258)     sun.swing.accumulativerunnable.run(accumulativerunnable.java:112)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(protectiondomain.java:76) caused by: java.util.concurrent.executionexception: java.lang.indexoutofboundsexception: index: 2, size: 1     org.apache.pdfbox.debugger.pagepane.pagepane$renderworker.done(pagepane.java:247)     sun.swing.accumulativerunnable.run(accumulativerunnable.java:112)     java.security.accesscontroller.doprivileged(native method)     java.security.protectiondomain$javasecurityaccessimpl.dointersectionprivilege(protectiondomain.java:76) caused by: java.lang.indexoutofboundsexception: index: 2, size: 1     java.util.arraylist.rangecheck(arraylist.java:653)     java.util.arraylist.get(arraylist.java:429)     org.apache.pdfbox.cos.cosarray.get(cosarray.java:210)     org.apache.pdfbox.rendering.pagedrawer.getannotationborder(pagedrawer.java:1110)     org.apache.pdfbox.rendering.pagedrawer.drawannotationlinkborder(pagedrawer.java:1162)     org.apache.pdfbox.rendering.pagedrawer.showannotation(pagedrawer.java:1083)     org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:198)     org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:145)     org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:68)     org.apache.pdfbox.debugger.pagepane.pagepane$renderworker.doinbackground(pagepane.java:236)     org.apache.pdfbox.debugger.pagepane.pagepane$renderworker.doinbackground(pagepane.java:1)     java.lang.thread.run(thread.java:745)",
        "label": 11
    },
    {
        "text": "change visibility of overlay loadpdf to protected overriding loadpdf allows subclasses to load overlays from sources different than file objects, for example from inputstreams or byte arrays (mostly through pddocument.load overloads). for example: overlay overlay = new overlay() {     @override     protected pddocument loadpdf(string pdfname) throws ioexception {         return pddocument.load(overlaystreams.get(pdfname));     } };",
        "label": 11
    },
    {
        "text": "error trying to read the header of all the pages of a document i am trying to read a documento with a lot of pages, and the header of all pages came as another text. i am sending the test class and the document i am trying to read.",
        "label": 11
    },
    {
        "text": "ttf font cannot be loaded i'm trying to use texttopdf from the main bundle of pdfbox. to make different encodings work i've read that the font doulus should be used. http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=doulossil_download however upload specifying the font with the -ttf options i'm seeing the following exception: pacsaar:jocon-test-local mbergmann$ java -jar lib/pdfbox-app-1.8.6.jar texttopdf -ttf ~/downloads/doulossil-5.000/doulossil-r.ttf test33-pdfbox.pdf test33-textjp-utf8.txt  java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.common.pdstream.<init>(pdstream.java:120)  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:189)  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:175)  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:162)  at org.apache.pdfbox.texttopdf.main(texttopdf.java:193)  at org.apache.pdfbox.pdfbox.main(pdfbox.java:100)",
        "label": 6
    },
    {
        "text": "codetogid npe i get an npe with the attached file: sep 09, 2014 9:05:40 pm org.apache.pdfbox.pdmodel.font.pdsimplefont tounicode warnung: no unicode mapping for character code 82 in font arial exception in thread \"main\" java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.codetogid(pdtruetypefont.java:291)  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.getwidthfromfont(pdtruetypefont.java:250)  at org.apache.pdfbox.pdmodel.font.pdfont.getwidth(pdfont.java:216)  at org.apache.pdfbox.pdmodel.font.pdfont.getdisplacement(pdfont.java:182)  at org.apache.pdfbox.util.pdfstreamengine.showtext(pdfstreamengine.java:449) don't know if it is related to pdfbox-2310.",
        "label": 6
    },
    {
        "text": "illegalargumentexception in pdpagetree constructor  root cannot be null when merging this pdf with another pdf, i get this exception. it looks similar to pdfbox-2615. java.lang.illegalargumentexception: root cannot be null  at org.apache.pdfbox.pdmodel.pdpagetree.<init>(pdpagetree.java:75)  at org.apache.pdfbox.pdmodel.pddocumentcatalog.getpages(pddocumentcatalog.java:128)  at org.apache.pdfbox.multipdf.pdfmergerutility.appenddocument(pdfmergerutility.java:484)  at org.apache.pdfbox.multipdf.pdfmergerutility.mergedocuments(pdfmergerutility.java:213)",
        "label": 1
    },
    {
        "text": "image transparency lost when drawing an image  during pdf to image conversion  my scenario is converting an existing pdf to an image. when the pdf contains an image with transparency the transparency is lost and the image is drawn at 100% opacity. this fix is related (and depends on) the issue: https://issues.apache.org/jira/browse/pdfbox-975 all that is needed is to set the composite of the graphics before drawing the image as specified in the graphics state (see attached patch) note: line number in patch maybe off since it was created from 1.5.0 but after fixing 975.",
        "label": 1
    },
    {
        "text": "incorrect width calculation for form fields that do not scroll when a form field is marked non scrollable, current implementation does not work. there appears to be unfinished code that in the end does not set the font size.",
        "label": 1
    },
    {
        "text": "ccitt  background is rendered as transparent color ccitt-images with colorspace different from pdindexed are created using pdccitt.java/getrgbimage:  if (colorspace instanceof pdindexed)         {            ...         }         else         {             byte[] map = new byte[] { (byte) 0x00, (byte) 0xff };             colormodel = new indexcolormodel(1, map.length, map, map, map, transparency.opaque);         } the value transparency.opaque (=1) is provided for the parameter \"transparentindex\" - this creates an image, in which the white color is treated as transparent. this bug is especially annoying for some ocr-documents i had to work with (using pagedrawer). they consist of rendered text (as result of the ocr), that has the original content as image rendered on top, fully covering the text. when the white background is rendered as transparent, the rendered page gets messed up, because both texts can be seen, proposed fix/patch replace the value transparency.opaque with -1, so that no color is transparent.",
        "label": 11
    },
    {
        "text": "structure tree idtree isn't merged the idtree is a name tree, which works (unlike the number tree). however the elements have kids (/k entry).",
        "label": 11
    },
    {
        "text": "pdfontfactory createfont  return font which having no fontdescriptor and fontname can not be retrieved in case of pdtype0font and pdcidfonttype0font, pdfontfactory.createfont() return font not having fontdescriptor, pdresources which pushed into streamresourcesstack of pdfstreamengine finaly generate textposition with member font not having fontdescriptor, and then font name cat not be retrieved.",
        "label": 1
    },
    {
        "text": "symbol font glyphs not found on windows fall creators update since the windows 10 fall creators update all files with the symbol standard 14 font are no longer rendered properly. seems to have something to do with a difference in the cmap subtable (all numbers start with f000) and a missing postscript table. the font has two cmap subtables. the first one has codes that start with 0, the second one has codes that start with 0xf000. the code names we get from getuninameofcodepoint(unicodes.codepointat(0)) are not the low ones, only some match, those that are also in ascii. for \">\", there are two cmap subtables codes: for \"macintosh, roman\" it is 0x3e, for \"microsoft, symbol\" it is 0xf03e. i tried forcing the first table code cmap = cmaptable.getsubtable(cmaptable.platform_macintosh, 0); code but many codes are missing, e.g. the greek alphabet. for \"eta\" (looks like an \"n\") pdf code 0150 = 0x68 unicode 0x3b7 windows code in charmap.exe: 68 code in subtables: 0x68 and 0xf068 lozenge unicode 0x25ca pdf code 0340 = 0xe0 code in subtables: 0x0e and 0xf0e0 so it seems one has to bypass this unicode thing and work directly with the symbol encoding... websites: https://www.microsoft.com/typography/otspec/cmap.htm#windowsplatform https://developer.apple.com/fonts/truetype-reference-manual/rm06/chap6cmap.html",
        "label": 11
    },
    {
        "text": "securityhandlersmanager may stop the application server when running pdfparser in a servlet  when parsing a pdf document within an application server, you should never have a code path which call system.exit() i am not sure what invokes the class org.apache.pdfbox.pdmodel.encryption.securityhandlersmanager() from with the code, so i have not a clue how to fix this. i imagine that the best place to notify pdfbox that it is running in an application would be something like this. pddocument.setapplication(true or false); i would like to be able to tell the parser that it is not running as an application so this code is never hit, but i did not see a way to do this. catch(exception e) { system.err.println(\"securityhandlersmanager strange error with builtin handlers: \" + e.getmessage()); system.exit(1); } bug: new org.apache.pdfbox.pdmodel.encryption.securityhandlersmanager() invokes system.exit(...), which shuts down the entire virtual machine pattern id: dm_exit, type: dm, category: bad_practice invoking system.exit shuts down the entire java virtual machine. this should only been done when it is appropriate. such calls make it hard or impossible for your code to be invoked by other code. consider throwing a runtimeexception instead.",
        "label": 11
    },
    {
        "text": "ttf font fails to load array index out of bounds attempting to load true type font. statement that failed is... pdtruetypefont.loadttf(document, \"/usr/share/fonts/truetype/liberation/liberationmono-regular.ttf\"); error is java.lang.arrayindexoutofboundsexception: 5 at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loaddescriptordictionary(pdtruetypefont.java:418) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:201) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:177) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:158) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:145) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:132) ... please accept apologies if this is a user error. font file is as installed by ubuntu, exists and is viewable. changing the file name produces 'no such file or directory', as expected, so pretty sure it has found the file.",
        "label": 1
    },
    {
        "text": "mergedocumentsnonseq does not utilize scratchfile i noticed when merging relatively large pdfs (1gb) that the heap would grow by at least the same amount until complete, even when i call mergedocumentsnonseq() and supplying a read/write scratchfile. when i looked at the source for mergedocuments(bool, randomaccess), it looks like the scratch file is never used. private void mergedocuments(boolean isnonseq, randomaccess scratchfile)              throws ioexception, cosvisitorexception { //...snip                 if (isnonseq)                 {                     source = pddocument.loadnonseq(sourcefile, null);                 } //...snip }",
        "label": 11
    },
    {
        "text": "maven repos should be https i noticed there are 2 http maven repos. only https should be used for security reasons. see http://blog.ontoillogical.com/blog/2014/07/28/how-to-take-over-any-java-developer/ this one you can simply change from http to https: ./parent/pom.xml: <url>http://jbig2-imageio.googlecode.com/svn/maven-repository/</url> this one there isn't an https version available: ./parent/pom.xml: <url>http://www.mygrid.org.uk/maven/repository</ur what library did the mygrid repo have to be added for? the mygrid maven repository was mainly used for development of taverna, which has since moved to the apache software foundation, and uses https://repository.apache.org/ and mirrors to maven central. other software they publish has been gradually moved to https://bintray.com/ which should also offer secure connections.",
        "label": 11
    },
    {
        "text": "javax crypto badpaddingexception in pdfbox snapshot nick burch noticed that one of our old test files fails a tika test now with pdfbox 1.8.7 and java 1.6. i just tested the pure pdfbox app built with pdfbox 1.8.8-snapshot, and i'm getting the same exception with java 1.6 and java 1.7. stacktrace: extracttext failed with the following exception: java.io.ioexception: javax.crypto.badpaddingexception: given final block not properly padded         at javax.crypto.cipherinputstream.getmoredata(cipherinputstream.java:118)         at javax.crypto.cipherinputstream.read(cipherinputstream.java:236)         at javax.crypto.cipherinputstream.read(cipherinputstream.java:212)         at org.apache.pdfbox.pdmodel.encryption.securityhandler.encryptdata(securityhandler.java:316)         at org.apache.pdfbox.pdmodel.encryption.securityhandler.decryptstream(securityhandler.java:421)         at org.apache.pdfbox.pdmodel.encryption.securityhandler.decrypt(securityhandler.java:390)         at org.apache.pdfbox.pdmodel.encryption.securityhandler.decryptobject(securityhandler.java:365)         at org.apache.pdfbox.pdmodel.encryption.securityhandler.proceeddecryption(securityhandler.java:196)         at org.apache.pdfbox.pdmodel.encryption.standardsecurityhandler.decryptdocument(standardsecurityhandler.java:158)         at org.apache.pdfbox.pdmodel.pddocument.openprotection(pddocument.java:1598)         at org.apache.pdfbox.extracttext.startextraction(extracttext.java:216)         at org.apache.pdfbox.extracttext.main(extracttext.java:85)         at org.apache.pdfbox.pdfbox.main(pdfbox.java:58) caused by: javax.crypto.badpaddingexception: given final block not properly padded         at com.sun.crypto.provider.ciphercore.dofinal(ciphercore.java:811)         at com.sun.crypto.provider.ciphercore.dofinal(ciphercore.java:676)         at com.sun.crypto.provider.aescipher.enginedofinal(aescipher.java:423)         at javax.crypto.cipher.dofinal(cipher.java:1708)         at javax.crypto.cipherinputstream.getmoredata(cipherinputstream.java:112)         ... 12 more java version \"1.7.0_71\" openjdk runtime environment (rhel-2.5.3.1.el6-x86_64 u71-b14) openjdk 64-bit server vm (build 24.65-b04, mixed mode) and java version \"1.6.0_33\" openjdk runtime environment (icedtea6 1.13.5) (rhel-1.13.5.0.el6_6-x86_64) openjdk 64-bit server vm (build 23.25-b01, mixed mode)",
        "label": 1
    },
    {
        "text": "pdfbox performance issue  pdsimplefont  pdfont performance tweaks during text extraction, font size / descriptor / encoding attributes are accessed repeatedly in order to do positional calculations and byte-character conversions. the current code has several accessors for these things that redo rather slow calculations each time - even thought the font object state is not changed. the results of these calculations should be persisted in instance fields once calculated. this greatly improves performance. i'll attach new versions of pdfont, pdfontdescriptordictionary and pdsimplefont that have these tweaks.",
        "label": 7
    },
    {
        "text": "problem with printing landscape document i am using pdfbox-1.6.0.jar,fontbox-1.6.0.jar,jempbox-1.6.0.jar and commons-logging-1.1.1.jar when i want to printing landscape documents it printing as portrait document please tell me how can i solve this problem thanks",
        "label": 1
    },
    {
        "text": "shading cut off the attached file is reduced from file \"***417\" that i mentioned in pdfbox-3000. the shading is all black (type 0 function that is all black). it is cut off in rendering by pdfbox. this is somehow related to the bbox and to the cm operation before the sh. changing them changes the cutoff.",
        "label": 11
    },
    {
        "text": "pdfbox can't parse pdf documents from jstor org the academic repository jstor makes papers available via pdf format. the pdfs give this origin information: content creator: jstorpdfgenerator v1.0 pdf producer: itext 2.0.6 (by lowagie.com) these pdfs open fine in acrobat, preview, foxit, etc., but they throw an exception in pdfbox: exception in thread \"main\" java.io.ioexception: error: expected to read '%%eof' instead started reading '1' at org.apache.pdfbox.pdfparser.baseparser.readexpectedstring(baseparser.java:1005) at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:456) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:172) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:739) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:706) at org.apache.pdfbox.pdfdebugger.parsedocument(pdfdebugger.java:393) at org.apache.pdfbox.pdfdebugger.readpdffile(pdfdebugger.java:369) at org.apache.pdfbox.pdfdebugger.main(pdfdebugger.java:355) i traced through the code, and it appears that pdfbox rejects these because they contain a 'startxref' that is not followed by a %%eof two lines later: ... startxref 613364 1 0 obj ... here's a small patch that will accept files that are missing the eof after the startxref: index: src/main/java/org/apache/pdfbox/pdfparser/pdfparser.java =================================================================== \u2014 src/main/java/org/apache/pdfbox/pdfparser/pdfparser.java (revision 802578) +++ src/main/java/org/apache/pdfbox/pdfparser/pdfparser.java (working copy) @@ -453,11 +453,9 @@ { parsestartxref(); //verify that eof exists string eof = readexpectedstring( \"%%eof\" ); if( eof.indexof( \"%%eof\" )== -1 && !pdfsource.iseof() ) { throw new ioexception( \"expected='%%eof' actual='\" + eof + \"' next=\" + readstring() + \" next=\" +readstring() ); + int c = pdfsource.peek(); + if (c == '%') { + readexpectedstring(\"%%eof\"); } isendoffile = true; }",
        "label": 0
    },
    {
        "text": "pdf page   inline image not converted some inline images from pdf page are be missed after converting page to image extracts of the logs are: [warn] 2013-01-10 10:45:26,491 [main] org.apache.pdfbox.util.operator.setnonstrokingcolor - not supported colorspace indexed within operator scn [error] 2013-01-10 10:45:26,507 [main] org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap - java.lang.indexoutofboundsexception: index: 12, size: 12 java.lang.indexoutofboundsexception: index: 12, size: 12 at java.util.arraylist.rangecheck(arraylist.java:547) at java.util.arraylist.get(arraylist.java:322) at org.apache.pdfbox.io.randomaccessbuffer.seek(randomaccessbuffer.java:84) at org.apache.pdfbox.io.randomaccessfileoutputstream.write(randomaccessfileoutputstream.java:116) at org.apache.pdfbox.filter.runlengthdecodefilter.decode(runlengthdecodefilter.java:92) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:279) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:221) at org.apache.pdfbox.cos.cosstream.getunfilteredstream(cosstream.java:156) at org.apache.pdfbox.pdmodel.common.pdstream.createinputstream(pdstream.java:214) at org.apache.pdfbox.pdmodel.common.pdstream.getbytearray(pdstream.java:468) at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdpixelmap.java:185) at org.apache.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:83) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:554) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:125) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:757) ..... [warn] 2013-01-10 10:45:26,883 [main] org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate - unable to create the color instance [0.0, 0.0, 0.0] in color space indexed{ }; guessing color ... interpretating as rgb java.io.ioexception: not implemented at org.apache.pdfbox.pdmodel.graphics.color.pdindexed.createcolorspace(pdindexed.java:116) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorspace.getjavacolorspace(pdcolorspace.java:85) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:180) .... full debug log messages are available under : http://pastebin.com/imjs7gus the converted image can be seen under http://postimage.org/image/kl0hfrk0b/ if more information is required, please let me know! output from \"writedecodeddoc\" not possible because \"java.lang.indexoutofboundsexception: index: 12, size: 12\" has been thrown... best regards, sascha",
        "label": 1
    },
    {
        "text": "pdfbox  pdfreader invokes heap memory exception while loading big documents i am trying to load load bigger document using pdfreader component of pdfbox with version 1.6.0, if i have not set any maximum heap memory then load method invokes heap memory exception. on setting java max heap to 800 resolve the issue. but if i use the same pdfreader component of pdfbox with version 1.4.0 to load the same document with default java min and max heap memory it loads the pdf properly. is it possible to to investigate why memory is leaked with pdfbox component version higher than 1.4. thanks",
        "label": 1
    },
    {
        "text": "created pdf does not open in adobe reader dc when creating a pdf with a single veeeery long line, the resulting pdf cannot be opened in adobe reader dc. the code is the same as in pdfbox-3168 except that the string is 300 times the length.",
        "label": 1
    },
    {
        "text": "missing endofname chars i came across a document that was using a null char 0x00 as array items separator and it wasn't handled correctly. according to chapter 7.2.2 the white-space characters shown in table 1 separate syntactic constructs such as names and numbers from each other. and table 1 contains nul, ht, lf, ff, cr, sp. baseparser::isendofname is missing nul and ff, as a result, if you parse the array [/indexed /devicergb 255 <000000>] where /devicergb and 255 are separated by nul, and you write it back you get [/indexed /devicergb#00255 <000000>]",
        "label": 11
    },
    {
        "text": "pdfstreamengine properties  should use propertynames  [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1544943 originally submitted by thib_gc on 2006-08-22 15:40. the pdfstreamengine(properties) constructor uses properties.keyset().iterator() to create a map of operators based on the client-supplied custom operator processor class names. this has the disadvantage of only iterating over the proper keys of the properties parameter, ignoring any keys that are defined by the properties instance's defaults (if present). if a client of pdfstreamengine wishes to have the default behavior be anything other than the built-in \"no-op\", which exists because of the null check in processoperator(pdfoperator, list), the only choice is to supply to the constructor a properties object with no defaults that includes all possible pdf operators, attaching the name of a class extending operatorprocessor with the desired default behavior to all keys that need it. another conceivable possibility would be to override pdfstreamengine(properties) and processoperator(pdfoperator, list). neither of these options seem desirable, nor do they enable clients to take advantage of defaults recursively in properties without flattening the chained properties objects. instead, the pdfstreamengine(properties) constructor could use properties.propertynames() (the die-hard enumeration from the properties api), which guarantees enumerating recursively over properties objects.",
        "label": 1
    },
    {
        "text": "there is no functionlaity of reading the text line by line with its input field i am trying to read the pdf texts along with its input type like textfield/checkboxes. what i found is textstripper is pasing the whole document and retuning the string in gettext(). and using acroform.getfields i am able ot get all fields. but i have perticuler requierment of reading the texts and its input type. do we have any class/method which can resolve this issue. its very urgent.",
        "label": 1
    },
    {
        "text": "illegalstateexception on saveincrementalforexternalsigning when adding a signature to a pdf document which already contains an invisible signature, the following exception is thrown: java.lang.illegalstateexception: signature reserve byte range has been changed after addsignature(), please set the byte range that existed after addsignature() step to reproduce: get a simple pdf document having an empty signature field and signed (using adobe) with an invisible signature. run the org.apache.pdfbox.examples.signature.createvisiblesignature setting lateexternalsigning = true full stack trace: java.lang.illegalstateexception: signature reserve byte range has been changed after addsignature(), please set the byte range that existed after addsignature()  at org.apache.pdfbox.pdmodel.pddocument.saveincrementalforexternalsigning(pddocument.java:1361)  at org.apache.pdfbox.examples.signature.createvisiblesignature.signpdf(createvisiblesignature.java:270) use the attached pdf as reference to reproduce maybe related to: pdfbox-3811",
        "label": 11
    },
    {
        "text": "useless dependency in specific usage in class org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.pdvisiblesigndesigner line 324 you use arrays.clone() method from bouncycastle. this creates a dependency on bouncycastle if we try to add a visual signature (computed by third party solution) to a pdf document. for this specific usage this dependency seems useless and could be avoided using the copy method of the class java.util.arrays. could you fix this issue in a future version ?",
        "label": 11
    },
    {
        "text": "fix testpublickeyencryption java as reported by tilman in pdfbox-2456",
        "label": 11
    },
    {
        "text": "cosparser can't detect length of stream and then pdfrenderer does not render pages at some files i have a lot of files when pdf box can't render pages to png files. example with one of these files in attachement. in result i have console log: jan 30, 2017 4:45:07 pm org.apache.pdfbox.pdfparser.cosparser parsecosstream warning: the stream doesn't provide any stream length, using fallback readuntilend, at offset 764 jan 30, 2017 4:45:07 pm org.apache.pdfbox.pdfparser.cosparser parsecosstream warning: the stream doesn't provide any stream length, using fallback readuntilend, at offset 519350 jan 30, 2017 4:45:08 pm org.apache.pdfbox.contentstream.pdfstreamengine operatorexception warning: image stream is empty jan 30, 2017 4:45:08 pm org.apache.pdfbox.contentstream.pdfstreamengine operatorexception warning: image stream is empty process finished with exit code 0 and white pages as result of rendering.",
        "label": 11
    },
    {
        "text": "fix high memory usage during signing hello. we have a requirement to be able to sign huge pdf files consisting entirely from paper scans. unfortunately current implementation unnecessary buffers entire pdf contents during signing procedure. this patch suggests a fix. we'll be happy to adjust it if needed and to see it merged.",
        "label": 1
    },
    {
        "text": "visible signature n2 layer   support signature with text the patch adds n2 layer support to visible signatures.",
        "label": 11
    },
    {
        "text": "type1cfont font with null encoding the file from pdfbox-427 does not display the bullets (near \"diff\" in the right column) through debugging i found out: the glyph code to be rendered is 183. that code doesn't exist in the font, however a code 116 exists, and it came from an \"sid\" code (cffglyph2d constructor). a mapping of the name (\"bullet\") through the nametocode table isn't done because encoding is null. pdsimplefont.determineencoding() sets a null encoding pdtype1font.determineencoding() sets a \"good\" encoding based on getafm() (both called from constructor) getafm() gets an encoding table that includes codetoname/nametocode 183 <=> bullet later, due to having a fontfile3, a new type1cfont is created with the external file, but with no encoding. the following change in pdtype1font.java works for me (first line is the existing line): if (type1cfont.getfontencoding() == null && getfontencoding() != null) //th {     log.info(\"encoding of type1cfont '\" + type1cfont.getbasefont() + \"' is null, trying type1font encoding\");     type1cfont.setfontencoding(getfontencoding());     } another improvement is the fat dash (at the beginning of \"--use-merge-history\" at the bottom of the mid column.",
        "label": 1
    },
    {
        "text": "missing pddocument load  overload please add public pddocument.load(inputstream, string password, boolean usescractfile);",
        "label": 11
    },
    {
        "text": "glyph not found there are some debug messages: 15:30:46,574 debug ttfglyph2d:227 - gyqpbh+timesnewromanpsmt: glyph not found:3 but glyph id #3 is reserved (according to ttf spec) so it is ok that this glyph was not found in ttf font.",
        "label": 11
    },
    {
        "text": "group exception ./ex13aaa.pdf :: exception in thread \"main\" org.apache.pdfbox.preflight.exception.validationexception: the group dictionary hasn't group as type value at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:193) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:72) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:49) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validateresources(singlepagevalidationprocess.java:158) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:77) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:49) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:56) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:45) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168) at org.apache.pdfbox.preflight.validator_a1b.runsimple(validator_a1b.java:158) at org.apache.pdfbox.preflight.validator_a1b.main(validator_a1b.java:125) caused by: org.apache.pdfbox.preflight.exception.validationexception: the group dictionary hasn't group as type value at org.apache.pdfbox.preflight.xobject.xobjformvalidator.checkgroup(xobjformvalidator.java:129) at org.apache.pdfbox.preflight.xobject.xobjformvalidator.validate(xobjformvalidator.java:72) at org.apache.pdfbox.preflight.process.reflect.graphicobjectpagevalidationprocess.validate(graphicobjectpagevalidationprocess.java:73) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:49) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:184) ... 14 more",
        "label": 3
    },
    {
        "text": "pdftextstripper gettext   hight memory usage hello, i'm trying to extract text from pdfs but i can find that the pdftextstripper use a lot of memory. with a pdf that have 2676 pages (for a 4.6mo size) it use 1.5go memory. i also constat that the memory is'nt free after the gettext method is called. you can see my code bellow: double virgule = math.pow(10, 2); system.out.println(\"start - total memory (mo): \" + math.round((runtime.getruntime().totalmemory()/1000000) * virgule) / virgule); pddocument cd = pddocument.load(file); system.out.println(\"pddocument getnumberofpages - nombre de pages: \" + cd.getnumberofpages()); system.out.println(\"pddocument load - total memory (mo): \" + math.round((runtime.getruntime().totalmemory()/1000000) * virgule) / virgule); string pdftext = \"\"; try{ pdftextstripper stripper = new pdftextstripper(); pdftext = stripper.gettext(cd); system.out.println(\"pdftextstripper gettext - total memory (mo): \" + math.round((runtime.getruntime().totalmemory()/1000000) * virgule) / virgule); stripper.resetengine(); stripper = null; system.out.println(\"pdftextstripper resetengine - total memory (mo): \" + math.round((runtime.getruntime().totalmemory()/1000000) * virgule) / virgule); } finally{ if( cd!=null ) { cd.close(); cd = null; system.out.println(\"pddocument close - total memory (mo): \" + math.round((runtime.getruntime().totalmemory()/1000000) * virgule) / virgule); } } retour = new textfield(fieldname, pdftext, field.store.no); system.out.println(\"textfield - total memory (mo): \" + math.round((runtime.getruntime().totalmemory()/1000000) * virgule) / virgule); and the result into my output window: start - total memory (mo): 95.0 pddocument getnumberofpages - nombre de pages: 2676 pddocument load - total memory (mo): 121.0 pdftextstripper gettext - total memory (mo): 757.0 pdftextstripper resetengine - total memory (mo): 757.0 pddocument close - total memory (mo): 757.0 textfield - total memory (mo): 757.0 pdftext - total memory (mo): 757.0 i also try to call system.gc() but the memory use is the same.",
        "label": 1
    },
    {
        "text": "width of the character     inconsistent with the width in the pdf dictionary  i have downloaded the trunk version of pdfbox for pdf/a validation purposes. the validation process fails with the following error : 3.1.6 : invalid font definition, width of the character \"201\" in the font program \"aeoqyb+frutiger-bold-ansi\"is inconsistent with the width in the pdf dictionary. the same pdf file is considered as valid when using acrobat pro x i used fontforge (as described in https://issues.apache.org/jira/browse/pdfbox-1259) to check the width of the caracter and the value is correct 556. the same value is found in the pdf file. when running in debug mode i noticed that the charstringrenderer constructor is called with \"false\" as parameter, meaning that the charstring is not type1 (acrobat reader says it is type1). when digging further, i found that in the handlecommandtype2 method of charstringrenderer does not update the width of the character because the following condition is not met else if (\"endchar\".equals(name)) { if (numbers.size() == 1 ) { setwidth(numbers.get(0)); } } numbers has an array as value ([556, 171, 158, 69, 194]). in the handlesequence method of charstringhandler, the sequence value used to compute the \"numbers \" value is [556, 171, 158, 69, 194, [14]] [14] being the endchar command. if i change the above condition to else if (\"endchar\".equals(name)) { if (numbers.size() % 2 == 1 ) { setwidth(numbers.get(0)); } } the pdf file is considered as valid ... is there a bug in the code or in the validation process or in the pdf file ? why should there be a single character when the endchar command is met ? the the technical note 5177 (16 march 2000) issued by adode says that the correct \"sequence and form of a type 2 charstring program may be represented as: w? {hs* vs* cm* hm* mt subpath} ? {mt subpath} * endchar where: w = width hs = hstem or hstemhm command vs = vstem or vstemhm command cm = cntrmask operator hm = hintmask operator mt = moveto (i.e. any of the moveto) operators subpath = refers to the construction of a subpath (one complete closed contour), which may include hintmask operators where appropriate. and the following symbols indicate specific usage: zero or more occurrences are allowed ? zero or one occurrences are allowed + one or more occurrences are allowed { } indicates grouping the pdf file is attached to this mail and the caracter 201 is eacute. thanks for your help best regards",
        "label": 1
    },
    {
        "text": "some pdborderstyledictionary options not honored i'm creating links and using pdborderstyledictionary to set the border style, but have noticed that some options are not honored when opening the files. here are my findings: pdborderstyledictionary.style_underline = works correctly. pdborderstyledictionary.style_solid = works correctly. pdborderstyledictionary.style_beveled = identical to using solid. pdborderstyledictionary.style_inset = identical to using solid. pdborderstyledictionary.style_dashed = identical to using solid in appearance, link type under properties in acrobat is \"custom\". i've noticed that when i manually create a link in acrobat the only options are solid, dashed and underline, so maybe the pdf specs have changed and need to be updated in pdfbox as well.",
        "label": 1
    },
    {
        "text": "handle the fully qualified name of duplicate fields better when there are multiple copies with the same field name, the getfullyqualifiedname for each kid in the list of pdfield objects returns the name of the parent, followed by \".null\". so if the parent field is called \"button2\" and it has 4 instances the result of printing out all the names will be: button2.null button2.null button2.null button2.null acrobat names these widgets using consecutive numbers, like so: button2.0 button2.1 button2.2 button2.3 i had a look at the pdf iso documentation regarding field names (12.7.3.2, p. 434) and this convention is not mentioned there, but it might be a good idea to use it anyway, no? i'm attaching a sample code snippet and a pdf that show this issue.",
        "label": 8
    },
    {
        "text": "extracted pdf  text  partially garbled when using tika 0.9 to etxract text from the given pdf, the text partially gets garbled.",
        "label": 1
    },
    {
        "text": "xmp dates contain time zone  while document info dates do not  and this isn't detected by preflight another one from the bavaria test suite: /creationdate(d:20090317081112)  /moddate(d:20090317081112) <xmp:createdate>2009-03-17t08:11:12z</xmp:createdate> <xmp:modifydate>2009-03-17t08:11:12z</xmp:modifydate> the info dates do not have a timezone, but the xmp dates do (z = \"zulu\"). this information (whether there was a timezone information in the string) is \"lost\" in our conversion methods amusingly, pdf tools says the file is valid.",
        "label": 8
    },
    {
        "text": "continuous log  nonsymbolic type font  sncfys arstdkai  when printing, pdfbox continuous log: 2014-10-24 15:37:07,768 [ warn] g.apache.pdfbox.pdmodel.font.pdtype0font:  71 - nonsymbolic type 0 font: sncfys+arstdkai 2014-10-24 15:37:07,771 [ warn] g.apache.pdfbox.pdmodel.font.pdtype0font:  71 - nonsymbolic type 0 font: sncfys+arstdkai what can i response to this warning? or the message should be logged with lower severity?",
        "label": 6
    },
    {
        "text": "pdsimplefont  font height reported as zero  the logic for pdsimplefont.getfontheight() can return a value of zero. this will corrupt or compromise text extraction and layout. in particular, test with 'http://www.encana.com/investor/financial/shareholder/pdfs/info-circular-french.pdf', pg 12 when a pdfontdescriptor is used, the current logic uses: 1) an average of xheight and capheight. xheight is the height from the baseline to the top of a lower case letter like 'x'. capheight is the height from the baseline to the top of an upper case latin char. 2) xheight 3) capheight 4) ascent 5) zero this is really bizarre. 'xheight' is an optional parameter, and 'capheight' is often missing. the font bounding box is a required parameter and is the height that is used by acrobat reader when you select a line of text. the bounding box is not perfect, because it often overlaps the line above, but it is a consistent value. the problem with the current logic is that the reported height varies way too much, and a zero value can be reported. i have modified the logic as follows. the goal was to make the nominal values the same as the current logic, but return a very similar number when parameters go missing. pdfontdescriptor desc = getfontdescriptor(); if( desc != null ) { float height = desc.getcapheight(); // top of cap to baseline (eg 715) if (height==0) { height=desc.getascent(); // max height from baseline (eg 715); if (height==0) { pdrectangle bbox = desc.getfontboundingbox(); height = bbox.getheight()/2; // max height less max depth (eg (1006-(-325))=1331/2=665) if (height==0) { height=desc.getxheight(); // top of lower-case to baseline (eg 518) height-=desc.getdescent(); // depth below baseline (eg 209, to get total of 727) } } } retval=height; }",
        "label": 1
    },
    {
        "text": "check for missing validation processes does not work properly in preflight org.apache.pdfbox.preflight.preflightconfiguration#getinstanceofprocess(string) method is supposed to return a validator instance for given process name. if process is not found (is not set in preflightconfiguration) and erroronmissingprocess flag is set, an exception should be thrown. if that flag is not set, an instance of nop validator (org.apache.pdfbox.preflight.process.emptyvalidationprocess class) is returned. unfortunatelly there is no way to unconfigure (i.e. disable) specific validation process in preflightconfiguration. though it contains the methods #replacepageprocess(string, class) and #replaceprocess(string, class), if null is given as the second parameter specifying validation class, then #getinstanceofprocess(string) method fails with npe instead of expected behavior for missing validation process.",
        "label": 3
    },
    {
        "text": "pdcidfonttype2embedder buildcidset  arrayoutofbounds byte[] bytes = new byte[(collections.max(cidtogid.keyset()) + 7) / 8]; ... bytes[cid / 8] |= mask; problem: [(n+7)/8] is not enough to store n/8 when n=8k (for example, 8). (n+8)/8 or n/8+1 seem to solve the problem, but not sure about the potential remote consequences. test case:   pddocument document = new pddocument();   pdpage page = new pdpage(pdrectangle.a4);   document.addpage(page);   string dir = \"../../resources/\";   pdtype0font font = pdtype0font.load(document, new file(dir + \"liberationsans-regular.ttf\"));   pdpagecontentstream stream = new pdpagecontentstream(document, page);   stream.begintext();   stream.setfont(font, 12);   stream.setleading(12 * 1.2);   stream.newlineatoffset(50, 600);   //this particular russian letter has been   //a trouble maker in computer system for decades )   stream.showtext(\"\u044f\");   stream.endtext();   stream.close();   document.save(\"example.pdf\");   document.close();",
        "label": 6
    },
    {
        "text": "automatically load isartor for preflight tests provide some modification in pom and create a new test class for isartor validation. by default, the isartor testing will be skipped. use -dskip.external.resources=false in command line to run them",
        "label": 11
    },
    {
        "text": "codetogid npe java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage expected.pdf exception in thread \"main\" java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.font.pdtype0font.codetogid(pdtype0font.java:306)",
        "label": 6
    },
    {
        "text": "pddocument load fails to load a pdf document  pddocument.load fails to load a pdf document. pddocument doc = null; try { doc = pddocument.load(new bytearrayinputstream(pdf.getcontent())); pddocument.load(new bytearrayinputstream(pdf.getcontent())) = >exception occurred in target vm: error expected floating point number actual='0.00000-33917698'< that failure is produced only with the attached file \"ecomm mobile loyalty.pdf\". that pdf document opens fine at pdf reader.",
        "label": 11
    },
    {
        "text": "double encryption dictionary for files with xref stream this was first mentioned by patrick s. in the mailing list: this is not a general problem and only occurs with original pdf generated with 3d content using anark. the file when loaded seems to have encrypted and loads just find in adobe reader, but when we try to do a \"save as\" we get the following error: \"the document could not be saved. there was a problem reading this document 21.\" if i do a control click on the \"ok\" button. i get the following message: \"this direct object already has a container.\" i can reproduce the effect with the attached file by using the encrypt command line tool. a look at the file shows a double dictionary: 593 0 obj << /filter /standard /v 1 /r 3 /length 40 /p -4 /o <10780080a0085854c58a57fcafbd94a3ca3f7df6ffe9dbc4834b7aaf144602c9> /u <7cf00ad61911db6a737867655ed3520c28bf4e5e4e758a4164004e56fffa0108> >> endobj 594 0 obj << /id [<1d7a1969b33886dcf0dd4b0176f149af> <c9898f3e11eaad418e771b3045f38ddc>] /info 7 0 r /root 1 0 r /encrypt << /filter /standard /v 1 /r 3 /length 40 /p -4 /o <10780080a0085854c58a57fcafbd94a3ca3f7df6ffe9dbc4834b7aaf144602c9> /u <7cf00ad61911db6a737867655ed3520c28bf4e5e4e758a4164004e56fffa0108> >> i don't know if this is the cause, but it doesn't belong there.",
        "label": 11
    },
    {
        "text": "image streams are lost when adding new images to page i open existing pdf which contains images. then i want to insert new images and save it as new pdf. the resulting pdf does not contain original images, just the new ones. adobe reader complains about missing object too. pddocument pddoc=pddocument.load(\"input.pdf\", false); pdxobjectimage ximage = new pdjpeg(pddoc, bufferedimage); pdpage page=(pdpage) pddoc.getdocumentcatalog().getallpages().get(0); pdpagecontentstream content = new pdpagecontentstream(pddoc, page, true, true); content.drawxobject(ximage, 100, 600, 200, 130); // or content.drawimage(ximage, 0, 0); content.close(); pddoc.save(\"output.pdf\"); pddoc.close(); when i look into pdf binary file i can see only 1 image stream (the one i added) and i can't see streams of original images, they simply are not there.",
        "label": 1
    },
    {
        "text": "file completely different in and the attached file is completely different in display/textextract between the two versions. one has 1 page, the other 11.",
        "label": 1
    },
    {
        "text": "pdfmergerutility with scratch file generates result with blank pages for certain source files  my team uses pdfmergerutility to attach cover pages to various pdfs . we recently we tried utilizing a scratch file (e.g. pdfmergerutility.mergedocumentsnonseq()) to cut down on the amount of ram we are using. this approach works for the majority of pdf's in our system, but some files cause the merger utility to generate resultant pdf's with a blank page. specifically, the result pdf contains a blank page after the coverpage instead of the first page of the second document sent to merger utility. whenever this problem occurs, we see the following line in our logs: org.apache.pdfbox.pdfparser.nonsequentialpdfparser - can't find the object 52 0 (origin offset 7187557) i'll try to attach/link an example pdf soon, but currently i don't have permission to redistribute any files that exhibit the problem. however, here's a simple snippet that replicates the problem - it's pretty straightforward.     @test     public void testmergenonseq() throws ioexception, cosvisitorexception {         destinationpdf = new file(tmp_folder, \"result-nonseq.pdf\");         pdfmergerutility ut = new pdfmergerutility();         randomaccess ram = new randomaccessfile(file.createtempfile(\"mergeram\", \".bin\"), \"rw\");         ut.addsource(coverpagepdf);         ut.addsource(documentpdf);         ut.setdestinationfilename(destinationpdf.getcanonicalpath());         ut.mergedocumentsnonseq(ram);                    //the only automated way we have to tell that something went wrong is to check the size of the result         assertthat(\"destination pdf should be larger than the original pdf\", destinationpdf.length(), is( greaterthan(documentpdf.length())));     } note we only see this problem with pdfmergerutility.mergedocumentsnonseq(). using pdfmergerutility.mergedocuments() does not exhibit any problems.",
        "label": 1
    },
    {
        "text": "newdocuments is private in splitter the method `createnewdocument` in `splitter` is protected, so it can be overridden, but one of the things it needs to do with the new document is add it to the `newdocuments` list, which is private.",
        "label": 6
    },
    {
        "text": "pdf printing of text from embedded fonts when printing from utility printpdf, text is rendered in the wrong typeface. the correct typeface is embedded within the pdf (embedded subset) as a truetype font with an ansi encoding. it may be noted that the acrofields in a courier typeface render correctly.",
        "label": 1
    },
    {
        "text": " patch  visible signature using pdfbox in order to sign document with visible signature we have very bad solution at the moment: passing a pdf as an inputstream that serves as a template for the appearance settings is very inconvenient. so, now everything is well and fixed! you only set image with location, zoom, width, height, and etc, and everything will be added automatically. i've just already done this, and i will upload my patches too. i have wrote example too, in order to see how to use it. everything is easy!",
        "label": 10
    },
    {
        "text": "glyph error in pdf a that passes comercial validators home/fausser/ccreadmepdfa.pdf is not valid, error(s) : 3.3.1: glyph error, cid 515 can't be found in the cidtogid map",
        "label": 3
    },
    {
        "text": "text extraction failed on korean pdf trying to extract text on a korean pdf gives me a lot of warnings : warning: no unicode mapping for us (33) in font dvcaya+wtkobaeummyungjol063zb4?pw avr. 01, 2015 12:05:32 pm org.apache.pdfbox.pdmodel.font.pdsimplefont tounicode warning: no unicode mapping for nak (33) in font jyldgg+wtkobaeummyungjol053zb4?pw avr. 01, 2015 12:05:32 pm org.apache.pdfbox.pdmodel.font.pdsimplefont tounicode warning: no unicode mapping for rs (38) in font wryule+wtkobaeummyungjol013zb4?pw avr. 01, 2015 12:05:32 pm org.apache.pdfbox.pdmodel.font.pdfont <init> warning: invalid tounicode cmap in font fzefoy+wtkobaeumgothicl0422b4?pw avr. 01, 2015 12:05:32 pm org.apache.pdfbox.pdmodel.font.pdsimplefont tounicode warning: no unicode mapping for del (33) in font fzefoy+wtkobaeumgothicl0422b4?pw avr. 01, 2015 12:05:32 pm org.apache.pdfbox.pdmodel.font.pdfont <init> warning: invalid tounicode cmap in font oolnbg+wtkobaeumgothicl0122b4?pw avr. 01, 2015 12:05:32 pm org.apache.pdfbox.pdmodel.font.pdsimplefont tounicode warning: no unicode mapping for soh (33) in font oolnbg+wtkobaeumgothicl0122b4?pw and the result is not readable. the pdf is containing the necessary conversion table because every pdf reader (desktop or mobile) let me copy and past the text without problem.",
        "label": 6
    },
    {
        "text": "korean text font substitution issues http://acroeng.adobe.com/test_files/fonts/asian%20font%20files/korean/nonembedded/k4systemfontsnotembeded218.pdf and http://acroeng.adobe.com/test_files/fonts/asian%20font%20files/korean/nonembedded/kgulimchenotembeded218.pdf and http://acroeng.adobe.com/test_files/fonts/asian%20font%20files/korean/nonembedded/variouskfontsnotembeded218.pdf and http://acroeng.adobe.com/test_files/fonts//embeddedcmap.pdf and http://acroeng.adobe.com/test_files/fonts/asian%20font%20files/japanese/nonembedded/jun101.pdf and http://acroeng.adobe.com/test_files/fonts/asian%20font%20files/japanese/nonembedded/acptj_win_msgothic.doc.pdf java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage k4systemfontsnotembeded218.pdf",
        "label": 6
    },
    {
        "text": "dataformatexception  invalid stored block lengths java -jar pdf-box-svn/app/target/pdfbox-app-2.1.0-snapshot.jar writedecodeddoc 601501018.pdf exception in thread \"main\" java.io.ioexception: java.util.zip.dataformatexception: invalid stored block lengths at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:82)",
        "label": 11
    },
    {
        "text": "method pddocument save does not sign the document method pddocument.saveincrementally() does sign the document, while method pddocument.save() does not sign. it's not clear from javadoc if it's ok. at least i was frustrated. i want to sign my pdf, and it's convenient for me to use method pddocument.save(). could it sign the document?",
        "label": 1
    },
    {
        "text": "font refactoring to fix bugs such as pdfbox-2140 and to enable unicode ttf embedding we need to sort out long-standing font/text encoding issues. the main issue is that encoding is done in an ad-hoc manner, sometimes in the pdfont subclasses, sometimes elsewhere. for example ttfglyph2d does its own decoding, and this code is copy & pasted into pdtruetypefont. likewise, pdfont handles cmaps and encodings despite the fact that these two encoding methods are mutually exclusive. the end result is that the process of reading encodings/cmaps is often following rules which are completely invalid for that font type but mostly work by luck. phase 1 refactor pdfont subclasses to remove setxxx methods which allow the object to be corrupted. proper use of inheritance can remove all cases where public setxxx methods are used during font loading. clean up ttf loading and the loadttf in anticipation of unicode ttf embedding, fontbox's truetypefont class is externally mutable via setxxx methods used only by ttfparser: these can be made package-private. the encoding class and encodingmanager could do with some cleaning up prior to further refactoring. pdsimplefont does not do anything, its functionality should be moved into its superclass, pdfont. pdfont#determineencoding() loads cmaps when only encodings are applicable, and vice versa. loading needs to be pushed down into the appropriate subclasses, as a starting point the relevant code should at least be copied into the relevant subclasses ready for further refactoring. ttfglyph2d does its own decoding of char codes, rather than using the font's #encode method (fair enough because #encode is broken) and there's a copy and pasted version of the same code in pdtruetypefont - we need to consolidate this code into pdtruetypefont where it belongs. phase 2 refactor loading of cmaps and encodings from font dictionaries, this will involve changes to pdfont and its subclasses to delegate loading to subclasses where it can be properly encapsulated may need to alter the class hierarchy w.r.t cidfont to facilitate this, as cidfont isn't really a pdfont - it's parent type0 font is responsible for its cmap. we'll see. phase 3 refactor the decoding of character codes by pdfont and its subclasses, this will involve replacing the #getcodefromarray, #encode and #encodetocid methods. fix decoding of content stream character codes in pdfstreamengine, using the newly refactored pdfont and using the current font's cmap to determine the code width.",
        "label": 6
    },
    {
        "text": "text not extracted with pdfbox i have used pdfbox v1.2.1 to extract text from a pdf file, and it works perfect. but now i have tested it with pdfbox v1.4 and most of the text is not extracted. i have attached a 1-page pdf file to test.",
        "label": 1
    },
    {
        "text": "converttoimage   pdf   checkbox wrongly rendered when converting pdf to png (pdpage.converttoimage or imagewriter.writeimage) checkboxes are wrongly rendered. other interactive components (radiobuttons, ...) look good original pdf was created in acrobat pro x (the same behavior with pdf created in other software)",
        "label": 6
    },
    {
        "text": "incorrect cropping from pdftoimage with offset mediabox when the mediabox is not at 0,0 then incorrect image is created. the attached file shows the problem. note: while the pdfbox creates the image from the mediabox, the adobe reader seems to use the cropbox. that seems like the easiest fix here.",
        "label": 1
    },
    {
        "text": "pdpage converttoimage creates inverted black and white image for indexed colorspace  the attached pdf file demonstrates that line 178 of pdpixelmap.java does not try to determine what is the black value and what is the white value. the colorspace of the attached pdf file is pdindexed. inverting this value makes the file render correctly, but there needs to be some kind of way to determine what is black/white for a pdindexed colorspace. if (colorspace instanceof pddevicegray) { cosarray decode = getdecode(); // we have to invert the b/w-values, // if the decode array exists and consists of (1,0) if (decode != null && decode.getint(0) == 1) { map = new byte[] {(byte)0xff}; } else { map = new byte[] {(byte)0x00, (byte)0xff}; } } else if (colorspace instanceof pdiccbased) { if ( ((pdiccbased)colorspace).getnumberofcomponents() == 1) { map = new byte[] {(byte)0xff} ; } else { map = new byte[] {(byte)0x00, (byte)0xff}; } } else { map = new byte[] {(byte)0x00, (byte)0xff} ; // <--- happens here - no test for black/white like other cases above. }",
        "label": 1
    },
    {
        "text": "printimagelocations does not print information of all images hi, printimagelocations does not print information of all images. however i am able to extract all images using \"extractimages.java\" following is my initial analysis: in processresources method of extractimages.java, source code is present as given below if( xobjects != null ) { iterator<string> xobjectiter = xobjects.keyset().iterator(); while( xobjectiter.hasnext() ) { if (xobject instanceof pdxobjectimage) { ---- ---- } else if (xobject instanceof pdxobjectform) { pdxobjectform xobjectform = (pdxobjectform)xobject; pdresources formresources = xobjectform.getresources(); processresources(formresources, prefix, addkey); } } } my pdf contains some images which are of type pdxobjectform. i am not able to get information of all those images (of type pdxobjectform) using printimagelocations.java in processoperator method of printimagelocations.java, there is no \"else\" statement for images of type pdxobjectform. is this problem? kindly help and suggest how to fix this.",
        "label": 1
    },
    {
        "text": "fdfdocument loadxfdf not working i have attached sample files that i used for testing in the external issue url. i am trying to read in the values of each of the fields to create a font subset, however when i try to read the value of the fields, a blank line is returned. on closer inspection, the value stored in the field is a cosname object. when i set the value manually using field.setvalue the value stored is a cosstring object and it works correctly. also, when trying to save the xfdf, the values are omitted. expected: imported xfdf values are stored as cosstring objects savexfdf correctly outputs values.",
        "label": 8
    },
    {
        "text": "oom for single page pdf file on tika-2045, a user posted a single page document that leads to oom with -xmx1g. i confirmed this with pdfbox's extracttext. might be a memory leak with the fonts? see this for some diagnostics i did.",
        "label": 11
    },
    {
        "text": "classcastexception in flatefilter [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1297272 originally submitted by yves_bussard on 2005-09-20 22:35. hi ben, there is another bug in flatefilter.decode(). let's have a look at the following stream in the attached document: 174 0 obj << /length 94 /layercreator /neevia /layerid <c5593367f4b69653b3dd4f771209026a> /layerxml 177 0 r /filter [ /flatedecode ] /decodeparms [ null ] >> stream <the 94 bytes of the stream> endstream endobj as described in the pdf reference this document uses the possibility to define an array of filters instead of just one filter(name). in the above case the array contains only one element (filter). in this case it should also define an array of dictionaries (one for each filter) which it does. now the decode() method is passed a parametere options which imho should be the dictionary with the parameters for this filter instance. instead the options parameter actually is the stream itself (cosstream is derived from cosdictionary) which contains the filter parameters in decodeparms. now if you have a cosarray of cosdictionaries in the entry decodeparms then you have no way of knowing which set (index) of parameters you should use. i think that the parameter options should contain the dictionary with the parameters itself (not the stream). this affects a few places calling the method. also another bug is on line 78 in the same method: predictor = dict.getint(\"predictor\"); colors = dict.getint(\"colors\"); --> bitsperpixel = options.getint(\"bitspercomponent\"); columns = dict.getint(\"columns\"); the parameter bitspercomponent is stored at the same location as columns. therefore it should be from the variable dict that the bitspercomponent are retrieved. to me it looks as if originally the parameter options used to be the decode parameters and it has been changed later on (i don't know for which reason). cheers yves",
        "label": 1
    },
    {
        "text": "possible npe in extracttext tool of trunk with some pdfs an npe is thrown. here's the patch for it (referring to trunk): index: tools/src/main/java/org/apache/pdfbox/tools/extracttext.java =================================================================== --- tools/src/main/java/org/apache/pdfbox/tools/extracttext.java (revision 1658905) +++ tools/src/main/java/org/apache/pdfbox/tools/extracttext.java (working copy) @@ -252,7 +252,7 @@                                  }                                  pdcomplexfilespecification spec = (pdcomplexfilespecification) ent.getvalue();                                  pdembeddedfile file = spec.getembeddedfile(); -                                if (file != null && file.getsubtype().equals(\"application/pdf\")) +                                if (file != null && file.getsubtype() != null && file.getsubtype().equals(\"application/pdf\"))                                  {                                      if (debug)                                      {",
        "label": 11
    },
    {
        "text": "syntax error in doap file release section doap files can contain details of multiple release versions, however each must be listed in a separate release section, for example: <release>       <version>         <name>apache xyz</name>         <created>2015-02-16</created>         <revision>1.6.2</revision>       </version> </release> <release>       <version>         <name>apache xyz</name>         <created>2014-09-24</created>         <revision>1.6.1</revision>       </version> </release> please can the project doap be corrected accordingly? thanks.",
        "label": 11
    },
    {
        "text": "pdfbox may not depend on plattform encoding the pdf specification states, that pdfs use an ascii compatible, 8 bit characterset. pdfbox uses on various places the plattform encoding to convert bytes from/to strings. on jres with an non ascii compatible plattform encoding (there are such systems out there), this will break pdfbox.",
        "label": 1
    },
    {
        "text": "unable to create the color instance   bg color inverted i get a ton of red for this code segment, and the resulting file has the background color inverted. pddocument document = null; try { document = pddocument.load(pdffile); list pages = document.getdocumentcatalog().getallpages(); int p = 0; for (object pobj : pages) { pdpage page = (pdpage) pobj; ++p; bufferedimage bim = page.converttoimage(); // test with output in memory, to see the size bytearrayoutputstream memout = new bytearrayoutputstream(); boolean memoutok = imageio.write(bim, \"png\", memout); if (!memoutok) system.err.println (\"mem write failed for \" + p); memout.reset(); memout.close(); // test with output to png file string fname = string.format(\"%s-%02d.png\", prefix, p); boolean foutok = imageio.write(bim, \"png\", new file(fname)); if (!foutok) system.err.println (\"file write failed for \" + p); ... apr 26, 2012 2:15:49 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [1.0] in color space iccbased{ cosarray{[cosname {iccbased}, cosobject{14, 0}]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.fillpath(pagedrawer.java:281) at org.apache.pdfbox.util.operator.pagedrawer.fillnonzerorule.process(fillnonzerorule.java:58) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:50 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [0.133057] in color space iccbased{ cosarray{[cosname{iccbased} , cosobject {14, 0}]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:151) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:494) at org.apache.pdfbox.util.operator.showtext.process(showtext.java:45) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:50 pm org.apache.pdfbox.util.pdfstreamengine processoperator information: unsupported/disabled operation: ei apr 26, 2012 2:15:50 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [0.921875] in color space iccbased{ cosarray{[cosname{iccbased}, cosobject{14, 0} ]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.fillpath(pagedrawer.java:281) at org.apache.pdfbox.util.operator.pagedrawer.fillevenoddrule.process(fillevenoddrule.java:57) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:50 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [0.397949] in color space iccbased{ cosarray{[cosname {iccbased}, cosobject{14, 0}]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:151) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:494) at org.apache.pdfbox.util.operator.showtextglyph.process(showtextglyph.java:62) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:50 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [0.898438] in color space iccbased{ cosarray{[cosname{iccbased} , cosobject {14, 0}]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.fillpath(pagedrawer.java:281) at org.apache.pdfbox.util.operator.pagedrawer.fillevenoddrule.process(fillevenoddrule.java:57) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:50 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [0.397949] in color space iccbased{ cosarray{[cosname{iccbased}, cosobject{14, 0} ]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:151) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:494) at org.apache.pdfbox.util.operator.showtext.process(showtext.java:45) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:51 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [0.667969] in color space iccbased{ cosarray{[cosname {iccbased}, cosobject{14, 0}]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.fillpath(pagedrawer.java:281) at org.apache.pdfbox.util.operator.pagedrawer.fillevenoddrule.process(fillevenoddrule.java:57) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:51 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [1.0] in color space iccbased{ cosarray{[cosname{iccbased} , cosobject {14, 0}]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.fillpath(pagedrawer.java:281) at org.apache.pdfbox.util.operator.pagedrawer.fillnonzerorule.process(fillnonzerorule.java:58) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:51 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [0.0] in color space iccbased{ cosarray{[cosname{iccbased}, cosobject{14, 0} ]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:151) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:494) at org.apache.pdfbox.util.operator.showtextglyph.process(showtextglyph.java:62) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:51 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [0.0] in color space iccbased{ cosarray{[cosname {iccbased}, cosobject{14, 0}]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:151) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:494) at org.apache.pdfbox.util.operator.showtext.process(showtext.java:45) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:51 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [0.0] in color space iccbased{ cosarray{[cosname{iccbased} , cosobject {14, 0}]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:151) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:494) at org.apache.pdfbox.util.operator.showtextglyph.process(showtextglyph.java:62) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:51 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [0.0] in color space iccbased{ cosarray{[cosname{iccbased}, cosobject{14, 0} ]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:151) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:494) at org.apache.pdfbox.util.operator.showtext.process(showtext.java:45) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:51 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [0.0] in color space iccbased{ cosarray{[cosname {iccbased}, cosobject{14, 0}]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:151) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:494) at org.apache.pdfbox.util.operator.showtextglyph.process(showtextglyph.java:62) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:51 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [1.0] in color space iccbased{ cosarray{[cosname{iccbased} , cosobject {14, 0}]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.fillpath(pagedrawer.java:281) at org.apache.pdfbox.util.operator.pagedrawer.fillnonzerorule.process(fillnonzerorule.java:58) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:52 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [0.0] in color space iccbased{ cosarray{[cosname{iccbased}, cosobject{14, 0} ]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:151) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:494) at org.apache.pdfbox.util.operator.showtextglyph.process(showtextglyph.java:62) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73) apr 26, 2012 2:15:52 pm org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate createcolor warnung: unable to create the color instance [0.0] in color space iccbased{ cosarray{[cosname {iccbased} , cosobject {14, 0} ]} } number of components: 1; guessing color ... interpretating as single-integer rgb java.awt.color.profiledataexception: invalid profile sequence at sun.java2d.cmm.kcms.cmm.createtransform(cmm.java:149) at java.awt.color.icc_colorspace.torgb(icc_colorspace.java:170) at java.awt.color.<init>(color.java:542) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.createcolor(pdcolorstate.java:165) at org.apache.pdfbox.pdmodel.graphics.color.pdcolorstate.getjavacolor(pdcolorstate.java:113) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:151) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:494) at org.apache.pdfbox.util.operator.showtextglyph.process(showtextglyph.java:62) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxpageimageextraction.extractimages.main(extractimages.java:73)",
        "label": 1
    },
    {
        "text": "pdfprintable generate a java lang negativearraysizeexception error i use in pom : <dependency> <groupid>org.apache.pdfbox</groupid> <artifactid>pdfbox</artifactid> <version>2.0.0-rc2</version> </dependency> and when i do : pdfprintable printable = new pdfprintable(undoc, scaling.actual_size); i have the error.",
        "label": 11
    },
    {
        "text": "pdfbox makes disallowed changes when signing a signed document it seems pdfbox make disallowed changes when signing a document containing a signature with visual appearance. using the signing example org.apache.pdfbox.examples.signature.createsignature (modified to use bc 1.52) i signed (invisible signature) a document (acrosigned.pdf) containing signature with visual appearance. after signing adobe acrobat for the resulted pdf (acrosigned_signed.pdf) shows an error for the first signature: 1 page(s) modified signature is invalid: document has been altered or corrupted since it was signed. the first revision is intact after signing, but it seems pdfbox made some disallowed changes to the document. adobe in its technical white paper adobe acrobat 9 digital signatures, changes and improvements disallows such changes for the signed document: adding form fields other than signature fields changing page content unfortunately, i could not identify the changes which caused this error, though i notice these changes in structure after signing: default resources (/dr) were droped from acroform dictionary; an array of annotation dictionaries (value of /annots in page object) became direct; and probably there are more... i thought the first change was fundamental, noticed that pddocument#addsignature() method removes /dr key for invisible signatures. tried to disable it in 1.8.10-snapshot sources, but unfortunately it didn't help. didn't tried to reuse the same array object for /annots yet.",
        "label": 8
    },
    {
        "text": "imagetopdf createpdffromimage causes problems for certain tiff inputs i try to create a pdf for a given tiff image while trying imagetopdf imagetopdf = new imagetopdf(); imagetopdf.createpdffromimage(\"c:\\\\tmp mydocument.pdf\", \"c:\\\\tmp myimage.tif\"); problem: acrobat reader (version 9.3.4) cannot display the generated file mydocument.pdf the error message shown by acrobat reader says that there is \"insufficient data for an image\" (in german: \"nicht gen\u00fcgend daten f\u00fcr ein bild\")",
        "label": 11
    },
    {
        "text": "java error 2.0 branch doesnt build on java 6 anymore unsupported major.minor version 51.0",
        "label": 11
    },
    {
        "text": "cie lab item missing in rendering the file from pdfbox-1681 is missing the \"cielab\" output, it was there a few weeks ago.",
        "label": 11
    },
    {
        "text": "pdf does not display correctly  [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1422067 originally submitted by benlitchfield on 2006-02-01 17:35. see simplegroove-schedule-546.pdf, colors are incorrect. ben",
        "label": 1
    },
    {
        "text": "pddocument decrypt does not throws invalidpasswordexception pddocument.decrypt does not throws invalidpasswordexception the documentation say the method should throw \"invalidpasswordexception\" but it doest't i suggest either: correct the exception methods throws or correct the javadoc the method for this version is: /** this will decrypt a document. this method is provided for compatibility reasons only. user should use the new security layer instead and the openprotection method especially. * @param password either the user or owner password. * @throws cryptographyexception if there is an error decrypting the document. @throws ioexception if there is an error getting the stream data. @throws invalidpasswordexception if the password is not a user or owner password. * */ public void decrypt( string password ) throws cryptographyexception, ioexception, invalidpasswordexception unknown macro: { try { standarddecryptionmaterial m = new standarddecryptionmaterial(password); this.openprotection(m); document.dereferenceobjectstreams(); } catch(badsecurityhandlerexception e) { throw new cryptographyexception(e); } }",
        "label": 11
    },
    {
        "text": "memory leak in org apache pdfbox cos cosdocument org.apache.pdfbox.cos.cosdocument.close() does not close the streams and causing therefore a growing memory leak. supposed fix: public void close() throws ioexception { // if (!closed) { // scratchfile.close(); // if (tmpfile != null) { // tmpfile.delete(); // } // closed = true; // } // begin robert scharpf closed = true; if (scratchfile != null) { try { scratchfile.close(); } catch (exception e) { } } scratchfile = null; if (tmpfile != null) { try { tmpfile.delete(); } catch (exception e) { } } tmpfile = null; list<cosobject> list = getobjectsbytype(cosname.obj_stm); if (list != null) { for (cosobject objstream : list) { cosstream stream = (cosstream) objstream.getobject(); stream.close(); } } // end robert scharpf }",
        "label": 1
    },
    {
        "text": "nullpointerexception in pdfxrefstreamparser fuzzing pdf loading with jqf triggered an nullpointerexception. java.lang.nullpointerexception  at org.apache.pdfbox.pdfparser.pdfxrefstreamparser.parse(pdfxrefstreamparser.java:95)  at org.apache.pdfbox.pdfparser.cosparser.parsexrefstream(cosparser.java:2767)  at org.apache.pdfbox.pdfparser.cosparser.parsexrefobjstream(cosparser.java:442)  at org.apache.pdfbox.pdfparser.cosparser.parsexref(cosparser.java:392)  at org.apache.pdfbox.pdfparser.cosparser.retrievetrailer(cosparser.java:254)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:171)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:220)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1160)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1057)     ... the code used for fuzzing is pddocument.load(inputstream)",
        "label": 11
    },
    {
        "text": "pdfmergerutility seems to leave source file open hi,   having migrated from 2.0.11 to 2.0.12. i am facing the following issue:   when merging multiple pdf files into one, i can no longer delete the source files.   here is a sample code (worked in 2.0.11):   public void mergepdffiles(list<file> infiles, file outfile)     throws invalidpasswordexception, ioexception     {         try (outputstream out = new bufferedoutputstream(new fileoutputstream(outfile))) {             pdfmergerutility merger = new pdfmergerutility();             merger.setdestinationstream(out);             for(file tomerge : infiles) {                 merger.addsource(tomerge);             }             merger.mergedocuments(memoryusagesetting.setupmainmemoryonly());         }              for(file f : infiles) {             // ioexception thrown             fileutils.forcedelete(f);         }     } has something changed or do i do something wrong ?   br,   david schreck  ",
        "label": 11
    },
    {
        "text": "get rid of warning about prerequisites currently the build shows a warning: [info] scanning for projects... [warning] the project org.apache.pdfbox:pdfbox-parent:pom:3.0.0-snapshot uses prerequisites which is only intended for maven-plugin projects but not for non maven-plugin projects. for such purposes you should use the maven-enforcer-plugin. see https://maven.apache.org/enforcer/enforcer-rules/requiremavenversion.html this can be solve with the attached patch.",
        "label": 11
    },
    {
        "text": "some text is missing in jbig2 images this pdf has problems. see pages \"iii\" (2), \"ix\" (6), \"x\" (7) etc. these pages have most of their text missing or in wrong position when rendered in pdfdebugger. each page is a jbig2 image that uses huffman encoding. you may need to use for example -xmx1000m to avoid outofmemoryerror because the jbig2 images are very large. apply my patch to file encodedtable.java in package org.apache.pdfbox.jbig2.decoder.huffman. i have fixed one line of code that does not follow the jbig2 standard. the jbig2 standard is freely available here",
        "label": 11
    },
    {
        "text": "suggestion  close files in cosstream close file objects in cosstream.java to improve gc, see attached patch",
        "label": 1
    },
    {
        "text": "specific type1c methods not used anymore in one of the last releases the pdfontfactory changed so that for type1c fonts a pdtype1font will be created and not as before a pdtype1cfont. while pdtype1font will internally instantiate a pdtype1cfont several of the methods which pdtype1cfont overrides are now hidden and not used (instead the pdsimplefont variants are used). i will add the necessary methods in an attachment which calls the appropriate methods. however having all these type specific switches it seems to be a better solution to subclass pdtype1cfont from pdtype1font.",
        "label": 1
    },
    {
        "text": "signatureoptions object must not be closed before calling saveincremental in trunk's createvisiblesignature example as reported by rafael gomez on the user mailing list: exception in thread \"main\" java.io.ioexception: cosstream has been closed and cannot be read. perhaps its enclosing pddocument has been closed?  at org.apache.pdfbox.cos.cosstream.checkclosed(cosstream.java:78)  at org.apache.pdfbox.cos.cosstream.createrawinputstream(cosstream.java:126)  at org.apache.pdfbox.pdfwriter.coswriter.visitfromstream(coswriter.java:1138)  at org.apache.pdfbox.cos.cosstream.accept(cosstream.java:372)  at org.apache.pdfbox.cos.cosobject.accept(cosobject.java:158)  at org.apache.pdfbox.pdfwriter.coswriter.dowriteobject(coswriter.java:538)  at org.apache.pdfbox.pdfwriter.coswriter.dowritebody(coswriter.java:450)  at org.apache.pdfbox.pdfwriter.coswriter.visitfromdocument(coswriter.java:1039)  at org.apache.pdfbox.cos.cosdocument.accept(cosdocument.java:409)  at org.apache.pdfbox.pdfwriter.coswriter.write(coswriter.java:1289)  at org.apache.pdfbox.pdmodel.pddocument.saveincremental(pddocument.java:1118)  at org.apache.pdfbox.examples.signature.createvisiblesignature.signpdf(createvisiblesignature.java:169)  at org.apache.pdfbox.examples.signature.createvisiblesignature.main(createvisiblesignature.java:261) he got rid of the exception by moving options.close() after doc.saveincremental(fos))",
        "label": 11
    },
    {
        "text": "pdtextbox and pdannotationwidget are not correct initialized from it's own constructor   i find 2 bugs in interactive.form, and i have resolved this 2 bug. here are the code 1. i want make new textbox in pdf. it always failed because the type flag \u201ccosname.ft,=\"tx\"\u201d never be set in the constructor. the pdtextbox can only be correct initialized from cosdictionary.( that is only initialized from exist pdf file) . i fixed this by add \u201cgetdictionary().setname(cosname.ft, \"tx\");\u201d in the constructor of pdtextbox. maybe it\u2019s not right place, but works in my project. public pdtextbox( pdacroform theacroform ) { super( theacroform ); getdictionary().setname(cosname.ft, \"tx\"); } public pdtextbox( pdacroform theacroform, cosdictionary field) { super( theacroform, field); getdictionary().setname(cosname.ft, \"tx\"); } 2. same bug in pdannotationwidget. only the default constructor initialize the type flag \u201ccosname.subtype,= \"widget\"\u201d. but the default constructor were never be used. so i must use the pdannotationwidget to initialize the new pdtextbox, like blow. pdannotationwidget widget = new pdannotationwidget(); pdtextbox textbox = new pdtextbox(acroform,widget.getdictionary()); otherwise i got an empty pdannotationwidget from pdtextbox .getwidget(). something not correct in pdfield .getwidget(). if the the pdfield create from user(not read from exist pdf file), the getwidget cannot get an correct initialized pdannotationwidget. the cosname.subtype will never be set. maybe the similar bug in the whole org.apache.pdfbox.pdmodel.interactive.form: the cosdictionary of element are not initialized when user create it manually (typical to insert new acroform element). i hope that i can give something help to this opensource project. could you check this and fix in next version?",
        "label": 8
    },
    {
        "text": "extract images from pdf file using pdfbox in c  public class extractimage { private int imagecounter = 1; private static string password = \"-password\"; private static string prefix = \"-prefix\"; public extractimage() { } public void extractimage(string []args) { if(args.length<1||args.length>4) { usage(); } else { string pdffile = \"\"; string password = \"\"; string prefix = null; for (int i = 0; i < args.length; i++) { if(args[i]==password) { i++; if (i >= args.length) { usage(); } password = args[i]; } else if (args[i]==prefix) { i++; if(i>=args.length) { usage(); } prefix = args[i]; } else { if(pdffile==null) { pdffile = args[i]; } } } if(pdffile==null) { usage(); } else { if(prefix==null && pdffile.length>4) { prefix = pdffile.substring(0, pdffile.length - 4); } pddocument document=null; try { document = pddocument.load(pdffile); if( document.isencrypted() ) { standarddecryptionmaterial spm = new standarddecryptionmaterial(password); document.openprotection(spm); accesspermission ap = document.getcurrentaccesspermission(); if( ! ap.canextractcontent() ) { console.writeline(\"error: you do not have permission to extract images.\" ); } } list pages = document.getdocumentcatalog().getallpages(); java.util.iterator iter = pages.iterator(); while( iter.hasnext() ) { pdpage page = (pdpage)iter.next(); pdresources resources = page.getresources(); java.util.map images = resources.getimages(); if( images != null ) { iterator imageiter = images.keyset().iterator(); while( imageiter.hasnext() ) { string key = (string )imageiter.next(); pdxobjectimage image = (pdxobjectimage)images.get( key ); string name = getuniquefilename( key, image.getsuffix() ); console.writeline( \"writing image:\" + name ); image.write2file( name ); } } } } catch (exception) { throw; } } } } private string getuniquefilename(string prefix, string suffix) { string uniquename = null; java.io.file f = null; f = null; while (f == null || f.exists()) { uniquename = prefix + \"-\" + imagecounter; f =new file(uniquename + \".\" + suffix); imagecounter++; } return uniquename; } private void usage() { console.error.writeline(\"usage: java org.pdfbox.extractimages [options] <pdf file>\\n\" + \" -password <password> password to decrypt document\\n\" + \" -prefix <image-prefix> image prefix(default to pdf name)\\n\" + \" <pdf file> the pdf document to use\\n\"); environment.exit(1); } } reference: http://svn.apache.org/repos/asf/pdfbox/trunk/pdfbox/src/main/java/org/apache/pdfbox/extractimages.java i tested but i have a problem.it ran if(args.length<1||args.length>4) and stopped in usage().it loop.please help me.many thanks. { usage(); }",
        "label": 1
    },
    {
        "text": "pdftoimage class not in javadocs https://pdfbox.apache.org/docs/2.0.1/javadocs/",
        "label": 8
    },
    {
        "text": "corners of stroked type are inaccurate when rendered as an image using the latest 2.0 snapshot, converting a pdf with outlined type results in slightly inaccurate strokes. it looks as if the strokes don't always meet completely causing some corners of the rendered type to have double corners. for abc1.jpg, it's most visible on the bottom left of most rendered glyphs. java -jar pdfbox-app-2.0.0-20160310.194240-1983.jar pdftoimage -dpi 300 abc.pdf",
        "label": 11
    },
    {
        "text": "performance in pddocument load when i use pdfbox 1.5.0, it takes longer to load a pdf file than pdfbox 1.4.x. i tested pddocument.load performance by a 10m pdf file. it took 1.5 sec in pdfbox 1.4.0, and 9.1 sec in pdfbox 1.5.0. is it a performance issue in pdfbox 1.5.0? what functions should i use to improve performance?",
        "label": 1
    },
    {
        "text": "zapfdingbats not finding a substitute in windows pro when running pdfbox on windows 8.1 pro, it can't find a proper substitute for zapfdingbats. this email chain from the mailing list talks about this problem but the fix doesn't work for me: http://mail-archives.apache.org/mod_mbox/pdfbox-users/201504.mbox/%3ca8c49658-b378-4294-baa5-470ef822f077@jahewson.com%3e i was able to fix this problem by adding \"ms-pgothic\" to the substitutes array for zapfdingbats (fontmapperimpl.java).",
        "label": 11
    },
    {
        "text": "embedded font  value for  widths faulty  worked in pdfbox  we have a problem with the font 'lucidiasansunicode (l_10646.ttf). it is embedded in a pdf and when viewing this pdf (with acrobat reader 9), an error in der schrift \"lucidasansunicode\" ist der wert f\u00fcr /widths fehlerhaft. occurs (roughly translated: \"in font \"lucidasansunicode\" the value for /widths is faulty.\"). i noticed that this error only occurs when the first page is displayed that has text added by pdfbox! the same font is also used for all other text (used by apache fop to generate). when i look at the dialog window of acrobat 3. tab \"fonts\", i notice lots of entries lucidasansunicode (eingebettete untergruppe) typ: truetype (cid) kodierung: identity-h but only 1 entry at the very top that looks different: lucidasansunicode (eingebettet) typ: truetype kodierung: ansi i guess one is from apache fop (generation of pdf) and one is from pdfbox (adding additional text to the pdf). however, both use the same source file \"l_10646.ttf\"! using pdfbox 1.3.0-snapshot (or itext 2.1.7), this problem does not occur! this only occurs with this \"lucidasansunicode\" font - all our other custom fonts don't cause this problem. the difference i notice in acrobat reader fonts tab is the first font entry: pdfbox 1.4.0: lucidasansunicode (eingebettet) typ: truetype kodierung: ansi pdfbox 1.3.0 or itext 2.1.7: lucidasansunicode (eingebettete untergruppe) typ: truetype kodierung: ansi so, pdfbox 1.4.0 only shows \"embedded\" (\"eingebettet\") but pdfbox 1.3.0/itext version shows \"embedded subgroup\" (\"eingebettete untergruppe\")! perhaps this is the problem?",
        "label": 1
    },
    {
        "text": "include afm files for core fonts i noticed that the build process for pdfbox includes downloading the core 14 afm files however they are under an apache-compatible license (see legal-35) so can be included directly in the source tree.",
        "label": 1
    },
    {
        "text": "useless memory allocation in glyfdescript glyfdescript#readinstructions() allocates an int array which is never used (replaced by ttfdatastream#readunsignedbytearray) on the following line. while harmless, this still costs some memory and garbage collector time.",
        "label": 11
    },
    {
        "text": "pdfbox doesn't warn if special graphics state operators are used in text mode when i use a large amount of affinetransformations the resulting document will open in acrobat reader, but each time a warning is displayed, that there is a defect in the document. the code i use is like:  // broken context.usefont(fontface.font_text); for (int i = 0; i < 80; i++) {     context.contentstream.begintext();     context.contentstream.savegraphicsstate();     context.contentstream.transform(new matrix(affinetransform.gettranslateinstance(0, viewport_top - i * 5)));     context.contentstream.showtext(\"xxxxxxxxx\");     context.contentstream.restoregraphicsstate();     context.contentstream.endtext(); } // works context.usefont(fontface.font_text); for (int i = 0; i < 80; i++) {     context.contentstream.savegraphicsstate();     context.contentstream.begintext();     context.contentstream.transform(new matrix(affinetransform.gettranslateinstance(0, viewport_top - i * 5)));     context.contentstream.showtext(\"xxxxxxxxx\");     context.contentstream.endtext();     context.contentstream.restoregraphicsstate(); } when i skip the transformations or reduce the amount to e.g. 30, everything is fine. the size of ty or page breaks do not have an influence on the result, it seems to be the amount of transforms. i attached a simple pdf sporting the described effect. please note: the effect only occurs in the standalone acrobat reader, not the acrobat browser plugin. so to see the error, download the pdf from this ticket and open it independently from the browser.",
        "label": 8
    },
    {
        "text": "nullpointerexception in pdfstreamengine showtext happens when trying to render page 2: exception in thread \"awt-eventqueue-0\" java.lang.nullpointerexception  at org.apache.pdfbox.contentstream.pdfstreamengine.showtext(pdfstreamengine.java:699)  at org.apache.pdfbox.contentstream.pdfstreamengine.showtextstring(pdfstreamengine.java:552)  at org.apache.pdfbox.rendering.pagedrawer.showtextstring(pagedrawer.java:289)  at org.apache.pdfbox.contentstream.operator.text.showtext.process(showtext.java:44)  at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:794)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:460)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:437)  at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:148)  at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:180)  at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:205) rendering did work with rev 1633472.",
        "label": 11
    },
    {
        "text": "pdfbox performance issue  textposition performance tweak during text extraction, the textposition.getx() and textposition.gety() methods are invoked multiple times on each textposition object. the current code recalculate these values each time the accessor is invoked, even thought the underlying state from which the values are derived has not changed. this is slow. the getters (getx() and gety()) should be changed to retain the x and y attributes in instance fields and only calculate their values once. specificaly the following two fields should be added: private float x = float.negative_infinity; private float y = float.negative_infinity; and the two methods changed to look like so: public float getx() { if(x==float.negative_infinity) { x = getxrot(rot); } return x; } public float gety() { if(y==float.negative_infinity){ if ((rot == 0) || (rot == 180)) { y = pageheight - getylowerleftrot(rot); } else { y = pagewidth - getylowerleftrot(rot); } } return y; } this provides a very noticeable speedup in the text extraction. i'll attach a version of the textposition.java class that includes this mod.",
        "label": 7
    },
    {
        "text": "structure tree lost when merging from the command line when merging with pdfmerger from the command line (e.g. the files from pdfbox-4007) the structure tree is lost. the cause is that mergedocuments() merges into an empty pddocument object, and appenddocument() does not copy the structure tree if it doesn't exist in the destination. it does something only if source and destination have one.",
        "label": 11
    },
    {
        "text": "make org apache pdfbox pdmodel pddocument getfontstosubset public making org.apache.pdfbox.pdmodel.pddocument#getfontstosubset public would be great for developers working with their own implementations of org.apache.pdfbox.pdmodel.pdpagecontentstream",
        "label": 6
    },
    {
        "text": "  pdftextstripper  uses different y values when cropbox has non zero y  not so for x coordinates  [first off, kudos to the folks who work on pdfbox. it's got some great functionality.] the issue is that a cropbox with non-zero \"lower-left-corner\" changes positions reported for text by pdftextstripper. in the y coordinate only. see page 5 of the attached pdf (which is a phony tax return, not real data). as an example, near the top is the tax year, \"2009\". using a program such as apple's preview, one would estimate that a snug bounding rectangle for that text would be x=300, y=54, w=41, and h=18. and on other pdfs, that would be fine with pdftextstripperbyarea. but this pdf has a non-zero-origin cropbox set, one with the alleged lower-left-corner at [-24.0, -24.0]. so the region coordinates that pdftextstripperbyarea wants to see need to be offset by subtracting -24 from x and y, i.e., yielding x=324, y=78. or so you would think. it turns out that the x coordinate stays the same, only the y coordinate gets affected by the cropbox setting. using the sample program printtextlocations, which, like pdftextstripperbyarea, derives from pdftextstripper, reports both coordinates as being offset by 24 in its processtextposition(): ... string[92.0,94.0 fs=12.0 xscale=1.0 height=9.0720005 space=3.3360004 width=186.71997]u.s. individual income tax retur string[278.71997,94.0 fs=12.0 xscale=1.0 height=9.0720005 space=3.3360004 width=7.3320007]n string[301.0,94.0 fs=18.0 xscale=1.0 height=13.122001 space=5.0040007 width=30.023987]200 string[331.024,94.0 fs=18.0 xscale=1.0 height=13.122001 space=5.0040007 width=10.007996]9 string[368.0,94.0 fs=8.0 xscale=1.0 height=7.5200005 space=2.2240002 width=11.559998](99 string[379.56,94.0 fs=8.0 xscale=1.0 height=7.5200005 space=2.2240002 width=2.6640015]) string[399.0,94.0 fs=6.0 xscale=1.0 height=4.5360003 space=1.6680002 width=36.34201]irs use only ... (lines 3 and 4 are the only key ones, the others for comparison). to make sense of this: 301.0 is close enough to 300 for the x coordinate: if i go to 324, i don't get the \"200\", just the \"9\". also, the y coordinate of 94 is the bottom of the text, with a height of 18 that roughly extends up to 76, but 78 works as far as extractregions() is concerned (i think it only cares about the lower-left corner of each character). so the bounding rectangle reported above for \"2009\" is lower-left corner (301.0, 94.0) to upper-right corner approx (341.03, 76). in those coordinates, the region that works with extractregions() is ll (300, 96) to ur (341, 78). (or, the exact rectangle2d i pass to extractregions: x=300, y=78, w=41, h=18). this applies to any field you choose on this page. so: (a) it doesn't seem to me that a cropbox has any business changing the coordinates. but i could be wrong. (b) if it does make sense for a cropbox to affect the coordinates, it should do so in both x and y dimensions, shouldn't it? (c) i suppose it would be too much to ask for notes explaining the coordinates used for each method, but it's a nice thought. i tried looking through pdftextstripper* but i'm not sufficiently familiar with the code to determine where the coordinate perturbation occurs. it might be in how pdfstreamengine.processencodedtext() is using the graphicsstate (initialized with the cropbox) to transform textmatrixstdisp, but that seems to be initialized with a dimension, so i don't see how an offset would affect it.",
        "label": 1
    },
    {
        "text": "printing based on the document orientation we are using pdfbox in our current project to print a pdf file directly to an attached network printer. printing pdf documents having only portrait pages within worked like a charm. however we experienced problems with pdfs having landscape pages defined, as the orientation is currently always defined by the printer service and not by the pddocument. this may be desireable in some situations but undesirable in others. printing pdfs with portrait and landscape pages in one document may lead to strange print results as the landscape pages are truncated to a portrait width. it would be good to have a possibility to change the mechanism how the orientation will be determined. this also would allow to fix the following bugs without breaking the current semantics: pdfbox-985 pdfbox-819 pdfbox-222",
        "label": 1
    },
    {
        "text": "apparent regression in character mapping in a few files from govdocs1 on a small number of test files in a 50k sample of pdfs from govdocs1, it appears that some characters are no longer being extracted correctly in 1.8.7 when compared to 1.8.6. i ran pdfbox's app.jar with extracttext 764929.pdf 1.8.6: lang, astrophysical data: planets and stars 1.8.7: lang, aefdaphyeiusl dsfs: plsnefe snd efsde, and 312888.pdf 1.8.6: self-assessment \\u0026 capability description 1.8.7: seff-ammemmmehn \\u0026 cajabcfcns demclcjncih",
        "label": 1
    },
    {
        "text": "outofmemoryerror in pdextendedgraphicsstate getlinedashpattern i'm getting an outofmemoryerror from pdfbox when parsing a certain pdf using the apache tika app v 1.17 - which uses pdfbox 2.0.8 internally. this is reproducible even with 8gb heap. the outofmemoryerror happens in org.apache.pdfbox.pdmodel.graphics.state.pdextendedgraphicsstate#getlinedashpattern, which contains this piece of suspicious code: cosarray dp = (cosarray) dict.getdictionaryobject( cosname.d ); if( dp != null ) {     cosarray array = new cosarray();     dp.addall(dp); the last line is wrong. it appends all elements from 'dp' to 'dp' again, effectively duplicating the elements in the list. maybe the intention was to add it to the created array instead. stacktrace: [full gc (allocation failure)  4225609k->4224664k(5989888k), 32,9544686 secs] exception in thread \"main\" java.lang.outofmemoryerror: java heap space     at java.util.arrays.copyof(arrays.java:3210)     at java.util.arrays.copyof(arrays.java:3181)     at java.util.arraylist.grow(arraylist.java:261)     at java.util.arraylist.ensureexplicitcapacity(arraylist.java:235)     at java.util.arraylist.ensurecapacityinternal(arraylist.java:227)     at java.util.arraylist.addall(arraylist.java:579)     at org.apache.pdfbox.cos.cosarray.addall(cosarray.java:124)     at org.apache.pdfbox.pdmodel.graphics.state.pdextendedgraphicsstate.getlinedashpattern(pdextendedgraphicsstate.java:280)     at org.apache.pdfbox.pdmodel.graphics.state.pdextendedgraphicsstate.copyintographicsstate(pdextendedgraphicsstate.java:89)     at org.apache.pdfbox.contentstream.operator.state.setgraphicsstateparameters.process(setgraphicsstateparameters.java:61)     at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:838)     at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:495)     at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:469)     at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150)     at org.apache.pdfbox.text.legacypdfstreamengine.processpage(legacypdfstreamengine.java:139)     at org.apache.pdfbox.text.pdftextstripper.processpage(pdftextstripper.java:391)     at org.apache.tika.parser.pdf.pdf2xhtml.processpage(pdf2xhtml.java:147)     at org.apache.pdfbox.text.pdftextstripper.processpages(pdftextstripper.java:319)     at org.apache.pdfbox.text.pdftextstripper.writetext(pdftextstripper.java:266)     at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:117)     at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:168)     at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280)     at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280)     at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:143)     at org.apache.tika.cli.tikacli$outputtype.process(tikacli.java:205)     at org.apache.tika.cli.tikacli.process(tikacli.java:486)     at org.apache.tika.cli.tikacli.main(tikacli.java:145)",
        "label": 1
    },
    {
        "text": "stack overflow  extracttext  pdf2txt  java.io.ioexception: error: could not find font(cosname {f1}) in map={f27=org.apache.pdfbox.pdmodel.font.pdtype1font@40bb2bc3, f8=org.apache.pdfbox.pdmodel.font.pdtype1font@40363068, f56=org.apache.pdfbox.pdmodel.font.pdtype1font@25a41cc7, f7=org.apache.pdfbox.pdmodel.font.pdtype1font@395d601f, f13=org.apache.pdfbox.pdmodel.font.pdtype1font@2151b0a5} java.io.ioexception: error: could not find font(cosname{f1} ) in map= {f27=org.apache.pdfbox.pdmodel.font.pdtype1font@40bb2bc3, f8=org.apache.pdfbox.pdmodel.font.pdtype1font@40363068, f56=org.apache.pdfbox.pdmodel.font.pdtype1font@25a41cc7, f7=org.apache.pdfbox.pdmodel.font.pdtype1font@395d601f, f13=org.apache.pdfbox.pdmodel.font.pdtype1font@2151b0a5} at org.apache.pdfbox.util.operator.settextfont.process(settextfont.java:57) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:562) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:238) at org.apache.pdfbox.util.operator.invoke.process(invoke.java:77) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:562) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:238) at org.apache.pdfbox.util.operator.invoke.process(invoke.java:77) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:562) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:238) at org.apache.pdfbox.util.operator.invoke.process(invoke.java:77) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:562) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:238) at org.apache.pdfbox.util.operator.invoke.process(invoke.java:77) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:562) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:238)",
        "label": 1
    },
    {
        "text": "dateconverter badly handles date with minus sign in timezone in a pdf where creationdate is like \"d:20110603085808-04'00'\" (american west coast), the method pddocumentinformation.getcreationdate does not return a calendar with a correctly set timezone : offset remains 0. there is no problem with \"d:20110603085808+04'00'\" where offset is correct. the problem is in org.apache.pdfbox.util.dateconverter that does not handle '-'. obvisouly, same problem with getmodificationdate i made this patch to fix my problem : \u2014 dateconverter.java (revision 1133573) +++ dateconverter.java (working copy) @@ -251,6 +251,10 @@ //parseint cannot handle the + sign hours = integer.parseint( date.substring( 15, 17 ) ); } + else if (sign == '-') + { + hours = -integer.parseint(date.substring(15,17)); + } else { hours = -integer.parseint( date.substring( 14, 16 ) ); it works, but i think there is much work to do on this method.",
        "label": 1
    },
    {
        "text": "performance regression from to after upgrading from version 0.7.3 to 0.8.0 our pdf indexing for lucene takes a lot longer than expected. e.g. a single pdf needs 1150ms to be indexed compared to 750ms with version 0.7.3 ==> +50% my first thought was that more pdfs are indexed or even indexed correctly with 0.8.0. but that shouldn't be an impact more than 50%. profiling with yourkit shows that a lot of time is spent in the method baseparser.readuntilendstream and it's invocation of cmpcircularbuffer. maybe somebody find out how to improve the performance here. the method readuntilendstream handles endobj tags in the stream also which impacts of course the performance, but this is ok.",
        "label": 1
    },
    {
        "text": " foreign  characters are not rendered in the attached file (from page 3 of the pdf file), the letters \u00e4, \u00f6 and \u00fc are not rendered. i am using the version of last weekend.",
        "label": 1
    },
    {
        "text": "image not getting rendered correctly  hi, i converted a ms office word document in to pdf using open office. and then i used the pdfbox api to convert the pages of the pdf to image. class : pdpage api : public bufferedimage converttoimage(int imagetype, int resolution) but the image contained \")\" characters which were not present in the pdf.",
        "label": 1
    },
    {
        "text": "pdfbox pdf print operation eliminates  prints blank  ms word table tiling pattern pdfbox pdf print operation eliminates i.e prints blank ms word table tiling pattern. print results are varies according to the environment. in some cases pdf print operation prints blank pages with some characters or print operation failed.",
        "label": 11
    },
    {
        "text": "error on metadata  the metadata entry doesn't reference a stream object on testing preflight-1.8.0-20120715.180423-19-jar-with-dependencies.jar for the attached file out_pdfa.pdf, i get the following error: the file/home/fausser/out_pdfa.pdf is not valid, error(s) : 7.1.3 : error on metadata, the metadata entry doesn't reference a stream object",
        "label": 3
    },
    {
        "text": "unit tests for pdfbox features we're upgrading the pdfbox we use and to ensure there aren't any regressions, while also learning pdfbox, we are unit testing some of the classes, especially the pdf \"primitive\" objects (cos level).",
        "label": 1
    },
    {
        "text": "saving of decrypted version of password protected document gives an error for a sample owner-password-protected pdf that i can decrypt and save to another file in pdfbox 1.8.5, however, in the 2.0.0 build created using the repository checked out of svn, i get an exception while saving. java.io.ioexception: cannot save a document which has been closed at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1229) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1215) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1203) the code snippet is as follows- pd = pddocument.load(is); if (pd.isencrypted()) {   try {    pd.decrypt(\"\");    pd.setallsecuritytoberemoved(true);           fnamestr = fname.substring(0, fname.lastindexof('.'))        + \"_new.pdf\";           system.out.println(pd.getcurrentaccesspermission()     pd.save(fnamestr);  // java.ioexception at this line  } catch (exception e) {   e.printstacktrace();  } finally {                        pd.close();    if (is != null) {      is.close();    }        }",
        "label": 11
    },
    {
        "text": "glyphs rendered as gibberish glyphs rendered as gibberish see also the fix in pdf.js https://github.com/mozilla/pdf.js/pull/6270 https://github.com/mozilla/pdf.js/pull/6270/files",
        "label": 1
    },
    {
        "text": "image added to pdf by tool addimagetopdf is turn overed i had a pdf file (see attachement test.pdf), i try pdfbox tools addimagetopdf to add any test image to first page of my test pdf. the image added in pdf always turn-overed. but if i tried other pdf like scanned version, there is no such problem. you can reproduce it by my test.pdf with any image.",
        "label": 11
    },
    {
        "text": " patch  text should be in italic but is rendered upright see attached pdf. the embedded font has a fontmatrix with skew values to make the font look italic. it's not taken into account by pdfbox. in pagedrawer and cffglyph2d there are a lot of manual modifications of the y coordinate to convert from the pdf coordinate system to awt. this can be avoided by applying an initial transform to the graphics2d instance. that allows to simplify the code quite a bit.",
        "label": 1
    },
    {
        "text": "illegalargumentexception in pdfobjectstreamparser fuzzing pdf loading with jqf triggered an illegalargumentexception. java.lang.illegalargumentexception: illegal capacity: -1  at java.util.arraylist.<init>(arraylist.java:157)  at org.apache.pdfbox.pdfparser.pdfobjectstreamparser.parse(pdfobjectstreamparser.java:72)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectstream(cosparser.java:994)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:880)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:794)  at org.apache.pdfbox.pdfparser.cosparser.parsedictobjects(cosparser.java:754)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:185)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:220)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1160)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1057)     ... the code used for fuzzing is pddocument.load(inputstream)",
        "label": 11
    },
    {
        "text": "don't use temporty files by default for all pdf sizes pdfbox uses by default temporary files as work space (regardless of the pdf size). org.apache.pdfbox.io.randomacessfile is not buffered, so each read/write acess is a system call. there are functions like readlong, which call read 4 times to read 4 bytes. additionally, it adds the usual problems with tempory files. for normal sized pdfs files, the in-memory implementation randomaccessbuffer should not increase the memory usage too much, while providing faster io as all access operations are only memory copies. therefore, please consider switching the default to in-memory scratch buffers. users with very large files can still pass a temporary directory.",
        "label": 1
    },
    {
        "text": "setting the correct clipping path for shading while doing tests with the file eci_altona-test-suite-v2_technical_h.pdf (uncompressed) of pdfbox-1915 i noticed that by removing a \"w\" (modifies the clipping region) operator of a type 7 shading i got a lot more correct shadings (type 6 and lower). it looked like pdfbox had been using the clipping of the type 7 when drawing the type 6, which is just a rectangle above in that rendering. this resulted in a blank. by adding graphics.setclip(getgraphicsstate().getcurrentclippingpath()); in pagedrawer.shfill() just before the graphics.fill() i get several files to render correctly that i hadn't before. (setting null will probably do the same, didn't test that yet). the following pdfs are rendered correctly with the change: mcafee-shadingtype7.pdf eci_altona-test-suite-v2_technical_h.pdf crestron-p9.pdf (these three found in pdfbox-1915) pdfbox-1451.pdf (\"alfresco\") pdfbox-1940.pdf (\"chart\") pdfbox-1861-tracemonkey.pdf p.11 not solved by the change: pdfbox-2098-asytug.pdf p.6 (this one doesn't use shfill) pdfbox-1861-tracemonkey.pdf p.6 (not shading) pdfbox-1416.pdf (not shading) texample-rgb-triangle.pdf (john has an explanation about that one) wdyt? is there any reason not to set the clipping path in pagedrawer.shfill() ?",
        "label": 11
    },
    {
        "text": "build latest source code of pdfbox with jdk i would like to know how to build the latest release of pdfbox with jdk 1.4.2_16 version. current downloadable version is build using jdk 1.6 release.",
        "label": 7
    },
    {
        "text": "missing getcosobject  in pdcalrgb pdcalrgb.java should have these lines: @override public cosbase getcosobject() {return array;} like all the other classes that extend pdciebasedcolorspace",
        "label": 1
    },
    {
        "text": "pdf completely blow up the ram on amazon instances hi all the issue is pretty straightforward. i receive a lot of pdfs every day and render them. in most of the cases everything is ok, but pdfs which produces  warn org.apache.pdfbox.pdmodel.graphics.color.pdiccbased - icc profile is perceptual, ignoring, treating as display class working super long, and are super memory consumable.  it takes from 5 to 15 min on m5.large amazon instance. but attached pdf completely killed the instance. the java process is just killed by linux during processing with no exception in logs.  so could you please provide explanations what is going on with files with warn message above, and how can i improve the rendering.    here is my vm options  -dorg.apache.pdfbox.rendering.usepurejavacmykconversion=true -xmx3g -xms2g -dsun.java2d.cmm=sun.java2d.cmm.kcms.kcmsserviceprovider\" also don't hesitate to ask me about more pdf, i have tones of them   and also a question, does gpu have influence on rendering?",
        "label": 11
    },
    {
        "text": "add comment to pdf for our application we use some comment texts (prepended by a %) to mark content and perform text replacement. we currently use the appendrawcommands() method to add these, but since this method has been marked as deprecated since version 2.0. would it be possible to add some like a addcomment() method to pdpagecontentstream? the code would probably be something trivial like: public void addcomment(string comment) { output.write(\"%\" + comment + \"\\n\"); }",
        "label": 11
    },
    {
        "text": "parsing fails when xref stream object is byte later the attached files don't parse properly - their only problem is that the xref object starts 1 byte after the offset mentioned at the end of the file.",
        "label": 1
    },
    {
        "text": "inline image incorrectly parsed worked in 2.0.5. the cause is an unusual operator \"s\" after \"ei\".",
        "label": 11
    },
    {
        "text": "merging documents with nested fields duplicates child fields i have a pdf with a lot of acroforms, i do some manipulation on it which results in a new pdf. so i have pdf-1 (which is the original one )and pdf-2 (just a duplication of pdf-1), now i want to merge them. both pdfs have some acroforms for example: field_a, field_2... before i merge them i flatten pdf-1, because i only want to have acrofields from pdf-2. when i check then my new merged pdf i can see that there are no visible fields on on the pages from pdf-1 and there are fields on pages of fields of pdf-2. at the first look it seems ok, but when i inspect the fields i can see that the merger has renamed all the fields for pdf-2 e.g. field_a_dummy123, field_b_dummy232 ... it seems to me, that flattening does not remove the fields and thats why the pdfmerger from pdfbox will rename the fields for pdf-2 because acrofields need to be unique.another guess was that there is a bug in mergeacroform()   @test public void flattenandmerge() throws ioexception {     file testform = new file(classloader.getresource(\"./testform.pdf\").getfile());     byte[] testformasbyte = files.readallbytes(testform.topath());     byte[] testformasbyte2 = files.readallbytes(testform.topath());     pddocument pdf1 = pddocument.load(testformasbyte);     pdacroform acroform = pdf1.getdocumentcatalog().getacroform();     acroform.flatten();     path flattendedpdf = files.createtempfile(\"flatten\", \".pdf\");     pdf1.save(flattendedpdf.tofile());     pdfmergerutility merger = new pdfmergerutility();     merger.addsource(new bytearrayinputstream(files.readallbytes(flattendedpdf)));     merger.addsource(new bytearrayinputstream(testformasbyte2));     merger.setdestinationfilename(\"./build/flattenandmerge.pdf\");     merger.mergedocuments(memoryusagesetting.setupmainmemoryonly()); } here is my so article https://stackoverflow.com/questions/48271924/pdfbox-flatten-pdf-does-not-remove-acroform-elements?noredirect=1#comment83544858_48271924    ",
        "label": 8
    },
    {
        "text": "pdf gets messed up when updated with xfdf data we load a pdf file and update it with an xfdf file, the resulting pdf is all mixed up. ( you can open pdf_output.pdf to see how it looks) pddocument pdf = pddocument.load(\"ar104-1.10.0.pdf\"); pddocumentcatalog doccatalog = pdf.getdocumentcatalog(); pdacroform acroform = doccatalog.getacroform(); fdfdocument fdfdoc=fdfdocument.loadxfdf(new file(\"form_data.xfdf\")); acroform.importfdf(fdfdoc); pdf.save(\"pdf_output.pdf\"); system.out.println(\"pdf created successfully\"); please see attached 1. input pdf file 2. the xfdf file( created from the content submitted by the input file) and 3. the messed up output pdf file",
        "label": 8
    },
    {
        "text": "not able to read the custom metadata in trailer section when using below code does not able to retrieve custom metadata stored in trailer section of pdf pddocumentinformation documentinformation = document.getdocumentinformation(); set<string> custommetadatakeys = documentinformation.getmetadatakeys(); pdfbox 1.8.12 does not have this issues",
        "label": 11
    },
    {
        "text": "contents are unknown type org apache pdfbox cos cosdictionary java.io.ioexception: contents are unknown type:org.apache.pdfbox.cos.cosdictionary at org.apache.pdfbox.pdmodel.common.pdstream.createfromcos(pdstream.java:173) at org.apache.pdfbox.pdmodel.pdpage.getcontents(pdpage.java:577) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:286) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) on pdf file at: http://www.advantagewm.co.uk/images/delivering%20advantage%20progress%20report%2006_07_tcm9-13558.pdf",
        "label": 1
    },
    {
        "text": "signing pdf document changes documentid when i invoke the method #setdocumentid(...) on pddocument the document id changes completely. following the standard: every pdf document should have an id array in the file trailer. from the pdf 1.7 reference, \"table 3.13 entries in the file trailer dictionary\": \"id array (optional, but strongly recommended; pdf 1.1) an array of two byte-strings constituting a file identifier (see section 10.3, \u201cfile identifiers\u201d) for the file. ...\" in section \"10.3 file identifiers\" it says: \"file identifiers are defined by the optional id entry in a pdf file\u2019s trailer dictionary (see section 3.4.4, \u201cfile trailer\u201d; see also implementation note 162 in appendix h). the value of this entry is an array of two byte strings. the first byte string is a permanent identifier based on the contents of the file at the time it was originally created and does not change when the file is incrementally updated. the second byte string is a changing identifier based on the file\u2019s contents at the time it was last updated.\" see original issue: https://joinup.ec.europa.eu/asset/sd-dss/issue/signing-pdf-document-sd-dss-changes-id-string so if i understand well only the second element must change. please could you provide me with your understanding of the problem. thanks / bob",
        "label": 1
    },
    {
        "text": "allow resolution to be defined when calling imageioutil writeimage i would like to call the method private static boolean writeimage(bufferedimage image, string imageformat, object outputstream, int resolution) but it's private. the easiest solution in my mind would be just to change this method to a public method.",
        "label": 1
    },
    {
        "text": "keyboard shortcuts in pdfreader some intuitive keyboard shortcuts for pdfreader. scrolling in the page with up-down arrow keys navigating pages with pgup-pgdn. although this is now present via +,- keys printing with ctrl+p opening file with ctrl+o i've a fix for this which i'm attaching. all previous functionalities are preserved.",
        "label": 11
    },
    {
        "text": "java lang exceptionininitializererror in pdfbox the code below only works in the first time when .pdfbox.cache file does not exist. after the file is created the error below happens. if i delete the .pdfbox.cache file it start working again. so there is an issue with this file probably import java.io.ioexception; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.pdpage; import org.apache.pdfbox.pdmodel.pdpagecontentstream; import org.apache.pdfbox.pdmodel.font.pdfont; import org.apache.pdfbox.pdmodel.font.pdtype1font; public class testpdf {     private void createpdf() throws ioexception {         // create a document and add a page to it         pddocument document = new pddocument();         pdpage page = new pdpage();         document.addpage(page);         // create a new font object selecting one of the pdf base fonts         pdfont font = pdtype1font.helvetica_bold;         // start a new content stream which will \"hold\" the to be created content         pdpagecontentstream contentstream = new pdpagecontentstream(document, page);         // define a text content stream using the selected font, moving the cursor and drawing the text \"hello world\"         contentstream.begintext();         contentstream.setfont(font, 12);         contentstream.movetextpositionbyamount(100, 700);         contentstream.drawstring(\"hello world\");         contentstream.endtext();         // make sure that the content stream is closed:         contentstream.close();         // save the results and ensure that the document is properly closed:         document.save(\"hello world.pdf\");         document.close();     }     public static void main(string[] args) throws exception {         testpdf t = new testpdf();         t.createpdf();     } } and i don't know i'm getting: exception in thread \"main\" java.lang.exceptionininitializererror     at org.apache.pdfbox.pdmodel.font.fontmapperimpl.getprovider(fontmapperimpl.java:151)     at org.apache.pdfbox.pdmodel.font.fontmapperimpl.findfont(fontmapperimpl.java:415)     at org.apache.pdfbox.pdmodel.font.fontmapperimpl.findfontboxfont(fontmapperimpl.java:378)     at org.apache.pdfbox.pdmodel.font.fontmapperimpl.getfontboxfont(fontmapperimpl.java:352)     at org.apache.pdfbox.pdmodel.font.pdtype1font.<init>(pdtype1font.java:114)     at org.apache.pdfbox.pdmodel.font.pdtype1font.<clinit>(pdtype1font.java:76)     at br.jus.trt4.testpdf.createpdf(testpdf.java:21)     at br.jus.trt4.testpdf.main(testpdf.java:45) caused by: java.lang.arrayindexoutofboundsexception: 1     at org.apache.pdfbox.pdmodel.font.filesystemfontprovider.loaddiskcache(filesystemfontprovider.java:387)     at org.apache.pdfbox.pdmodel.font.filesystemfontprovider.<init>(filesystemfontprovider.java:218)     at org.apache.pdfbox.pdmodel.font.fontmapperimpl$defaultfontprovider.<clinit>(fontmapperimpl.java:132)     ... 8 more",
        "label": 11
    },
    {
        "text": "xref stream is saved as table when saving a pddocument, pdfbox seems to always write an xref table, even when the original file contains an xref stream. to reproduce, load a pdf file (like the one attached) with pddocument#load (or pddocument#loadnonseq, same result) and then save it with pddocument#save to another file. it seems to me that the problem is in coswriter#dowritexref. when cosdocument#isxrefstream is true, the xref entries should be wrapped in a stream, but they're written to output one by one. i think that part should look more like its counterpart in coswriter#dowritexrefinc. i made some changes to dowritexref accordingly and it seems to work for pdfs that have never been incrementally updated but leads to corrupt files when the pdf has been incrementally updated before",
        "label": 1
    },
    {
        "text": "extract text feature is not working for some part of pdf text extraction feature cannot extract text from attached pdf properly.   text inside of rectangle box (e.g value of lending specialist and others) is not getting extracted.",
        "label": 11
    },
    {
        "text": "arial truetype cid font rendering incorrect the rendering of the attached file shows entirely wrong glyphs.",
        "label": 6
    },
    {
        "text": "arrayindexoutofboundsexception in pdtype1font constructor java.lang.arrayindexoutofboundsexception: 0  at org.apache.pdfbox.pdmodel.font.pdtype1font.<init>(pdtype1font.java:168)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:62)",
        "label": 6
    },
    {
        "text": "ccittfaxg31ddecodeinputstream   extended codes have wrong length when dealing with large fax images there are extended make up codes. they are added to the tree as ... buildupmakeup(long_make_up, white_lookup_tree_root); buildupmakeup(long_make_up, black_lookup_tree_root); accept, the length is 0 based not starting at 1792. the quick hack is to create a new method so the length of the node is correct private static void buildupmakeuplong(short[] codes, nonleaflookuptreenode root) { for (int len = 0, c = codes.length; len < c; len++) { lookuptreenode leaf = new makeuptreenode((len + 28) * 64); addlookuptreenode(codes[len], root, leaf); } } as thus ... buildupmakeuplong(long_make_up, white_lookup_tree_root); buildupmakeuplong(long_make_up, black_lookup_tree_root);",
        "label": 1
    },
    {
        "text": "text extracted from a tex created pdf file comes in some form of hex encoding the text in this example is extracted essentially correctly, but presented in a hex-encoded form, probably interspersed with some non encoded characters as in the following example: x54x6f x69x6ex63x6fx72x70x6fx72x61x74x65 x74x68x65 x65x6cx61x73x74x69x63 x70x72x6fx70x65x72x74x69x65x73 x6fx66 x74x68x65 x6dx61x74x65x72x69x61x6cx2c x77x65 x6ex65x65x64 x74x6f x69x6ex74x72x6fx64x75x63x65 x74x68x65 x64x65x66x6fx72x2d x6dx61x74x69x6fx6e x74x65x6ex73x6fx72 f(x, t) = \u2202x\u2202x (x, t). a perl command like s/x([\\da-f] {2} )/chr(hex($1))/eg; will usually reveal a correct translation, although certain characters may be off, i had to add e.g. s/\u00ff/\u00df/g;",
        "label": 1
    },
    {
        "text": "wingdings font recognition   spacing issue windings characters issue ------------------------- if filed this question first in tika's wish list (tika-331) but ken krugler suggest it was a pdfbox issue. i have pdf files that include some characters in windings font. tika parser replaces them with some unicode characters that have nothing to do with the original, and, in some cases, replaces them with alphabetic characters. that is normal regarding these characters codes inside windings font, but when hands pictures are replaced by alphabetic characters like a, b, etc. that disturbs further lexical analysis. would it be possible to improve the parsing and remplace these characters with more accurate unicode characters ? (see http://www.alanwood.net/demos/wingdings.html for possible correspondences). attached files : test1.pdf is a pdf file including windings characters. some are commonly used by people, others less fequently. parsing_result1.txt is the text file produced by tika. test2.pdf is another example with the same word source file converted into pdf with another tool, and parsing_result2.txt is the tika parsing result. windings characters are translated into different unicode characters than with the previous version. spacing issue ------------- look at lines 10 and 11 in test2.pdf. look at lines 11 and 12 in tika parsing result (parsing_result2.txt) : \u00f0localisation des zones de livraison et de stockage \u00f0localisation des zones dangereuses there is no space between \u00f0 and localisation (\u00f0 is the translation of winding's \"rightwards white arrow\" by tika). if you copy and paste lines 10 and 11 in test2.pdf into a notepad window, you get : \u00f0 localisation des zones de livraison et de stockage \u00f0 localisation des zones dangereuses ...with a space between \u00f0 and localisation. in my case, the missing space after tika parsing result in considering \"\u00f0localisation\" as a single word in following analysis. regards",
        "label": 1
    },
    {
        "text": "cosdictionary in cosarray setdirect true  but dic written indirect cosdictionary dic = new cosdictionary(); dic.setdirect(true); dic.setitem... cosarray array = new cosarray(); array.setdirect(true); array.add(dic); dictionary in array is indirect.",
        "label": 1
    },
    {
        "text": "nullpointerexception in pdtype1font encode  with centered dot as reported by pedro l.m. in the user mailing list font used: pdtype1font.helvetica code: content.showtext(\"sol\u00b7licitud\"); exception in thread \"main\" java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.font.pdtype1font.encode(pdtype1font.java:357)  at org.apache.pdfbox.pdmodel.font.pdfont.encode(pdfont.java:285)  at org.apache.pdfbox.pdmodel.pdpagecontentstream.showtext(pdpagecontentstream.java:482) that character (b7) is listed as \"middot\" and \"periodcentered\" in glyphlist.txt, and \"middot\" is returned. but \"middot\" doesn't exist in the inverted list: {udieresis=220, tilde=152, greater=62, ograve=210, bracketright=93, eth=240, otilde=245, asciitilde=126, odieresis=246, agrave=192, ograve=242, parenright=41, brokenbar=166, bracketleft=91, idieresis=207, copyright=169, aring=229, egrave=200, aring=197, trademark=153, idieresis=239, d=68, e=69, f=70, g=71, a=65, b=66, c=67, l=76, m=77, n=78, o=79, florin=131, h=72, acircumflex=194, i=73, j=74, six=54, k=75, currency=164, u=85, t=84, w=87, adieresis=228, v=86, q=81, p=80, s=83, r=82, quotesingle=39, y=89, eth=208, x=88, braceright=125, z=90, f=102, g=103, d=100, ccedilla=199, e=101, b=98, c=99, a=97, exclamdown=161, thorn=254, n=110, perthousand=137, o=111, divide=247, acircumflex=226, l=108, m=109, j=106, odieresis=214, k=107, h=104, i=105, w=119, v=118, ugrave=217, u=117, igrave=236, t=116, s=115, r=114, yen=165, q=113, p=112, yacute=221, quotedblleft=147, z=122, y=121, bullet=127, threequarters=190, edieresis=235, x=120, atilde=227, percent=37, atilde=195, exclam=33, braceleft=123, numbersign=35, ntilde=241, endash=150, scaron=154, comma=44, threesuperior=179, grave=96, period=46, ae=198, ordfeminine=170, otilde=213, hyphen=45, logicalnot=172, ocircumflex=244, colon=58, acute=180, backslash=92, ordmasculine=186, four=52, question=63, scaron=138, cent=162, oacute=211, agrave=224, five=53, at=64, onehalf=189, equal=61, multiply=215, ucircumflex=219, oslash=248, asciicircum=94, icircumflex=206, seven=55, semicolon=59, registered=174, cedilla=184, ae=230, macron=175, paragraph=182, guilsinglright=155, nine=57, dagger=134, ellipsis=133, zero=48, oacute=243, circumflex=136, oe=156, uacute=250, guillemotright=187, ccedilla=231, sterling=163, plus=43, onequarter=188, germandbls=223, adieresis=196, questiondown=191, thorn=222, oslash=216, bar=124, uacute=218, onesuperior=185, guilsinglleft=139, space=32, zcaron=142, euro=128, yacute=253, quotedbl=34, quotesinglbase=130, eacute=233, oe=140, ugrave=249, dollar=36, dieresis=168, ydieresis=255, edieresis=203, slash=47, egrave=232, mu=181, twosuperior=178, ucircumflex=251, ampersand=38, degree=176, eacute=201, udieresis=252, igrave=204, zcaron=158, eight=56, quotedblright=148, daggerdbl=135, icircumflex=238, quoteright=146, three=51, quotedblbase=132, underscore=95, ecircumflex=202, ecircumflex=234, periodcentered=183, iacute=237, guillemotleft=171, emdash=151, one=49, iacute=205, aacute=193, less=60, ocircumflex=212, asterisk=42, parenleft=40, ntilde=209, section=167, two=50, ydieresis=159, plusminus=177, quoteleft=145, aacute=225} \"middot\" isn't mentioned anywhere in the pdf specification, but \"periodcentered\" is.",
        "label": 6
    },
    {
        "text": "pdf creation very slow compared to older 1.8.x versions, the new 2.0.x branch is awesomely slow. benchmarks using a multipage document with few images and many text-lines indiciate a performance penalty of about 1:20 compared with the old 1.8.x branch. profiling via visualvm indicates that the new font handling causes this performance drawback: truetypefont.nametogid() [31%] truetypefont.hasglyph() [23%] pdfont.getwidth() [16%] pdtype1font.encode() [9%] is there any workaround for this? the current setup only creates about 10 pdfs/second compared to over 200/second for the 1.8.x branch...",
        "label": 11
    },
    {
        "text": "pdftoimage does not work with certain fonts  for eg  pdf documents created by ms office and openoffice  i created a pdf document using open office which contains following fonts: 1. times new roman 2. tlwgtypewriter 3. courier new 4. comic ms none of these fonts get converted to image file. i have posted a question on mailing list, and was advised to create this issue. i have uploaded the input pdf and output jpg file to this issue",
        "label": 1
    },
    {
        "text": "a failure in building pdfbox from the source hi i can't build pdfbox source by maven. it gave me this failure and so the final jar file is not built in ./app/target/ . test set: org.apache.jempbox.xmp.xmpschematest ------------------------------------ tests run: 8, failures: 1, errors: 0, skipped: 0, time elapsed: 0.093 sec <<< failure! testdatelist(org.apache.jempbox.xmp.xmpschematest) time elapsed: 0.005 sec <<< failure! junit.framework.assertionfailederror: expected:<12600000> but was:<10860000> at junit.framework.assert.fail(assert.java:47) at junit.framework.assert.failnotequals(assert.java:283) at junit.framework.assert.assertequals(assert.java:64)",
        "label": 1
    },
    {
        "text": "can not extract exported values for pdradiobutton it seems that it is not possible to extract exported values for pdradiobutton or pdcheckbox. the command ((pdradiobutton) field).getexportvalues() always returns an empty list.",
        "label": 11
    },
    {
        "text": "overlay a pdf file which is pages ends up in outofmemoryerror we found an issue and solution to fix it, you guys might would be interested to have a look and see whether it is worth applying the attached patch to benefit more pdfbox users. and a bit more detail this error happens based on jetty running time memory setting, and pdf file size. application platform: unbuntu, jetty the test case to produce this issue: add simple overlay to all pages (in this case it is 750 pages). the processpages function eats up the jvm memories while applying the overlay to the file. sample code for using pdfbox overlay:  pddocument document = pddocument.load( pdf );  hashmap<integer, string> overlayguide = new hashmap();  for (int i = 0; i < pagenunber; i++)  {   // \"watermarked.pdf\" meat to be a file which contains watermarks on the page    overlayguide.put(i+1, \"watermarked.pdf\");  }  overlay overlay = new overlay();  overlay.setinputpdf( document );  overlay.setoverlayposition( overlay.position.foreground );  pddocument overlayresult = overlay.overlay( overlayguide ); error log: info   | jvm 1    | main    | 2017/07/03 13:06:23 | java.lang.outofmemoryerror: java heap space status | wrapper  | main    | 2017/07/03 13:06:23 | filter trigger matched.  restarting jvm. info   | jvm 1    | main    | 2017/07/03 13:06:23 |  at org.apache.pdfbox.io.scratchfile.<init>(scratchfile.java:128) info   | jvm 1    | main    | 2017/07/03 13:06:23 |  at org.apache.pdfbox.io.scratchfile.getmainmemoryonlyinstance(scratchfile.java:143) info   | jvm 1    | main    | 2017/07/03 13:06:23 |  at org.apache.pdfbox.cos.cosstream.<init>(cosstream.java:55) info   | jvm 1    | main    | 2017/07/03 13:06:23 |  at org.apache.pdfbox.multipdf.overlay.createstream(overlay.java:***) info   | jvm 1    | main    | 2017/07/03 13:06:23 |  at org.apache.pdfbox.multipdf.overlay.processpages(overlay.java:364) info   | jvm 1    | main    | 2017/07/03 13:06:23 |  at org.apache.pdfbox.multipdf.overlay.overlay(overlay.java:128) solution apply memoryusagesetting to overlay, allows overlay to use file as temp output. update for the overlay usage:  pddocument document = pddocument.load( pdf );  hashmap<integer, string> overlayguide = new hashmap();  for (int i = 0; i < pagenunber; i++)  {    overlayguide.put(i+1, \"watermarked.pdf\");  }  overlay overlay = new overlay();  overlay.setinputpdf( document );  overlay.setoverlayposition( overlay.position.foreground );  // set overlay to use temp file as out rather than memory  memoryusagesetting memoryusagesetting = memoryusagesetting.setuptempfileonly(  );  memoryusagesetting.settempdir( new file ( \"sometempworkingdir\" ) );  overlay.setmemoryusagesetting( memoryusagesetting );  pddocument overlayresult = overlay.overlay( overlayguide );",
        "label": 11
    },
    {
        "text": "converttoimage error and part of the pdf is not rendered and on source.pdf java.lang.classcastexception: org.apache.pdfbox.cos.cosarray cannot be cast to org.apache.pdfbox.cos.cosstream at org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject.getmask(pdimagexobject.java:255) at org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject.getimage(pdimagexobject.java:154) at org.apache.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:84) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:532) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:260) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:227) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:209) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:144) at org.apache.pdfbox.util.renderutil.renderpage(renderutil.java:225) at org.apache.pdfbox.util.renderutil.converttoimage(renderutil.java:190) at main.java.output2jpg.pdf2img(output2jpg.java:270) at main.java.output2jpg.main(output2jpg.java:116) feb 22, 2014 11:02:01 am org.apache.pdfbox.util.operator.pagedrawer.invoke process",
        "label": 6
    },
    {
        "text": "document the dependencies of pdfbox please document the jar dependencies of pdfbox by differencing between compile time, test and runtime dependencies. e.g. http://commons.apache.org/beanutils/dependencies.html",
        "label": 8
    },
    {
        "text": "pdimagexobject createfromfile should relies on header bytes pdimagexobject.createfromfile currently relies on file extension to select the correct factory. often, file extension is not set or not correct. it should be better to use the first bytes. i did something similar here if it can helps: https://github.com/sismics/docs/blob/master/docs-core/src/main/java/com/sismics/util/mime/mimetypeutil.java#l26",
        "label": 11
    },
    {
        "text": "tifffaxdecoder5 when using pdfimagewriter i'm getting this when i try to pdfimagewriter.writeimage() on a pdf with one page (see attached page_83.pdf): caused by: java.lang.error: tifffaxdecoder5 at org.apache.pdfbox.filter.tifffaxdecoder.decodet6(tifffaxdecoder.java:1005) at org.apache.pdfbox.filter.ccittfaxdecodefilter.decode(ccittfaxdecodefilter.java:101) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:279) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:221) at org.apache.pdfbox.cos.cosstream.getunfilteredstream(cosstream.java:156) at org.apache.pdfbox.pdmodel.graphics.xobject.pdccitt.getrgbimage(pdccitt.java:153) at org.apache.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:78) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:551) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:274) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:251) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:225) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:107) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.util.pdfimagewriter.writeimage(pdfimagewriter.java:135) at org.apache.pdfbox.util.pdfimagewriter.writeimage(pdfimagewriter.java:105) if you look on the pdf file i'm using (see attached page_83.pdf) you'll notice its completely blank, but this is ok - page was obtained from source pdf file with 84 pages where the last one is blank (see attached 34315.pdf). source pdf has been splitted on pages (without any errors) via splitter like so: fileinputstream fis = new fileinputstream(file); pdfparser parser = new pdfparser(fis); parser.parse(); cosdocument cosdoc = parser.getdocument(); pddocument pddoc = new pddocument(cosdoc); splitter splitter = new splitter(); list<pddocument> pages = splitter.split(pddoc); for (int i = 0; i < pages.size(); i++){ pddocument pagedoc = pages.get; string filenamenew = \"page_\" + i + \".pdf\"; writedocument(pagedoc, new file(destdir, filenamenew).getpath()); pagedoc.close(); } fis.close(); cosdoc.close(); pddoc.close();",
        "label": 11
    },
    {
        "text": "flatedecoder in stream mode the zlib (the unlying spec for flate compression) does not require an z_stream_end to terminate the compression. the java inflateinputstream is really assuming that you are reading a zip or gzip file which will always have a z_stream_end (z_stream_end is a constant in the zlib library which java calls natively) . so the following chunk decodes fine using the jcraft zlib decoder, but fails using the inflateinputstream. 3 0 obj << /type /xobject /subtype /form /formtype 1 /resources << /font 4 0 r /procset [/pdf /imagec /text]>> /bbox [0 0 595 842] /matrix [1 0 0 1 0 0] /filter /flatedecode /length 5 >> stream h<89>c@ endstream endobj the blob is 72, -119, 3, 0, 13 decimal. it decodes to an empty string. the fix is to use inflater and check to see if it has consumed all of the input buffer and make sure it has nothing to write into the output buffer. protected bytearrayoutputstream decompress(inputstream in) throws ioexception, dataformatexception { bytearrayoutputstream out = new bytearrayoutputstream(); byte buf[] = new byte[1000]; inflater inflater = new inflater(); int read = in.read(buf); if(read == 0) { return out; } inflater.setinput(buf,0,read); byte res[] = new byte[1000]; while(true) { int resread = inflater.inflate(res); if(resread !=0) { out.write(res,0,resread); continue; } if(inflater.finished() || inflater.needsdictionary() || in.available()==0) { out.close(); return out; } read = in.read(buf); inflater.setinput(buf,0,read); } } we then need to change flatefilter.decode(inputstream compresseddata, outputstream result, cosdictionary options, int filterindex ) to look like ... if (compresseddata.available() > 0) { try { baos = decompress(compresseddata); } if (predictor==-1 || predictor == 1 ) { result.write(baos.tobytearray()); } else { use the bytearrayoutput stream as before ... }",
        "label": 1
    },
    {
        "text": "faulty documentation of pdstream getinputstreamasstring  in the documentation of the method getinputstreamasstring() in pdstream it says: \"uses the default system encoding.\" although in the code iso-8859-1 is used correctly #pdfbox-945",
        "label": 8
    },
    {
        "text": "some pdf file for chinese can't extracted by correct encode i used the pdftextstripper to extracted the contents of pdf which include chinese code ,some file can extracted correct ,but some is extracted with wrong code.",
        "label": 1
    },
    {
        "text": "can't load any text when font is null open 19472133.pdf pdfboxreader without \"-nonseq\" parameter. turn to page 3, many nullpointerexceptions are displayed, and pdfviewer can't show any text. java.lang.nullpointerexception at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:366) at org.apache.pdfbox.util.operator.showtextglyph.process(showtextglyph.java:62) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:556) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:270) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:246) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:217) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:119) at org.apache.pdfbox.pdfviewer.pdfpagepanel.paint(pdfpagepanel.java:98) java.util.emptystackexception at java.util.stack.peek(stack.java:85) at org.apache.pdfbox.util.pdfstreamengine.getfonts(pdfstreamengine.java:601) at org.apache.pdfbox.util.operator.settextfont.process(settextfont.java:54) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:556) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:270) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:246) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:217) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:119) at org.apache.pdfbox.pdfviewer.pdfpagepanel.paint(pdfpagepanel.java:98) at javax.swing.jcomponent.paintchildren(jcomponent.java:862) open document with \"-nonseq\" parameter exception in thread \"main\" java.io.ioexception: error reading stream using length value. expected='endstream' actual='' at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parsecosstream(nonsequentialpdfparser.java:1327) at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parseobjectdynamically(nonsequentialpdfparser.java:1032) at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parseobjectdynamically(nonsequentialpdfparser.java:955) at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parsedictobjects(nonsequentialpdfparser.java:929) at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.initialparse(nonsequentialpdfparser.java:337) at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parse(nonsequentialpdfparser.java:574) at org.apache.pdfbox.pdmodel.pddocument.loadnonseq(pddocument.java:1124) at org.apache.pdfbox.pdfreader.parsedocument(pdfreader.java:378) at org.apache.pdfbox.pdfreader.openpdffile(pdfreader.java:319) at org.apache.pdfbox.pdfreader.main(pdfreader.java:305)",
        "label": 12
    },
    {
        "text": "umlauts font size calculation problem the size of umlauts is not calculated correctly",
        "label": 0
    },
    {
        "text": "recent regression in pdftextstripper  text getting garbled text extraction using printtextlocations is getting garbled characters in the attached snippet. for this file it is getting one string of \"2o(er4env vqeheurosriaurseirueeass ss/ct:7:rh adaliaargynse csr eadc+cit6e l1ipc te+2en 6d9c1)9e 91 2933\" this test case is about as small as i could make it and still show the problem; when i reduced the file to just one line of text, then the text came though correctly. this problem shows up in rc2 and the latest development build. i believe it was ok in the development build from nov 4",
        "label": 11
    },
    {
        "text": "open a truetype font pdf  content become square box dear all, i tried to open a pdf file generated by crystal report xi 3.1. the font is using courier new. all the content becomes a square. what can i do ? regards, gabriel.",
        "label": 1
    },
    {
        "text": "importxfdf results in pdf with larger text fields [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1327309 originally submitted by roso on 2005-10-14 22:02. using pdfbox-0.7.2 importxfdf (and importfdf) results in pdf with larger text if focus on field text size is back to normal exit the field and the font becomes large again, some fields display same string overlayed",
        "label": 8
    },
    {
        "text": " illegalargumentexception root cannot be null  in for file that was parsed in x the file is corrupt...can't be opened in adobe reader. however, text and an attachment were extracted with 1.8.x. this could be a one-off and not worth the effort to fix.",
        "label": 1
    },
    {
        "text": "fonts should not be cached by pdfstreamengine org.apache.pdfbox.util.pdfstreamengine fonts are cached using variable 'private map documentfontcache = new hashmap();' which is used in method 'processsubstream()' and the call 'sr.fonts = resources.getfonts(documentfontcache); the problem is that pdf documents can store a limited range of 'firstchar' and 'lastchar' (maybe just a space char), and then expand that range at a later point within the same page. when the font is cached, those updates are ignored. in particular, test 'http://www.encana.com/investor/financial/shareholder/pdfs/info-circular-french.pdf, pg 1'. using font caching, the widths of the characters in the upper right corner of the page are reported as zero, and the text extraction and text merging is compromised. without font caching, the widths are correct. there are other examples that cause the same problem. to fix the problem change the call in method 'processsubstream()' to: sr.fonts = resources.getfonts(null); there was some effort put into font caching. unfortunately, it should not be used on unknown documents.",
        "label": 1
    },
    {
        "text": "potential resource leak in ttfparser's use of rafdatastream ttfparser offers a method that parses a file. it looks like the randomaccessfile is never closed if there is an exception \u2013 i initially discovered this via running tika batch on common crawl data, and code review confirms this. there should probably be a try/finally->close rafdatastream in the parse#file method.",
        "label": 11
    },
    {
        "text": "rendering to image has misplaced characters slashes in png generation are mis-placed. they do not show up in the wrong position on the original pdf. the are offset by many pixels to the right in the png that is generated. i simply exported with this command: java -jar pdfbox-app-1.8.2.jar pdftoimage -imagetype png -resolution 300 -color bilevel pdfbox_test2.pdf unfortunately i can't use pdfbox to export pdf to image if it doesn't place the characters in the right place.",
        "label": 1
    },
    {
        "text": "error while converting pdf version to text i am getting error when trying to extract text from pdf 1.3 using command line extracttext. severe: error: could not parse predefined cmap file for 'adobe-identity-ucs' i can extract from pdf 1.5 is this issue fixed in pdfbox ? which version?",
        "label": 1
    },
    {
        "text": "cli decrypt broken  only allows argument this is about the decrypt.java cli wrapper fails when using certificates. plain and simple. the following file just simply doesn't allow for more than one cli argument: tools/src/main/java/org/apache/pdfbox/tools/decrypt.java when, i supply the argument keystore and password, the usage documentation is thrown. when, i hack the decrypt.java cli wrapper in tools, and allow the password and keystore arguments to both be present, the decrypt works. the command i am trying to run: java -jar pdfbox-app-2.0.3.jar decrypt -password password -keystore keystore.p12 encrypted.pdf decrypted.pdf pdfbox cli docs for decrypt where clearly password and keystore need to be used together: http://pdfbox.apache.org/2.0/commandline.html#decrypt in closing, instead of fighting my case that the cli decrypt method is not working, i am choosing to keep it simple by stating fact that only one argument is allowed otherwise the usage docs are thrown. thank you kindly. i have been able to rebuild the jar files with my own fix by using maven to re-jar. i absolutely sure i am generating proper certs and p12 keystore files and again i am successfully encrypting/decrypting with my update pdfbox.jar file",
        "label": 8
    },
    {
        "text": "support os with no fonts when /usr/share/fonts is not available: jan 16, 2015 11:32:57 am org.apache.pdfbox.pdmodel.font.externalfonts gettype1fallbackfont severe: no fallback font for 'helvetica-bold', dumping debug information: jan 16, 2015 11:32:57 am org.apache.pdfbox.pdmodel.font.externalfonts gettype1fallbackfont severe: exception in thread \"main\" java.lang.illegalstateexception: no fonts available on the system for helvetica-bold at org.apache.pdfbox.pdmodel.font.externalfonts.gettype1fallbackfont(externalfonts.java:270) see the discussion in pdfbox-2263.",
        "label": 6
    },
    {
        "text": "wrappedioexception version pdf net compile i am trying to extract text from newer versions of pdf files using c# code. with version 0.7.3 i can successfully extract pdf version 1.4 but it will not work on 1.5. i downloaded 0.8.0 incubating and ran extracttext. it gives warnings on the 1.4 version but still works. with the 1.5 pdf version it gives exception in thread \"main\" org.apache.pdfbox.exceptions.wrappedioexception at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:237) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:861) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:825) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:750) caused by: java.util.nosuchelementexception at java.util.arraylist$itr.next(arraylist.java:757) at org.apache.pdfbox.pdfparser.pdfxrefstreamparser.parse(pdfxrefstreamparser.java:115) at org.apache.pdfbox..cos.cosdocument.parsexrefstreams(cosdocument.java:538) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:205) ... 4 more am i missing something in my setup or do i need to download/create a new net dll file. i have not found explicit instructions on using ikvm to create the net library so i am a bit leery of attempting that at the moment.",
        "label": 1
    },
    {
        "text": "illegalstateexception  not a cidfont exception in thread \"main\" java.lang.illegalstateexception: not a cidfont  at org.apache.fontbox.cff.cffcharset.getgidforcid(cffcharset.java:134)  at org.apache.fontbox.cff.cffcidfont.gettype2charstring(cffcidfont.java:227)  at org.apache.pdfbox.pdmodel.font.pdcidfonttype0.gettype2charstring(pdcidfonttype0.java:224)  at org.apache.pdfbox.rendering.font.cidtype0glyph2d.getpathforcharactercode(cidtype0glyph2d.java:63)",
        "label": 6
    },
    {
        "text": "build configuration in jenkins the maven_opts are currently configured like this (https://builds.apache.org/job/pdfbox-trunk/configure) -xmx1g -xx:maxpermsize=300m the issue is that starting with jdk 8 maxpermsize does not exist anymore.. see also the messages in the build: currently the jenkins build of the trunk is currently configured to use java hotspot(tm) 64-bit server vm warning: ignoring option maxpermsize=300m; support was removed in 8.0",
        "label": 11
    },
    {
        "text": "pdpage converttoimage throwing an uncaught ioexception internally after successfully loading a pdf document and extracting pages from it using the following snippet: doc = pddocument.load(f); pages = doc.getdocumentcatalog().getallpages(); i try and convert the front page to an image as follows: pdpage page = (pdpage) pages.get(0); bufferedimage image = page.converttoimage(); the page.converttoimage() causes a runtimeexception to be thrown due to an uncaught internal ioexception. otherwise, the extracting of text/images and all other functions i tried work correctly on this document. here is the stack trace: exception in thread \"main\" java.lang.runtimeexception: java.io.ioexception: the handle is invalid at org.apache.pdfbox.pdfparser.pdfstreamparser$1.trynext(pdfstreamparser.java:149) at org.apache.pdfbox.pdfparser.pdfstreamparser$1.hasnext(pdfstreamparser.java:158) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:241) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:208) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:112) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:722) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:693) at pdfboxtestant.main.getfrontpageimage(main.java:44) at pdfboxtestant.main.main(main.java:25) caused by: java.io.ioexception: the handle is invalid at java.io.randomaccessfile.seek(native method) at org.apache.pdfbox.io.randomaccessfile.seek(randomaccessfile.java:59) at org.apache.pdfbox.io.randomaccessfileinputstream.read(randomaccessfileinputstream.java:96) at java.io.bufferedinputstream.read1(bufferedinputstream.java:256) at java.io.bufferedinputstream.read(bufferedinputstream.java:317) at java.io.bufferedinputstream.fill(bufferedinputstream.java:218) at java.io.bufferedinputstream.read(bufferedinputstream.java:237) at java.io.filterinputstream.read(filterinputstream.java:66) at java.io.pushbackinputstream.read(pushbackinputstream.java:122) at org.apache.pdfbox.io.pushbackinputstream.read(pushbackinputstream.java:84) at org.apache.pdfbox.pdfparser.baseparser.skipspaces(baseparser.java:1296) at org.apache.pdfbox.pdfparser.pdfstreamparser.parsenexttoken(pdfstreamparser.java:197) at org.apache.pdfbox.pdfparser.pdfstreamparser.access$000(pdfstreamparser.java:47) at org.apache.pdfbox.pdfparser.pdfstreamparser$1.trynext(pdfstreamparser.java:146) ... 8 more",
        "label": 1
    },
    {
        "text": "testfilters is non deterministic this is a follow-up of pdfbox-1977, which was created by john. ==== testfilters uses random().nextlong() to generate a seed for random data, which means that it is non-determinate. depending on the seed value, the test may fail or succeed. ==== so what we need is: a set of deterministic tests a set of non-deterministic tests to see why, see the discussion in pdfbox-1977.",
        "label": 11
    },
    {
        "text": "merging pdfs with interactive forms results in a corrupt pdf merging two pdfs with interactive form elements results in a corrupt pdf which can't be opened with acrobat reader. the usecase works fine with pdfbox 1.7.1 (java -jar pdfbox-app-1.7.1.jar pdfmerger interactive_filled.pdf interactiveform_enabled.pdf out.pdf). the usecase results in a corrupt pdf with pdfbox 1.8.0 (java -jar pdfbox-app-1.8.0.jar pdfmerger interactive_filled.pdf interactiveform_enabled.pdf out.pdf)",
        "label": 10
    },
    {
        "text": "example addvalidationinformation fails with scratchfile error the example signature.validation.addvalidationinformation fails with exception \"scratch file already closed\" when we try to add the info to our certified file (enclosed). the error occurs in addvalidationinformation.writedatatostream(), line 421:     outputstream os = stream.createoutputstream(filters); reading discussion in pdfbox-3984, we tried to use a new cosstream() instead of scratch file, ie changed line 417 to      cosstream stream = new cosstream(); //document.getdocument().createcosstream(); then the example gets much further, but fails with same error in the final document.saveincremental() call in addvalidationinformation.dovalidation  (line 141).   the same error occurs if we try the file multisignaturebase.pdf from the pdfbox-3984 issue ([^multi-signature_base.pdf)]  so it doesn't seem to be a problem with our specific file. our calling code: string rootfolder = \"/home/papasmurf/documents/pdf-examples/\"; file infile = new file(rootfolder + \"ebox_certified_eutl.pdf\"); file outfile = new file(rootfolder + \"ebox_validationinfo_test.pdf\"); addvalidationinformation validator = new addvalidationinformation(); validator.validatesignature(infile, outfile);   eclipse output running the example: get certificate from: http://q.ica.cz/2qca16_rsa.cer get certificate from: http://r.ica.cz/rca15_rsa.cer get certificate from: http://r.ica.cz/rca15_rsa.cer nonce: 04120410dd140ecde05357a0a2f6e5001edd9a7d exception in thread \"main\" java.io.ioexception: java.io.ioexception: scratch file already closed at org.apache.pdfbox.examples.signature.validation.addvalidationinformation.fetchcrldata(addvalidationinformation.java:330) at org.apache.pdfbox.examples.signature.validation.addvalidationinformation.addrevocationdatarecursive(addvalidationinformation.java:248) at org.apache.pdfbox.examples.signature.validation.addvalidationinformation.addrevocationdata(addvalidationinformation.java:205) at org.apache.pdfbox.examples.signature.validation.addvalidationinformation.dovalidation(addvalidationinformation.java:136) at org.apache.pdfbox.examples.signature.validation.addvalidationinformation.validatesignature(addvalidationinformation.java:88) at com.tellustalk.javaworker.dss.signpdf.main(signpdf.java:233) caused by: java.io.ioexception: scratch file already closed at org.apache.pdfbox.io.scratchfile.checkclosed(scratchfile.java:390) at org.apache.pdfbox.io.scratchfilebuffer.<init>(scratchfilebuffer.java:78) at org.apache.pdfbox.io.scratchfile.createbuffer(scratchfile.java:403) at org.apache.pdfbox.cos.cosstream.createoutputstream(cosstream.java:221) at org.apache.pdfbox.examples.signature.validation.addvalidationinformation.writedatatostream(addvalidationinformation.java:421) at org.apache.pdfbox.examples.signature.validation.addvalidationinformation.addcrlrevocationinfo(addvalidationinformation.java:377) at org.apache.pdfbox.examples.signature.validation.addvalidationinformation.fetchcrldata(addvalidationinformation.java:315) ... 5 more   grateful for any insights,     /rasmus ekman  ",
        "label": 11
    },
    {
        "text": "textposition getx returen in case of rotation  some pdf file i try to exact text had a rotation==360 . i can not understant the difference between rotation ==0 and rotation ==360, but i find the textposition getx() in this case return 0, and then many word return worng position. please text this situation.",
        "label": 1
    },
    {
        "text": "trailer syntax error  id is different in the first and the last trailer   for pdf with incremental updates as reported at the users mailing list: hello guys, i have the following problem using apache.pdfbox when validating a valid pdf/a-1 file, which is being signed twice: 1. the online validator confirms that the file is valid (https://www.pdf-tools.com/pdf/validate-pdfa-online.aspx) 2. but when i validate it using the following code: preflightparser parser = new preflightparser(bytedatasource); parser.parse(); preflightdocument document = parser.getpreflightdocument(); document.validate(); result = document.getresult(); 3. the file is linearized 4. i get that the file is invalid and the error description reads: trailer syntax error, id is different in the first and the last trailer</i> according to issues pdfbox-3256 and pdfbox-2502 this should be fixed? could anyone give me a tip how to go around this problem or would that be a bug? the pdf file is attached. analysis: the original pdf is linearized with a subsequent incremental update. according to iso 32000-1 f1 incremental update shall still be permitted, but the resulting pdf is no longer linearized and subsequently shall be treated as ordinary pdf. linearizing it again may require reprocessing the entire file; see g.7, \"accessing an updated file\" for details. as the file shall no longer be treated as linearized the provision about matching id's as outlined in pdfbox-2502 no longer applies.",
        "label": 11
    },
    {
        "text": "java util missingresourceexception  glyphlist not found  org apache pdfbox resources glyphlist txt i get this error at the following line when ran from a tomcat application. pdfont fontplain = pdtype1font.helvetica version: 1.8.10 please help.",
        "label": 1
    },
    {
        "text": "acroform appearance generator on a pdf with an acroform, when setting the pdvariabletext value, there's a problem with the encoding. the value is stored on the pdf as utf-8 instead of iso8859-1. another problem is when setting the value again the fontsize set is lost, and if the textbox is multiline it also doesn't work.",
        "label": 8
    },
    {
        "text": "be resilient to pdfs with missing version info proposed addition to 1.8.2 -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/pdfparser.java -> parseheader() to default the pdf version to 1.4 in situations where it is missing (yes, there really are docs out there like this!). this prevents an exception caused from a negative substring offset calculation: \"string index out of range: -3\" i have floated the question on the users@pdfbox.apache.org mailing list (10th october 2013) and it was suggested i default the pdf version to 1.4 in this scenario. i have tested it locally and it works (apparently pdfbox doesn't take the version number into account anyway). now over to you guys to decide if this is a good idea or not in the wider scope. should you give the green light, i attach: 1) a sample file which causes the exception 2) a patch file 3) patching instructions. my goal is text extraction, even on broken files (if possible).",
        "label": 1
    },
    {
        "text": "error creating jpeg image with smask jpegfactory.createfromimage() has problems with images with transparency (alpha data).",
        "label": 11
    },
    {
        "text": "indexoutofbound whle creating a type1c font as pdfbox-708 was already closed and the this seems to be an other issue, i created a new issue using the description from pdfbox-708 i encountered this issue while trying to add a line of text to a page that uses an embedded myriad pro font. i got the same error and switched to trunk, where i got a different error, still on the font parsing: caused by: java.lang.indexoutofboundsexception: index: 2,size: 2 at java.util.sublist.rangecheck(abstractlist.java:746) at java.util.sublist.get(abstractlist.java:619) at org.apache.fontbox.cff.charstringconverter.drawcurve(charstringconverter.java:415) at org.apache.fontbox.cff.charstringconverter.handletype2command(charstringconverter.java:277) at org.apache.fontbox.cff.charstringconverter.handlecommand(charstringconverter.java:81) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:53) at org.apache.fontbox.cff.charstringconverter.handletype2command(charstringconverter.java:307) at org.apache.fontbox.cff.charstringconverter.handlecommand(charstringconverter.java:81) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:53) at org.apache.fontbox.cff.charstringconverter.handletype2command(charstringconverter.java:307) at org.apache.fontbox.cff.charstringconverter.handlecommand(charstringconverter.java:81) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:53) at org.apache.fontbox.cff.charstringconverter.convert(charstringconverter.java:64) at org.apache.fontbox.cff.cfffont$mapping.totype1sequence(cfffont.java:374) at org.apache.fontbox.cff.afmformatter.renderfont(afmformatter.java:126) at org.apache.fontbox.cff.afmformatter.printfontmetrics(afmformatter.java:64) at org.apache.fontbox.cff.afmformatter.printfont(afmformatter.java:57) at org.apache.fontbox.cff.afmformatter.format(afmformatter.java:50) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.preparefontmetric(pdtype1cfont.java:502) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:381) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:104) at org.apache.pdfbox.pdmodel.font.pdtype1font.<init>(pdtype1font.java:162) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:108) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:81) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:131) at org.apache.pdfbox.pdmodel.edit.pdpagecontentstream.<init>(pdpagecontentstream.java:189) i can't attach the pdf for copyright reasons, but i narrowed down the problem to an embedded and subset version of myriadpro. sample output of pdffonts: name type emb sub uni object id ------------------------------------ ----------------- \u2014 --- \u2014 --------- llubba+myriadpro-lightsemiext type 1c yes yes no 2405 0 llubba+myriadpro-lightsemiext type 1c yes yes yes 2406 0",
        "label": 1
    },
    {
        "text": "illegalargumentexception not catched or declared while creating icc profile in class org.apache.pdfbox.pdmodel.graphics.color.pdiccbased.createcolorspace() the call to icc_profile.getinstance( profile ) might return an illegalargumentexception. this exception is neither documented nor catched in this method (runtimeexception). since method documentation states that an ioexception is thrown if color space could not be created i would suggest catching illegalargumentexception and wrap it in an ioexception. i will add a patch to this issue.",
        "label": 1
    },
    {
        "text": "line is incorrectly dashed the line in the attached page should be dashed differently than it is in the rendering.",
        "label": 1
    },
    {
        "text": "blank page rendered with wrong xref start objid from kevin m. on the users mailing list: a confidential file doesn't display its image because the objid is unaccessible, due to a malformed xref table: xref 1 7 0000000000 65535 f 0000000009 00000 n 0000358745 00000 n 0000358842 00000 n 0000359029 00000 n 0000359087 00000 n 0000359138 00000 n trailer  the first number (1) means the number of the first object. so it would be 1. the second number(7) is the size of the table. the number 1 is incorrect, it should be 0, because \"0000000000 65535 f\" is the dummy object 0. from the pdf spec: the free entries in the cross-reference table form a linked list, with each free entry containing the object number of the next. the first entry in the table (object number 0) is always free and has a generation number of 65,535; it is the head of the linked list of free objects the error messages are: can't find the object 7 0 (origin offset 359138) missing xobject: im1 (im1 is the object at 7 0, and is the missing image)",
        "label": 1
    },
    {
        "text": "null pointer exception in pdftoimage java -jar pdfbox-app-1.8.2.jar pdftoimage e:\\specifications\\png-1.0.pdf (http://3-t.com/pub/png/spec/1.0/png-1.0.pdf) causes multiple instances of npe when processing page 13. probably associated with superscript text because the line is then missing from the output image. problems affects both jpg and png output and with nonseq. org.apache.pdfbox.util.pdfstreamengine processoperator warning: java.lang.nullpointerexception java.lang.nullpointerexception at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:210) at org.apache.pdfbox.pdmodel.font.type3streamparser.createimage(type3streamparser.java:59) at org.apache.pdfbox.pdmodel.font.pdtype3font.createimageifnecessary(pdtype3font.java:80) at org.apache.pdfbox.pdmodel.font.pdtype3font.drawstring(pdtype3font.java:102) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:235) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:496) at org.apache.pdfbox.util.operator.showtext.process(showtext.java:45) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:554) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:125) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:781) at org.apache.pdfbox.util.pdfimagewriter.writeimage(pdfimagewriter.java:133) at org.apache.pdfbox.pdftoimage.main(pdftoimage.java:244) at org.apache.pdfbox.pdfbox.main(pdfbox.java:96)",
        "label": 1
    },
    {
        "text": "team list should be filled out or deleted   it confuses users now http://pdfbox.apache.org/team-list.html says that the project has no developers nor committers. this is very not true and should be fixed.",
        "label": 1
    },
    {
        "text": "pdfaextensionhelper populatepdfapropertytype exception in thread \"main\" java.lang.nullpointerexception     at org.apache.xmpbox.xml.pdfaextensionhelper.populatepdfapropertytype(pdfaextensionhelper.java:180)     at org.apache.xmpbox.xml.pdfaextensionhelper.populatepdfaschematype(pdfaextensionhelper.java:159)     at org.apache.xmpbox.xml.pdfaextensionhelper.populateschemamapping(pdfaextensionhelper.java:116)     at org.apache.xmpbox.xml.domxmpparser.parse(domxmpparser.java:194)     at org.apache.pdfbox.preflight.process.metadatavalidationprocess.validate(metadatavalidationprocess.java:69)     at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:84)     at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:122)     at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:163)     at org.apache.pdfbox.preflight.validator_a1b.runsimple(validator_a1b.java:174)     at org.apache.pdfbox.preflight.validator_a1b.main(validator_a1b.java:135) ",
        "label": 11
    },
    {
        "text": "java io ioexception  for input string    i had a pdf of 6 pages, size of 2,40 gb. i can open the pdf with acrobatreader 9, but i cannot open with foxitreader. (pdf corrupted) the code i am using to count pages is the following: //create a temporary file needed by the pdfbox when dealing with pdfs really really large temp = new file(\"e:/temp.tmp\"); //using random access file needed for pdf really large rand = new randomaccessfile(temp,\"rw\"); doc = pddocument.load(file,rand); nr = doc.getnumberofpages(); i receive the following exception: java.io.ioexception: for input string: \"2152829241\" at org.apache.pdfbox.pdfparser.pdfparser.parsexreftable(pdfparser.java:730) at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:452) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:184) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1069) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1022) at pdfboxexample.gethugenroffiles(pdfboxexample.java:36) at pdfboxexample.main(pdfboxexample.java:257) after searching in your code , i found the cause of the exception is numberformatexception , due to 2152829241 => integer.parseint(2152829241) crashes , because 2152829241 > integer.max_value i have made several changes to the source code : xreftrailerresolver cosdocument pdfparser coswriter baseparser xreftrailerresolver changing from int to long => code worked is it possible for you to change the code accordingly or i can send you the classes.",
        "label": 1
    },
    {
        "text": "error expected floating point number actual '18 5' able to repeat with command line.  unfortunately, the only files that repeat this are from a customer, and contain sensitive information.  the file opens without error in acrobat reader and mac preview.  the desired result is that any corrupt portions of the pdf are skipped, so that we can use what text is extractable. unfortunately, i still get an error when using the -force option. we get the following stack trace: c02v390uhtd6:downloads pjohnson$ java -jar pdfbox-app-2.0.12.jar extracttext 16cccd9af5032a303774f7b87fb95076.pdf nov 02, 2018 10:04:54 am org.apache.pdfbox.pdfparser.baseparser parsecosarray warning: corrupt object reference at offset 19727 exception in thread \"main\" java.io.ioexception: error expected floating point number actual='18-5' at org.apache.pdfbox.cos.cosfloat.<init>(cosfloat.java:78) at org.apache.pdfbox.cos.cosnumber.get(cosnumber.java:110) at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:947) at org.apache.pdfbox.pdfparser.baseparser.parsecosarray(baseparser.java:631) at org.apache.pdfbox.pdfparser.pdfstreamparser.parsenexttoken(pdfstreamparser.java:174) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:510) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:477) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150) at org.apache.pdfbox.text.legacypdfstreamengine.processpage(legacypdfstreamengine.java:139) at org.apache.pdfbox.text.pdftextstripper.processpage(pdftextstripper.java:391) at org.apache.pdfbox.text.pdftextstripper.processpages(pdftextstripper.java:319) at org.apache.pdfbox.text.pdftextstripper.writetext(pdftextstripper.java:266) at org.apache.pdfbox.tools.extracttext.startextraction(extracttext.java:237) at org.apache.pdfbox.tools.extracttext.main(extracttext.java:82) at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:60) caused by: java.lang.numberformatexception at java.math.bigdecimal.<init>(bigdecimal.java:494) at java.math.bigdecimal.<init>(bigdecimal.java:383) at java.math.bigdecimal.<init>(bigdecimal.java:806) at org.apache.pdfbox.cos.cosfloat.<init>(cosfloat.java:59) ... 14 more",
        "label": 11
    },
    {
        "text": "can t open xref as a stream  latin chars unreconized latin characters (e.g. \u00e1, \u00e9, \u00ed, \u00f5, \u00e7) just aren`t recognized in pdf, creating text files with strange characters like \u0153, ? and \u02c6 instead of the right ones. i tryied to investigate through the pdfbox code what could have caused this, but with my limited knowledge on pdf formating, i couldn`t advance too much. there are 2 points which i`d like to comment: 1 - the pdf has no xref table, using stream xref(e.g. 3076/type/xref/w[1 3 1]>>stream) instead; 2 - while encoding the byte stream (cosstream.getfilteredstream().doencode()) the filter encoding is flatedecode (not sure if it`s a real issue, since in other pdfs i get this same encoding and it works fine). i`m not sure if there`s a problem with the pdf itself, since i can open it and see the latin characters with no trouble at adobe and foxit readers. attached is on of the pdfs that i`m talking about. the issue is seen from the 5th page on.",
        "label": 1
    },
    {
        "text": "exception on saving document i am performing some operations on pdf documents such as merging, spliting, reordering (pages). i am currently encountering some issues when attempting to save the newly modified pdf file. a simplified test case (extract the first 5 pages from a pdf into a new pdf) is: @test public void testpdfbox2() throws exception { pddocument returndocument = new pddocument(); string outputfilename = \"/tmp/testpdfreorder.pdf\"; list<integer> pages = arrays.aslist(1, 2, 3, 4, 5); try { // get/load current document pddocument currentpdf = pddocument.load(new file(\"/tmp/hibernate_reference.pdf\")); // get the current pages of the document @suppresswarnings(\"unchecked\") list<pdpage> currentdocumentpages = currentpdf.getdocumentcatalog().getallpages(); for (integer currentpage : pages) { returndocument.importpage(currentdocumentpages.get(currentpage - 1)); } currentpdf.close(); } finally { returndocument.save(outputfilename); returndocument.close(); } } the problem is caused in the above code by calling currentpdf.close() before the returndocument.save has been called. this looks very similar to this issue pdfbox-1586 which is marked as \"fixed\" in 1.8.2, but in my opinion it is not. the stacktrace i am currently getting is: org.apache.pdfbox.exceptions.cosvisitorexception: java.lang.indexoutofboundsexception: index: 72, size: 0 at org.apache.pdfbox.pdfwriter.coswriter.visitfromstream(coswriter.java:1354) at org.apache.pdfbox.cos.cosstream.accept(cosstream.java:217) at org.apache.pdfbox.cos.cosobject.accept(cosobject.java:206) at org.apache.pdfbox.pdfwriter.coswriter.dowriteobject(coswriter.java:525) at org.apache.pdfbox.pdfwriter.coswriter.dowritebody(coswriter.java:435) at org.apache.pdfbox.pdfwriter.coswriter.visitfromdocument(coswriter.java:1122) at org.apache.pdfbox.cos.cosdocument.accept(cosdocument.java:552) at org.apache.pdfbox.pdfwriter.coswriter.write(coswriter.java:1501) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1324) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1305) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1292) at com.test.pdfboxtest.testpdfbox2(pdfboxtest.java:72) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:39) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:25) at java.lang.reflect.method.invoke(method.java:597) at org.junit.runners.model.frameworkmethod$1.runreflectivecall(frameworkmethod.java:47) at org.junit.internal.runners.model.reflectivecallable.run(reflectivecallable.java:12) at org.junit.runners.model.frameworkmethod.invokeexplosively(frameworkmethod.java:44) at org.junit.internal.runners.statements.invokemethod.evaluate(invokemethod.java:17) at org.junit.runners.parentrunner.runleaf(parentrunner.java:271) at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:70) at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:50) at org.junit.runners.parentrunner$3.run(parentrunner.java:238) at org.junit.runners.parentrunner$1.schedule(parentrunner.java:63) at org.junit.runners.parentrunner.runchildren(parentrunner.java:236) at org.junit.runners.parentrunner.access$000(parentrunner.java:53) at org.junit.runners.parentrunner$2.evaluate(parentrunner.java:229) at org.junit.runners.parentrunner.run(parentrunner.java:309) at org.eclipse.jdt.internal.junit4.runner.junit4testreference.run(junit4testreference.java:50) at org.eclipse.jdt.internal.junit.runner.testexecution.run(testexecution.java:38) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:467) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:683) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.run(remotetestrunner.java:390) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.main(remotetestrunner.java:197) caused by: java.lang.indexoutofboundsexception: index: 72, size: 0 at java.util.arraylist.rangecheck(arraylist.java:547) at java.util.arraylist.get(arraylist.java:322) at org.apache.pdfbox.io.randomaccessbuffer.seek(randomaccessbuffer.java:84) at org.apache.pdfbox.io.randomaccessfileinputstream.read(randomaccessfileinputstream.java:96) at java.io.bufferedinputstream.fill(bufferedinputstream.java:218) at java.io.bufferedinputstream.read1(bufferedinputstream.java:258) at java.io.bufferedinputstream.read(bufferedinputstream.java:317) at org.apache.pdfbox.pdfwriter.coswriter.visitfromstream(coswriter.java:1337) ... 34 more",
        "label": 4
    },
    {
        "text": "pdfsplit slow and keeps unused pages pdf from pdfbox-1298 java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdfsplit document.pdf",
        "label": 1
    },
    {
        "text": "problem in extracting roman page numbers  pdpagelabels java  hi all , i am very long time user of pdfbox from 0.7.3 version. current i am using the latest version(1.2.1). while using i came across the problem while extracting pdfpagelabels for pdf with roman numbers . for example if the label is \"xi\" pdfbox output is \"xxi\" and it is correct for pagenumber less than ten. i made a small correction in the code pdpagelabels.java and found that it seems to work fine . original code in pdpagelabels.java private static final string[][] romans = new string[][] { { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" }, { \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\" }, { \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\" }, }; modified code in pdpagelabels.java private static final string[][] romans = new string[][] { { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" } , { \"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\" } , { \"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\" } , }; *please advice me whether the above change is correct and incorporate in my pdfbox. thank you very much regards karthick . g",
        "label": 7
    },
    {
        "text": "icc profile ignored if number of components is the method getrgbimage in pdpixelmap ignores the icc profile of an iccbased color space if the number of components is 1 (ll. 320-321 in 1.8.5): byte[] map = new byte[] {(byte)0xff}; cm = new indexcolormodel(bpc, 1, map, map, map, transparency.opaque); this gives me a blank image in my pdf. if i use the code in l. 325 cm = colorspace.createcolormodel( bpc ); i get the expected result. i'm sorry that i'm not allowed to attach the affected pdf. if required i would try to generate a different one.",
        "label": 11
    },
    {
        "text": "can't create text with pdftype1font zapf dingbats or pdftype1font symbol without installed fonts on a system with no fonts, it is not possible to create pdf files that use the standard 14 symbol and zapf dingbats fonts. the current code tries to look at the generic fallback font (liberationsans), which of course doesn't have these characters so an exception is thrown. but this lookup isn't needed - we have all the metrics needed for the standard 14 fonts and don't need any actual font. solution: change pdtype1font.encode() so that it doesn't use the generic font for standard 14 fonts.",
        "label": 11
    },
    {
        "text": "imageioutil writeimage doesn't work with tiff images imageioutil.writeimage brings an i/o error exception when trying to write a tiff file. debugging shows that the cause is \"bits per sample must be 1 for rle compression!\". this means that the compression used (the first one of the following list, returned by writerparams.getcompressiontypes() ) is only allowed for bitonal images. ccitt rle ccitt t.4 ccitt t.6 lzw jpeg zlib packbits deflate exif jpeg after correcting this, the next problem was that tiff images didn't have the proper resolutions. i added that too. yes it uses the com.sun.* classes; however there is no other way. even apache xmlgraphics uses them, although in a very different way than i do https://svn.apache.org/repos/asf/xmlgraphics/commons/tags/commons-1_3_1/src/java/org/apache/xmlgraphics/image/writer/imageio/imageiotiffimagewriter.java writeimage() has a parameter \"int imagetype\" which is never used. why?",
        "label": 11
    },
    {
        "text": "font with name containing cache separator we came across this font http://www.myfontfree.com/def_writer___base_cyr-myfontfreecom126f65213.htm where the font name is def writer | base cyr containing the separator used in the font cache and finally resulting in java.lang.exceptionininitializererror  at org.apache.pdfbox.pdmodel.font.fontmapperimpl.getprovider(fontmapperimpl.java:149)  at org.apache.pdfbox.pdmodel.font.fontmapperimpl.findfont(fontmapperimpl.java:413)  at org.apache.pdfbox.pdmodel.font.fontmapperimpl.findfontboxfont(fontmapperimpl.java:376)  at org.apache.pdfbox.pdmodel.font.fontmapperimpl.getfontboxfont(fontmapperimpl.java:350)  at org.apache.pdfbox.pdmodel.font.pdtype1font.<init>(pdtype1font.java:146)  at org.apache.pdfbox.pdmodel.font.pdtype1font.<clinit>(pdtype1font.java:79)  at org.apache.pdfbox.mytest.test4(mytest.java:87)  at sun.reflect.nativemethodaccessorimpl.invoke0(native method)  at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:62)  at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)  at java.lang.reflect.method.invoke(method.java:498)  at org.junit.runners.model.frameworkmethod$1.runreflectivecall(frameworkmethod.java:50)  at org.junit.internal.runners.model.reflectivecallable.run(reflectivecallable.java:12)  at org.junit.runners.model.frameworkmethod.invokeexplosively(frameworkmethod.java:47)  at org.junit.internal.runners.statements.invokemethod.evaluate(invokemethod.java:17)  at org.junit.runners.parentrunner.runleaf(parentrunner.java:325)  at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:78)  at org.junit.runners.blockjunit4classrunner.runchild(blockjunit4classrunner.java:57)  at org.junit.runners.parentrunner$3.run(parentrunner.java:290)  at org.junit.runners.parentrunner$1.schedule(parentrunner.java:71)  at org.junit.runners.parentrunner.runchildren(parentrunner.java:288)  at org.junit.runners.parentrunner.access$000(parentrunner.java:58)  at org.junit.runners.parentrunner$2.evaluate(parentrunner.java:268)  at org.junit.runners.parentrunner.run(parentrunner.java:363)  at org.eclipse.jdt.internal.junit4.runner.junit4testreference.run(junit4testreference.java:86)  at org.eclipse.jdt.internal.junit.runner.testexecution.run(testexecution.java:38)  at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:459)  at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:675)  at org.eclipse.jdt.internal.junit.runner.remotetestrunner.run(remotetestrunner.java:382)  at org.eclipse.jdt.internal.junit.runner.remotetestrunner.main(remotetestrunner.java:192) caused by: java.lang.illegalargumentexception: no enum constant org.apache.pdfbox.pdmodel.font.fontformat.basecyr  at java.lang.enum.valueof(enum.java:238)  at org.apache.pdfbox.pdmodel.font.fontformat.valueof(fontformat.java:1)  at org.apache.pdfbox.pdmodel.font.filesystemfontprovider.loaddiskcache(filesystemfontprovider.java:406)  at org.apache.pdfbox.pdmodel.font.filesystemfontprovider.<init>(filesystemfontprovider.java:217)  at org.apache.pdfbox.pdmodel.font.fontmapperimpl$defaultfontprovider.<clinit>(fontmapperimpl.java:130)  ... 30 more",
        "label": 11
    },
    {
        "text": "pdresources overrides any existing font when calling addfont if you call addfont on a pdresource (for example, while calling setfont on a pdpagecontentstream) without first having manually called getfonts on the resource, the \"fonts\" field will be set to a new hashmap. it will thus forego loading any existing font from the dictionary, and make those fonts disappear when saving the file again. the bug was probably introduced by the removal of the font mapping in the resources.",
        "label": 1
    },
    {
        "text": "illegalargumentexception  dash lengths all zero pdf from pdfbox-624 java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage documenta_math.pdf exception in thread \"main\" java.lang.illegalargumentexception: dash lengths all zero at java.awt.basicstroke.<init>(basicstroke.java:220) at org.apache.pdfbox.rendering.pagedrawer.drawannotationlinkborder(pagedrawer.java:929) at org.apache.pdfbox.rendering.pagedrawer.showannotation(pagedrawer.java:858) at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:191) at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:208) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:139) at org.apache.pdfbox.rendering.pdfrenderer.renderimagewithdpi(pdfrenderer.java:94) at org.apache.pdfbox.tools.pdftoimage.main(pdftoimage.java:236)",
        "label": 11
    },
    {
        "text": "complete pdactionsound i suspect that pdactionsound needs to have more setters added, see so link.",
        "label": 11
    },
    {
        "text": "implement file specification [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1035196 originally submitted by benlitchfield on 2004-09-26 16:09. org.pdfbox.pdmodel.common.filespecification has been created but not implemented. see pdf reference 1.5 section 3.10 for file specification details.",
        "label": 1
    },
    {
        "text": "pdfs created with idealsoftware com's vpe are all wrong follow the steps: 1. download the example pdf i'll attach. it's the same as \"example rich text format\" pdf from idealsoftware.com but with text extraction protection disabled. 2a. java -jar pdfbox-app-1.6.0.jar extracttext -sort rtf.pdf extr.txt actual results: text is all gibberish. if you look at it very carefully, sorting \"reads\" the text vertically and you find first characters of each line first, then second characters of each line, etc. moreover, on jdk7: java.lang.illegalargumentexception: comparison method violates its general contract! (that's the text position sorting comparator) poking around the code indicates that sorting is correct if character rotation was 270 degrees. it (correctly?) calculates it as zero instead. 2b. java -jar pdfbox-app-1.6.0.jar extracttext rtf.pdf extr.txt actual results: text is fine, but each page is glued to a single line. poking around the code indicates that character offsets go down correctly, but expected line height is huge (full page height or width?) and therefore they never go down sufficiently to trigger a newline detection. so, there's something very wrong with character positions in those files, making pdfbox not extract text correctly.",
        "label": 1
    },
    {
        "text": "checkboxes missing pdf http://svn.apache.org/viewvc/incubator/pdfbox/trunk/test/input/c21-5916%20.pdf?revision=682412&view=co&pathrev=793348 java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage c21-5916.pdf",
        "label": 6
    },
    {
        "text": "add support for a flag disabling the rendering of pdf annotations in pdfrenderer regardless if annotations are supposed to be printed or not on the pdf, would it not be interesting to possess a flag allowing to choose if annotations should be printed on top of the document pages?   here is a diff of a very rough implementation of it :    diff --git a/pdfbox/src/main/java/org/apache/pdfbox/rendering/pdfrenderer.java b/pdfbox/src/main/java/org/apache/pdfbox/rendering/pdfrenderer.java --- a/pdfbox/src/main/java/org/apache/pdfbox/rendering/pdfrenderer.java +++ b/pdfbox/src/main/java/org/apache/pdfbox/rendering/pdfrenderer.java @@ -35,6 +35,9 @@ public class pdfrenderer      protected final pddocument document;      // todo keep rendering state such as caches here   +    // parameter used to know if the rendering should include annotations  +    private boolean renderannotations = true; +      /**       * creates a new pdfrenderer.       * @param document the document to render @@ -224,4 +227,14 @@ public class pdfrenderer      {          return new pagedrawer(parameters);      } + +    public void setrenderannotations(boolean render)  +    { +        this.renderannotations = render; +    } + +    public boolean renderannotations()  +    { +        return renderannotations; +    }  } diff --git a/pdfbox/src/main/java/org/apache/pdfbox/rendering/pagedrawer.java b/pdfbox/src/main/java/org/apache/pdfbox/rendering/pagedrawer.java --- a/pdfbox/src/main/java/org/apache/pdfbox/rendering/pagedrawer.java +++ b/pdfbox/src/main/java/org/apache/pdfbox/rendering/pagedrawer.java @@ -195,11 +195,13 @@ public class pagedrawer extends pdfgraphicsstreamengine            processpage(getpage());   -        for (pdannotation annotation : getpage().getannotations()) -        { -            showannotation(annotation); +        if (getrenderer().renderannotations())  +        {  +            for (pdannotation annotation : getpage().getannotations()) +            { +                showannotation(annotation); +            }          } -          graphics = null;      }   and an exemple of a use case:  pddocument doc = getpddocument();  pdfrenderer pdfrenderer = new pdfrenderer(doc); pdfrenderer.setrenderannotations(false); pdfrenderer.renderimage(page);   by default, this would be keeping the same behavior as it used to (aka : print the annotations) but possess an opt-out feature.   best regards, m.veron",
        "label": 8
    },
    {
        "text": "text extraction ignores bookmarks as reported by noam s. on the user mailing list: my problem is that when trying to gettext(doc) form a certain section of the pdf using setstartbookmark(item) and setendbookmark(item) i get all the text rather than just the text from the specified section. whiie trying to resolve this i realized that the writetext(doc, outputstream) method always calls resetengine() method. that will reset all the parameters and delete the bookmarks i set. the two lines that reset the bookmarks were added to resetengine in pdfbox-1808 in [ https://svn.apache.org/r1553175 ] in an attempt to save some memory. another weird segment can be found in the trunk: i also found another weird piece of code in the trunk, which would mean that text extraction would fail if start and end bookmarks are identical:         if (startpage != null && endpage != null &&             startbookmark.getcosobject() == endbookmark.getcosobject())         {             // this is a special case where both the start and end bookmark             // are the same but point to nothing.  in this case             // we will not extract any text.             startbookmarkpagenumber = 0;             endbookmarkpagenumber = 0;         } earlier, that segment was:        if( startbookmarkpagenumber == -1 && startbookmark != null &&                 endbookmarkpagenumber == -1 && endbookmark != null &&                 startbookmark.getcosobject() == endbookmark.getcosobject() )         {             //this is a special case where both the start and end bookmark             //are the same but point to nothing.  in this case             //we will not extract any text.             startbookmarkpagenumber = 0;             endbookmarkpagenumber = 0;         } which makes more sense. the change was made last year in rev [ https://svn.apache.org/r1634252 ] as part of the pagetree refactoring. i am writing a test to prevent this from breaking in the future.",
        "label": 11
    },
    {
        "text": "text extraction takes huge amount of time on some files i've got 1.2m single-page pdf files which i'm indexing using solr (which is using tika, which is using pdfbox) and some of them takes between 20min up to an hour to index. this is a huge problem for me, in 48hours i've indexed about 45k files and 19 hours of that time was spent on just 279 files. i've traced it to pdfbox taking a lot of time extracting the text from the documents. i've tested extracting the text using pdfbox-app's extracttext with the same result, the text is extracted but it takes forever... the attached file took about 23min (using extracttext) and from the result i can see a lot of \"rubbish text\" which i don't see in the text extracted from files that takes a normal amount of time (up to a few seconds per file) to parse. when running truss (on solaris, strace on linux) on the java-process, i can see a lot of segv due to fltbounds, which i don't know if its related to this problem but i just want to mention it.",
        "label": 1
    },
    {
        "text": "arrayindexoutofboundsexception in cosparser fuzzing pdf loading with jqf triggered an arrayindexoutofboundsexception. java.lang.arrayindexoutofboundsexception: 4  at org.apache.pdfbox.pdfparser.cosparser.bfsearchforobjstreams(cosparser.java:2035)  at org.apache.pdfbox.pdfparser.cosparser.rebuildtrailer(cosparser.java:2213)  at org.apache.pdfbox.pdfparser.cosparser.retrievetrailer(cosparser.java:279)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:171)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:220)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1160)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1057)     ... the code used for fuzzing is pddocument.load(inputstream)",
        "label": 11
    },
    {
        "text": "exception in thread  main  java io ioexception  error  expected a long type at offset  instead got '12688 deleted' a (semi-confidential) file sent to me has an object stream with this content: ....12076 132 12125 133 12616 1 12636 135 12688(deleted obj)<</a<</o/layout/placement... so i guess that there's a problem with recognizing the \"12688\" as a number.",
        "label": 11
    },
    {
        "text": "images are rendered blank we are not processing the following segment correctly.. i have added the -> and command for clarity q -> gsave q -> qrestore q -> gsave w -> clipnonzerorule 0 0 m -> moveto 612 0 l -> lineto 612 792 l -> lineto 0 792 l -> lineto h -> closepath n -> endpath q -> gsave 612 0 0 792 0 0 cm ->concatenate /i13 do -> invoke q -> qrestore q -> qrestore the problem is 'w' or clipnonzerorule. according to the spec 8.5.4 although the clipping path operator appears before the painting operator, it shall not alter the clipping path at the point where it appears. rather, it shall modify the effect of the succeeding painting operator. after the path has been painted, the clipping path in the graphics state shall be set to the intersection of the current clipping path and the newly constructed path. about the n (endpath) operator the n operator (see table 60) is a no-op path-painting operator; it shall cause no marks to be placed on the page, but can be used with a clipping path operator to establish a new clipping path. that is, after a path has been constructed, the sequence w n shall intersect that path with the current clipping path and shall establish a new clipping path. currently in clipnonzerorule.java and clipevenoddrule.java we do drawer.setclippingpath(generalpath.wind_non_zero); this applies the current path and resets. i believe we should ... drawer.setcurrentwindingrule(generalpath.wind_non_zero); and drawer.setcurrentwindingrule(generalpath.wind_non_zero); and in pagedrawer.java add int currentwindingrule = -1; public void setcurrentwindingrule(int windingrule) { currentwindingrule=windingrule; } public void setclippingwindingrule() { if(currentwindingrule == -1) { return; } setclippingpath(currentwindingrule); currentwindingrule=-1; } then in endpath.java drawer.setclippingwindingrule();",
        "label": 1
    },
    {
        "text": "wasted work in abstractinvalidfiletester validate  the problem appears in version 1.7.1 and in revision 1414788. i attached a two-line patch that fixes it. this problem and the attached patch are similar the previously fixed pdfbox-1447 and its patch. in method \"abstractinvalidfiletester.validate\", the loop over \"result.geterrorslist()\" should break immediately after \"found\" is set to \"true\" if \"outputresult\" is null. all the iterations after \"found\" is set to \"true\" do not perform any useful work when \"outputresult\" is null, at best they just set \"found\" again to \"true\".",
        "label": 4
    },
    {
        "text": "randomaccessbuffer returns wrong values for single byte reads  patch attached randomaccessbuffer contains a critical bug which had no effect so far since this class is currently not used. the problem is in method read() (single byte read). if the byte read is larger than 127 the method returns the signed byte value instead of the unsigned values 128-255. thus a component using this method will assume end-of-stream. the solution is to 'and' the value with 0xff. patch is attached.",
        "label": 1
    },
    {
        "text": "exception with validation ./pdfbox-1.5.0/pdfbox/target/test-classes/input/simple-openoffice.pdf :: exception in thread \"main\" org.apache.pdfbox.preflight.exception.validationexception: unable to process an element if it is null. at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:47) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validateresources(singlepagevalidationprocess.java:158) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:77) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:49) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:56) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:45) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168) at org.apache.pdfbox.preflight.validator_a1b.runsimple(validator_a1b.java:158) at org.apache.pdfbox.preflight.validator_a1b.main(validator_a1b.java:125)",
        "label": 3
    },
    {
        "text": "lost information while extracting images from pdf scanned by xerox i've got an application that get's a pdf scanned by several scanners, i'm currently having a problem with pdfs scanned by xerox workcentre. the problem persists while we set the scanner to use jbig2. if we change the printer's configuration, the image extraction does not lose information. as we have a lot of printers, and they access the application via webservice, it would be necessary to handle the issue from the application and not from every particular scanner. thanks",
        "label": 1
    },
    {
        "text": "infinite loop for this pdf file attached, this function will hang: public void testnewversion() throws ioexception { pddocument doc = pddocument.load(pdfverificationtest.class.getclassloader().getresource(\"infinite_loop.pdf\").openstream()); pdfrenderer pdfrenderer = new pdfrenderer(doc); for(int i=1;i<doc.getnumberofpages();i++) { pdfrenderer.renderimagewithdpi(i, 300, imagetype.rgb); } }",
        "label": 11
    },
    {
        "text": "gif with less than colors prints wrong colors using jasperreports, generate report with embedded jpg image. to make the resulting pdf smaller, i converted the image to a gif and tried to use as few colors as possible. the image is very simple and jpg wasn't the correct format to begin with, since it just has three colors. i used fsview to reduce the number of colors from 256 to 4. it is correct when printed by adobe, but when the java program, using pdfbox, prints it, the white background is prints as grey and the solid blue section seems less saturated so it's a light blue.",
        "label": 1
    },
    {
        "text": "layerutility ignores ocproperties on import layerutility ignores ocproperties on import, this leads to hidden layers (optional content groups) become visible after import. you could reproduce bug in org.apache.pdfbox.examples.pdmodel.superimposepage example with provided pdf. attached patch fixes issue. other way to approach this is make layerutility.cloner available via getter and require dealing with ocproperties in userland code.",
        "label": 11
    },
    {
        "text": "npe in pdfaextensionhelper populateschemamapping i get this exception by running preflight on the attached files: java.lang.nullpointerexception  at org.apache.xmpbox.xml.pdfaextensionhelper.populateschemamapping(pdfaextensionhelper.java:198)  at org.apache.xmpbox.xml.domxmpparser.parse(domxmpparser.java:202)  at org.apache.xmpbox.xml.domxmpparser.parse(domxmpparser.java:114)  at org.apache.pdfbox.preflight.process.metadatavalidationprocess.validate(metadatavalidationprocess.java:67)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:73)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88)  at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168)  at org.apache.pdfbox.util.testpdftoimage.dotestfile(testpdftoimage.java:337)  at org.apache.pdfbox.util.testpdftoimage.testrenderimage(testpdftoimage.java:382)  at sun.reflect.nativemethodaccessorimpl.invoke0(native method)  at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)  at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)  at java.lang.reflect.method.invoke(method.java:606)  at junit.framework.testcase.runtest(testcase.java:176)  at junit.framework.testcase.runbare(testcase.java:141)  at junit.framework.testresult$1.protect(testresult.java:122)  at junit.framework.testresult.runprotected(testresult.java:142)  at junit.framework.testresult.run(testresult.java:125)  at junit.framework.testcase.run(testcase.java:129)  at junit.framework.testsuite.runtest(testsuite.java:255)  at junit.framework.testsuite.run(testsuite.java:250)  at junit.textui.testrunner.dorun(testrunner.java:116)  at junit.textui.testrunner.start(testrunner.java:183)  at junit.textui.testrunner.main(testrunner.java:137)  at org.apache.pdfbox.util.testpdftoimage.main(testpdftoimage.java:432)",
        "label": 11
    },
    {
        "text": "some characters are displayed by default font  not by correct font  i have created simple test pdf which contains some central european characters. adobe reader displays text ok. but this code bufferedimage bufferedimage = pdpage.converttoimage(); renders some characters with default font (not the one set in content).",
        "label": 1
    },
    {
        "text": "pdftoimage  text missing or background box stacks over when i try to convert this pdf to image, with the pdftoimage example app, then the result image is incorrect. some text blocks are missing (or maybe the background color box is stack over the text). to reproduce: `java -jar pdfbox-app-3.0.0-snapshot.jar pdftoimage /tmp/doc_mock.pdf` thanks",
        "label": 11
    },
    {
        "text": "pdpagecontentstream drawstring  doesn't work with all pdfs i add custom text to misc exsiting pdf files. now i wondered why my text doesn't appear for a specific pdf. it is not encrypted, has the same page size and adding text with itext 2.1.7 works as expected. my code to add text is: ---------------------------------- final pdpage page = (pdpage) allpages.get; final pdpagecontentstream contentstream = new pdpagecontentstream(doc, page, true, false); contentstream.begintext(); contentstream.setfont(font, sizeoffont); contentstream.movetextpositionbyamount(xf, yf); contentstream.drawstring(text); contentstream.endtext(); contentstream.close(); --------------------------------- i tried to find differences between this pdf and other pdfs. what i noticed: the pdf where i can't see the text has a pdf-version \"1.3\" and was created by \"afpl ghostscript 8.54\". is there some known issue with pdfbox and such \"older\" pdf formats?",
        "label": 1
    },
    {
        "text": "pdfont getencodingmanager is not thread safe  fix included in class pdfont calling static getencodingmanager is not thread safe. two solutions: (1) with lazy initialization (thread safe with java 1.5 and later) private static volatile encodingmanager encodingmanager = null; protected static encodingmanager getencodingmanager() { if(encodingmanager == null) { synchronized ( pdfont.class ) { if ( encodingmanager == null ) encodingmanager = new encodingmanager(); } } return encodingmanager; } (2) create singleton at class initialization time private static encodingmanager encodingmanager = new encodingmanager(); protected static encodingmanager getencodingmanager() { return encodingmanager; }",
        "label": 7
    },
    {
        "text": "add a removeregion method in pdftextstripperbyarea class hi, i am parsing a very complicated pdf, for which i had to enable (setsortbyposition as true), otherwise the parser is not able to do sequential text extraction. so i decided to use pdftextstripperbyarea class, and then make rectangles to extract text. but problem here is that if i make many rectangles in a single page, again there is no logical sequence of text extracted, so to get around this it will be awesome to have a method to remove regions, then we can add a region extract text, remove that region , then again add new region and so on.... i have already done a poc in my local computer and it works fine. added this method and tested. public void removeregion(string regionname) { this.regions.remove(regionname); this.regionarea.remove(regionname); } i can contribute this code myself, if you suggest, let me know, thanks and regards praveer",
        "label": 11
    },
    {
        "text": "pdacroform flatten pdfield list  refreshappearances boolean  flattens all form fields instead of specified ones  thanks for the excellent pdf library. for my use case i need to flatten a subset of the acroform fields. i was attempting to use the pdacroform.flatten call, passing in my field list. however, after the method is called, all the fields are gone. the method itself appears to remove all pdfannotationwidgets from each page and at the end clears the acroform's field set. is the javadoc description (this will flatten the specified form fields.) just misleading? could a flatten call for a subset of fields be added? thanks",
        "label": 8
    },
    {
        "text": "the ability to inject the time random component into the coswriter process to write a pdf document allows some advanced signature creation scenarios where the signature is generated on a separate server that does not hold the full pdf document  i have developed a prototype server based signing service for the swedish national eid infrastructure. i'll skip the details, but i recently switched to pdfbox for the pdf signing process and it works great. however, i had to modify the coswriter class to get this working. i'm writing to check whether you would consider adding the functionality i need to future version of pdfbox. the problem is the the signature service is just producing the signature, it is not trusted to handle the pdf document. the government service having the pdf document signed is using pdfbox in a 2 step process. 1) to produce the signedattributes der object of the cms signature to be created. this is the part that is hashed and signed by the signature service. 2) after receiving the signature and signature certs from the signature service, completing the pdf signature by delivering the complete pkcs#7 object to pdfbox using the externally generated signature value and certs. there are probably a more pure way to handle this, but since pdfbox allows me to create a signature interface that produces the signeddata. i found it to be the easiest way to run the signature process 2 times. 1st pass using dummy key and dummy certs. this only to obtain the signedattributes. 2nd pass by delivering a signeddata object that include the signature value and certs produced by the signature service. now in order to do this, i have to control the random seed added by the coswriter, or else the signature created by the signature service will not match the hash in the signedattributes produced in the second pass. my modification is provided below. i simply provided an extra input parameter to the write function where i can provide the long seed i then added a backwards compatible write function where the long seed is current time. by providing the same seed to pass 1 and pass 2, i can get the externally created signature to match the signedattributes produced in the first pass. the write function below is identical to the original coswriter function except that it takes the idtime value from the function input parameter instead of getting it from system.currenttimemillis(). modified functions of coswriter: /** this will write the pdf document. * @param doc the document to write. * @throws cosvisitorexception if an error occurs while generating the data. */ public void write(pddocument doc) throws cosvisitorexception { write(doc, system.currenttimemillis()); } /** this will write the pdf document. * @param doc the document to write. @param idtime the time seed used to generate the id * @throws cosvisitorexception if an error occurs while generating the data. */ public void write(pddocument doc, long idtime) throws cosvisitorexception { document = doc; if (incrementalupdate) { prepareincrement(doc); } // if the document says we should remove encryption, then we shouldn't encrypt if (doc.isallsecuritytoberemoved()) { this.willencrypt = false; // also need to get rid of the \"encrypt\" in the trailer so readers // don't try to decrypt a document which is not encrypted cosdocument cosdoc = doc.getdocument(); cosdictionary trailer = cosdoc.gettrailer(); trailer.removeitem(cosname.encrypt); } else { securityhandler securityhandler = document.getsecurityhandler(); if (securityhandler != null) { try { securityhandler.preparedocumentforencryption(document); this.willencrypt = true; } catch (ioexception e) { throw new cosvisitorexception(e); } catch (cryptographyexception e) { throw new cosvisitorexception(e); } } else { this.willencrypt = false; } } cosdocument cosdoc = document.getdocument(); cosdictionary trailer = cosdoc.gettrailer(); cosarray idarray = (cosarray) trailer.getdictionaryobject(cosname.id); if (idarray == null || incrementalupdate) { try { //algorithm says to use time/path/size/values in doc to generate //the id. we don't have path or size, so do the best we can messagedigest md = messagedigest.getinstance(\"md5\"); md.update(long.tostring(idtime).getbytes(\"iso-8859-1\")); cosdictionary info = (cosdictionary) trailer.getdictionaryobject(cosname.info); if (info != null) { iterator<cosbase> values = info.getvalues().iterator(); while (values.hasnext()) { md.update(values.next().tostring().getbytes(\"iso-8859-1\")); } } idarray = new cosarray(); cosstring id = new cosstring(md.digest()); idarray.add(id); idarray.add(id); trailer.setitem(cosname.id, idarray); } catch (nosuchalgorithmexception e) { throw new cosvisitorexception(e); } catch (unsupportedencodingexception e) { throw new cosvisitorexception(e); } } cosdoc.accept(this); } finally. the way i use this in my signature process is by using this altered static function saveincremental from the pdfdocument class. since this function is static, i just call this duplicated function instead of the one in the pdfdocument class. here i use my altered coswriter (cscoswriter). /** save the pdf as incremental. this method is a modification of the same method of pddcoument. this method use an altered coswriter that allows control over the time used to create the id of the document. this way it is possible to perform two consecutive signature generation passes that produce the same document hash. * @param doc the document being written with signature creation @param input an input file stream of the document being written @param output an output file stream for the result document @param idtime the time in milliseconds from jan 1st, 1970 gmt when the signature is created. this time is also used to calculate the id of the document. @throws ioexception if something went wrong @throws cosvisitorexception if something went wrong */ public static void saveincremental(pddocument doc, fileinputstream input, outputstream output, long idtime) throws ioexception, cosvisitorexception { //update the count in case any pages have been added behind the scenes. doc.getdocumentcatalog().getpages().updatecount(); cscoswriter writer = null; try { // sometimes the original file will be missing a newline at the end // in order to avoid having %%eof the first object on the same line // as the %%eof, we put a newline here. if there's already one at // the end of the file, an extra one won't hurt. pdfbox-1051 output.write(\"\\r\\n\".getbytes()); writer = new cscoswriter(output, input); writer.write(doc, idtime); writer.close(); } finally unknown macro: { if (writer != null) { writer.close(); } } }",
        "label": 10
    },
    {
        "text": "arrayindexoutofboundsexception in pdinlinedimage java i can't post a sample pdf, but the trace is: java.lang.arrayindexoutofboundsexception at java.lang.system.arraycopy(native method) at org.apache.pdfbox.pdmodel.graphics.xobject.pdinlinedimage.createimage(pdinlinedimage.java:171) at org.apache.pdfbox.util.operator.pagedrawer.begininlineimage.process(begininlineimage.java:57) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:510) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:223) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:182) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:92) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:686)",
        "label": 2
    },
    {
        "text": "false negative  runtimeexception  eol encountered in white run java.lang.runtimeexception: eol encountered in white run. at org.apache.pdfbox.filter.ccitt.tifffaxdecoder.decodewhitecodeword(tifffaxdecoder.java:1168) at org.apache.pdfbox.filter.ccitt.tifffaxdecoder.decodet6(tifffaxdecoder.java:980) at org.apache.pdfbox.filter.ccittfaxfilter.decode(ccittfaxfilter.java:95) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:386) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:335) at org.apache.pdfbox.cos.cosstream.getdecoderesult(cosstream.java:290) at org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject.<init>(pdimagexobject.java:115) at org.apache.pdfbox.pdmodel.graphics.pdxobject.createxobject(pdxobject.java:65) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatexobjects(resourcesvalidationprocess.java:285) at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:80) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:81) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:54) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validateresources(singlepagevalidationprocess.java:167) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:82) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:81) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:54) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:56) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:45) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:81) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:118) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168)",
        "label": 11
    },
    {
        "text": "reduce ram requirement of cosoutputstream cosoutputstream uses a byte array to buffer data prior to filtering. this is bad. as commented in cosoutputstream, it should be updated to use a scratch file buffer instead. this patch does that.",
        "label": 11
    },
    {
        "text": "postscript tables of truetype fonts are not correctly parsed  the specification of the 'post' table contains a list of 258 predefined character names. however, the current fontbox interprets name indices <258 in terms of macromanencoding, which is wrong. testcase and patch will be attached shortly.",
        "label": 1
    },
    {
        "text": "filter decode  modifies pdf if there is a filter array if there are several filters (filter array) in an image, pdfbox is inserting an empty decodeparms object here params.setitem(cosname.decode_parms, getdecodeparams(params, index)); instead of either inserting an empty cosarray, or (better) do nothing. saving such a pdf results in it not being displayable in the acrobat reader. test code:         pddocument d = pddocument.load(\"before.pdf\");         new pdfrenderer(d).renderimage(0);         d.save(\"after.pdf\"); the rendering is important because without it, the filtered objects aren't decoded.",
        "label": 11
    },
    {
        "text": "textposition getheight  returns erroneous value for some pdfs for a pdf that worked fine under 1.2.1 the height value returned is negative and the wrong value (i.e. using math.abs() won't fix it). other pdfs work fine. pdf debug shows \"creator:crystal reports\" and \"producer:pdf-xchange (xcpro30.dll v3.30.0064) (windows 2k)\" and when examining the 'stream' items, the text is not what displays. any suggestions on what to look for so that i can do differential analysis against other pdfs to see what they do/not have in common with this one? (it's client data so i can't post the pdf. ) it's stopping us from moving off 1.2.1 (and later versions fix another issue we have of seeing question marks instead of the actual characters).",
        "label": 1
    },
    {
        "text": "i have problem in baseparser readint i can't load pdf to pddocument.load( ) it give me this exception java.io.ioexception: error: expected an integer type, actual='fatal' at org.apache.pdfbox.pdfparser.baseparser.readint(baseparser.java:1384) at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:517) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:184) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1069) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1036) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1007)",
        "label": 1
    },
    {
        "text": "regression  some isartor tests are not passing in it is possible to check preflight with the isartor files while building pdfbox. the option is not set by default. it can be done with the command line : mvn test -dskip.external.resources=false on july 2nd, 9 tests are failing : testisartor.validate:175 isartor-6-2-3-3-t02-fail-f.pdf : illegalstateexception raised , message=call to processsubstream() before processstream() or initstream() testisartor.validate:175 isartor-6-2-3-3-t02-fail-h.pdf : illegalstateexception raised , message=call to processsubstream() before processstream() or initstream() testisartor.validate:175 isartor-6-2-3-3-t02-fail-i.pdf : illegalstateexception raised , message=call to processsubstream() before processstream() or initstream() testisartor.validate:170 isartor-6-2-7-t01-fail-a.pdf : invalid error code returned. expected:<2.[3.2]> but was:<2\\.[1.9]> testisartor.validate:159 isartor-6-3-2-t01-fail-a.pdf : invalid error code returned. expected 3.2.2, found [3.1.1 3.3.2 ] testisartor.validate:175 isartor-6-3-4-t01-fail-f.pdf : nullpointerexception raised , message=null testisartor.validate:175 isartor-6-3-4-t01-fail-g.pdf : illegalstateexception raised , message=call to processsubstream() before processstream() or initstream() testisartor.validate:175 isartor-6-3-4-t01-fail-h.pdf : illegalstateexception raised , message=call to processsubstream() before processstream() or initstream() testisartor.validate:175 isartor-6-9-t02-fail-a.pdf : nullpointerexception raised , message=null all is working fine with the last released version.",
        "label": 6
    },
    {
        "text": "pdfmergerutility i concatenate pdfs with the pdfmergerutility. as long as i concat my (with fop) created pdfs that are in \"pdf 1.4\" format, i get no issue when viewing the result. but when one of the pdfs is a \"pdf 1.2\" document, the resulting pdf will also have \"pdf 1.2\" version. when viewing this concatenated pdf in acrobat reader (9), the first (originally pdf-1.2) document gets viewed without errors, but as soon as i scroll further to the second page (with the other pdf-1.4 pdfs), i get errors like \"fehler auf dieser seite. die seite wird unter umst\u00e4nden nicht richtig in acrobat angezeigt. wenden sie sich an den ersteller des pdf-dokuments, um das problem zu beheben.\" (roughly: errors on this page.) or \"ung\u00fcltiger parameter.\" (roughly: invalid parameter.) note: when concatenated with itext 2.1.7, the resulting pdf has version \"1.4\" and no errors occur in adobe reader. is it possible to tell the merger to set the pdf version of the result pdf?",
        "label": 1
    },
    {
        "text": "org apache pdfbox cos cosarray cannot be cast to org apache pdfbox cos cosdictionary when i start .converttoimage() this error is occur: org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap getrgbimage severe: java.lang.classcastexception: org.apache.pdfbox.cos.cosarray cannot be cast to org.apache.pdfbox.cos.cosdictionary java.lang.classcastexception: org.apache.pdfbox.cos.cosarray cannot be cast to org.apache.pdfbox.cos.cosdictionary at org.apache.pdfbox.filter.jbig2filter.decode(jbig2filter.java:73) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:351) at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:299) at org.apache.pdfbox.cos.cosstream.getunfilteredstream(cosstream.java:225) at org.apache.pdfbox.pdmodel.common.pdstream.createinputstream(pdstream.java:232) at org.apache.pdfbox.pdmodel.common.pdstream.getbytearray(pdstream.java:510) at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdpixelmap.java:254) at org.apache.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.mask(pdxobjectimage.java:221) at org.apache.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.applymasks(pdxobjectimage.java:154) at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdpixelmap.java:365) at org.apache.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:87) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:557) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:139) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:801) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:732) at com.sign.pdfcutter.pdfcut(pdfcutter.java:75) at com.sign.copyfiletree.visitfile(copyfiletree.java:103) at com.sign.copyfiletree.visitfile(copyfiletree.java:21) at java.nio.file.files.walkfiletree(files.java:2667) at java.nio.file.files.walkfiletree(files.java:2739) at com.sign.copy.main(copy.java:158) and some resulting images are blank, some images in grey shades with fading text",
        "label": 11
    },
    {
        "text": "disabled optional content groups are rendered printing a documents with hidden optional content groups original.pdf renders hidden content printed.png. code used to print inputstream sourcestream = new fileinputstream(pfile); try {   pddocument source = pddocument.load(sourcestream);   job.setpageable(new pdfpageable(source));   job.print(atts); } finally {   sourcestream.close(); } this is not only a problem of pdfbox but can be done right ... ghostscript does it gs.png.",
        "label": 11
    },
    {
        "text": "pdfdebugger  jcombobox does not take generic parameters in java in the pdfbox-debugger/streampane.java:168 you are using generics with a jcombobox. this causes a compile error when targeting jdk 1.6, as jcombobox does only take a generic parameter since 1.7 afair. i assume that this code will not run on jdk 1.6, you may get it to compile with a jdk 1.7+ - but at least jdk 10 complains about this when compiling.",
        "label": 11
    },
    {
        "text": "incorrect  zero  character widths returned in some docs [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1216674 originally submitted by tamirhassan on 2005-06-07 13:42. for certain pdf documents (such as the one attached) the character/string widths (as obtained e.g. by the pdfont.getstringwidth method) are not returned correctly, i.e. they appear to be correct for punctuation characters but are zero for alphanumeric characters. it seems as if these alphanumeric characters are not within pdfont.firstchar and pdfont.lastchar in the type 1 font. the method therefore attempts to obtain the font widths from the afm (font metric) file, but fails (silently) with a 'resource is null' logline message. (note that this problem doesn't seem to occur with type 1 fonts in other documents.) a more detailed discussion regarding this issue can be found in this link: http://sourceforge.net/forum/forum.php? thread_id=1260349&forum_id=267205 thanks in advance for any help that can be obtained, tam",
        "label": 1
    },
    {
        "text": "setting a radiobutton with export values does not update the appearance setting a radiobutton with export values does not update the appearance. the attached form has two sets of radiobuttons. one called \"group1\" and one called \"_6_ treatment of program inco_nwabuwin0jwsw9e68rwn8a\". \"group1\" is easy to set or unset. i noticed during debugging doesn't have any \"exportvalues\" and so the value is set in a different way than the other set of radiobuttons. \"_6_ treatment of program inco_nwabuwin0jwsw9e68rwn8a\" does have exportvalues and this appears to be related to the problems with setting the value. for example:         try(pddocument pdfdocument = pddocument.load(new file(\"/users/travis/desktop/fdpattachment2.pdf\"))) {             final pddocumentcatalog doccatalog = pdfdocument.getdocumentcatalog();             final pdacroform acroform = doccatalog.getacroform();         final pdradiobutton group1field = (pdradiobutton) acroform.getfield(\"group1\");             group1field.setvalue(\"nih\");             final pdradiobutton topifield = (pdradiobutton) acroform.getfield(\"_6_  treatment of program inco_nwabuwin0jwsw9e68rwn8a\");             topifield.setvalue(\"additive\");             pdfdocument.save(\"/users/travis/desktop/fdpattachment2-radio-buttons.pdf\");         } notice in \"fdpattachment2-radio-buttons.pdf\" that \"group1\" radiobutton has nih toggled while \"_6_ treatment of program inco_nwabuwin0jwsw9e68rwn8a\" is not toggled even though \"additive\" is a valid value. the workaround for this is to set the appearance state (as). i'm still learning the pdfbox api so i apologize if my workaround is a little strange.         try(pddocument pdfdocument = pddocument.load(new file(\"/users/travis/desktop/fdpattachment2.pdf\"))) {             final pddocumentcatalog doccatalog = pdfdocument.getdocumentcatalog();             final pdacroform acroform = doccatalog.getacroform();             final pdradiobutton group1field = (pdradiobutton) acroform.getfield(\"group1\");             group1field.setvalue(\"nih\");             final pdradiobutton topifield = (pdradiobutton) acroform.getfield(\"_6_  treatment of program inco_nwabuwin0jwsw9e68rwn8a\");             topifield.setvalue(\"additive\");             //additive ends up being index 0.  if i add an as with \"0\" it toggle the additive radio button             final int idx = topifield.getexportvalues().indexof((topifield).getvalue());             topifield.getwidgets().foreach(w -> {                 pdappearanceentry appearanceentry = w.getappearance().getnormalappearance();                 if (((cosdictionary) appearanceentry.getcosobject()).containskey(string.valueof(idx))) {                     w.getcosobject().setname(cosname.as, string.valueof(idx));                 }             });             pdfdocument.save(\"/users/travis/desktop/fdpattachment2-radio-buttons-workaround.pdf\");         } notice in \"fdpattachment2-radio-buttons-workaround.pdf\" both sets of radiobuttons are toggled which is the desired behavior",
        "label": 8
    },
    {
        "text": "pdvariabletext text color changes to be the same as the background color after flattening pdvariabletext text color changes to be the same as the background color after flattening. this effectively makes the text hidden and appear to be lost. this includes field types such as listbox and textfield. i don't believe i have tested a combo box. for example:         try(pddocument pdfdocument = pddocument.load(new file(\"/users/travis/desktop/fdpattachment2.pdf\"))) {             final pddocumentcatalog doccatalog = pdfdocument.getdocumentcatalog();             final pdacroform acroform = doccatalog.getacroform();             final pdfield textfield = acroform.getfield(\"subaward number\");             textfield.setvalue(\"12345\");             final pdfield listboxfield = acroform.getfield(\"contact for carryforward\");             listboxfield.setvalue(\"administrative contact\");             //when flattening with refreshappearances, a npe will occur if each widget doesn't have a             //pdappearancedictionary instance with a normal pdappearanceentry instance set pdfbox-3751             pdfdocument.getdocumentcatalog().getacroform().getfields()                     .stream()                     .flatmap(f -> f.getwidgets().stream())                     .filter(w -> w.getappearance() == null)                     .foreach(w -> {                         final pdappearancedictionary appearance = new pdappearancedictionary(new cosdictionary());                         appearance.setnormalappearance(new pdappearanceentry(new cosdictionary()));                         w.setappearance(appearance);                     }); pdfdocument.getdocumentcatalog().getacroform().flatten(pdfdocument.getdocumentcatalog().getacroform().getfields(), true);             pdfdocument.save(\"/users/travis/desktop/fdpattachment2-example-flattened.pdf\");         } notice in the attached fdpattachment2-example-flattened.pdf, the fields are correctly set but the text is not visible. if i execute the same code but do not flatten, the text is visible for certain field types in certain pdf viewers. see attached fdpattachment2-example-not-flattened.pdf in adobe acrobat reader dc build 15.23.20056.213124 the \"subaward number\" field shows up but only when clicking on the field. when using the preview app in macos sierra, it is visible. in both apps the \"contact for carryforward\" list box shows the text \"administrative contact\" as a side note i wonder if the behavior of the \"subaward number\" in relation to different pdf views may be related to a difference problem. i think the real issue here is the text color.",
        "label": 8
    },
    {
        "text": "illegible characters in rendered image illegible characters in rendered image",
        "label": 11
    },
    {
        "text": "npe when pdf a identification metadata does not contain id if malformed pdf/a identification metadata without <pdfaid:part> element is present, preflight pdfaidentificationvalidation throws npe: java.lang.nullpointerexception  at org.apache.pdfbox.preflight.metadata.pdfaidentificationvalidation.validatepdfaidentifer(pdfaidentificationvalidation.java:85) ... pdfaidentificationvalidation.checkpartnumber() method should register an error instead.",
        "label": 11
    },
    {
        "text": "invalid dictionary causes infinate loop parsing a pdf document seemed to cause pdfbox to go into an infinate loop logging the following: 2010-03-03 23:25:33,923 warn timer-2 org.apache.pdfbox.pdfparser.baseparser - invalid dictionary, found:\ufffd but expected:'' 2010-03-03 23:25:33,923 warn timer-2 org.apache.pdfbox.pdfparser.baseparser - invalid dictionary, found:\ufffd but expected:'' 2010-03-03 23:25:33,923 warn timer-2 org.apache.pdfbox.pdfparser.baseparser - invalid dictionary, found:\ufffd but expected:'' 2010-03-03 23:25:33,923 warn timer-2 org.apache.pdfbox.pdfparser.baseparser - invalid dictionary, found:\ufffd but expected:'' 2010-03-03 23:25:33,923 warn timer-2 org.apache.pdfbox.pdfparser.baseparser - invalid dictionary, found:\ufffd but expected:'' this caused the app servers log to fill up all available space ....",
        "label": 7
    },
    {
        "text": "bug in org apache pdfbox io ascii85outputstream there's a bug in ascii85outputstream.java in public final void write(byte[] b,int off, int sz) the effect of the bug is that buffers with length < 3 produce no output. fix: after if(count < 3) { add this line: flushed = false; better: delete the whole function and let the superclass handle it. i doubt that the current implementation saves much time.",
        "label": 1
    },
    {
        "text": "output info when pdfbox jbig2 imageio is released the next pdfbox that follows after the first release of pdfbox jbig2 imageio should output an info text mentioning the change if the \"then old\" levigo jbig2 imageio is installed, so that users know that future versions have a new home and can adjust their builds.",
        "label": 11
    },
    {
        "text": "direct jpeg extraction results in invalid images in releases  when i run pdfbox-app extractimages on a pdf containing an image with a devicergb colorspace, the resulting jpeg file is very large (5.3mb, while the source pdf is 320kb). i see this with the 2.0.0-rc2 release, i also encounter the problem with a build from today's trunk. if i modify the code to force usage of imageio, a valid jpeg file results. the image extracts properly in the 1.8.10 version.",
        "label": 11
    },
    {
        "text": "pdobjectreference getreferencedobject  returns null if referenced obj is not a cosstream when creating a pdf i am setting a pdannotation as the referenced object of a pdobjectreference using setreferencedobject. when i subsequently load the same document and then call getreferencedobject on the pdobjectreference, null is returned. this is because an exception is thrown in pdxobject.createxobject (called inside getreferencedobject) as the referenced object is not a cosstream, just a cosdictionary.",
        "label": 11
    },
    {
        "text": "error by text extraction hello, i tried to extract text from pdf and extraction ended with error. here is pdf, source file and stacktrace.",
        "label": 7
    },
    {
        "text": "broken download link here https://pdfbox.apache.org/download.html#20x the link to source code [https://pdfbox.apache.org/[preferred]pdfbox/2.0.12/pdfbox-2.0.12-src.zip] is 404.",
        "label": 1
    },
    {
        "text": "illegalargumentexception when refreshing an appearance and no font resources are defined pddocument doc = pddocument.load(new file(\"out.pdf\")); doc.getdocumentcatalog().getacroform().setneedappearances(false); doc.getdocumentcatalog().getacroform().refreshappearances(); doc.save(\"pdfbox.pdf\"); doc.close(); exception in thread \"main\" java.lang.illegalargumentexception: /dr is a required entry at org.apache.pdfbox.pdmodel.interactive.form.pddefaultappearancestring.<init>(pddefaultappearancestring.java:82)",
        "label": 8
    },
    {
        "text": "jpxfilter fails to decode some jpeg2000 images most of the images in the attached pdf are missing when rendered via pdfbox (tested in 2.0 head). the reason is a nullpointerexception in imageio: java.lang.nullpointerexception at com.sun.media.imageioimpl.plugins.jpeg2000.j2kmetadata.replace(j2kmetadata.java:962) at com.sun.media.imageioimpl.plugins.jpeg2000.j2kmetadata.addnode(j2kmetadata.java:631) at jj2000.j2k.fileformat.reader.fileformatreader.readfileformat(fileformatreader.java:279) at com.sun.media.imageioimpl.plugins.jpeg2000.j2kreadstate.initializeread(j2kreadstate.java:418) at com.sun.media.imageioimpl.plugins.jpeg2000.j2kreadstate.<init>(j2kreadstate.java:189) at com.sun.media.imageioimpl.plugins.jpeg2000.j2kimagereader.read(j2kimagereader.java:443) at javax.imageio.imagereader.read(unknown source) at org.apache.pdfbox.filter.jpxfilter.readjpx(jpxfilter.java:84) at org.apache.pdfbox.filter.jpxfilter.decode(jpxfilter.java:58) ... to avoid the problem, the imageio has to be instructed to skip reading metadata of the image, i.e. use reader.setinput(iis, true, true) instead of reader.setinput(iis) as shown in the attached patch. this is also what imageio.read(stream) does - the method that was used before the commit 1570806.",
        "label": 1
    },
    {
        "text": "text extraction fails due to font problem with type0  supplement font text extraction fails. in particular, download and view pg23 or others (1-based) of: http://www.encana.com/investors/financial/annualreports/2008/pdfs/annual-report-2008.pdf with pdfbox text extraction, last 5 lines of page are displayed as \"?\". other pages in the file have similar problems. text extraction yields multiple \"?\" because \"font.encode(buf,i,2)\" returns null. the font cosdictionary contains: cosname {subtype}=cosname{type0} cosname{descendantfonts}=cosarray{[cosobject{554, 0}]} cosname{basefont}=cosname{helveticaneueltstd-lt-identity-h} cosname{encoding}=cosname{identity-h} cosname{type}=cosname{font} the \"font.descendentfont\" has the following cosdictionary items: cosname{subtype} =cosname {cidfonttype0} cosname {fontdescriptor}=cosobject{540, 0} cosname{basefont}=cosname{aljohe+helveticaneueltstd-lt} cosname{w}=... cosname{cidsysteminfo}=cosdictionary{(cosname{supplement}:cosint{0}) (cosname{ordering}:cosstring{identity},(cosname{registry}:cosstring{adobe}) } cosname{dw}=cosint{1000} cosname{type}=cosname{font} the \"fontdescriptor\" of the descendentfont is: {cosname{stemv}=cosint{58}, cosname{fontname}=cosname{aljohe+helveticaneueltstd-lt}, cosname{fontfile3}=cosobject{543, 0}, cosname{cidset}=cosobject{545, 0}, cosname{flags}=cosint{6}, cosname{descent}=cosint{-271}, cosname{fontbbox}=cosarray{[cosint{-166}, cosint{-214}, cosint{1050}, cosint{967}]}, cosname{ascent}=cosint{752}, cosname{capheight}=cosint{737}, cosname{xheight}=cosint{553}, cosname{type}=cosname{fontdescriptor} , cosname {italicangle} =cosint {0} , cosname {stemh} =cosint{45}} the last 5 lines on the page are: \"increased cash flow by 11 percent to $9,386 million;\" \"increased operating earnings by ...\" etc these 5 lines are encoded as 2 bytes per character (it is a type0 font) each 2 byte code is offset by 31 from its displayed value. for instance, code \"0x00, 0x01\" should convert to ascii \"0x0020\" (a space). the font is an \"identity\" font, which means codes should just map to latin iso chars. yeah, this is a type0 font which can display a subset of another font (the latin iso), but how come codes differ from the ascii by +31? this same 31 offset is found on all other pages of the file using this font. the font descriptor for the descendentfont has \"flags=6\". bit 3 is \"symbolic\". pdf spec 5.7.1 \"font contains glyphs outside the adobe standard latin character set.\" maybe because the font is \"symbolic\" there is not a 1:1 map from codes to ascii. the question is whether the pdf file specifies the +31 offset, and pdfbox fails to properly account for this offset.. i can't find any reference to such an offset in the pdf spec. the 'getfirstchar()' in the descendentfont is -1, but the real value is\"32\". maybe this +31 offset just equals 'firstchar-1'? the real firstchar can be found via: cosdictionary fontdict = (cosdictionary)font.getcosobject(); cosarray descendantfontarray = (cosarray)fontdict.getdictionaryobject(cosname.descendant_fonts); if (descendantfontarray != null) { cosdictionary descendantfontdictionary = (cosdictionary)descendantfontarray.getobject(0); pdfont descendentfont = pdfontfactory.createfont(descendantfontdictionary); encoding encoding = descendentfont.getencoding(); iterator keyiterator = codemap.keyset().iterator(); int firstchar=integer.max_value; while (keyiterator.hasnext()) firstchar = math.min(firstchar,((integer)keyiterator.next()).intvalue()); } other example on page 3 of the document: text \"portfolio of ....\" displays in acrobat reader, but the byte[] contains: [0, 49, 0, 80, 0, 83, 0, 85, 0, 71, 0, 80, 0, 77, 0, 74, 0, 80, 0, 1, 0, 80, 0, 71, 0, 1, 0, 70, 0, 84, 0, 85, 0, 66, 0, 67, 0, 77, 0, 74, 0, 84, 0, 73, 0, 70, 0, 69, 0, 1, 0, 83] again, if +31 is added to each of these 2-byte codes then the ascii is found. where does this \"+31\" come from? acrobat reader gets it right. how about pdfbox?",
        "label": 1
    },
    {
        "text": "illegalargumentexception  symbolic fonts must have a built in encoding happens with text extraction and rendering: exception in thread \"main\" java.lang.illegalargumentexception: symbolic fonts must have a built-in encoding  at org.apache.pdfbox.pdmodel.font.encoding.dictionaryencoding.<init>(dictionaryencoding.java:113)  at org.apache.pdfbox.pdmodel.font.pdsimplefont.readencoding(pdsimplefont.java:126)  at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:131)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:60)  at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:123)  at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60)  at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:829)",
        "label": 6
    },
    {
        "text": "text extraction with pdftextstripper is system file encoding dependent  override does not work  the text extraction depends on the jvm file.encoding setting. the \"override\" new pdftextstripper(\"utf-8\") (since version 0.8.0) has no effect. if there are critical characters in a pdf file, the extracted string differs dependent of the jvm system encoding. it has to be possible to set the encoding for the extraction to ensure same results independent of the default system encoding. sample file: see attachment \"blindtext_mit_bullets.pdf\" bullets #3 to #8 differ using utf-8 vs cp1252 be aware that the file.encoding setting only works if passed while starting the jvm (-dfile.encoding=utf-8). system.setproperty(..) does not work.",
        "label": 1
    },
    {
        "text": "index out of bounds exception while reading large pdf document i am getting java.lang.indexoutofboundsexception while reading large pdf document (800 mb). below is the full stack exception in thread \"main\" org.apache.pdfbox.exceptions.wrappedioexception at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:243) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1071) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1038) at imagedata.addfooter.main(addfooter.java:26) caused by: java.lang.indexoutofboundsexception: index: 3377, size: 3377 at java.util.arraylist.rangecheck(arraylist.java:547) at java.util.arraylist.get(arraylist.java:322) at org.apache.pdfbox.io.randomaccessbuffer.seek(randomaccessbuffer.java:84) at org.apache.pdfbox.io.randomaccessfileoutputstream.write(randomaccessfileoutputstream.java:106) at java.io.bufferedoutputstream.flushbuffer(bufferedoutputstream.java:65) at java.io.bufferedoutputstream.flush(bufferedoutputstream.java:123) at java.io.filteroutputstream.close(filteroutputstream.java:140) at org.apache.pdfbox.pdfparser.baseparser.parsecosstream(baseparser.java:606) at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:566) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:187) ... 3 more",
        "label": 1
    },
    {
        "text": "java lang illegalargumentexception printing pdf [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1578473 originally submitted by miguelc on 2006-10-16 13:09. the following exception occurs when printing a pdf (see estadodecuenta.pdf): java.lang.illegalargumentexception: filtered.length != (width*bpp + 1) * height, 10800 10860w,h,bpp=60,60,3 at org.pdfbox.pdmodel.graphics.predictor.uptimum.checkbufsiz(uptimum.java:52) at org.pdfbox.pdmodel.graphics.predictor.uptimum.decode(uptimum.java:141) at org.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdpixelmap.java:154) at org.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:81) at org.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:452) at org.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:215) at org.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:174) at org.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:104) at org.pdfbox.pdmodel.pdpage.print(pdpage.java:741) at sun.print.rasterprinterjob.printpage(unknown source) at sun.print.rasterprinterjob.print(unknown source) at sun.print.rasterprinterjob.print(unknown source) at org.pdfbox.pdmodel.pddocument.print(pddocument.java:833) at org.pdfbox.printpdf.main(printpdf.java:108) i am using pdfbox 0.7.3, on windows 2000. jre 1.5.0_08.",
        "label": 1
    },
    {
        "text": "generate appearance stream for multiselect listboxes appearancegeneratorhelper.insertgeneratedselectionhighlight() does not yet support multiselect listboxes. two other problems are that the positions are incorrect (at least with the attached file), and that it insists on having at least one element selected. imho it is allowed to have none element selected in a listbox, see attached \"empty\" file, which i created by saving a file with adobe reader that had \"needappearances\" set. i expanded the existing code for multiselect, and corrected the position problem with some trial-and-error.",
        "label": 11
    },
    {
        "text": "pages blank in truncated pdf pages are blank that had content in 2.0.7. this starts with page 20. same with file njtriaypqaag3cyvdrvg34pc6r367x7f crx4mzidrtb4c5n5f4datjx2pbagw6es qsrwizttyrm2dv7ip6thtshs74sfqh3v",
        "label": 1
    },
    {
        "text": " patch  allow compare of glyphs i use this change in fop to allow comparing of glyphs in different pdfs to decide if i can merge fonts",
        "label": 6
    },
    {
        "text": "bad glyph rendering of type font bad glyph rendering for attached pdf file",
        "label": 11
    },
    {
        "text": "nullpointerexception at org apache pdfbox pdmodel common cosarraylist convertfloatcosarraytolist a number of valid pdf documents failing in apache tika 1.14-snapshot (pdf box 2.0.2) on text extraction with following exception: org.apache.tika.exception.tikaexception: unexpected runtimeexception from org.apache.tika.parser.pdf.pdfparser@3e14c16d at org.apache.tika.parser.compositeparser.parse(compositeparser.java:282) at org.apache.tika.parser.parserdecorator.parse(parserdecorator.java:188) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:120) at com.wolterskluwer.atlas.transformer.processfileresources.documentstextextractor.extracttext(documentstextextractor.java:44) at com.wolterskluwer.atlas.transformer.processfileresources.documentstextextractor.main(documentstextextractor.java:134) caused by: java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.common.cosarraylist.convertfloatcosarraytolist(cosarraylist.java:297) at org.apache.pdfbox.pdmodel.font.pdfont.getwidths(pdfont.java:462) at org.apache.pdfbox.pdmodel.font.pdfont.getwidth(pdfont.java:229) at org.apache.pdfbox.pdmodel.font.pdfont.getdisplacement(pdfont.java:212) at org.apache.pdfbox.contentstream.pdfstreamengine.showtext(pdfstreamengine.java:695) at org.apache.pdfbox.contentstream.pdfstreamengine.showtextstring(pdfstreamengine.java:564) at org.apache.pdfbox.contentstream.operator.text.showtext.process(showtext.java:55) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:815) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:472) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:446) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149) at org.apache.pdfbox.text.pdftextstreamengine.processpage(pdftextstreamengine.java:136) at org.apache.pdfbox.text.pdftextstripper.processpage(pdftextstripper.java:391) at org.apache.tika.parser.pdf.pdf2xhtml.processpage(pdf2xhtml.java:144) at org.apache.pdfbox.text.pdftextstripper.processpages(pdftextstripper.java:319) at org.apache.pdfbox.text.pdftextstripper.writetext(pdftextstripper.java:266) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:112) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:151) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280) ... 6 more please, find failing documents and log with exceptions stacktrace in attachments.",
        "label": 11
    },
    {
        "text": "npe when saving encrypted file mailing list user gets this when loading and then saving an encrypted file (of which he didn't know it was encrypted): java.lang.nullpointerexception     at org.apache.pdfbox.pdmodel.encryption.standardsecurityhandler.computerevisionnumber(standardsecurityhandler.java:129)     at org.apache.pdfbox.pdmodel.encryption.standardsecurityhandler.preparedocumentforencryption(standardsecurityhandler.java:332)     at org.apache.pdfbox.pdfwriter.coswriter.write(coswriter.java:1254)     at org.apache.pdfbox.pdfwriter.coswriter.write(coswriter.java:1215)     at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:958)     at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:930)  at the very least, we should bring an illegalstateexception with a useful message telling what to do.",
        "label": 11
    },
    {
        "text": "while reading a pdf which contains image the content of the pdf is misaligned in the resulting text  we are trying to read content of a pdf file, the pdf has images in the header. we use the pdftextstripper.gettext() method. after calling this method the resulting text is misaligned compare to the original pdf.",
        "label": 1
    },
    {
        "text": "pdfprinter does not use getpageable  the print method (print(printerjob job, boolean issilent)) does not use the getpageable() method, but constructs a pdfpageable directly. i think it is better to use that method and is very helpful when someone wants to extend the pdfprinter and pdfpageable to do some custom behaviour.",
        "label": 11
    },
    {
        "text": " patch  ccittfactory createfromfile methods do not release lock on source file when using ccittfactory.createfromfile methods, a randomaccessfile is created on the source file, but never closed. on windows, this locks the file. i haven't had the time yet to test on linux. i have prepared a patch in github, will post as soon as it's pushed.",
        "label": 11
    },
    {
        "text": "imagewriteriterator next  and imagereaderiterator next  can return null see in linked so issue - next() can return null even if hasnext() is true, we should catch this. imageio source code: http://www.docjar.com/html/api/javax/imageio/imageio.java.html",
        "label": 11
    },
    {
        "text": "flattening a pdf with refreshappearances set to true causes a nullpointerexception flattening a pdf with refreshappearances set to true causes a nullpointerexception. this is because some fields do not have a normalappearance set. for example:         try(pddocument pdfdocument = pddocument.load(new file(\"/users/travis/desktop/fdpattachment2.pdf\"))) {             pdfdocument.getdocumentcatalog().getacroform().flatten(pdfdocument.getdocumentcatalog().getacroform().getfields(), true);         } causes: exception in thread \"main\" java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.interactive.form.pdbutton.updatebyvalue(pdbutton.java:356) at org.apache.pdfbox.pdmodel.interactive.form.pdbutton.constructappearances(pdbutton.java:285) at org.apache.pdfbox.pdmodel.interactive.form.pdacroform.refreshappearances(pdacroform.java:348) at org.apache.pdfbox.pdmodel.interactive.form.pdacroform.flatten(pdacroform.java:223) at org.kuali.coeus.sys.pdf.flattenexception.main(flattenexception.java:13) the workaround is pretty simple. just make sure every widget without a normalappearance has one before calling flatten. i would think pdfbox could do a null check internally when trying to refresh appearance.         pdfdocument.getdocumentcatalog().getacroform().getfields()                 .stream()                 .flatmap(f -> f.getwidgets().stream())                 .filter(w -> w.getappearance() == null)                 .foreach(w -> {                     final pdappearancedictionary appearance = new pdappearancedictionary(new cosdictionary());                     appearance.setnormalappearance(new pdappearanceentry(new cosdictionary()));                     w.setappearance(appearance);                 });",
        "label": 8
    },
    {
        "text": "pdtype0font subsetting monospace dejavusansmono hi, we came across the problem that the monospace font dejavusansmono has problems with spaces in strings if they are rendered in a pdf and a pdftype0font is used for subsetting. if a space is placed within the strings the letters from every word are placed overlapping each other, see attached files. seems that the advancedwidth array int the horizontalmetricstable contains a wrong, very low value as 3rd entry after subsetting the font. we compared it with a second monospace font, and it worked there. the difference between the two fonts is that the dejavu mono only contains 4 advancewidth entries and the second one contains an entry for every glyph. this second font was veramono.ttf . the fonts are loaded via pdtype0font.load(doc, fontfile).",
        "label": 11
    },
    {
        "text": "pdpage converttoimage generates white image with no contents when converting a pdpage of this pdf into an image, the resulting file is always a white image with no contents. the following message appeared in the log output (it doesn't seem to be a duplicate of pdfbox-794.) : error filter.flatefilter - stop reading corrupt stream here's the code used to convert the image : @test public void testconvertimage() { try { pddocument pddocument = pddocument.load(\"pdf_causing_white_pages.pdf\"); list<pdpage> documentpagelist = pddocument.getdocumentcatalog().getallpages(); testcase.assertnotnull(documentpagelist); int pagenumber = 1; for (pdpage tmppage :documentpagelist) { bufferedimage tempimage = tmppage.converttoimage(); imageio.write(tempimage,\"jpeg\", new file(\"result_\"+pagenumber+\".jpeg\")); pagenumber ++; } } catch (filenotfoundexception e) { testcase.fail(e.getmessage()); } catch (ioexception e) { testcase.fail(e.getmessage()); } }",
        "label": 1
    },
    {
        "text": "flattening acroform with visible sign field etsi cades detached hallo, i've got a problem with the flattaning function of acroform class of a pdsignaturefield. i've a signed pdf document with etsi.cades.detached visible image at bottom of the file. i want to flattan the pdsignaturefield of the sign to eliminate sign cryptography element of the field and to embad the sign marker immage of the sign, in the same position of the original immage that is a part of the marker sign etsi.cades.detached. i try this way(pseudo code similare to real code): pddocument pddoc = pddocument.load(\"signed-document.pdf\"); pddocumentcatalog pdcatalog = pddoc.getdocumentcatalog(); pdacroform acroform = pdcatalog.getacroform(); list<pdfield> fields = acroform.getfields(); fields.stream().filter(pf -> pf.getfieldtype().tolowercase().contains(\"sig\")).foreach(pf -> { try {       pdsignaturefield pfs = ((pdsignaturefield)(pf));               log.info(\"start remove sign flags\");        pfs.setreadonly(true);        pfs.setrequired(false);        pfs.setnoexport(true);        log.info(\"end remove sign flags\");                log.info(\"start flatten field\");        pfs.getacroform().flatten();        pfs.getacroform().refreshappearances();        log.info(\"end flatten field\");       } catch (exception ex) {    log.error(\"flattenfile --> error: \" + ex.getmessage());    throw new runtimeexception(ex); } }); bytearrayoutputstream baos = new bytearrayoutputstream(); pddoc.save(baos); . . . at the and of the process, the pdf file in output, has no sign cryptography element, but the visible marker immage of the sign is placed in a wrong position, on top of sign above paragraph of the document and not in original position of the signed marker immage. that's happen when i call the following method:        pfs.getacroform().flatten(); in other words, the flattened pdf of the original signed pdf, has in a correct way no more sign inside but, the immage of the etsi.cades.detached signe is embedded in a wrong position, over the text of the nearest above paragraph of the pdf document. my questions are: 1-my way, is the correct way to flattan a signed etsi.cades.detached file? 2-is there a method to remove cades/pades sign with a official visible marker image and, embad immage in the acctual original position in pdf file? thank you for your support and sorry for my poor english. best regards, fabio evangelista",
        "label": 8
    },
    {
        "text": "implement show text with positioning operator  tj  why: the tj operator is required to properly implement text justification in unicode fonts. the word spacing operator (tw) is not sufficient because of note[1] from the pdf specification. github user backslash47 has provided a basic implementation if that is of any help: https://github.com/backslash47/pdfbox/commit/3c528295b16445e58dc9fe895f78384221452be2 thanks, daniel. [1] note: word spacing is applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. it does not apply to occurrences of the byte value 32 in multiple-byte codes. example code: import java.io.inputstream; import java.util.arraylist; import java.util.list; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.pdpage; import org.apache.pdfbox.pdmodel.pdpagecontentstream; import org.apache.pdfbox.pdmodel.pdpagecontentstream.appendmode; import org.apache.pdfbox.pdmodel.common.pdrectangle; import org.apache.pdfbox.pdmodel.font.pdfont; import org.apache.pdfbox.pdmodel.font.pdtype0font; import org.apache.pdfbox.util.matrix; public class textwithpositioningexample {  public static void main(string[] args) throws exception {   doit(\"hello world, this is a test!\", \"justify-example.pdf\");  }  /**   * this example shows how to justify a string using the showtextwithpositioning method.   * first only spaces are adjusted, and then every letter.   */  public static void doit(string message, string outfile) throws exception {   // the document   try (pddocument doc = new pddocument();     inputstream is = pddocument.class.getresourceasstream(\"/org/apache/pdfbox/resources/ttf/liberationsans-regular.ttf\")) {    final float font_size = 20.0f;    // page 1    pdfont font = pdtype0font.load(doc, is, true);    //pdfont font = pdtype1font.courier;    pdpage page = new pdpage(pdrectangle.a4);    doc.addpage(page);        // get the non-justified string width in text space units.    float stringwidth = font.getstringwidth(message) * font_size;        // get the string height in text space units.    float stringheight = font.getfontdescriptor().getfontboundingbox().getheight() * font_size;        // get the width we have to justify in.    pdrectangle pagesize = page.getmediabox();        pdpagecontentstream contentstream = new pdpagecontentstream(doc,      page, appendmode.overwrite, false);       contentstream.begintext();    contentstream.setfont(font, font_size);        // start at top of page.    contentstream.settextmatrix(matrix.gettranslateinstance(0, pagesize.getheight() - stringheight / 1000f));        // first show non-justified.    contentstream.showtext(message);        // move to next line.    contentstream.settextmatrix(matrix.gettranslateinstance(0, pagesize.getheight() - ((stringheight / 1000f) * 2)));        // now show word justified.    // the space we have to make up, in text space units.    float justifywidth = ((pagesize.getwidth() * 1000f) - (stringwidth));        list<object> text = new arraylist<>();    string[] parts = message.split(\"\\\\s\");        float spacewidth = (justifywidth / (parts.length - 1)) / font_size;    for (int i = 0; i < parts.length; i++) {     if (i != 0) {      text.add(\" \");      // positive values move to the left, negative to the right.      text.add(float.valueof(-spacewidth));     }     text.add(parts[i]);    }    contentstream.showtextwithpositioning(text.toarray());    contentstream.settextmatrix(matrix.gettranslateinstance(0, pagesize.getheight() - ((stringheight / 1000f) * 3)));        // now show letter justified.    text = new arraylist<>();    justifywidth = ((pagesize.getwidth() * 1000f) - stringwidth);    float extraletterwidth = (justifywidth / (message.codepointcount(0, message.length()) - 1)) / font_size;        for (int i = 0; i < message.length();) {     if (i != 0) {      text.add(float.valueof(-extraletterwidth));     }          text.add(string.valueof(character.tochars(message.codepointat(i))));          i += character.charcount(message.codepointat(i));    }    contentstream.showtextwithpositioning(text.toarray());;        // finish up.    contentstream.endtext();    contentstream.close();    doc.save(outfile);   }  } }",
        "label": 11
    },
    {
        "text": "image rendering fails  bit per component image  i'm trying to extract an image from a pdf. but somehow pdfbox makes a mess with the image components. i've attached the pdf page and the output image (converted with pdfbox-pdftoimage 2.0.4) perhaps there is a bug in the sampledimagereader?",
        "label": 11
    },
    {
        "text": "split highlight  underline  strikeout and squiggly from text markup annotation ",
        "label": 11
    },
    {
        "text": "not able to list fields i am trying to list form fields using the following code. there is no issue for a few pdf documents but for some i am getting the error - java.lang.nullpointerexception. string pdfsource = \"simple ira app 1.828247.101 & ret acct customer agmt 1.830486.102 \u2013 as of 6-6-08.pdf\"; try { fileoutputstream outputobj; printstream outputfile; string filename = pdfsource.replace(\".\",\"_\") + \".txt\"; outputobj = new fileoutputstream(filename); outputfile = new printstream(outputobj); pddocument document = pddocument.load(pdfsource); try { if (document.isencrypted()) { document.decrypt(\"\"); } } catch (exception e) { system.out.println(\"failed to decrypt document #\"); } list list = document.getdocumentcatalog().getacroform().getfields(); pdfield pdfield; for (int i = 0; i < list.size(); i++) { pdfield = (pdfield) list.get(i); string fldname = pdfield.getpartialname(); outputfile.println(fldname); } document.close(); outputfile.close(); } catch (exception e) { system.out.println(\"error!\" + e); } please let me know what the issue is.",
        "label": 1
    },
    {
        "text": "dctdecode image with separation colorspace not rendered correctly pdf reported by ford wang in the mailing list. the \"herbs\" have weird purple dots. the cause are dctdecode (jpeg) images with a separation colorspace, e.g. root/pages/kids/[0]/resources/xobject/im5267 . the image itself is a grayscale image, i.e. it has only one color component. the separation colorspace is a green (pantone 355 c), which is based on an lab colorspace.",
        "label": 11
    },
    {
        "text": "pdf signing interface and improvments this is a first version of a signing interface for pdfbox. there are some design issues i could not handle without rewriting too much of the code. here we go: incremental update support (tested for signatures with pdf/a compatibility), not compatible with encrypted documents nor with xref-streams cos object improvment cosstring with ability to force writing hexbin for given string cosbase with ability to write direct into a dictionary (that means if this is set, no indirect object will be wrote) (sry hard to explain what i mean, actualy needed for incremental update to lower the rate of indirect objects) cosbase with ability to force writing object (this hook help the coswriter write needed objects for inkremental update) cosname added new names cosdocument some getter and setter for handling new signature and incremental features signatureexception with some exceptions for handling the bunch of new possible errors -parser improvments \u2013 pdfparser saves now the position of the last startxref \u2013 visualsignatureparser (hook for parsing visual signature templates) (it's only for prepared visualisation that should be merged with the document) -io improvments \u2013 cosfilterinput helps to find the proper content that should be hashed / signed \u2013 cosstandardoutputstream is tricky, it helps the writer to jump to the right place in the document \u2013 coswriter got some improvments for incremental update \u2013 coswriterxrefentry needed for incremental updates and writing the new xref table pddocument got a new method addsignature with the needed implementation (do the whole signature stuff) cleanup fields and annotations pdsignature represent the signature dictionary pdsignaturefild / annotation are the visible & unvisible signature representations signature interface and options signatureinterface the interface that shall be implemented for proper signing signatureoptions, some additional options for signing patch splited into pieces sry for spelling, didn't include a spellchecker for english.",
        "label": 0
    },
    {
        "text": "pdfbox build dependencies require updating ant build script for pdfbox 1.2.1 src download (found here: http://www.apache.org/dyn/closer.cgi/pdfbox/1.2.1/pdfbox-1.2.1.jar) uses maven dependencies of fontbox 1.1.0 and jempbox 1.1.0. needs to be updated to fontbox 1.2.1 and jempbox 1.2.1.",
        "label": 1
    },
    {
        "text": "pdf a document validation out of memory hi everyone, validating a customer pdf file, using document.validate() we recognise that if the file itself has an enormous numbers of validation errors, the process goes to outofmemory and at the end the we get the gc error. in our case the file has more than 550.000 errors. so we cannot go head with the conversion to pdf/a.  to avoid this kind of error it could be useful to configure a max number of validation errors to stop the process if this value has been reached. we cannot attach the original document, because it is a customer's file.",
        "label": 11
    },
    {
        "text": "border settings are not honored on some pdf documents i'm using pdfbox to create a pdf rendering plug-in for eclipse. i noticed that my plug-in does not honor the border settings of certain documents and renders them in the bottom-left corner (with no space whatsoever between the document text/graphics and the bottom-left corner of the image canvas). those same documents, however, render correctly when i view them in adobe reader or apple's preview application. i was able to reproduce the same faulty behavior with pdftoimage, so i assume that this problem has nothing to do with my plug-in code. rather than attaching some example documents, i'd rather provide some links (they're public income tax documents anyway): http://www.irs.gov/pub/irs-pdf/f1040sce.pdf (this document renders correctly) http://www.irs.gov/pub/irs-pdf/fw4.pdf (this document renders incorrectly, without proper borders) let me know if you need any further information to properly diagnose this bug.",
        "label": 1
    },
    {
        "text": "make javadocs for trunk builds available via our website in order to help people using the latest trunk versions of pdfbox the javadocs for the main project and the sub projects shall be made available on our website.",
        "label": 8
    },
    {
        "text": "arabic not well converted on pdf document i'm using pdfbox 1.8.5 to convert this pdf file to html on extracttext. seem that arabic content is not well converted. here's option: -html e:\\page0010.pdf.pdf e:\\page0010.html",
        "label": 1
    },
    {
        "text": "npe in fontmapper getfont  i get this with the attached broken file: java.lang.nullpointerexception  at org.apache.pdfbox.pdmodel.font.fontmapper.getfont(fontmapper.java:452)  at org.apache.pdfbox.pdmodel.font.fontmapper.findfont(fontmapper.java:412)  at org.apache.pdfbox.pdmodel.font.fontmapper.findfontboxfont(fontmapper.java:377)  at org.apache.pdfbox.pdmodel.font.fontmapper.getfontboxfont(fontmapper.java:351)  at org.apache.pdfbox.pdmodel.font.pdtype1font.<init>(pdtype1font.java:249)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:98)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.getfonts(resourcesvalidationprocess.java:128)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validatefonts(resourcesvalidationprocess.java:94)  at org.apache.pdfbox.preflight.process.reflect.resourcesvalidationprocess.validate(resourcesvalidationprocess.java:77)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:84)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:57)  at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validateresources(singlepagevalidationprocess.java:169)  at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:84)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:84)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:57)  at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:59)  at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:47)  at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:84)  at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:122)  at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:163)  at com.mycompany.preflightmasstest.preflightchecker.run(preflightchecker.java:52)  at java.util.concurrent.threadpoolexecutor.runworker(unknown source)  at java.util.concurrent.threadpoolexecutor$worker.run(unknown source)  at java.lang.thread.run(unknown source)",
        "label": 6
    },
    {
        "text": "inconsistencies in textpositioncomparator and sortbyposition specifying sortbyposition on pdftextstripper can result in scrambling of text. the problem is caused largely by inconsistencies in textpositioncomparator, which does not always satisfy the required comparator constraint that if a < b and b < c, then a < c. as a result, a true sort is sometimes not achievable. this is caused by the comparator being too flexible with what is regarded as being on the same \"line\". i modified the comparator to be more strict when deciding which characters are on the same line, specifically: 1. two pieces of text can't be on the same line if one's font is double or more the size of the other's. 2. two pieces of text can't be on the same line if one's baseline is more than half the smaller font point size from the other's baseline. i'm sure there are probably (superscript?) cases where these two conditions may be too strict, but at least they should (i think but haven't tried to prove result in a < b < c. the comparator source i have used is below, feel free to use or modify it in any way. finally, pdftextstripper needs to be more discriminating in inserting line breaks. specifically, if the x position of a text segment is < the x position of the last text segment, the there is an implicit line-break. to fix this, i changed:      if(!overlap(positiony, positionheight, maxyforline, maxheightforline)) to:      if(!overlap(positiony, positionheight, maxyforline, maxheightforline) || (sortbyposition && positionx < lastposition.getxdiradj())) revised comparator source: public class textpositioncomparator implements comparator {         private int strictcompare(object o1, object o2)  {   textposition pos1 = (textposition)o1;         textposition pos2 = (textposition)o2;                  // get the text direction adjusted coordinates                  float pos1ybottom = pos1.getydiradj();         float pos2ybottom = pos2.getydiradj();         if (pos1ybottom < pos2ybottom)          return -1;         else if (pos1ybottom > pos2ybottom)          return 1;                  float x1 = pos1.getxdiradj();         float x2 = pos2.getxdiradj();                  if (x1 < x2)          return -1;         else if (x1 > x2)          return 1;                  return 0;  }    public int compare(object o1, object o2)  {   textposition pos1 = (textposition)o1;         textposition pos2 = (textposition)o2;         /* only compare text that is in the same direction. */         if (pos1.getdir() < pos2.getdir())             return -1;         else if (pos1.getdir() > pos2.getdir())             return 1;         float size1 = pos1.getfontsize();         float size2 = pos2.getfontsize();                  if (size1 <= size2/2 || size1 >= size2*2)          return strictcompare(o1, o2);         float fontsize = size1;                  if (size2 < size1)          fontsize = size2;                  float pos1ybottom = pos1.getydiradj();         float pos2ybottom = pos2.getydiradj();         if (pos1ybottom <= pos2ybottom - fontsize/2 || pos1ybottom >= pos2ybottom + fontsize/2)          return strictcompare(o1, o2);                  // get the text direction adjusted coordinates         float x1 = pos1.getxdiradj();         float x2 = pos2.getxdiradj();         if (x1 < x2)          return -1;         else if (x1 > x2)          return 1;                  return 0;  } } ymmv.",
        "label": 1
    },
    {
        "text": "pdftextstripper isparagraphseparation  pdftextstripper.isparagraphseparation(...) seems to have an issue with how it finds y text indentation. problem: i believe the issue is due to precision in the the following logic:             float ygap = math.abs(position.gettextposition().getydiradj()-                     lastposition.gettextposition().getydiradj());             float xgap = (position.gettextposition().getxdiradj()-                     lastlinestartposition.gettextposition().getxdiradj());             if(ygap > (getdropthreshold()*maxheightforline))             {                         result = true; ygap has a precision to 1000th+, while (getdropthreshold()*maxheightforline) has a precision to 100,000th. resulting in the following comparison (example): 16.018 > 16.018005 which evaluates to \"true\". however 16.018 > 16.018 would evaluate to \"false\". effect of the problem: every line in the output is marked as \"isparagraphstart = true\" and \"writeparagraphend() ... = true\". i.e. new_line paragraph_start pdfbox has been designed to represent pdf documents using familiar object-oriented paradigms. the data new_line contained in a pdf document is a collection of basic object types: arrays, booleans, dictionaries, numbers,|||new_line||| paragraph_end new_line paragraph_start strings and binary streams. pdfbox captures these basic object types in the org.pdfbox.cos package (the new_line cos model). while it's possible to create any desired interactions with a pdf document using only these|||new_line||| paragraph_end new_line in the source pdf these lines appear as such: \"pdfbox has been designed to represent pdf documents using familiar object-oriented paradigms. the data contained in a pdf document is a collection of basic object types: arrays, booleans, dictionaries, numbers, strings and binary streams. pdfbox captures these basic object types in the org.pdfbox.cos package (the cos model). while it's possible to create any desired interactions with a pdf document using only these\" my workaround: note: there is a small performance hit with this workaround.   float ygap = math.abs(position.gettextposition().getydiradj()   - lastposition.gettextposition().getydiradj());     decimalformat df = new decimalformat(\"#.00\");   float ygaptruncated = float.valueof(df.format(ygap));     float newyval = float.valueof(df.format(getdropthreshold()   * maxheightforline));",
        "label": 1
    },
    {
        "text": "some  iccbased colorspaces not rendered correctly i have created a test file from postscript to show that cielab and xyz some colors are different when rendered by pdfbox. btw the rgb colors in the file have no meaning, nor do the colors have a relationship between each others, i.e. they do not have to look identical to any other color anywhere. the postscript file was created based on files by james cloos.",
        "label": 11
    },
    {
        "text": "java lang arrayindexoutofboundsexception in inlineimage i get this with page 8 of the attached file: 13.02.2014 20:10:10.809 warn [main] org.apache.pdfbox.util.pdfstreamengine:546 - java.lang.arrayindexoutofboundsexception: 4 java.lang.arrayindexoutofboundsexception: 4 at org.apache.pdfbox.filter.tifffaxdecoder.decodet6(tifffaxdecoder.java:1153) at org.apache.pdfbox.filter.ccittfaxdecodefilter.decode(ccittfaxdecodefilter.java:126) at org.apache.pdfbox.pdmodel.graphics.xobject.pdinlinedimage.createimage(pdinlinedimage.java:161) at org.apache.pdfbox.util.operator.pagedrawer.begininlineimage.process(begininlineimage.java:60) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:533) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:261) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:236) at org.apache.pdfbox.pdfviewer.pagedrawer.drawtype3string(pagedrawer.java:444) at org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(pagedrawer.java:295) at org.apache.pdfbox.util.pdfstreamengine.processencodedtext(pdfstreamengine.java:489) at org.apache.pdfbox.util.operator.showtext.process(showtext.java:44) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:533) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:261) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:227) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:209) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:151) at org.apache.pdfbox.util.renderutil.renderpage(renderutil.java:212) at org.apache.pdfbox.util.renderutil.converttoimage(renderutil.java:177) at pdfboxpageimageextraction.extractimages.dopdf(extractimages.java:273) at pdfboxpageimageextraction.extractimages.main(extractimages.java:77) some observations: i can't see what image is missing when rendered the data read between id and ei (see http://www.verypdf.com/document/pdf-format-reference/pg_0352.htm ) includes the lf (0x0a). i tried to remove that in debugging, but the exception came anyway.",
        "label": 6
    },
    {
        "text": "getglyphs returns empty array now truetypefont x = new ttfparser().parse(\"arial.ttf\"); glyphdata[] y = x.getglyph().getglyphs();",
        "label": 11
    },
    {
        "text": "slow string to hex conversion in tounicodewriter the tounicodewriter.writeto(outputstream) method converts a lot of shorts and strings to hexadecimal strings. this is done with string.format and therefore not very efficient. the tounicodewriter.tohex(int) and tounitcodewriter.stringtohex(string) methods could be rewritten to generate a char-array and being generally more efficient.",
        "label": 11
    },
    {
        "text": "problem displaying document created by pdfbox 0rc3 in acrobat reader as reported by john liston in the user mailing list: a document generated using pdfbox 2.0.0-rc3 cannot be read fully by the latest version of adobe acrobat reader, which says \"an error exists on this page. acrobat may not display the page correctly. please contact the person who created the pdf document to correct the problem.\" the identical document created using pdfbox 1.8.11 reads in acrobat reader just fine. after using acrobat pro to increase the width of the bounding box around the first page text \"can this amount change after closing?\", the rest of the text on the page showed up. the same problem showed up with other text on the following pages. both documents read and display properly using pdfbox pdfdebugger. files from 1.8 and 2.0rc3 are attached. analysis showed one bug that has already been fixed (pdfbox-3240). the other bug is that everywhere where there's an \"n n n sc\" command, /devicergb cs  is missing before except the first time it is used. inserting it makes it work again. pdf-tools also complains about an incorrect number of operators if the colorspace isn't set. in 1.8 different operators are used (rg instead of sc).",
        "label": 11
    },
    {
        "text": "signature byte range is invalid on person send me a unsigned pdf document. he wanted to sign it. when i try to sign it (using pad box), i have some problem. after signing adobe reader tells me \"the signature byre range is invalid\". i will attach original and signed document. i think, it is pdf box parser error. another signature libraries sign document very well. i'm searching the problem at the moment, in order to fix it.",
        "label": 1
    },
    {
        "text": "potential npe in pdmarkedcontent getmcid  i do not have a test case, but this method in pdmarkedcontent is obviously wrong:     public int getmcid()     {         return this.getproperties() == null ? null :             this.getproperties().getint(cosname.mcid);     } if getproperties() is null, the method tries to convert null integer value to an int. i believe the intention was rather: ...         return this.getproperties() == null ? 0 : ...",
        "label": 11
    },
    {
        "text": "pddocument load  give error  expected a long type at offset i run this simple program with the file in attachment (scanned ocr document from nuance omnipage 18) public static void main(string[] args) throws exception { system.out.println(\"start splitfiletest...\"); string path = \"d:\\\\test\\\\batch\\\\scan_manual\\\\courrier\\\\david.keller\\\\\"; string pdffile = path + \"14 01 2014.pdf\"; fileinputstream pdfinputstream = new fileinputstream(pdffile); pddocument pddocument = pddocument.load(pdfinputstream); list<pdpage> pages = pddocument.getdocumentcatalog().getallpages(); pdfinputstream.close(); } and with the 1.8.0 version i have this error : java.io.ioexception: error: expected an integer type, actual='12977[373' at org.apache.pdfbox.pdfparser.baseparser.readint(baseparser.java:1622) at org.apache.pdfbox.pdfparser.pdfobjectstreamparser.parse(pdfobjectstreamparser.java:100) at org.apache.pdfbox.cos.cosdocument.dereferenceobjectstreams(cosdocument.java:604) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:226) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1187) and i have just builded the 2.0.0 from the last code source and i have this error : java.io.ioexception: error: expected a long type at offset 1633 at org.apache.pdfbox.pdfparser.baseparser.readlong(baseparser.java:1682) at org.apache.pdfbox.pdfparser.pdfobjectstreamparser.parse(pdfobjectstreamparser.java:100) at org.apache.pdfbox.cos.cosdocument.dereferenceobjectstreams(cosdocument.java:663) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:244) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1101) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1069)",
        "label": 11
    },
    {
        "text": "using threads results in different images if i dont use threads images are the same java -cp pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar:. comparepdf exception in thread \"main\" java.io.ioexception: not equals at comparepdf.main(comparepdf.java:21)",
        "label": 1
    },
    {
        "text": "maven pom xml   directory structure incorrect for the jempbox incubating release the version number in the pom.xml for the jempbox 0.8-incubating release is incorrectly set to \"0.8.0-incubator\" rather than \"0.8.0-incubating\" also the directory structure in the maveb2 repo is also incorrect: http://repo1.maven.org/maven2/org/apache/pdfbox/jempbox/0.8.0-incubator/ ..it should be http://repo1.maven.org/maven2/org/apache/pdfbox/jempbox/0.8.0-incubating/ i believe this needs a new releass to fix this.",
        "label": 7
    },
    {
        "text": "differences in overlay stamping between version and hello, i try to overlay pdf file with other pdf pages. so to say to stamp the first page with a title page and for the following pages i want to stamp the head and also the foot of each page. i want to use the version 1.8.6 of pdfbox. i tried last time with the version 1.8.2 with success, but now i struggle because my pdf view tells me that the stamped pdf is demaged. just to explain the attached files: dok1.pdf = original out.2.pdf = stamped with 1.8.6 out.3.pdf = stamped with 1.8.2 so what is the difference between 1.8.2 and 1.8.6 in this case? kind regards markus",
        "label": 1
    },
    {
        "text": "greek text extraction greek text extraction error \u03b9 have a greek pdf but a) after extraction the greek letter \u03c0 is extracted as pi for expamle original text in pdf \"\u03c6\u03c5\u03c3\u03b9\u03ba\u03ce\u03bd \u03c0\u03c1\u03bf\u03c3\u03ce\u03c0\u03c9\u03bd\" extracted text \"\u03c6\u03c5\u03c3\u03b9\u03ba\u03ce\u03bd pi\u03c1\u03bf\u03c3\u03cepi\u03c9\u03bd\" b) the greek letter \u03bc is displayed as \u00b5 there is no difference in display except that is different encoding and when searching for \u03bc cannot find it (you find only the uppercase \u03bc) if you copy \u03bc as displayed search for that is working fine e.g. the word is displayed as \"\u03ba\u03bb\u03af\u00b5\u03b1\u03ba\u03b1\u03c2\" but it is different from the typed word \u03ba\u03bb\u03af\u03bc\u03b1\u03ba\u03b1 due to the letter \u03bc due to this problem solr is not indexing documents correctly is there any configuration i can make?",
        "label": 1
    },
    {
        "text": " patch  improved signing of existing signature fields ii in a previous patch (pdfbox-3547) the handling for existing signature fields was improved. this patch improves it further by reducing the number of (unecessary) parameters for that use case...",
        "label": 11
    },
    {
        "text": "regressions oct there are some regressions that have happened within the last month, maybe within the last weekend. bugzilla886049.pdf: the shapes at the top and at the bottom are different pdfbox-1735.pdf: the jpeg2000 image is now at the bottom of the image, before it was 5mm above the border www.google.de-pdfbox-1295.pdf: the google chrome icon is missing pdfbox-1452.pdf: the yellow question mark is missing",
        "label": 1
    },
    {
        "text": "update pom in parent project to support maven build in eclipse indigo to be able to build the project using eclispe indigo (3.7.1) the artifact org.apache:apache must be update to a version greater than 6.",
        "label": 1
    },
    {
        "text": "merge does not close input streams as explained in the linked so post: merge closes the source documents, but not the source streams. one can call addsource() with a file object and then there would be no way for the caller to close the inputstream, so that would be a bug for sure. not yet sure what to do when called with streams.",
        "label": 1
    },
    {
        "text": "add reference to ecm rewoo scope hello, we, rewoo technologies ag, are a software company in germany and provide the enterprise content managment product rewoo scope which uses the pdfbox library to read and index pdf documents. we would like to ask to be added to your reference page http://pdfbox.apache.org/references.html as suggested on that page. suggested text for the reference page: project name: ecm rewoo scope project link: http://www.rewoo.de license: commercial project description: rewoo scope is an enterprise content management (ecm) software to organize, structure and consolidate enterprise data. pdfbox is an integral part to read and index pdf documents. thank you in advance best greetings from karlsruhe, germany",
        "label": 1
    },
    {
        "text": "using fallback font 'timesnewromanpsmt' for 'wingdings' the attached file has the non embedded \"wingdings\" font. that one is available on windows, however its name is \"wingdings-regular\" so it doesn't match.",
        "label": 1
    },
    {
        "text": "exception in thread  main  java lang illegalstateexception  call to processsubstream  before processstream  or initstream  in pdf from pdfbox-607 java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage example2.pdf exception in thread \"main\" java.lang.illegalstateexception: call to processsubstream() before processstream() or initstream()",
        "label": 11
    },
    {
        "text": "improve pdfdebugger (this is an idea for the google summer of code 2015) our command line utility pdfdebugger (part of the command line pdfbox-app get it here, read description here, see the source code here) needs some improvements: hex view view of non printable characters \u2713 saving streams binary copy & paste \u2713 create a status line that shows where we are in the tree. (like in the windows regedit) \u2713 copy the current tree string into the clipboard (useful in discussions about details of a pdf) \u2713 (optional, not sure if easy) jump to specific place in the tree by entering tree string \u2713 ability to search in streams (very useful for content streams and meta data) \u2713 show images that are streams \u2713 show pdindexed color lookup table, show the index value, the base and rgb color value sets when the mouse moves \u2713 show pdseparation color \u2713 show pddevicen colors optional, idea should be developed a bit: show meaningful explanation on some attributes, e.g. \"appearance stream\" when hovering over /ap show font encodings and characters \u2713 display flag bits (e.g. annotation flags) in a way that is easy to understand. there are probably others, i assume that the main work needs to be done only once edit attributes (should be possible to enter values as decimal, hex or binary) edit streams, while keeping or changing the compression filter save altered pdf \u2713 color mark of certain pdf operators, especially q...q and text operators (bt...et). ideally, it should help the user understand the \"bracketing\" of these operators, i.e. understand where a sequence starts and where it ends. (see \"operator summary\" in the pdf spec) other \"important\" operators i can think of are the matrix, font and color operators. a cool advanced thing would be to show the current color or the font in a popup when hovering above such an operator. to see a product with a similar purpose that is better than pdfdebugger, watch this video. i'm not asking to implement a clone of that product (i don't use it, all i know is that video), but we at pdfbox really need something that makes pdf debugging easier. as an example of how the current pdfdebugger prevented me from finding a bug quickly, see pdfbox-2401 and search for \"pdfdebugger\". prerequisites: java programming, especially the gui components the ability to understand existing source code using external software components is possible (must have apache license or a compatible one), but should be decided on a case-by-case basis, we don't want to get too big. development strategy: go from the easy to the difficult. the wished features are already sorted this way (mostly). get introduced: download the source code with svn and build it with maven. run pdfdebugger and view some pdfs to see the components of a pdf. start with the file of pdfbox-2401. read up something about the structure of pdf on the web or from the pdf specification. mentor: tilman hausherr (european timezone, languages: german, english, french). to see the gsoc2014 project i mentored, go to pdfbox-1915.",
        "label": 13
    },
    {
        "text": "expose the tiff compression type to the user  allow the user to set the compression type of tiff files externally. in the current version, the class imageioutil uses tiffutil.setcompressiontype and this sets the compression only to \"ccitt t.6\" or \"lzw\". other choice could be allow the jpeg compression that is more efficient. it already has a todo in code (// todo expose this choice to the user?) thank you.",
        "label": 11
    },
    {
        "text": "dateconverter tocalendar doesn't clear milliseconds field i've just discovered that dateconverter.tocalendar(string date) doesn't clear the milliseconds field from the calendar entries it returns. this means that if you turn the calendar object into a string, the return isn't stable, so your unit tests break it looks to me that as the pdf format doesn't store to that level of detail, it should always be zero'd out, rather than being left to hold the milliseconds of the time you make the call. this snippet is a failing unit test that shows the issue: public void testdateconversion() throws exception { calendar c = dateconverter.tocalendar(\"d:20050526205258+01'00'\"); assertequals(2005, c.get(calendar.year)); assertequals(05-1, c.get(calendar.month)); assertequals(26, c.get(calendar.day_of_month)); assertequals(20, c.get(calendar.hour_of_day)); assertequals(52, c.get(calendar.minute)); assertequals(58, c.get(calendar.second)); assertequals(0, c.get(calendar.millisecond)); } adding \"retval.set(calendar.millisecond, 0)\" to the bottom of the method ought to fix it i'd think.",
        "label": 7
    },
    {
        "text": "illegalargumentexception  illegal capacity   i got an exception to extract txt or html from pdf file: org.apache.tika.exception.tikaexception: unexpected runtimeexception from org.apache.tika.parser.pdf.pdfparser@429568e8  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:282)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280)  ... caused by: java.lang.illegalargumentexception: illegal capacity: -1  at java.util.arraylist.<init>(arraylist.java:142)  at org.apache.pdfbox.pdfparser.pdfobjectstreamparser.parse(pdfobjectstreamparser.java:72)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectstream(cosparser.java:845)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:748)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:673)  at org.apache.pdfbox.pdfparser.cosparser.parsedictobjects(cosparser.java:633)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:241)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:276)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1143)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1077)  at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:149)  at org.apache.tika.parser.compositeparser.parse(compositeparser.java:280)  ... 25 more",
        "label": 1
    },
    {
        "text": "set default params in jbig2filter currently jbig2filter does not set read params. this causes noise because jbig2-imageio logs this before using default params (e.g. see this comment). this patch explicitly uses the default params, which would solve that: index: pdfbox/src/main/java/org/apache/pdfbox/filter/jbig2filter.java =================================================================== --- pdfbox/src/main/java/org/apache/pdfbox/filter/jbig2filter.java      (revision 1650041) +++ pdfbox/src/main/java/org/apache/pdfbox/filter/jbig2filter.java      (working copy) @@ -85,7 +85,7 @@              bufferedimage image;              try              { -                image = reader.read(0); +                image = reader.read(0, reader.getdefaultreadparam());              }              catch (exception e)              {",
        "label": 11
    },
    {
        "text": "pdfmergerutility  java io ioexception  error  can't convert to destination cosarray cosname xyz  given a problematic pdf, there can be an ioexception when merging two pdfs, causing the merge to fail. problematic example pdf: http://www.ecpol.econ.uni-muenchen.de/downloads/wipo2/wise09_10/uebung/dusonmevenroeller.pdf   provoking command line: java -jar pdfbox-app-2.0.9.jar pdfmerger dusonmevenroeller.pdf dusonmevenroeller.pdf out.pdf   stacktrace: exception in thread \"main\" java.io.ioexception: error: can't convert to destination cosarray{[cosname{xyz}]}  at org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.pddestination.create(pddestination.java:98)  at org.apache.pdfbox.pdmodel.pddocumentcatalog.getopenaction(pddocumentcatalog.java:275)  at org.apache.pdfbox.multipdf.pdfmergerutility.appenddocument(pdfmergerutility.java:348)  at org.apache.pdfbox.multipdf.pdfmergerutility.mergedocuments(pdfmergerutility.java:263)  at org.apache.pdfbox.tools.pdfmerger.merge(pdfmerger.java:70)  at org.apache.pdfbox.tools.pdfmerger.main(pdfmerger.java:49)  at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:81)",
        "label": 11
    },
    {
        "text": "pdtype1font getnameinfont string  very slow when unicode fallback is used when the method is called on a non-embedded font and the unicode fallback is used, the line \"string uniname = string.format(\"uni%04x\", unicodes.codepointat(0));\" is called and it is very slow. i suggest either adding a cache (codepoint to uniname) or at least replace the string.format call with something different, as this internally invokes a new regexp matcher etc. something like the following might do the trick (maybe you have a better utility classes):         final stringbuilder aid = new stringbuilder (integer.tostring (unicodes.codepointat (0), 16).touppercase (locale.us));         while (aid.length () < 4)              aid.insert (0, '0');         aid.insert (0, \"uni\");         final string uniname = aid.tostring ();",
        "label": 11
    },
    {
        "text": "pdsignature should return byte range as long array fix for pdfbox-1196 should be propagated to pdsignature, which should return the byte range, that this signature covers, as long array (currently - int array).",
        "label": 10
    },
    {
        "text": "alphacomposite with rule not supported while fetching images from pdf files, getting error got as \"alphacomposite with rule 6 not supported\". image extracted from pdf file is a blank image.",
        "label": 1
    },
    {
        "text": "rendering at dpi crashes java rendering the attached file crashes java. it happens only at 72 dpi. it can be reproduced with the pdftoimage cmd app, not with pdfreader.",
        "label": 6
    },
    {
        "text": "illegalargumentexception  root must be of type pages java.lang.illegalargumentexception: root must be of type pages  at org.apache.pdfbox.pdmodel.pdpagetree.<init>(pdpagetree.java:66)  at org.apache.pdfbox.pdmodel.pddocumentcatalog.getpages(pddocumentcatalog.java:125)  at org.apache.pdfbox.pdmodel.pddocument.getnumberofpages(pddocument.java:1175) the cause is this << /count 11  /kids [ 100 0 r 141 0 r ] >> endobj /type /pages is missing.",
        "label": 6
    },
    {
        "text": "ioexception  expected ' ' actual 'e' [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1485485 originally submitted by sajitjacob on 2006-05-10 04:06. get the following exception when loading a pdf created by imagemagick exception in thread \"main\" java.io.ioexception: expected='/' actual='e'-101 org.pdfbox.io.pushbackinputstream@9 at org.pdfbox.pdfparser.baseparser.parsecosname (baseparser.java:774) at org.pdfbox.pdfparser.baseparser.parsecosdictionary (baseparser.java:217) at org.pdfbox.pdfparser.baseparser.parsedirobject (baseparser.java:910) at org.pdfbox.pdfparser.pdfparser.parseobject (pdfparser.java:432) at org.pdfbox.pdfparser.pdfparser.parse (pdfparser.java:176) at org.pdfbox.pdmodel.pddocument.load (pddocument.java:579) at org.pdfbox.pdmodel.pddocument.load (pddocument.java:549) at org.pdfbox.extractimages.extractimages (extractimages.java:124) at org.pdfbox.extractimages.main (extractimages.java:74) [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1485485&file_id=177454 pages-000.pdf (application/pdf), 17898 bytes imagemagick created pdf [comment on sourceforge] originally sent by francois248. logged in: yes user_id=1606233 hi, i am facing the same problem when upgrating a tools that produce pdf file. i can send a test case too if needed. is there a workaround to avoid it? fran\u00e3\u00a7ois",
        "label": 12
    },
    {
        "text": "ioexception  could not read embedded ttf for font timesnewroman java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage -nonseq test_setcharspacing_error.pdf sep 5, 2014 10:56:40 am org.apache.pdfbox.pdfparser.nonsequentialpdfparser validatestreamlength severe: the end of the stream doesn't point to the correct offset, using workaround to read the stream sep 5, 2014 10:56:40 am org.apache.pdfbox.pdfparser.nonsequentialpdfparser validatestreamlength severe: the end of the stream doesn't point to the correct offset, using workaround to read the stream sep 5, 2014 10:56:40 am org.apache.pdfbox.filter.flatefilter decode severe: flatefilter: stop reading corrupt stream due to a dataformatexception sep 5, 2014 10:56:40 am org.apache.pdfbox.filter.flatefilter decode severe: flatefilter: stop reading corrupt stream due to a dataformatexception sep 5, 2014 10:56:40 am org.apache.pdfbox.filter.flatefilter decode severe: flatefilter: stop reading corrupt stream due to a dataformatexception sep 5, 2014 10:56:40 am org.apache.pdfbox.filter.flatefilter decode severe: flatefilter: stop reading corrupt stream due to a dataformatexception sep 5, 2014 10:56:40 am org.apache.pdfbox.filter.flatefilter decode severe: flatefilter: stop reading corrupt stream due to a dataformatexception sep 5, 2014 10:56:40 am org.apache.pdfbox.filter.flatefilter decode severe: flatefilter: stop reading corrupt stream due to a dataformatexception sep 5, 2014 10:56:40 am org.apache.pdfbox.filter.flatefilter decode severe: flatefilter: stop reading corrupt stream due to a dataformatexception sep 5, 2014 10:56:40 am org.apache.pdfbox.filter.flatefilter decode severe: flatefilter: stop reading corrupt stream due to a dataformatexception sep 5, 2014 10:56:40 am org.apache.pdfbox.filter.flatefilter decode severe: flatefilter: stop reading corrupt stream due to a dataformatexception sep 5, 2014 10:56:40 am org.apache.pdfbox.filter.flatefilter decode severe: flatefilter: stop reading corrupt stream due to a dataformatexception exception in thread \"main\" java.io.ioexception: could not read embedded ttf for font timesnewroman  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.<init>(pdtruetypefont.java:116)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:73)  at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:171)  at org.apache.pdfbox.util.pdfstreamengine.getfonts(pdfstreamengine.java:543)  at org.apache.pdfbox.util.operator.text.settextfont.process(settextfont.java:48)  at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:510)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:275)  at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:240)  at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:194)  at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:176)  at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:228)  at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:160)  at org.apache.pdfbox.rendering.pdfrenderer.renderimagewithdpi(pdfrenderer.java:109)  at org.apache.pdfbox.tools.pdftoimage.main(pdftoimage.java:265)  at sun.reflect.nativemethodaccessorimpl.invoke0(native method)  at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:39)  at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:25)  at java.lang.reflect.method.invoke(method.java:597)  at com.intellij.rt.execution.application.appmain.main(appmain.java:134) caused by: java.io.ioexception: java.util.zip.dataformatexception: invalid block type  at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:83)  at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:365)  at org.apache.pdfbox.cos.cosstream.dodecode(cosstream.java:286)  at org.apache.pdfbox.cos.cosstream.getunfilteredstream(cosstream.java:189)  at org.apache.pdfbox.pdmodel.common.pdstream.createinputstream(pdstream.java:232)  at org.apache.pdfbox.pdmodel.font.pdtruetypefont.<init>(pdtruetypefont.java:108)  ... 18 more caused by: java.util.zip.dataformatexception: invalid block type  at java.util.zip.inflater.inflatebytes(native method)  at java.util.zip.inflater.inflate(inflater.java:238)  at java.util.zip.inflater.inflate(inflater.java:256)  at org.apache.pdfbox.filter.flatefilter.decompress(flatefilter.java:101)  at org.apache.pdfbox.filter.flatefilter.decode(flatefilter.java:74)  ... 23 more",
        "label": 11
    },
    {
        "text": "how to access a pdoutlinenode object's parent without using its protected menthod getparent    i have some java codes that depend on the getparent() method to traverse the pdoutlinenode structure. they works fine with old version of pdfbox since this method is declared as a public method. now it is changed to protected in the new version 1.1.0. how should i make my code work without extending or subclassing pdoutlinenode?",
        "label": 0
    },
    {
        "text": "can't sign pdf document with forms or annotations it is not possible to sign a pdf document which contains a form. there is no exception traces. please find attached 8 documents : a document with a visual signature form (does not work) (doc1) a probably latex generated document (does not work) (doc2) a document with an annotation (does not work) (doc3withannot) and the same document without annotation ( which works well ) (doc3withoutannot) and their signed release.",
        "label": 11
    },
    {
        "text": " illegal instruction   with pdftoimage attached file (page 4 from http://www.researchgate.net/publication/237090017_paper_110 ) crashes jdk when rendered with 73, 100, 200 or 400 dpi but not with 72 or 300 dpi.",
        "label": 6
    },
    {
        "text": "wrong calculation of space char width in pdfstreamengine pdfstreamengine calculates width of space character wrongly. page's content stream contains this operation: \"0 12 -12 0 562.3199 372.7105 tm\" and that causes pdfstreamengine calculate width of \" \" to value 0",
        "label": 1
    },
    {
        "text": "wrong revisionnumber when disabling all permissions and using 128bit encryption when disabling all permissions and using a 128bit encryption the following exception is thrown when saving the pdf document: org.apache.pdfbox.exceptions.cosvisitorexception: error: expected length=5 actual=16 at org.apache.pdfbox.pdfwriter.coswriter.write(coswriter.java:1022) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:911) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:892) at pdfbox.main.main(main.java:53) this is reproducable with the following code: public class main { public static void main(string[] args) { try { accesspermission ap = new accesspermission(); standardprotectionpolicy spp = null; ap.setcanassembledocument(false); ap.setcanextractcontent(false); ap.setcanextractforaccessibility(false); ap.setcanfillinform(false); ap.setcanmodify(false); ap.setcanmodifyannotations(false); ap.setcanprint(false); ap.setcanprintdegraded(false); spp = new standardprotectionpolicy(null, null, ap); spp.setencryptionkeylength(128); pddocument document = null; fileinputstream sourcefile = new fileinputstream(new file(\"c:\\\\web\\\\netbeansprojects\\\\pdfbox\\\\test.pdf\")); document = pddocument.load(sourcefile); document.protect(spp); document.save(\"c:\\\\web\\\\netbeansprojects\\\\pdfbox\\\\test_encrypted.pdf\"); document.close(); } catch (exception ex) { logger.getlogger(main.class.getname()).log(level.severe, null, ex); } } } the problem is based on \"computerevisionnumber\" in \"standardsecurityhandler.java\". if all flags are disabled, the routine returns a value of 2. but if the 128bit encryption is enabled, the revision should be 3. if not, the method \"computeuserpassword\" will fail. a solution would be to check the key length in \"computerevisionnumber\". private int computerevisionnumber() { if(version == 2 && !policy.getpermissions().canfillinform() && !policy.getpermissions().canextractforaccessibility() && !policy.getpermissions().canprintdegraded() && keylength == 40 ) { return 2; } return 3; }",
        "label": 1
    },
    {
        "text": "pdf2image hangs loops forever processing pdf when the attached pdf file is rendered to a jpg image it causes pdfbox to loop forever. the problem is easily produced using the pdfbox example org.apache.pdfbox.pdf2image with the following command line options:- imagetype jpg -outputprefix out hang.pdf the fault is new to 1.8.4. as a workaround, we are using 1.8.3 which does not suffer. we have found many such files and have identified this one as i can share it publicly.",
        "label": 1
    },
    {
        "text": "saving merged documents causes ioexception when some documents are used within a merge, it is not more possible to save the resulting pddocument, calling method pddocument.save() throws \"java.io.ioexception: cosstream has been closed and cannot be read. perhaps its enclosing pddocument has been closed?\" exception in thread \"main\" java.io.ioexception: cosstream has been closed and cannot be read. perhaps its enclosing pddocument has been closed?  at org.apache.pdfbox.cos.cosstream.getfilteredstream(cosstream.java:163)  at org.apache.pdfbox.pdfwriter.coswriter.visitfromstream(coswriter.java:1147)  at org.apache.pdfbox.cos.cosstream.accept(cosstream.java:280)  at org.apache.pdfbox.cos.cosobject.accept(cosobject.java:158)  at org.apache.pdfbox.pdfwriter.coswriter.dowriteobject(coswriter.java:538)  at org.apache.pdfbox.pdfwriter.coswriter.dowritebody(coswriter.java:450)  at org.apache.pdfbox.pdfwriter.coswriter.visitfromdocument(coswriter.java:1031)  at org.apache.pdfbox.cos.cosdocument.accept(cosdocument.java:464)  at org.apache.pdfbox.pdfwriter.coswriter.write(coswriter.java:1307)  at org.apache.pdfbox.pdfwriter.coswriter.write(coswriter.java:1215)  at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:944)  at ch.ge.afc.ael.commun.piecejointe.test.main(test.java:37) for instance, problem occures with testpopupannotation.pdf when i try to merge it to testpdf.pdf (see http://svn.apache.org/repos/asf/tika/trunk/tika-parsers/src/test/resources/test-documents/ for these 2 documents) test.java public static void main(string[] args) throws exception {  file dir = new file(\"d:/temp/b\");  pdfmergerutility pdfmerge = new pdfmergerutility();  pddocument targetdocument = new pddocument();  pdfparser ns = new pdfparser(new file(dir, \"testpdf.pdf\"));  ns.parse();  pddocument pdddocument1 = ns.getpddocument();  pdfmerge.appenddocument(targetdocument, pdddocument1);  pdddocument1.close();  ns = new pdfparser(new file(dir, \"testpopupannotation.pdf\"));  ns.parse();  pddocument pdddocument2 = ns.getpddocument();  pdfmerge.appenddocument(targetdocument, pdddocument2);  pdddocument2.close();  pdfmerge.mergedocuments();  fileoutputstream fout = new fileoutputstream(new file(dir, \"targetdocument.pdf\"));  targetdocument.save(fout); }",
        "label": 11
    },
    {
        "text": "pdstructureelement getattributes  ignores reference objects attribute dictionaries attached to a structure element may be either direct or references.  getattributes() handles the direct case but ignores object references without error messages.  this can also lead to invalid revision numbers attached to the attribute dictionaries it does handle properly.   the fix would be to add another branch to the iteration loop in pdstructureelement.getattributes(), to handle object references.",
        "label": 11
    },
    {
        "text": " patch  invalid color space preflight error on java java -cp pdf-box-svn/preflight/target/preflight-2.0.0-snapshot.jar:pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar:pdf-box-svn/xmpbox/target/xmpbox-2.0.0-snapshot.jar:lib/commons-io-1.3.1.jar org.apache.pdfbox.preflight.validator_a1b expected.pdf java 7: the file expected.pdf is a valid pdf/a-1b file java 8: the fileexpected.pdf is not valid, error(s) : 2.4.3 : invalid color space, the operator \"g\" can't be used without color profile",
        "label": 1
    },
    {
        "text": "remove unused imports   fix imports ",
        "label": 11
    },
    {
        "text": "pdf with embedded fonts  identity h  not print  i'm printing a pdf with truetype font fully embedded and encoding: identity-h . fail with this message in java console. ebug message directprint0: direct_print_pdf_url: http://srv-datadec-ias:7777/erp/prueba_courier_10g.pdf debug message directprint0: printing url: http://srv-datadec-ias:7777/erp/prueba_courier_10g.pdf debug message directprint0: pages list is not empty debug message directprint0: map is: {f1=org.apache.pdfbox.pdmodel.font.pdtype0font@17456bc, f0=org.apache.pdfbox.pdmodel.font.pdtype0font@ea85b4} debug message directprint0: org.apache.pdfbox.pdmodel.font.pdtype0font cannot be cast to org.apache.pdfbox.pdmodel.font.pdtype1font 25-oct-2011 13:26:44 org.apache.pdfbox.cos.cosdocument finalize",
        "label": 1
    },
    {
        "text": "image has wrong colors after merge marc davis fronm the user mailing list has provided a file (michael levine.pdf) that, when merged with another file, has a black image on page 17 (\"tl-9\"). i tried to investigate / narrow this somewhat: it happens with any other file, or just use the michael levine file twice extracting p17 with pdfsplit and then merging the result doesn't do it extracting p1-17 with pdfsplit and then merging the result does do it extracting p13-17 with pdfsplit and then merging the result does do it, altthough the black is now at the first page the page is not really \"black\", the colors are incorrect. that's all i found out until now. i compared the two files with pdfdebugger and can't see any obvious differences. i looked into the files with notepad++, there are some differences like that the colorspace is now indirect.",
        "label": 11
    },
    {
        "text": "cffparser readcharset java lang illegalargumentexception i am using the trunk code, and i got multiple stack traces. i think they are all related to the base error of the illegal argument exception. charstringrenderer:rlineto:null point is null failed to create type1c font. falling back to type1 font java.awt.geom.illegalpathstateexception: missing initial moveto in path definition at java.awt.geom.path2d$float.needroom(path2d.java:263) at java.awt.geom.path2d$float.lineto(path2d.java:354) at org.apache.fontbox.cff.charstringrenderer.rlineto(charstringrenderer.java:140) at org.apache.fontbox.cff.charstringrenderer.handlecommand(charstringrenderer.java:73) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:46) at org.apache.fontbox.cff.charstringrenderer.render(charstringrenderer.java:48) at org.apache.fontbox.cff.afmformatter.renderfont(afmformatter.java:126) at org.apache.fontbox.cff.afmformatter.printfontmetrics(afmformatter.java:64) at org.apache.fontbox.cff.afmformatter.printfont(afmformatter.java:57) at org.apache.fontbox.cff.afmformatter.format(afmformatter.java:50) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.preparefontmetric(pdtype1cfont.java:505) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:382) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) failed to create type1c font. falling back to type1 font java.lang.illegalargumentexception at org.apache.fontbox.cff.cffparser.readcharset(cffparser.java:512) at org.apache.fontbox.cff.cffparser.parsefont(cffparser.java:320) at org.apache.fontbox.cff.cffparser.parse(cffparser.java:66) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:299) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) charstringrenderer:rlineto:null point is null failed to create type1c font. falling back to type1 font java.awt.geom.illegalpathstateexception: missing initial moveto in path definition at java.awt.geom.path2d$float.needroom(path2d.java:263) at java.awt.geom.path2d$float.lineto(path2d.java:354) at org.apache.fontbox.cff.charstringrenderer.rlineto(charstringrenderer.java:140) at org.apache.fontbox.cff.charstringrenderer.handlecommand(charstringrenderer.java:73) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:46) at org.apache.fontbox.cff.charstringrenderer.render(charstringrenderer.java:48) at org.apache.fontbox.cff.afmformatter.renderfont(afmformatter.java:126) at org.apache.fontbox.cff.afmformatter.printfontmetrics(afmformatter.java:64) at org.apache.fontbox.cff.afmformatter.printfont(afmformatter.java:57) at org.apache.fontbox.cff.afmformatter.format(afmformatter.java:50) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.preparefontmetric(pdtype1cfont.java:505) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:382) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) charstringrenderer:rlineto:null point is null failed to create type1c font. falling back to type1 font java.awt.geom.illegalpathstateexception: missing initial moveto in path definition at java.awt.geom.path2d$float.needroom(path2d.java:263) at java.awt.geom.path2d$float.lineto(path2d.java:354) at org.apache.fontbox.cff.charstringrenderer.rlineto(charstringrenderer.java:140) at org.apache.fontbox.cff.charstringrenderer.handlecommand(charstringrenderer.java:73) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:46) at org.apache.fontbox.cff.charstringrenderer.render(charstringrenderer.java:48) at org.apache.fontbox.cff.afmformatter.renderfont(afmformatter.java:126) at org.apache.fontbox.cff.afmformatter.printfontmetrics(afmformatter.java:64) at org.apache.fontbox.cff.afmformatter.printfont(afmformatter.java:57) at org.apache.fontbox.cff.afmformatter.format(afmformatter.java:50) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.preparefontmetric(pdtype1cfont.java:505) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:382) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) failed to create type1c font. falling back to type1 font java.lang.nullpointerexception at org.apache.fontbox.cff.charstringrenderer.rrcurveto(charstringrenderer.java:148) at org.apache.fontbox.cff.charstringrenderer.handlecommand(charstringrenderer.java:77) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:46) at org.apache.fontbox.cff.charstringrenderer.render(charstringrenderer.java:48) at org.apache.fontbox.cff.afmformatter.renderfont(afmformatter.java:126) at org.apache.fontbox.cff.afmformatter.printfontmetrics(afmformatter.java:64) at org.apache.fontbox.cff.afmformatter.printfont(afmformatter.java:57) at org.apache.fontbox.cff.afmformatter.format(afmformatter.java:50) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.preparefontmetric(pdtype1cfont.java:505) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:382) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) charstringrenderer:rlineto:null point is null failed to create type1c font. falling back to type1 font java.awt.geom.illegalpathstateexception: missing initial moveto in path definition at java.awt.geom.path2d$float.needroom(path2d.java:263) at java.awt.geom.path2d$float.lineto(path2d.java:354) at org.apache.fontbox.cff.charstringrenderer.rlineto(charstringrenderer.java:140) at org.apache.fontbox.cff.charstringrenderer.handlecommand(charstringrenderer.java:69) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:46) at org.apache.fontbox.cff.charstringrenderer.render(charstringrenderer.java:48) at org.apache.fontbox.cff.afmformatter.renderfont(afmformatter.java:126) at org.apache.fontbox.cff.afmformatter.printfontmetrics(afmformatter.java:64) at org.apache.fontbox.cff.afmformatter.printfont(afmformatter.java:57) at org.apache.fontbox.cff.afmformatter.format(afmformatter.java:50) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.preparefontmetric(pdtype1cfont.java:505) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:382) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) failed to create type1c font. falling back to type1 font java.lang.nullpointerexception at org.apache.fontbox.cff.charstringrenderer.rrcurveto(charstringrenderer.java:148) at org.apache.fontbox.cff.charstringrenderer.handlecommand(charstringrenderer.java:77) at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:46) at org.apache.fontbox.cff.charstringrenderer.render(charstringrenderer.java:48) at org.apache.fontbox.cff.afmformatter.renderfont(afmformatter.java:126) at org.apache.fontbox.cff.afmformatter.printfontmetrics(afmformatter.java:64) at org.apache.fontbox.cff.afmformatter.printfont(afmformatter.java:57) at org.apache.fontbox.cff.afmformatter.format(afmformatter.java:50) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.preparefontmetric(pdtype1cfont.java:505) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:382) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) failed to create type1c font. falling back to type1 font java.lang.illegalargumentexception at org.apache.fontbox.cff.cffparser.readcharset(cffparser.java:512) at org.apache.fontbox.cff.cffparser.parsefont(cffparser.java:320) at org.apache.fontbox.cff.cffparser.parse(cffparser.java:66) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:299) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619) failed to create type1c font. falling back to type1 font java.lang.illegalargumentexception at org.apache.fontbox.cff.cffparser.readcharset(cffparser.java:512) at org.apache.fontbox.cff.cffparser.parsefont(cffparser.java:320) at org.apache.fontbox.cff.cffparser.parse(cffparser.java:66) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.load(pdtype1cfont.java:299) at org.apache.pdfbox.pdmodel.font.pdtype1cfont.<init>(pdtype1cfont.java:107) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:124) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:76) at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:115) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:207) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:367) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:291) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:247) at org.apache.pdfbox.util.pdftextstripper.gettext(pdftextstripper.java:180) at org.apache.tika.parser.pdf.pdf2xhtml.process(pdf2xhtml.java:56) at org.apache.tika.parser.pdf.pdfparser.parse(pdfparser.java:81) at org.apache.tika.parser.compositeparser.parse(compositeparser.java:121) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:104) at org.apache.tika.parser.autodetectparser.parse(autodetectparser.java:117) at ibi.search.lucene.feed.lucenefastfeed.parsefeedcontent(lucenefastfeed.java:2566) at ibi.search.lucene.feed.lucenefastfeed.parsefeed(lucenefastfeed.java:1445) at ibi.search.lucene.feed.lucenefastfeed.<init>(lucenefastfeed.java:925) at ibi.search.lucene.feed.lucenefastxmlfeedservlet.dopost(lucenefastxmlfeedservlet.java:575) at javax.servlet.http.httpservlet.service(httpservlet.java:637) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:121) at javax.servlet.http.httpservlet.service(httpservlet.java:717) at ibi.srv.util.ibihttpservlet.service(ibihttpservlet.java:130) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:290) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:128) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:293) at org.apache.coyote.http11.http11processor.process(http11processor.java:849) at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:583) at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:454) at java.lang.thread.run(thread.java:619)",
        "label": 1
    },
    {
        "text": "allowing rectangles with additional elements i've come across some pages in a large pdf that have some additional, non-numerical elements at the end of the mediabox rectangle array, e.g.  /mediabox [0 0 612 792 5 0 r 6 0 r] trying to read such a structure with pdpage.getmediabox() throws an exception trying to construct the pdrectangle at [this line|https://github.com/apache/pdfbox/blob/6f18d7c4bef4d23a22dcf14c804d737d43908deb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/pdrectangle.java#l131.] i'm not sure if this strange case should be treated as a file issue, or if should be supported by slicing / shortening the cosarray prior to trying to convert to floats. acrobat reader shows the pages without complaint. the original pdf was produced by foxit phantompdf printer version 7.3.9.0803.",
        "label": 11
    },
    {
        "text": "npe when parsing xmp schema definition with  closed choice  value type if pdf/a file includes custom metadata and its extension schema description containing the type \"closed choice of text\", pdf/a validation using preflight fails with npe. the extract from stack trace: java.lang.nullpointerexception at org.apache.xmpbox.xml.pdfaextensionhelper.populateschemamapping(pdfaextensionhelper.java:214) at org.apache.xmpbox.xml.domxmpparser.parse(domxmpparser.java:193) at org.apache.xmpbox.xml.domxmpparser.parse(domxmpparser.java:106) at org.apache.pdfbox.preflight.process.metadatavalidationprocess.validate(metadatavalidationprocess.java:66) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168) ... it appears, that org.apache.xmpbox.xml.pdfaextensionhelper#transformvaluetype() method does not consider \"closed\" or \"open\" directives for \"choice\" value type in property definition.",
        "label": 11
    },
    {
        "text": "nullpointerexception at pdpagecontentstream setfont using pdfbox 1.8.3 i get a nullpointerexception in pdpagecontentstream.setfont (java.lang.nullpointerexception at org.apache.pdfbox.pdmodel.edit.pdpagecontentstream.setfont(pdpagecontentstream.java:322). i create a new \"pdpagecontentstream\" object with \"resetcontext = true\". in the constructor of pdpagecontentstream the variable \"resources\" gets initialized. as a result of \"resetcontext = true\" pdpagecontentstream::close is called. in the \"close\" method now \"resources\" gets null. a following call to \"pdpagecontentstream::setfont\" fails because resources is null.",
        "label": 1
    },
    {
        "text": "pdacroform flatten  throws classcastexception in the pdacroform class, in the flatten() method, there is a for loop that tries casting field to a pdterminalfield. but, the field is sometimes a pdnonterminalfield and the casting error is thrown. to fix this i just add one if statement right before the for loop that checks to see if field is an instance of pdterminalfield and place the for loop inside the if statement: if(field instanceof pdterminalfield){",
        "label": 8
    },
    {
        "text": "fix classcastexceptions in operator methods fix classcastexceptions reported in tika-1737 (see attachment there), like this one: java.lang.classcastexception: org.apache.pdfbox.cos.cosinteger cannot be cast to org.apache.pdfbox.cos.cosstring  at org.apache.pdfbox.util.operator.showtext.process(showtext.java:49) ~[showtext.class:na]  at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:557) [pdfstreamengine.class:na]",
        "label": 11
    },
    {
        "text": "move multi pdf classes from util into their own package in pdfbox-2580 maruan mentioned that rendering and printing classes were unusual in that they were not in the util package, which made me wonder if some of the classes in util might be better of being in another package. since the command line utilities were moved into the tools package, util has become the home of helper classes such as matrix and hex. however it's also home to some classes which were related to the old command line tools and would now be better off elsewhere: the 'text' package should contain pdftextstripper, pdftextstripperbyarea, and pdfmarkedcontentextractor. this would remove the cyclic dependency which currently exists between 'text' and 'util'. moving pdftextstreamengine to 'text' would also allow a cyclic dependency between 'contentstream' and 'util' to be broken. likewise, a new 'multipdf' package could contain pageextractor, pdfcloneutility, pdfmergerutility, layerutility, overlay, and splitter. this creates a proper home for classes which handle multiple pdfs and so are not a part of pd and ensures a separation of concern between them and the helper util classes. this would give us a cleaner foundation for 2.0 moving forwards and reduce the number of sonar warnings regarding cyclic dependencies.",
        "label": 6
    },
    {
        "text": "writedecodeddoc cant decrypt pdf form correctly java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar writedecodeddoc -nonseq test.pdf country selection is wrong",
        "label": 11
    },
    {
        "text": "pdfreader text shows as boxes [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1430273 originally submitted by benlitchfield on 2006-02-12 12:44. see newcent_soca_trad.pdf ben [comment on sourceforge] originally sent by govardhana. logged in: yes user_id=1452645 hi ben, i was going through the pdf file conversion by the acrobat professional. one difference i observed between the extraction of text by acrobat professional and pdfbox is that while exracting the text from the pdf file, the pdfbox extracts even the text from the image object if there is some text present, but the acrobat doesn't do that it eliminates the text which is present in the images. so that makes the difference. when we start extract the text from the images if there is some text which is in a non-ascii format then that text is represented as a box because it is extracted as it from the image. the acrobat avoids this type of extraction and does not give any box. this is only my view if i am wrong thn please excuse me. i am waiting for your reply on this. thanking you regards, govardhana [comment on sourceforge] originally sent by govardhana. logged in: yes user_id=1452645 hi ben, even i am facing the same problem. sometimes when i try to extract the pdf file content the extracted text contains boxes which doesn't give me any idea of they mean. when i tried to extract the same pdf file using the acrobat professional the whole text which contained boxes was eliminated and the rest of the text content was extracted. i wanted to know whether any remedy as been found or can u help to do the same what the acrobat professional does. thank you regards, govardhan",
        "label": 1
    },
    {
        "text": "color space problem  invalid color space the attached pdf/a validates with commercial validators like adobe acrobat 10.x /home/fausser/badpdfa.pdf is not valid, error(s) : 2.4.3:| invalid color space, the operator \"f\" can't be used without color profile the color space appears to be \"adhoc\"",
        "label": 3
    },
    {
        "text": "actions shortage according to pdf reference 1.4, chapter 8.5.3 and 8.6.4, pdf document may contain actions of following types: thread, sound, movie, hide, submit-form, reset-form, import-data. but this action types is not implemented.",
        "label": 11
    },
    {
        "text": "dateconverter fails to handle dates having milliseconds the method dateconverter.tocalendar fails to parse dates that have milliseconds. the adobe sdk can handle them. example date: 2010-12-12t12:41:35.00+01:00",
        "label": 4
    },
    {
        "text": "pdf debugger doesn't print inline images correctly the pdf debugger doesn't print correctly inline images in content stream, unfiltered view. it actually prints only the bi operator, no parameters, no image data. i'm attaching a screenshot where you can see the difference from the debugger and printing the the stream to sysout. also, looking at the code, the panel prints the parsed tokens (i'm looking at streampane::getcontentstreamdocument). i find it a little confusing because the combo box says \"unfiltered\" so i was expecting the raw, unfiltered stream data, not the result of the pdfbox stream parsing. side note, it would be nice to be able to select and copy (ctrl-c) the content from the stream panel.",
        "label": 13
    },
    {
        "text": "do not generate preflight jar with dependencies at each build each time pdfbox is built, a big jar is created in preflight module containing all dependencies of preflight. i propose to not generate this jar by default (see patch). to create this jar, useful when testing pdf/a files, only use the mvn command line : mvn package -dskipassembly=false",
        "label": 1
    },
    {
        "text": "other page sizes than us letter should be selectable in texttopdf currently texttopdf always uses us letter as page size - pdrectangle.letter set in constructor of pdpage. it would be desirable to pass other page sizes as defined in pdrectangle.",
        "label": 11
    },
    {
        "text": "regression in pddocument loadnonseq   sometime ago i reported pdfbox-1483, when i came across a pdf (attached to that issue) that couldn't be loaded with pddocument.load but worked fine with pddocument.loadnonseq. the latter method worked with all the pdfs i tested. now (pdfbox-2.0.0-snapshot, just built from source) pddocument.loadnonseq is failing for all the pdfs that were previously working. sample traceback: java::javaio::ioexception: object must be defined and must not be compressed object: 13:0 org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parseobjectdynamically(nonsequentialpdfparser.java:1115) org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parseobjectdynamically(nonsequentialpdfparser.java:1078) org.apache.pdfbox.pdfparser.nonsequentialpdfparser.initialparse(nonsequentialpdfparser.java:343) org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parse(nonsequentialpdfparser.java:657) org.apache.pdfbox.pdmodel.pddocument.loadnonseq(pddocument.java:1245) org.apache.pdfbox.pdmodel.pddocument.loadnonseq(pddocument.java:1228)",
        "label": 1
    },
    {
        "text": "npe saving modified encrypted document i posted this on the mailing list but got no answer. i'm describing here some behaviors that are triggering npe when saving a modified pdf document. what i'm trying to do is to open an encrypted document, modify it, save it back (i attached my test project). the three tests i made they all end up with a npe but they work if i turn on setallsecuritytoberemoved (and i don't want security to be removed). first test: 1- input is a doc encrypted with owner pwd having the modify permission on. 2- the document is loaded and decrypted using owner pwd. 3- permissions.isownerpermission() is true which is correct 4- permissions.canmodify() is true which is correct 5- modify the doc and save throws a npe which is not correct second test 1- input is a doc encrypted with owner pwd having the modify permission on. 2- the document is loaded but not decrypted 3- permissions.isownerpermission() is true, why? i didn't provide any owner pwd i should not have owner permissions. 4- permissions.canmodify() is true which is correct 5- modify the doc and save throws a npe which is not correct third test 1- input is a doc encrypted with owner pwd having no permission. 2- the document is loaded and decrypted using owner pwd. 3- permissions.isownerpermission() is true which is correct 4- permissions.canmodify() is true, why? i can modify the doc because i have owner permission but the modify should be off. 5- modify the doc and save throws a npe which is not correct",
        "label": 1
    },
    {
        "text": "preflight doesn't properly identify pdfs with encryption for pdfs that contain encryption, preflight 2.0.0 now returns the following error code/message: 1.0 : syntax error here's an example file: https://github.com/openplanets/format-corpus/raw/master/pdfcabinetofhorrors/encryption_nocopy.pdf previous versions would give more specific info in such cases (e.g. 1.4.2 / trailer syntax error, the trailer dictionary contains encrypt). the other 'encyption_' files below show the same behavior: https://github.com/openplanets/format-corpus/tree/master/pdfcabinetofhorrors",
        "label": 3
    },
    {
        "text": "pdpagedestination getpagenumber only returns page number when underlying cosarray has a page number when a pdpagesdestinatin has a page referenced, getpagenumber returns (as specified) -1. in contrast other pd-objects like pdoutlineitem are more \"user-friendly\" finddestinationpage resloves thze stored reference. in my attached patch i added code to getpagenumber to return the page number for referenced pdpages too. pdfbox developers: submit it to the code base if this fits the idea of the pd-classes.",
        "label": 7
    },
    {
        "text": "textnormalize init not thread safe  may lead to infinite loop textnormalize fills a static hashmap (diachash) from a method (populatediachash) called by the textnormalize constructor. if the constructor is called from two different threads at the same time, then the hashmap may be written by two concurrent threads which may and will cause infinite loops. we see the cpu at 100% and jstack shows 4 threads all stuck at: \"thread-2\" prio=10 tid=0x00007f6e94499000 nid=0x347 runnable [0x00007f6e925d6000] java.lang.thread.state: runnable at java.util.hashmap.put(hashmap.java:391) at org.apache.pdfbox.util.textnormalize.populatediachash(textnormalize.java:82) at org.apache.pdfbox.util.textnormalize.<init>(textnormalize.java:41) at org.apache.pdfbox.util.pdftextstripper.<init>(pdftextstripper.java:193) a patch to fix this is attached, it just moves the initialization to a static block. please apply to the 1.8.3 and 2.0.0 branches.",
        "label": 1
    },
    {
        "text": "image mask outline with shading pattern is invisible this is also somewhat of a regression: two weeks ago, the attached file had the image rendered in b/w, now it is invisible. i was able to get the image in another (wrong) color by changing one line in begininlineimage.java, the one with todo to awtimage = image.getstencilimage(colorspace.topaint(color, image.getheight())); // <--- todo: pass page height?",
        "label": 11
    },
    {
        "text": "high memory consumption when extracting image from pdf file when rendering an image at 300 dpi from the included pdf, my java process uses a huge amount of memory. the document is only 45 kb in size and contains 2 pages, my jvm is unable to extract even 1 page with 3g of memory. setting xmx to 4g works but is not the solution i want. the error occurs when calling pdfrenderer.renderimagewithdpi() i already tried tweaking the memory usage in my application to use a scratch file while loading the document as well as avoiding caching of xobjects as described here: https://pdfbox.apache.org/2.0/faq.html#outofmemoryerror these didn't work. the issue can be reproduced using the pdfbox-app utility: java -xmx3g -jar pdfbox-app-2.0.8.jar pdftoimage highmemoryfootprint.pdf -dpi 300 -color rgb -page 1 what can not be changed? 300 dpi will not be decreased. max java memory will not be increased: 3gb is ridiculous for a 45kb pdf file.",
        "label": 11
    },
    {
        "text": "links don't work in firefox i added links to the pdf i attached using the following code: pdpagexyzdestination destination = new pdpagexyzdestination();         destination.setpage((pdpage) doc.getdocumentcatalog().getallpages().get(0));         //destination.setpagenumber(0); //todo set actual page number         destination.setleft(0);         destination.settop((int) page_height);         pdannotationlink link = new pdannotationlink();         link.setaction(new pdactiongoto());         link.setdestination(destination);         link.setinvisible(false);         pdborderstyledictionary borderthick = new pdborderstyledictionary();         borderthick.setwidth(0f);         link.setborderstyle(borderthick);         page.getannotations().add(link);         pdrectangle rect = new pdrectangle();         rect.setlowerleftx(margin_left);         rect.setlowerlefty(textlowerlefty);         rect.setupperrightx(page_width - margin_right);         rect.setupperrighty(textlowerlefty + text_height);         link.setrectangle(rect); see the attached file. the links work fine in sumatra pdf, adobe reader dc 2015 and in chrome. but in firefox they don't work. is this due to an error in my code, in firefox or in pdfbox?",
        "label": 11
    },
    {
        "text": "wrong default type in xref stream w0 element according to the spec, when parsing a cross reference stream and the w array has a 0 as first element (something like [0 4 1]). this should happen: \"if the first element is zero, the type field shall not be present, and shall default to type 1\". so entries read in this scenario should have type 1, in use. from org.apache.pdfbox.pdfparser.pdfxrefstreamparser::parse line 115-123 the default type assigned by pdfbox in this scenario is 0, free.",
        "label": 11
    },
    {
        "text": "rendering will never complete i have a pdf file that i am attempting to render with: pdfrenderer renderer = new pdfrenderer(document); for (int i = 0; i < 2; i++ ) { // the document is two pages, code simplified     bufferedimage image = renderer.renderimagewithdpi(i, dpi, imagetype.rgb);  } however, the code never returns. when i pause execution (in eclipse) i see that execution never leaves the decode() method of org.apache.pdfbox.filter.runlengthdecodefilter. the problem is that the inner loop of while (amounttocopy > 0) in bold below is never executed because the stream has come to eof! that means that the int compressedread get a negative value and amounttocopy is _*added *_to instead of being subtracted from. the loop seems to eventually step out of itself, probably when the integer warps around when reaching it's max the problem is easy to catch if setting a conditional breakpoint on compressedread == -1. i'll include the pdf. the problem arises on page 2.     public decoderesult decode(inputstream encoded, outputstream decoded,                                          cosdictionary parameters, int index) throws ioexception     {         int dupamount;         byte[] buffer = new byte[128];         while ((dupamount = encoded.read()) != -1 && dupamount != run_length_eod)         {             if (dupamount <= 127)             {                 int amounttocopy = dupamount + 1;                 int compressedread;                * while(amounttocopy > 0)                 {                     compressedread = encoded.read(buffer, 0, amounttocopy);                     decoded.write(buffer, 0, compressedread);                     amounttocopy -= compressedread;                 }*             }             else             {                 int dupbyte = encoded.read();                 for (int i = 0; i < 257 - dupamount; i++)                 {                     decoded.write(dupbyte);                 }             }         }         return new decoderesult(parameters);     }",
        "label": 1
    },
    {
        "text": "extra new line characters extracted in for embedded files leading to zipfile exception in java for the test file i'll attach shortly, pdfbox 1.8.4 extracts 17660 bytes from an embedded zip (well, docx) file. pdfbox 1.8.5 extracts 17662 bytes \u2013 \"\\r\\n\" at the end of the stream. this leads to a zipexception for zipfile(s) in java 1.6, but not java 1.7.",
        "label": 11
    },
    {
        "text": "pdftextstreamengine probably miscalculates text height when parsing a pdf document, textposition is created with constant text height, about 2 time smaller than character width, regardless of font size. the following workaround to calculate dydisplay fixes the issue: float verticalscaling = 1/1000f; if (font instanceof pdtype3font) { matrix fontmatrix = font.getfontmatrix(); verticalscaling = fontmatrix.getvalue(1, 1); } float dydisplay = bbox.getheight() * fontsize * verticalscaling;",
        "label": 11
    },
    {
        "text": "pdfmergerutility  the source outline of merged pdf can be end up inside deep sub outline if destination outline contain sub outline the source outline of merged pdf can be end up inside deep sub-outline if destination outline contain sub-outline. the patch propose to change this behavior that merged source outline will always at the root of destination outline.",
        "label": 11
    },
    {
        "text": "push back buffer is full error attached pdfs result in \"1.0 syntax error, push back buffer is full\", without any further output with the latest preflight version. older versions don't give this error, and provide more detailed miscellaneous output. i came across this while running preflight on a dataset of 15,000 pdfs, and quite a number seem to be affected by this. like https://issues.apache.org/jira/browse/pdfbox-1812, this is something that appears to have gone wrong quite recently (possibly commit r1549022 again?), as it used to work correctly in recent october commits. again i included output files for both the current and the older (october) builds.",
        "label": 1
    },
    {
        "text": "text is extracted incorrectly source file is attached, it's v1.3 pdf 1. some text is extracted as garbage 2. columns are not separated result output is: documents stack welcome to mac os x stacks automatically display their contents in a fan or a snow leopard. grid based on the number of items in the stack. you jhuhszv]pl^[olz[hjrhzhspz[0m`v\\wylmlyvulz[`sl the dock in snow leopard v]ly[olv[oly`v\\jhuzl[[olz[hjr[vhs^h`zvwlupu includes stacks, which that style. you can use to quickly",
        "label": 1
    },
    {
        "text": "pdf conversion to image crashes the jvm the file http://tie.open.ac.uk/256.pdf crashes the jvm during conversion to jpeg with the following message : assertion failed: (fnum >= 0 && fnum < t->numsubrs), function buildsubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098. java result: 134 the error happens in the method converttoimage(): pdpage page = (pdpage) pages.get(startpage); pdpage page = (pdpage) pages.get(0); try { image = page.converttoimage(); } catch (ioexception ex) { logger.getlogger(pdfitext.class.getname()).log(level.severe, null, ex); } the problem occurs not for all files, but is critical as it stops my webserver (tomcat) that needs to be then restarted.",
        "label": 1
    },
    {
        "text": "colorspace validation fails for inlined image validation fails for inlined image if content stream for inline image specifies color space using abbreviated name (ex. /cmyk instead of /devicecmyk): bi /cs/cmyk /w 34 /h 36 /bpc 8 /f/fl /dp<</predictor 15 /columns 34 /colors 4>> id x\u00a3\u0113\u015b... ei in this case preflight validation fails with this message: 2.3.2 : unexpected key in graphic object definition, the colorspace is unknown pdf reference v1.4 chapter 4.8.6 table 4.40 indicates the abbreviations for the names of color spaces, which could be used to represent color spaces for inlined images instead of using the full names. there abbreviation cmyk matches full name devicecmyk. the culprit is that contentstreamengine looks for the corresponding colorspaces enum constant by matching its name to the specified color space name in content stream (i.e. using enum.valueof()). while colorspaces enum class has constants for abbreviated names, they are stored in local variable label and do not correspond to the enum constant name.",
        "label": 11
    },
    {
        "text": "pdacroform getdefaultappearance throws npe if da is not defined in the form dictionary the da key is optional. current implementation throws an npe if you call pdacroform::getdefaultappearance and no da is defined",
        "label": 8
    },
    {
        "text": "extracttext gets all   when pdf 's font is instance of pdtype1font extracttext gets all \"?\" when font is instanceof pdtype1font and subtype is type1cfont and fontencoding is null.",
        "label": 1
    },
    {
        "text": "nonsequentialpdfparser produces garbage text in document info for some documents, nonsequentialpdfparser produces pddocumentinformation with binary garbage in its fields (title/author/producer/etc). invocation of pddocumentinformation.getxxxdate() methods fails with \"ioexception:error converting date\" for those documents. classic pdfparser does not have problems with the same documents.",
        "label": 1
    },
    {
        "text": "error when setting the value of a combo box to     [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1422082 originally submitted by catalino on 2006-02-01 17:59. hi all. when i try to set the value of a combo box to \" \", it gives the following error: exception in thread \"main\" java.lang.arrayindexoutofboundsexception: -2 at java.util.arraylist.set(unknown source) at org.pdfbox.pdmodel.interactive.form.pdappearance.setappearancevalue(pdappearance.java:323) at org.pdfbox.pdmodel.interactive.form.pdvariabletext.setvalue(pdvariabletext.java:145) at org.pdfbox.pdmodel.interactive.form.pdchoicefield.setvalue(pdchoicefield.java:91) at pdfforms.pdfforms.setvalorcampo(pdfforms.java:235) at pdfforms.setvalores.main(setvalores.java: i found out the following. i think it may help you to understand the problem. when the default value, set by acrobat professional 7.0, is set to \" \", the error occurs; when is set to another value, lets say \"a\", the value \" \" is setted correctly. if i run the program again, trying to set the value \" \", the error does not ocurr. thanks, luis catalino [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1422082&file_id=165878 doc1.pdf (application/pdf), 198269 bytes form with a combo box",
        "label": 8
    },
    {
        "text": "updated ant script providing ikvm for all components of pdfbox and eventually future versions updated ant script for the pdfbox version 1.8.6 now also providing ikvm for all of the components of the 1.8.6 version. to download here https://www.dropbox.com/sh/0d8fi6owsa3vhh6/aadp1ilpkp8yd76quvalr9wsa?dl=0",
        "label": 1
    },
    {
        "text": "set the image dpi to include in the pdf hi, i try to add an image with a 200dpi in a a4 pdf, using pdfbox. when i open the pdf using acrobat reader, all i can see is the buttom left of the image. the remaining of the image is out of the page. how can i add the image with a \"fittopage\" option? thanks, douglas.",
        "label": 1
    },
    {
        "text": "move caching outside of pdresources note: this issue is based on a discussion which occurred regarding pdfbox-2301 but is actually a separate issue. currently we cache the page resources in pdresources which belongs to a specific pdpage. this causes two problems, 1) users who want to hold many pdpage objects in memory will have high memory use (but this is often by accident*). 2) by caching resources in pdpage we only get to keep that cache for the lifetime of the page, which e.g. in pdfrenderer is a single page only. that means that a font which appears on 40 pages has to be parsed 40 times, which causes slow running times, but also memory thrashing as objects are destroyed frequently only to be re-created. what pdfrenderer really needs is not page-wide caching but document-wide caching, so that it can cache fonts, cmaps, color profiles, etc. only once. but that won't work for images, because they're too large. what we're beginning to realise is that caching is use-case specific and probably shouldn't be built-in to pdfbox's pdmodel. instead we should removing resource caching from pdpage/pdresources and implement custom caching in pdfrenderer and other downstream classes such as pdftextstripper. i'll happily volunteer myself. the existing high-level pdfbox apis will continue to \"just work\" and power users will get a level of control that they appreciate. this strategy could be enhanced by removing memory-hungry methods on pdresources such as getfonts() and getxobjects() which force all resources of a particular type to be loaded, whether or not they are needed, or actually used in the content stream. they would be replaced by methods to retrieve a single resource, e.g. getfont(name). \u2014 * there probably isn't a legitimate use case for 1) any more, we've solved the issues which we used to have with image caching (in fact, the clearcache() method actually no longer needs to be called by pdfrenderer, though it currently is). the real problem is that it's easy to accidentally retain pdpage objects, the pddocument#getdocumentcatalog().getallpages() method is dangerous as looping over it will cause pages to be retained during processing, like so: for (pdpage page : document.getdocumentcatalog().getallpages()) // java.util.list {      // ... this is idiomatic in pdfbox 1.8 }  // list returned by getallpages() kept in scope until here (bad) i added of couple of methods a while ago to avoid this by fetching each pdpage one at a time, and this is now used internally in pdfbox to avoid the memory problems we used to have: for (int i = 0; i < document.getnumberofpages(); i++) {     pdpage page = document.getpage(i);     // ... this is the new 2.0 way     // current page falls out of scope here (good) } to solve this problem, we could change getallpages() so that instead of returning a list it returns an iterator<pdpage>, which would provide a nicer api than getpage(int) and most existing code will continue to work. this is also an opportunity to also fix type safety issues due to pdpagenode and incorrect handling of the page tree (this is similar to the issue we had recently with the acroform field tree).",
        "label": 6
    },
    {
        "text": "class cast exception  cosstring   cosname following execption is generated while rendering a pdf (unfortunately confidential): java.lang.classcastexception: org.apache.pdfbox.cos.cosstring cannot be cast to org.apache.pdfbox.cos.cosname at org.apache.pdfbox.pdmodel.font.pdfontdescriptor.getfontname(pdfontdescriptor.java:289) at org.apache.pdfbox.pdmodel.font.externalfonts.getfallbackfontname(externalfonts.java:294) at org.apache.pdfbox.pdmodel.font.externalfonts.gettruetypefallbackfont(externalfonts.java:273) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.<init>(pdtruetypefont.java:157) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:75) at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:96) at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:50) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:802) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:464) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:438) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149) at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:179) at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:205) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:136) at org.apache.pdfbox.rendering.pdfrenderer.renderimagewithdpi(pdfrenderer.java:95) is this maybe related to https://issues.apache.org/jira/browse/pdfbox-1756 but only in a different spot? hint: revision of 2.0.0 version trunk is 1704293",
        "label": 11
    },
    {
        "text": " patch  use cmap for type0 ttf fallback java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage variouskfontsnotembeded218.pdf this patch addresses some of the issues in pdfbox-2509.",
        "label": 6
    },
    {
        "text": "content of annotation not visible in image  converted from pdf  pdpage.converttoimage converts pdf to image but content of annotation is missing",
        "label": 1
    },
    {
        "text": "access to metadata keys in the pd model currently 1.2.0 i don't think it's possible to get a document's metadata keys from the pd model. it is possible to get the metadata keys by calling pddocumentinformation.getdictionary().keyset() and calling getname() on the cosname objects returned. but that means having to know about the cosdictionary and cosname objects i.e. the lower-level cos model. it would be nice to be able to retrieve the metadata keys directly from the pd model. i'm about to add a patch that does this. the patch will also add a new test class.",
        "label": 7
    },
    {
        "text": "printing landscape [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1608652 originally submitted by jlynch16 on 2006-12-04 09:26. right now, when you try to print a pddocument that has rotated pags (ie. /rotate 90) it does not currently take the rotation into consideration when figuring out the pageformat for a given page. i fixed this and submitted a patch for it. i wasn't sure if you needed a bug written up in order to process and close the fix via the patch submitted. -jim lynch 1360 studios",
        "label": 1
    },
    {
        "text": "when extract text  the title showing in incorrectness position  1. when i call pdftextstripper to extract text from the pdf file (000001_2005_1_9.pdf). i get the title at the end of the text document. the result is 'beforetrim.txt'. 2. the bug are: 2.1 the title text is at the end of the text. it is in the begin of the document (snapshot.png). 2.2 there is white space between the number, but in the adobe read show (snapshot.png), there is no any space. 2.3 the page footer is at the start of the text (beforetim.txt).",
        "label": 1
    },
    {
        "text": "unnecessary linear searches in  cffparser format0fdselect getfd  the problem appears in pdfbox 1.7.1 and in revision 1415855. i attached a two-line patch that fixes it. in method \"cffparser.format0fdselect.getfd\", the linear search over the map keys \"keys\" is unnecessary when the \"map charstring\" does not contain the key. the attached patch first checks if the map contains the key, which is a fast operation for a linkedhashmap like \"charstring\". moreover, i think the linear search can be avoided altogether by storing the indices directly in the map (the type of the values would change from byte[] to the pair <byte[],index>).",
        "label": 1
    },
    {
        "text": "invalid images returned when getting images from a pdf document using pdxobjectimage (code fragment below), it returns an image with invalid characteristics. the pdxobjectimage is not null, but attributes like .getcolorspace() return null. the image has a height and width, but the getrgbimage() method returns null. this happens on every image of the attached file. code fragment and output is shown below. if i use the write2file() method of pdxobjectimage to write out the image to a fil, then i get a valid image. (at least, it displays fine.) code fragment: // get a list of pages from the input pdf document list pages = inputdoc.getdocumentcatalog().getallpages(); // process each page int i = 0; for (object obj : pages) { string barcode = null; i++; pdpage page = (pdpage)obj; // get the image on the page and process it pdresources resources = page.getresources(); map images = resources.getimages(); system.out.println(\"found \" + images.size() + \" images on page \" + i); if( images != null ) { iterator imageiter = images.keyset().iterator(); while ( imageiter.hasnext() ) { string key = (string)imageiter.next(); system.out.println(\"key = \" + key); pdxobjectimage image = (pdxobjectimage)images.get( key ); if (image != null) { system.out.println(\"image subtype = \" + image.sub_type.tostring()); system.out.println(\"image suffix = \" + image.getsuffix()); system.out.println(\"pdx image has height = \" + image.getheight() + \" and width \" + image.getwidth()); // convert image to a buffered image, so we can // look for a barcode and decode it bufferedimage rgbimage = image.getrgbimage(); if (rgbimage == null) system.out.println(\"rgbimage is null\"); } } } output: found 1 images on page 1 key = obj3 image subtype = image image suffix = tiff pdx image has height = 2335 and width 1651 rgbimage is null found 1 images on page 2 key = obj8 image subtype = image image suffix = tiff pdx image has height = 2335 and width 1651 rgbimage is null found 1 images on page 3 key = obj13 image subtype = image image suffix = tiff pdx image has height = 2335 and width 1651 rgbimage is null found 1 images on page 4 key = obj18 image subtype = image image suffix = tiff pdx image has height = 2335 and width 1651 rgbimage is null found 1 images on page 5 key = obj23 image subtype = image image suffix = tiff pdx image has height = 2335 and width 1651 rgbimage is null found 1 images on page 6 key = obj28 image subtype = image image suffix = tiff pdx image has height = 2335 and width 1651 rgbimage is null found 1 images on page 7 key = obj33 image subtype = image image suffix = tiff pdx image has height = 2335 and width 1651 rgbimage is null found 1 images on page 8 key = obj38 image subtype = image image suffix = tiff pdx image has height = 2335 and width 1651 rgbimage is null found 1 images on page 9 key = obj43 image subtype = image image suffix = tiff pdx image has height = 2335 and width 1651 rgbimage is null found 1 images on page 10 key = obj48 image subtype = image image suffix = tiff pdx image has height = 2335 and width 1651 rgbimage is null",
        "label": 1
    },
    {
        "text": "text not rendered in mode   the attached file is a reduced version of the file from pdfbox-1350. it should show \"t u s\" at the bottom left but it doesn't. i believe that the cause is very similar to pdfbox-2814 (text rendering in mode 7), except that this time, the text is not splitted within one \"tj\" segment, but across several \"tj\" segments. bt 7 tr /f1 1.00000 tf 0.01063 0.00000 0.00000 0.00573 0.05521 0.16300 tm 0 -1.01768 td (\\000\\065) tj /f1 1.00000 tf 0.01063 0.00000 0.00000 0.00573 0.05521 0.16300 tm 1.38462 -1.01768 td (\\000\\066) tj /f1 1.00000 tf 0.01063 0.00000 0.00000 0.00573 0.05521 0.16300 tm 1.69789 -1.01768 td /f1 1.00000 tf 0.01063 0.00000 0.00000 0.00573 0.05521 0.16300 tm 2.01116 -1.01768 td /f1 1.00000 tf 0.01063 0.00000 0.00000 0.00573 0.05521 0.16300 tm 2.32442 -1.01768 td (\\000\\064) tj et                                                                                               /im1 do",
        "label": 11
    },
    {
        "text": "optimize image conversion in losslessfactory conversion of bufferedimage objects into pdimagexobject objects could be optimized by pre-sizing the buffers reading whole lines of pixels instead of pixel-by-pixel prevent unnecessary copying of byte arrays",
        "label": 11
    },
    {
        "text": "error  expected an integer type  actual ''   hello, the following exception is being thrown when attempting to parse a pdf document password protected using adobe acrobat 9 pro: apr 7, 2010 2:53:22 pm org.apache.pdfbox.filter.flatefilter decode severe: stop reading corrupt stream 07-apr-2010 14:53:22.829: warning: java.io.ioexception: error: expected an integer type, actual='' at org.apache.pdfbox.pdfparser.baseparser.readint(baseparser.java:1275) at org.apache.pdfbox.pdfparser.pdfobjectstreamparser.parse(pdfobjectstreamparser.java:81) at org.apache.pdfbox.cos.cosdocument.dereferenceobjectstreams(cosdocument.java:449) at org.apache.pdfbox.pdmodel.pddocument.openprotection(pddocument.java:1100) at org.apache.pdfbox.pdmodel.pddocument.decrypt(pddocument.java:579) i have the following libraries: fontbox-1.1.0.jar pdfbox-1.1.0.jar sample password protected file is attached. would appreciate if someone can help. thank you iglop",
        "label": 1
    },
    {
        "text": "splitting starts counting for cutting out pages wrongly right now the usage of 'splitatpage' is wrong. let's assume there is a document with 1000pages, startpage=238, endpage=977, splitatpage=17 then pdfbox starts splitatpage at page #0! this leads to the following groups: 1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 8 i would have expected: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9 this does not allow for example cutting out some parts of a document.",
        "label": 11
    },
    {
        "text": "pdf conversion to image crashes the jvm because pdfbox dont find the font and getfontdescriptor some pdf files crashes the jvm during conversion to image with the following message : # a fatal error has been detected by the java runtime environment: # exception_access_violation (0xc0000005) at pc=0x0000000060d07697, pid=6488, tid=8628 # jre version: 7.0_25-b17 java vm: java hotspot(tm) 64-bit server vm (23.25-b01 mixed mode windows-amd64 compressed oops) problematic frame: c [t2k.dll+0x17697] # failed to write core dump. minidumps are not enabled by default on client versions of windows # if you would like to submit a bug report, please visit: http://bugreport.sun.com/bugreport/crash.jsp the crash happened outside the java virtual machine in native code. see problematic frame for where to report the bug. # j org.apache.pdfbox.pdmodel.font.pdsimplefont.writefont(ljava/awt/graphics2d;ljava/awt/geom/affinetransform;ffljava/awt/font/glyphvector;)v+63 j org.apache.pdfbox.pdmodel.font.pdsimplefont.drawstring(ljava/lang/string;[iljava/awt/graphics;fljava/awt/geom/affinetransform;ff)v+253 j org.apache.pdfbox.pdfviewer.pagedrawer.processtextposition(lorg/apache/pdfbox/util/textposition;)v+436 j org.apache.pdfbox.util.pdfstreamengine.processencodedtext([b)v+709 j org.apache.pdfbox.util.operator.showtextglyph.process(lorg/apache/pdfbox/util/pdfoperator;ljava/util/list;)v+162 j org.apache.pdfbox.util.pdfstreamengine.processoperator(lorg/apache/pdfbox/util/pdfoperator;ljava/util/list;)v+35 j org.apache.pdfbox.util.pdfstreamengine.processsubstream(lorg/apache/pdfbox/cos/cosstream;)v+126 j org.apache.pdfbox.util.pdfstreamengine.processsubstream(lorg/apache/pdfbox/pdmodel/pdpage;lorg/apache/pdfbox/pdmodel/pdresources;lorg/apache/pdfbox/cos/cosstream;)v+20 j org.apache.pdfbox.util.pdfstreamengine.processstream(lorg/apache/pdfbox/pdmodel/pdpage;lorg/apache/pdfbox/pdmodel/pdresources;lorg/apache/pdfbox/cos/cosstream;)v+43 j org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(ljava/awt/graphics;lorg/apache/pdfbox/pdmodel/pdpage;ljava/awt/dimension;)v+80 j org.apache.pdfbox.pdmodel.pdpage.converttoimage(ii)ljava/awt/image/bufferedimage;+310 j com.portal.cq.util.pdfutils.getpdfpagesasimages(ljava/lang/string;)ljava/util/list;+116 j com.portal.cq.thread.compiladordedocumentosrunnable.run()v+24 j java.lang.thread.run()v+11 v ~stubroutines::call_stub so i tried to resolve de pdfont with the bellow code: document = pddocument.load(\"\\\\\\\\192.168.1.8\\\\clientes\\\\newspace\\\\in\\\\controlequalidade\\\\interfile 3032152_5.pdf\"); pdfont font = pdtruetypefont.loadttf(document, new file(\"//192.168.1.8/clientes/font/arial.ttf\")); @suppresswarnings(\"unchecked\") list<pdpage> pages = document.getdocumentcatalog().getallpages(); int j = 1; for (pdpage page : pages) { map<string, pdfont> maps = page.getresources().getfonts(); set<string> chaves = maps.keyset(); font f = null; for (string chave : chaves) { if (chave != null) { if (maps.get(chave).getfontdescriptor() != null) { f = fontmanager.getawtfont(maps.get(chave) .getfontdescriptor().getfontname()); } else { page.getresources().getfonts().put(chave, font); sb.append(i+j+\".png com problemas \\n\"); } } } bufferedimage convertedimage = page.converttoimage(bufferedimage.type_byte_binary, resolution_default); saveimagetorepository(i, j, convertedimage); j++; if (isnegativeimage(convertedimage)) { bimages.add(invertnegativeimage(convertedimage)); } else { bimages.add(convertedimage); } } but in the end it change all my documents with a log: warning: changing font on <\u0016> from <arial> to the default font set 19, 2013 3:19:53 pm org.apache.pdfbox.pdmodel.font.pdsimplefont drawstring i'll attached de result of this how i can solve this?",
        "label": 1
    },
    {
        "text": "pdmodel font pdsimplefont hanging on truetype font  ubuntu  when calling pdpage.converttoimage(imagetype,resolution) , i have found a case where the application hangs. no error messages, no exceptions, no cpu spike, no i/o. the error had to do with some strange corruption of the awtfont, by the time it reached the method pdsimplefont.drawstring. some pretty deep digging turned up that if a font with too few glyphs is sent into pdsimplefont.writefont, it will enter graphics2d.drawstring ... ne'er to return. if a check is done to count the glyphs and if they fall below a certain threshold, then just re-instantiate the font, then all goes well. typical numbers range from 70 to 1000+, so i've gone with an arbitrary value of 40. all goes well, and i can't measure any difference in performance (except that my app will actually return from attempting this doc!). attached is a sample pdf which can re-create the problem, and a patch which seems to solve it sensibly.",
        "label": 1
    },
    {
        "text": "page tree handling needs rewriting the way in which pdfbox handles the page tree needs to be rewritten, preferably from scratch. currently the document catalog returns the raw objects from the page tree, wrapped in either a pdpage or pdpagenode. we need to abstract over the page tree and get rid of pdpagenode, we should provide methods which can add/remove pdpage objects only. the existing low-level access to the page tree is not needed at the pd-level. inheritance of page properties such as crop box, resources, and rotation should be reimplemented to use whatever new page tree abstraction we invent. we can finally remove the old broken methods which didn't look up the inheritance tree when retrieving these values.",
        "label": 6
    },
    {
        "text": "pdfbox fails to extract field values from fdf eform pdfbox is unable to extract the values from the fields for the attached form; however the values can be clearly seen in acrobat, sumatra, pdfgears, etc.",
        "label": 1
    },
    {
        "text": "arrayindexoutofboundsexception in glyfsimpledescript readflags  when multithreading from kenneth k. in the mailing list: i have a client application that convert pdf documents into single page tiff images. since the user export large quantities of documents i use a multithreaded approach. each thread loads it own document and converts the pages one by one. the pdf file is serialized to the client thread and then each thread executes the following code. if i only use 1 thread there is no problem. i checked to make sure objects are shared between threads.             docin = pddocument.load(new bytearrayinputstream(documentresult.getimage().getcontent()),true);             if(null==docin)               throw new exception(\"invalid pdf document or an occured during retrieval\");                int numpages = docin.getnumberofpages();                      string strpath = getpath(numpages);                      int ipage = 0;             pdfrenderer renderer = new pdfrenderer(docin);             for (int i=0;i<numpages;i++)             {               pdpage page = docin.getpage(i);               pdrectangle rect = page.getmediabox();               bufferedimage pageimage = null;               pageimage = renderer.renderimagewithdpi(i, 200f, imagetype.binary);               ...             } array index out of range: 8        at org.apache.fontbox.ttf.glyfsimpledescript.readflags(glyfsimpledescript.java:202)        at org.apache.fontbox.ttf.glyfsimpledescript.<init>(glyfsimpledescript.java:77)        at org.apache.fontbox.ttf.glyphdata.initdata(glyphdata.java:58)        at org.apache.fontbox.ttf.glyphtable.getglyph(glyphtable.java:161)        at org.apache.pdfbox.rendering.ttfglyph2d.getpathforgid(ttfglyph2d.java:140)        at org.apache.pdfbox.rendering.ttfglyph2d.getpathforcharactercode(ttfglyph2d.java:92)        at org.apache.pdfbox.rendering.pagedrawer.drawglyph2d(pagedrawer.java:333)        at org.apache.pdfbox.rendering.pagedrawer.showfontglyph(pagedrawer.java:314)        at org.apache.pdfbox.contentstream.pdfstreamengine.showglyph(pdfstreamengine.java:731)        at org.apache.pdfbox.contentstream.pdfstreamengine.showtext(pdfstreamengine.java:690)        at org.apache.pdfbox.rendering.pagedrawer.showtext(pagedrawer.java:296)        at org.apache.pdfbox.contentstream.pdfstreamengine.showtextstrings(pdfstreamengine.java:600)        at org.apache.pdfbox.contentstream.operator.text.showtextadjusted.process(showtextadjusted.java:38)        at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:802)        at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:464)        at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:438)        at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149)        at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:179)        at org.apache.pdfbox.rendering.pdfrenderer.renderpage(pdfrenderer.java:205)        at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:136)        at org.apache.pdfbox.rendering.pdfrenderer.renderimagewithdpi(pdfrenderer.java:95)        at org.ilsos.cm.export.client.rmi.workers.pdf2singlepagetiff.processresult(pdf2singlepagetiff.java:142)        at org.ilsos.cm.export.client.rmi.exportworker.run(exportworker.java:72)        at java.lang.thread.run(thread.java:784)",
        "label": 6
    },
    {
        "text": "npe in extractembeddeddocuments while parsing a pdf document the following exception is thrown: java.lang.nullpointerexception at org.apache.pdfbox.tika.pdfparser.extractembeddeddocuments(pdfparser.java:155) at org.apache.pdfbox.tika.pdfparser.parse(pdfparser.java:133) at test.tikaparse.main(tikaparse.java:27) the document i'm trying to parse is probably confidential so i cannot attach it until (or if) i get clearence.",
        "label": 12
    },
    {
        "text": "pdnumbertreenode method setnumbers  map numbers   sets the key for the for the nums dictionary entry to names rather than nums pdnumbertreenode setnumbers(map numbers) uses \"names\" rather than \"nums\" as key for nums entry in numbertreenode dictionary. any number tree node updated this way will, upon execution of getnumbers(), return null, and will in fact be an invalid numbertreenode line in method with problem is #256: node.setitem( \"names\", array );",
        "label": 1
    },
    {
        "text": "pdfbox crashes when a type3 font don't have an embedded encoding  when running pdfbox on a pdf with winansiencoding for a type3 font it crashes without any output. exception in thread \"main\" java.lang.classcastexception: org.apache.pdfbox.cos.cosname cannot be cast to org.apache.pdfbox.cos.cosdictionary at org.apache.pdfbox.pdmodel.font.pdtype3font.readencoding(pdtype3font.java:82) at org.apache.pdfbox.pdmodel.font.pdtype3font.<init>(pdtype3font.java:66) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:79) at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:143) at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:841) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:498) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:472) at org.apache.pdfbox.contentstream.pdfstreamengine.showform(pdfstreamengine.java:181) at org.apache.pdfbox.contentstream.operator.drawobject.process(drawobject.java:65) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:841) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:498) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:472) at org.apache.pdfbox.contentstream.pdfstreamengine.showform(pdfstreamengine.java:181) at org.apache.pdfbox.contentstream.operator.drawobject.process(drawobject.java:65) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:841) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:498) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:472) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150) at org.apache.pdfbox.text.legacypdfstreamengine.processpage(legacypdfstreamengine.java:141) at org.apache.pdfbox.text.pdftextstripper.processpage(pdftextstripper.java:360) at org.apache.pdfbox.text.pdftextstripper.processpages(pdftextstripper.java:288) at org.apache.pdfbox.text.pdftextstripper.writetext(pdftextstripper.java:235) at org.apache.pdfbox.tools.extracttext.startextraction(extracttext.java:237) at org.apache.pdfbox.tools.extracttext.main(extracttext.java:82) at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:59) edit by tilman hausherr font is here: root/pages/kids/[0]/resources/xobject/x1/resources/xobject/x3/resources/font/f10/encoding",
        "label": 11
    },
    {
        "text": "ioexception  expected integer or real but got name java -cp pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar org.apache.pdfbox.tools.pdftoimage 2.pdf severe: can't read the embedded type1 font avenir-bookoblique java.io.ioexception: expected integer or real but got name at org.apache.fontbox.type1.type1parser.arraytonumbers(type1parser.java:235) at org.apache.fontbox.type1.type1parser.parseascii(type1parser.java:188)",
        "label": 11
    },
    {
        "text": "dateconverter needs to work most of the tests for org/apache/pdfbox/util/dateconverter.java in src/test/java/org/apache/pdfbox/util/testdateutil.java have been commented out. dateconverter was broken. the attached patch fixes the problems. extensive comments document the problems. here's a copy: /* the former version of dateconverter had these bugs: - in toiso8601 the conversion from millis to minutes was with 1000/1000; should have been 1000/60. - pdfbox-402 was not completely implemented. the calendar fields in the potential_formats are shared among threads. hence we must create new simplethreadformats for each test. (or synchronize somehow). - some formats with hh did not have an a field. i changed them to hh. these questionable features: - a timezone with neither plus sign nor minus is assumed to be minus. this seems wrong, but i have not changed it. - tocalendar() returned a value in the default locale. pdf files do not have locales (i think) and even if they do there is no reason to assume the java default. i have switched to locale.english which was already assumed in the date formats and tostring. and these infelicities: - constants 60 and 1000 appeared. - zeroappend was not used where applicable. in one case it was inapplicable only because timezone.getoffset was suspected of returning a long. it does not. - manually computed constants were used to in date.substring thus reducing flexibility and maintainability. - the timezone name reported by tocalendar was always \"unknown\" it is easy enough to compute a name. - time zones were not accepted with most of the alternate parsing formats. the new code allows a timezone after any format. */",
        "label": 1
    },
    {
        "text": " unknown command  in type1charstring handlecommand i get this at page 24 of the attached pdf: ioexception for file pdfbox-2192-006972.pdf java.lang.illegalargumentexception: unknown command: null  at org.apache.fontbox.cff.type1charstring.handlecommand(type1charstring.java:260)  at org.apache.fontbox.cff.type1charstring.access$000(type1charstring.java:39)  at org.apache.fontbox.cff.type1charstring$1.handlecommand(type1charstring.java:135)  at org.apache.fontbox.cff.charstringhandler.handlesequence(charstringhandler.java:45)  at org.apache.fontbox.cff.type1charstring.render(type1charstring.java:138)  at org.apache.fontbox.cff.type1charstring.getpath(type1charstring.java:110) a source code comment tells \"indicates a pdfbox bug\".",
        "label": 6
    },
    {
        "text": "layer utility   text not being displayed when overlaying i've had some problems with the layer utility when trying to overlay two pdfs. normally it works fine, but i've encountered a type of pdf file on which it doesn't work properly. text elements are not being displayed (it can be selected, but it looks to be transparent), but images are. i've stripped down my code to the bare minimum and produced a maven project with a command line and provided some examples for the base, the overlay and the output i get. i've attached all below. the usage for the command line is as follows: java -jar overlayer-1.0.jar -basepdf base.pdf -overlaypdf overlay.pdf -outpdf out.pdf -layername overlay if i try to overlay the other way around, i.e. use the overlay.pdf in the -basepdf parameter and the base.pdf in the -overlaypdf parameter, it does do the overlaying, but obviously, that's not what i'm looking for. any hints as to why this might not work, or any particularities about the base pdf that might be causing this to be behaving differently would be helpful.",
        "label": 11
    },
    {
        "text": "pdtruetypefont loadttf  freezes  at ttfdatastream java  sometimes (not always), my app \"freezes\". when i look into jvisualvm thread dump, i see this stack trace: java.lang.thread.state: runnable at org.apache.fontbox.ttf.ttfdatastream.read(ttfdatastream.java:195) at org.apache.fontbox.ttf.ttfdatastream.readstring(ttfdatastream.java:69) at org.apache.fontbox.ttf.ttfdatastream.readstring(ttfdatastream.java:57) at org.apache.fontbox.ttf.postscripttable.initdata(postscripttable.java:104) at org.apache.fontbox.ttf.ttfparser.parsettf(ttfparser.java:140) at org.apache.fontbox.ttf.ttfparser.parsettf(ttfparser.java:87) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loaddescriptordictionary(pdtruetypefont.java:206) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:167) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:143) at org.apache.pdfbox.pdmodel.font.pdtruetypefont.loadttf(pdtruetypefont.java:130) it never returns and blocks the application from continuing. this hapend several times now every few hours.",
        "label": 7
    },
    {
        "text": "nullpointerexception in ttfsubsetter an npe happens in \"public void ttfsubsetter.add(int unicode)\" because the \"unicodecmap\" member is null. this might be, because the passed \"ttf\" member is based on a \"memoryttfdatastream\" and has only 38 glyphs (so it might already be a subset). the available tables of the ttf are only: [fpgm, head, cvt , glyf, loca, gasp, hmtx, prep, hhea, maxp] the variables of the underyling font are: this pdtype0font  (id=58)   afmstandard14 null   avgfontwidth 0.0   cmap cmap  -> identity-h  cmapucs2 null   descendantfont pdcidfonttype2  (id=155)   dict cosdictionary  -> cosdictionary{(cosname{type}:cosname{font}) (cosname{basefont}:cosname{aaamse+opensans-bold}) (cosname{subtype}:cosname{type0}) (cosname{encoding}:cosname{identity-h}) (cosname{descendantfonts}:cosarray{[cosdictionary{(cosname{type}:cosname{font}) (cosname{subtype}:cosname{cidfonttype2}) (cosname{basefont}:cosname{aaamse+opensans-bold}) (cosname{cidsysteminfo}:cosdictionary{(cosname{registry}:cosstring{adobe}) (cosname{ordering}:cosstring{identity}) (cosname{supplement}:cosint{0}) }) (cosname{fontdescriptor}:cosdictionary{(cosname{type}:cosname{fontdescriptor}) (cosname{fontname}:cosname{aaamse+opensans-bold}) (cosname{flags}:cosint{4}) (cosname{fontweight}:cosfloat{700.0}) (cosname{italicangle}:cosfloat{0.0}) (cosname{fontbbox}:cosarray{[cosfloat{-619.1406}, cosfloat{-292.96875}, cosfloat{1318.8477}, cosfloat{1068.8477}]}) (cosname{ascent}:cosfloat{1068.8477}) (cosname{descent}:cosfloat{-292.96875}) (cosname{capheight}:cosfloat{713.8672}) (cosname{xheight}:cosfloat{545.89844}) (cosname{stemv}:cosfloat{251.93846}) (cosname{fontfile2}:cosstream{(cosname{filter}:cosname{flatedecode}) (cosname{length}:cosint{5625}) (cosname{length1}:cosint{8036}) }) (cosname{cidset}:cosstream{(cosname{filter}:cosname{flatedecode}) (cosname{length}:cosint{20}) }) }) (cosname{w}:cosarray{[cosint{3}, cosarray{[cosint{260}]}, cosint{68}, cosarray{[cosint{604}, cosint{633}, cosint{514}, cosint{633}, cosint{591}]}, cosint{74}, cosarray{[cosint{565}, cosint{657}, cosint{305}]}, cosint{15}, cosarray{[cosint{290}]}, cosint{79}, cosarray{[cosint{305}]}, cosint{16}, cosarray{[cosint{322}]}, cosint{80}, cosarray{[cosint{982}]}, cosint{17}, cosarray{[cosint{285}]}, cosint{81}, cosarray{[cosint{657}, cosint{619}]}, cosint{19}, cosarray{[cosint{571}]}, cosint{83}, cosarray{[cosint{633}]}, cosint{20}, cosarray{[cosint{571}]}, cosint{85}, cosarray{[cosint{454}, cosint{497}, cosint{434}, cosint{657}]}, cosint{27}, cosarray{[cosint{571}, cosint{571}, cosint{285}]}, cosint{93}, cosarray{[cosint{488}]}, cosint{36}, cosarray{[cosint{690}, cosint{672}]}, cosint{40}, cosarray{[cosint{560}]}, cosint{48}, cosarray{[cosint{943}, cosint{813}]}, cosint{53}, cosarray{[cosint{660}, cosint{551}, cosint{579}, cosint{756}]}, cosint{61}, cosarray{[cosint{579}]}]}) (cosname{cidtogidmap}:cosstream{(cosname{filter}:cosname{flatedecode}) (cosname{length}:cosint{84}) (cosname{length1}:cosint{188}) }) }]}) (cosname{tounicode}:cosstream{(cosname{filter}:cosname{flatedecode}) (cosname{length}:cosint{324}) }) }  embedder pdcidfonttype2embedder   fontdescriptor null   fontwidthofspace -1.0   iscmappredefined true   isdescendantcjk false   nounicode hashset<e>  -> empty  tounicodecmap null   widths null  i will try to find a minimum example on how to reproduce this. currently it is only reproducible as part of a bigger package :|",
        "label": 6
    },
    {
        "text": "empty pages after rendering images  org apache pdfbox util operator pagedrawer invoke hello, i'm printing file (test.pdf) which has on each page generated number with another font. i'm using pddocument.loadnonseq() to load data. in logs i can see feb 6, 2014 3:25:26 pm org.apache.pdfbox.util.operator.pagedrawer.invoke process warning: can't find the xobject for 'xf1' and no data except that generated numbers are printed. i've seen in some old bug that imageio library was needed, but now in dependencies i don't see it (http://pdfbox.apache.org/dependencies.html) please can you fix this? thanks",
        "label": 1
    },
    {
        "text": "merge documents fails due to illegalargumentexception when i tried to merge documents and one of them is a pdf file similar to attached file, i got an illegalargumentexception. see stacktrace: java.lang.illegalargumentexception: full  at org.apache.pdfbox.pdmodel.pagemode.fromstring(pagemode.java:71) ~[pdfbox-2.0.5.jar:2.0.5]  at org.apache.pdfbox.pdmodel.pddocumentcatalog.getpagemode(pddocumentcatalog.java:440) ~[pdfbox-2.0.5.jar:2.0.5]  at org.apache.pdfbox.multipdf.pdfmergerutility.appenddocument(pdfmergerutility.java:451) ~[pdfbox-2.0.5.jar:2.0.5]  at org.apache.pdfbox.multipdf.pdfmergerutility.mergedocuments(pdfmergerutility.java:261) ~[pdfbox-2.0.5.jar:2.0.5]",
        "label": 11
    },
    {
        "text": "java lang negativearraysizeexception in org apache pdfbox pdmodel graphics color pddevicegray createcolormodel the following exception gets logged out when converting some of our pdfs to images: java.lang.negativearraysizeexception at org.apache.pdfbox.pdmodel.graphics.color.pddevicegray.createcolormodel(pddevicegray.java:99) at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdpixelmap.java:354) at org.apache.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.mask(pdxobjectimage.java:215) at org.apache.pdfbox.pdmodel.graphics.xobject.pdxobjectimage.applymasks(pdxobjectimage.java:148) at org.apache.pdfbox.pdmodel.graphics.xobject.pdpixelmap.getrgbimage(pdpixelmap.java:366) at org.apache.pdfbox.util.operator.pagedrawer.invoke.process(invoke.java:87) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:557) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215) at org.apache.pdfbox.pdfviewer.pagedrawer.drawpage(pagedrawer.java:139) at org.apache.pdfbox.pdmodel.pdpage.converttoimage(pdpage.java:801) at org.apache.pdfbox.util.pdfimagewriter.writeimage(pdfimagewriter.java:130) at org.apache.pdfbox.pdftoimage.main(pdftoimage.java:226) at org.apache.pdfbox.pdfbox.main(pdfbox.java:96) can be reproduced from the commandline: java -jar pdfbox-app-1.8.10.jar pdftoimage 67c9515d-f7dd-4208-aada-c4489e91160c.pdf",
        "label": 11
    },
    {
        "text": "printing issues with landscape pages would you please remove the final modifier from pdfprintable and pdfpageable so that one can extending those classes. update: i've modified the original title of this issue to reflect the underlying bug, rather than the user wanting to have \"final\" removed for these classes and fix the bug themselves.",
        "label": 6
    },
    {
        "text": "ttfsubsetter scrambles postscript names and unicode codepoints when subset contains diaeresis i tried to build a standalone fontsubsetter with the great fontbox tools. it works so far for opentype/truetype fonts, but when the glyph subset contains characters with diaeresis (like german umlauts \u00e4\u00f6\u00fc), the ttfsubsetter class scrambles postscript names and unicode codepoints. when creating a subset from dejavusans.ttf for example, with only those two characters \"\u00f6\u200a\" (o umlaut and a hair space \\u200a), the resulting font subset is recognized as a valid font, but the unicode codepoint 200a in the resulting font file has the postscript name \"dieresis\" and the single dieresis are named \"uni200a\". see screenshot \"fontbox-2.0.5-ttfsubsetter_dieresis-scrambled-names.png\" and the subsetted font \"subset-dejavusans__dieresis-scrambled-names.ttf\". when there are more glyphs in the subset, more whitespace, special chars and umlauts, the scrambling goes even further and also scrambles unicode codepoints and not only postscript names: glyphs in subset: \"rabenk\u00f6igkrmloeygfthstjhdau cvf\u00fcd.\u2006w,\u00e4up:izwvzsn-\u00dflc\u2005pb5m\u00ab\u00bbo2013q\u00a9/;x978-()64xj'!\u00e4?\u2039\u203a ...\u00fcqy\u200a&\u00f6\u00e9|_\u2022{}[]>#*$^ +\" resulting font: \"subset-dejavusans__scrambled-codepoints.ttf\" screenshot: \"fontbox-2.0.5-ttfsubsetter_scrambled-codepoints.png\" i considder this a bug, as it does not appear when there are no umlauts or diaeresis in the subset.",
        "label": 11
    },
    {
        "text": "wrong rendering of the transparency group at the specific position on a page the rendering of the transparency groups works only if the whole page is rendered. if you try to render only a part of the page where is a transparency group placed, you will get only the white image or an image with shifted pixels representing applied soft mask. the simple fix is attached in the patch, including the test and the resources used for testing.",
        "label": 11
    },
    {
        "text": "more generic pdpagecontentstream constructor a missing option there already are numerous constructors of the pdpagecontentstream class public pdpagecontentstream(pddocument document, pdpage sourcepage) public pdpagecontentstream(pddocument document, pdpage sourcepage,     boolean appendcontent, boolean compress) public pdpagecontentstream(pddocument document, pdpage sourcepage,     boolean appendcontent, boolean compress, boolean resetcontext) (focusing on page content streams) which still fail to cover all relevant cases, foremost the case of prepending a new stream to create new background material. prepending a new stream has been requested by users e.g. on stackoverflow how to add background image to pdf using pdfbox? how to underlay a content stream with using pdpagecontentstream? furthermore pdfbox code itself internally at some places prepends a new content stream, mostly to prepend a save-graphics-state operation before the existing content. a proposal to not introduce yet another explicit flag parameter, i'd propose creating a new constructor which accepts an enumset parameter for an enumeration of flags (compress, prepend, append, reset, ...) instead of all those flag parameters. the former constructors could then be deprecated. public pdpagecontentstream(pddocument document, pdpage sourcepage,     enumset<streamoptions> streamoptions) there obviously are combinations in which some option does not make sense, e.g. reset without prepend or append. these may either be silently ignored or rejected with some exception. thinking this even further one might even consider to make this more generic by allowing one additional parameter which may be an integer or a content stream. this constructor variant could interpret prepend and append as respectively before or after the indicated existing page content stream. in this case even a replace option would make sense. i have not yet seen actual requests for a feature requiring this constructor variant, though.",
        "label": 11
    },
    {
        "text": "parser  java io ioexception  unknown dir object c ' ' cint peek ' ' peekint exception in thread \"main\" java.io.ioexception: unknown dir object c='>' cint=62 peek='>' peekint=62 org.apache.pdfbox.io.pushbackinputstream@7d2a1e44 at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:1098) at org.apache.pdfbox.pdfparser.baseparser.parsecosdictionaryvalue(baseparser.java:179) at org.apache.pdfbox.pdfparser.baseparser.parsecosdictionary(baseparser.java:292) at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:1000) at org.apache.pdfbox.pdfparser.pdfparser.parseobject(pdfparser.java:543) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:184) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1069) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1036) at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:1007)",
        "label": 1
    },
    {
        "text": "pdpagelabels with junks in particular pdf hi all. while extracting page number with particular pdf, the last page number was with junk values which is also extracted. here by i attaching the particular pdf and kindly guide me in that particular issue. here by i show my snippet of code which is working fine in all pdf but adding junk values with the particular pdf. code: pddocumentcatalog cat = pd.getdocumentcatalog(); string[] labels = cat.getpagelabels().getlabelsbypageindices(); system.out.println(\"hi\"+labels[0] +\"hi\"); system.out.println(\"hi\" +labels[labels.length - 1] + \"hi\"); output hi1hi correct output for first page hi3 orginal output for last page(bug) hi3hi expected output for last page kindly guide me in this issue .i attach the sample pdf with this file. thank you regards karthick.g",
        "label": 1
    },
    {
        "text": "illegalstateexception  recursive definition i get this exception with the attached file: warnung: using fallback font 'timesnewromanpsmt' for 'symbol,italic' sep 10, 2014 12:59:30 pm org.apache.pdfbox.pdmodel.font.pdsimplefont tounicode warnung: no unicode mapping for character code 119 in font symbol,italic exception in thread \"awt-eventqueue-0\" java.lang.illegalstateexception: recursive definition         at org.apache.pdfbox.pdmodel.font.pdsimplefont.isfontsymbolic(pdsimplefont.java:186)         at org.apache.pdfbox.pdmodel.font.pdfont.issymbolic(pdfont.java:370)         at org.apache.pdfbox.pdmodel.font.pdtruetypefont.codetogid(pdtruetypefont.java:289)         at org.apache.pdfbox.pdmodel.font.pdtruetypefont.getwidthfromfont(pdtruetypefont.java:250)         at org.apache.pdfbox.pdmodel.font.pdfont.getwidth(pdfont.java:216) the file probably does have a problem, ar claims that the /bbox value for \"symbol,italic\" is incorrect. however it displays the file, and so does gsview.",
        "label": 6
    },
    {
        "text": "nullpointerexception when constructing a pdjpeg using a bufferedimage in pdfbox 1.8.2 and 1.8.3, the constructor of pdjpeg class that takes a bufferedimage throws java.lang.nullpointerexception: bufferedimage bi = imageio.read(this.getclass().getclassloader().getresourceasstream(\"images/icon.png\")); pdjpeg icon = new pdjpeg(pdf, bi); the stack trace is: java.lang.nullpointerexception at org.apache.pdfbox.util.imageioutil.addresolution(imageioutil.java:211) at org.apache.pdfbox.util.imageioutil.createmetadata(imageioutil.java:204) at org.apache.pdfbox.util.imageioutil.writeimage(imageioutil.java:158) at org.apache.pdfbox.pdmodel.graphics.xobject.pdjpeg.createimagestream(pdjpeg.java:171) at org.apache.pdfbox.pdmodel.graphics.xobject.pdjpeg.<init>(pdjpeg.java:133) the culprit is in this method in the imageioutil: private static iiometadata createmetadata(renderedimage image, imagewriter imagewriter, imagewriteparam writerparams, int resolution) { ..... iiometadata meta = imagewriter.getdefaultimagemetadata( type, writerparams ); return (addresolution(meta, resolution) ? meta : null); } one of the jpg image writer in our environment is com.sun.media.imageioimpl.plugins.jpeg.clibjpegimagewriter, its implementation of getdefaultimagemetadata() returns null: public iiometadata getdefaultimagemetadata(imagetypespecifier imagetype, imagewriteparam param) { return null; } this causes the nullpointerexception at the first line of the addresolution() method: if (!meta.isreadonly() && meta.isstandardmetadataformatsupported()) i suggest that null checks be added at the following places: 1. imageioutil.addresolution(): if (!meta.isreadonly() && meta.isstandardmetadataformatsupported()) ==> if (meta != null && meta.isreadonly() && meta.isstandardmetadataformatsupported()) 2. imageioutil.writeimage(): iiometadata meta = createmetadata( image, imagewriter, writerparams, resolution); imagewriter.setoutput( output ); imagewriter.write( null, new iioimage( image, null, meta ), writerparams ); foundwriter = true; ==> iiometadata meta = createmetadata( image, imagewriter, writerparams, resolution); if (meta != null) { imagewriter.setoutput( output ); imagewriter.write( null, new iioimage( image, null, meta ), writerparams ); foundwriter = true; }",
        "label": 1
    },
    {
        "text": "get wrong image location i'm using below code to extract images to an xml file. public class imageextractor extends pdfstreamengine {     private list<image> images = new arraylist<>();     public imageextractor() {         addoperator(new concatenate());         addoperator(new drawobject());         addoperator(new setgraphicsstateparameters());         addoperator(new save());         addoperator(new restore());         addoperator(new setmatrix());     }     /**      * this is used to handle an operation.      *      * @param operator the operation to perform.      * @param operands the list of arguments.      * @throws ioexception if there is an error processing the operation.      */     @override     protected void processoperator(operator operator, list<cosbase> operands) throws ioexception {         string operation = operator.getname();         if (\"do\".equals(operation)) {             cosname objectname = (cosname) operands.get(0);             pdxobject xobject = getresources().getxobject(objectname);             if (xobject instanceof pdimagexobject) {                 pdimagexobject image = (pdimagexobject) xobject;                 string name = objectname.getname();                 string format = image.getsuffix();                 matrix ctmnew = getgraphicsstate().getcurrenttransformationmatrix();                 float imagewidth = ctmnew.getscalingfactorx();                 float imageheight = ctmnew.getscalingfactory();                 // position in user space units. 1 unit = 1/72 inch at 72 dpi                 float x = ctmnew.gettranslatex();                 float y = ctmnew.gettranslatey();                 bytearrayoutputstream bos = new bytearrayoutputstream();                 bufferedimage bufferedimage = image.getopaqueimage();                 imageio.write(bufferedimage, format, bos);                 images.add(new image(x, y, imagewidth, imageheight, name, format, bos.tobytearray()));             }         } else {             super.processoperator(operator, operands);         }     }     public byte[] tozipfile(pddocument doc) throws ioexception {         int pagenum = 0;         stringbuilder builder = new stringbuilder(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<document>\\n\");         bytearrayoutputstream bos = new bytearrayoutputstream();         zipoutputstream zipout = new zipoutputstream(bos);         try {             for (pdpage page : doc.getpages()) {                 builder.append(string.format(\"<page width=\\\"%f\\\" height=\\\"%f\\\">\\n\", page.getbbox().getwidth(), page.getbbox().getheight()));                 pagenum++;                 this.processpage(page);                 for (image image : images) {                     byte[] data = image.getdata();                     zipentry zipentry = new zipentry(image.getname() + \".\" + image.getformat());                     zipout.putnextentry(zipentry);                     zipout.write(data);                     builder.append(string.format(\"<image x=\\\"%f\\\" y=\\\"%f\\\" width=\\\"%f\\\" height=\\\"%f\\\" name=\\\"%s\\\" format=\\\"%s\\\"></image>\\n\", image.getx(), image.gety(), image.getwidth(), image.getheight(), image.getname(), image.getformat()));                 }                 builder.append(\"</page>\\n\");             }             builder.append(\"</document>\");             system.out.println(builder);             zipentry xmlfile = new zipentry(\"images.xml\");             zipout.putnextentry(xmlfile);             zipout.write(builder.tostring().getbytes(charset.defaultcharset()));         } finally {             zipout.close();         }         return bos.tobytearray();     } } output is below. the y location is wrong. it should be 434. <document> <page width=\"595.000000\" height=\"842.000000\"> <image x=\"48.000000\" y=\"108.000000\" width=\"315.000000\" height=\"300.000000\" name=\"im12\" format=\"jpg\"></image> </page> </document> i got the right output with poppler. <image top=\"434\" left=\"48\" width=\"315\" height=\"300\" src=\"src-1_1.jpg\"/>  ",
        "label": 1
    },
    {
        "text": "npe in pageiterator enqueuekids exception in thread \"main\" java.lang.nullpointerexception  at java.util.arraydeque.addlast(arraydeque.java:244)  at java.util.arraydeque.add(arraydeque.java:418)  at org.apache.pdfbox.pdmodel.pdpagetree$pageiterator.enqueuekids(pdpagetree.java:178)  at org.apache.pdfbox.pdmodel.pdpagetree$pageiterator.enqueuekids(pdpagetree.java:173)  at org.apache.pdfbox.pdmodel.pdpagetree$pageiterator.<init>(pdpagetree.java:159)  at org.apache.pdfbox.pdmodel.pdpagetree$pageiterator.<init>(pdpagetree.java:153)  at org.apache.pdfbox.pdmodel.pdpagetree.iterator(pdpagetree.java:123)  at org.apache.pdfbox.text.pdftextstripper.processpages(pdftextstripper.java:282) this worked in 2.0.7. there are about 200 occurences of this exception in the tests by tim.",
        "label": 1
    },
    {
        "text": "pdfbox fails to extracttext from adobe acrobat x bit aes encrypted documents from the command line version of pdfbox, this exception is printed out: extracttext failed with the following exception: java.lang.arrayindexoutofboundsexception at java.lang.system.arraycopy(native method) at org.apache.pdfbox.pdmodel.encryption.standardsecurityhandler.computeencryptedkey(standardsecurityhandler.java:571) at org.apache.pdfbox.pdmodel.encryption.standardsecurityhandler.computeuserpassword(standardsecurityhandler.java:608) at org.apache.pdfbox.pdmodel.encryption.standardsecurityhandler.isuserpassword(standardsecurityhandler.java:792) at org.apache.pdfbox.pdmodel.encryption.standardsecurityhandler.decryptdocument(standardsecurityhandler.java:189) at org.apache.pdfbox.pdmodel.pddocument.openprotection(pddocument.java:1091) at org.apache.pdfbox.extracttext.main(extracttext.java:190) at org.apache.pdfbox.pdfbox.main(pdfbox.java:42) the document i was using was encrypted using adobe acrobat x pro and has only page extraction disabled inside of it. it was encrypted only with a permissions password.",
        "label": 1
    },
    {
        "text": "pdf with blanks at the beginning can't be parsed the attached files don't parse. the have some crs and tabs at the beginning. the files parse properly if the blanks are removed. i thought we were resilient against this type of flaw...",
        "label": 1
    },
    {
        "text": "possibilty to direcvtly add r and d stream into pdappearancedictionary adding two methods to authorize adding directly r and d stream into ap dictionary, by patching org.apache.pdfbox.pdmodel.interactive.annotation.pdappearancedictionary class",
        "label": 1
    },
    {
        "text": "java lang classcastexception is thrown when flattening form with a picture without picture in the form flattening works ok. with picture the following exception is thrown: exception in thread \"main\" java.lang.classcastexception: org.apache.pdfbox.pdmodel.graphics.image.pdimagexobject cannot be cast to org.apache.pdfbox.pdmodel.graphics.form.pdformxobject at org.apache.pdfbox.pdmodel.interactive.form.pdacroform.resolveneedstranslation(pdacroform.java:726) at org.apache.pdfbox.pdmodel.interactive.form.pdacroform.flatten(pdacroform.java:276) at org.apache.pdfbox.pdmodel.interactive.form.pdacroform.flatten(pdacroform.java:192) at test.flattenissue.main(flattenissue.java:27) attaching source pdf form (generated in open office).",
        "label": 8
    },
    {
        "text": "failed reading embedded font hi, i try to extract an image out of the attatched pdf. pdfviewer like \"acrobat reader\" or the ubuntu \"document viewer\" are able to display the pdf in a correct way. pdfbox is throwing exception: schwerwiegend: can't read the embedded type1 font glcnus+stempelgaramond-roman java.io.ioexception: invalid start of ascii segment  at org.apache.fontbox.type1.type1parser.parseascii(type1parser.java:83)  at org.apache.fontbox.type1.type1parser.parse(type1parser.java:61)  at org.apache.fontbox.type1.type1font.createwithsegments(type1font.java:70)  at org.apache.pdfbox.pdmodel.font.pdtype1font.<init>(pdtype1font.java:174)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:65)  at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:92)  at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:50)  at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:803)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:465)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:439)  at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149)  at org.apache.pdfbox.tools.extractimages$imagegraphicsengine.run(extractimages.java:195)  at org.apache.pdfbox.tools.extractimages.extract(extractimages.java:174)  at org.apache.pdfbox.tools.extractimages.run(extractimages.java:139)  at org.apache.pdfbox.tools.extractimages.main(extractimages.java:83)  at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:59) checked with the latest version from git. java -jar pdfbox-app-2.0.0-snapshot.jar extractimages /home/hf/downloads/0023-4834_t1_1.pdf",
        "label": 6
    },
    {
        "text": "npe in cosdictionarymap put [imported from sourceforge] http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1538596 originally submitted by jfnieto on 2006-08-11 03:28. when importing fdf fields in a pdf file, i get a nullpointerexception in cosdictionarymap. i'm just starting with pdfbox. i use it to create final pdf files merging a pdf with an fdf file. in most cases, it works fine, but with a couple of pdf files i get this error. i have done a little program to import a sample fdf into all \"template\" pdfs. i only get the npe with two of them. the source of this test is attached to this message. the exception trace: java.lang.nullpointerexception at org.pdfbox.pdmodel.common.cosdictionarymap.put(cosdictionarymap.java: 120) at org.pdfbox.pdmodel.interactive.form.pdappearance.getfontandupdatereso urces(pdappearance.java:447) at org.pdfbox.pdmodel.interactive.form.pdappearance.setappearancevalue(p dappearance.java:275) at org.pdfbox.pdmodel.interactive.form.pdvariabletext.setvalue(pdvariabl etext.java:145) at org.pdfbox.pdmodel.interactive.form.pdfield.importfdf(pdfield.java:31 9) at org.pdfbox.pdmodel.interactive.form.pdacroform.importfdf(pdacroform.j ava:132) at testpdf.importfdf(testpdf.java:44) at testpdf.test(testpdf.java:28) at testpdf.main(testpdf.java:60) [attachment on sourceforge] http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1538596&file_id=188647 testpdf.java (application/octet-stream), 1363 bytes test: import a fdf into a group of pdf files [comment on sourceforge] originally sent by jfnieto. logged in: yes user_id=393901 i'm playing with the pdfbox code. if i insert a check in the put method of cosdictionarymap to avoid the npe, then i get errors when saving() the final document: java.lang.nullpointerexception at org.pdfbox.cos.cosstream.getfilteredstream(cosstream.java:153) at org.pdfbox.pdfwriter.coswriter.visitfromstream(coswriter.java:936) at org.pdfbox.cos.cosstream.accept(cosstream.java:218) at org.pdfbox.pdfwriter.coswriter.dowriteobject(coswriter.java:449) at org.pdfbox.pdfwriter.coswriter.dowritebody(coswriter.java:382) at org.pdfbox.pdfwriter.coswriter.visitfromdocument(coswriter.java:794) at org.pdfbox.cos.cosdocument.accept(cosdocument.java:390) at org.pdfbox.pdfwriter.coswriter.write(coswriter.java:1089) at org.pdfbox.pdmodel.pddocument.save(pddocument.java:611) at org.pdfbox.pdmodel.pddocument.save(pddocument.java:592) at genpdf.importfdf(genpdf.java:25) at genpdf.main(genpdf.java:43)",
        "label": 1
    },
    {
        "text": "parse error reading embedded type1 font attached file works with acrobat reader, mupdf, pdftk, and so on. when using pdfbox to render first page to an image: 16:01:13.042 [run-main-0] warn o.a.pdfbox.pdmodel.font.pdtype1font - using fallback font arialmt for frutiger 16:01:13.047 [run-main-0] warn o.a.pdfbox.pdmodel.font.pdtype1font - using fallback font arial-boldmt for frutiger45,bold 16:01:13.168 [run-main-0] error o.a.pdfbox.pdmodel.font.pdtype1font - can't read the embedded type1 font kix-barcode-regular java.io.ioexception: unexpected closing parenthesis at org.apache.fontbox.type1.type1lexer.readtoken(type1lexer.java:123) at org.apache.fontbox.type1.type1lexer.nexttoken(type1lexer.java:75) at org.apache.fontbox.type1.type1parser.parsebinary(type1parser.java:468) at org.apache.fontbox.type1.type1parser.parse(type1parser.java:64) at org.apache.fontbox.type1.type1font.createwithsegments(type1font.java:85) at org.apache.pdfbox.pdmodel.font.pdtype1font.<init>(pdtype1font.java:262) at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:62) at org.apache.pdfbox.pdmodel.pdresources.getfont(pdresources.java:143) at org.apache.pdfbox.contentstream.operator.text.setfontandsize.process(setfontandsize.java:60) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:829) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:486) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:460) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:150) at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:189) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:145) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:68) to reproduce (scala, sorry, but straightforward to reproduce): val doc = new pddocument.load(...) val renderer = new pdfrenderer(doc) val img = renderer.renderimage(0, 1.0f)",
        "label": 11
    },
    {
        "text": "arrayindexoutofboundsexception when type1 font is empty exception when rendering page 2 of the attached file: exception in thread \"awt-eventqueue-0\" java.lang.arrayindexoutofboundsexception: 0         at org.apache.fontbox.type1.type1parser.parseascii(type1parser.java:77)         at org.apache.fontbox.type1.type1parser.parse(type1parser.java:62)         at org.apache.fontbox.type1.type1font.createwithsegments(type1font.java:70) the font is empty: 249 0 obj <<  /fontfile 250 0 r  /type /fontdescriptor  /ascent 833  /capheight 708  /descent 250  /flags 34  /fontbbox [ -170 -251 1020 934 ]  /fontname /bodoni-italic  /italicangle 0  /stemv 0  >>  endobj 250 0 obj << /length 3 /filter [ /ascii85decode ] /length1 0 /length2 0 /length3 0 >>  stream ~> endstream endobj ar brings a warning, but is able to render the page. skipping the parse call in pdtype1font.java can also render the page. changing type1parser.parse() to return null if the font is empty might also succeed, although i didn't test that.",
        "label": 6
    },
    {
        "text": "create nonsequentialparser with inputstream hi, currently the nonsequentialparser can't be initialized using an inputstream. to allow the preflightparser to inherit from the nonsequentialparser, i have create a constructor that takes an inputstream as parameter. in attachment you can find a patch that : creates a tmpfile with the given inputstream in the constructor method deletes the tmpfile at the end of the parse method. call the parseobjectdynamically method on the trailer entries (useful for preflight module) what is your opinion about this proposal. regards, eric",
        "label": 3
    },
    {
        "text": "specification conform xref trailer parsing   fix pdfbox currently reads xref table/trailer and xref objects without using startxref or 'prev' information which results in applying not active data resulting in using wrong objects or resulting in parsing exceptions because old trailer settings do not apply anymore. this happens especially with updated pdf documents where changes are simply appended and old objects/xref entries remain but are not referenced. my last patch (pdfbox-1014) tried to solve this for a specific case but it was based on assumptions which do not hold in every case. the specification compliant way is to read the last startxref which points to the last xref object which itself may reference further xref objects using 'prev' attribute. i have written a fix which works the standard way and can fall back to the old behavior in case startxref is wrong or missing. the fix tries to be as unobtrusive as possible. a new class (o.a.p.pdfparser.xreftrailerresolver) is filled with all xref table/trailer and xref object data. after document is parsed (and last startxref is read) this class creates xref table and trailer using startxref and 'prev' information. beside this new class there are small changes to pdfparser and cosdocument. this bugfix/improvement should bring pdfbox a good step closer to be pdf specification conform - especially as long as the new specification conform parser project is not finished. this bugfix supersedes the fix from pdfbox-1014.",
        "label": 1
    },
    {
        "text": "pdf box color distortion hi, i have tried to convert pdf into image using pdfbox. image got converted but colors were distorted. same issue could be found in following link. http://stackoverflow.com/questions/4523688/pdfbox-problem-with-converting-pdf-page-into-image i also found out that this issue was fixed long back. please see below for more details https://issues.apache.org/jira/browse/pdfbox-963?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel.",
        "label": 6
    },
    {
        "text": "cryptographyexception for file that isn't encrypted i get this with the attached file: exception in file: rennie-fresh-gebrauchsinformation.pdf java.io.ioexception: error (cryptographyexception) while creating security handler for decryption: the supplied password does not match either the owner or user password in the document 12.03.2014 20:44:06.063 error [main] org.apache.pdfbox.pdfparser.nonsequentialpdfparser:1888 - can't find the object xref at offset 4543 at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.initialparse(nonsequentialpdfparser.java:444) at org.apache.pdfbox.pdfparser.nonsequentialpdfparser.parse(nonsequentialpdfparser.java:741) at org.apache.pdfbox.pdmodel.pddocument.loadnonseq(pddocument.java:1152) at org.apache.pdfbox.pdmodel.pddocument.loadnonseq(pddocument.java:1135) at pdfboxpageimageextraction.extractimages.dopdf(extractimages.java:203) at pdfboxpageimageextraction.extractimages.main(extractimages.java:86) this didn't happen ~ 2 weeks ago, so i suspect its a regression.",
        "label": 6
    },
    {
        "text": "null pointer exception jasper.pdf :: exception in thread \"main\" java.lang.nullpointerexception at org.apache.pdfbox.preflight.font.container.type1container.getfontprogramwidth(type1container.java:73) at org.apache.pdfbox.preflight.font.container.fontcontainer.checkglyphwith(fontcontainer.java:115) at org.apache.pdfbox.preflight.content.contentstreamwrapper.validtext(contentstreamwrapper.java:372) at org.apache.pdfbox.preflight.content.contentstreamwrapper.validstringdefinition(contentstreamwrapper.java:264) at org.apache.pdfbox.preflight.content.contentstreamwrapper.checkshowtextoperators(contentstreamwrapper.java:203) at org.apache.pdfbox.preflight.content.contentstreamwrapper.processoperator(contentstreamwrapper.java:180) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:268) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:235) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:215) at org.apache.pdfbox.preflight.content.contentstreamwrapper.validpagecontentstream(contentstreamwrapper.java:75) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validatecontent(singlepagevalidationprocess.java:174) at org.apache.pdfbox.preflight.process.reflect.singlepagevalidationprocess.validate(singlepagevalidationprocess.java:83) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:49) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validatepage(pagetreevalidationprocess.java:56) at org.apache.pdfbox.preflight.process.pagetreevalidationprocess.validate(pagetreevalidationprocess.java:45) at org.apache.pdfbox.preflight.utils.contexthelper.callvalidation(contexthelper.java:74) at org.apache.pdfbox.preflight.utils.contexthelper.validateelement(contexthelper.java:88) at org.apache.pdfbox.preflight.preflightdocument.validate(preflightdocument.java:168) at org.apache.pdfbox.preflight.validator_a1b.runsimple(validator_a1b.java:158) at org.apache.pdfbox.preflight.validator_a1b.main(validator_a1b.java:125)",
        "label": 3
    },
    {
        "text": "error expected floating point number actual '0 262' as reported by simon gaeremynck in the user mailing list with attached file. [3] stack trace: [error] at org.apache.pdfbox.cos.cosfloat.<init>(cosfloat.java:81) [error] at org.apache.pdfbox.cos.cosnumber.get(cosnumber.java:115) [error] at org.apache.pdfbox.pdfparser.baseparser.parsedirobject(baseparser.java:939) his proposed change in cosfloat -            if (afloat.matches(\"^0\\\\.0+\\\\-\\\\d+\")) +            if (afloat.matches(\"^0\\\\.0*\\\\-\\\\d+\")) i'll commit it after running regression tests.",
        "label": 11
    },
    {
        "text": "parser xmpunexpectedelementexception commercial validators verify as a valid pdf a org.apache.padaf.xmpbox.parser.xmpunexpectedelementexception: unexpected property definition in one of pdf/a extension schemas description at org.apache.padaf.xmpbox.parser.xmpdocumentbuilder.parseschemadescription(xmpdocumentbuilder.java:732) at org.apache.padaf.xmpbox.parser.xmpdocumentbuilder.parseextensionschema(xmpdocumentbuilder.java:677) at org.apache.padaf.xmpbox.parser.pdfaextentionschemapreprocessor.parsedescription(pdfaextentionschemapreprocessor.java:74) at org.apache.padaf.xmpbox.parser.xmpdocumentbuilder.parse(xmpdocumentbuilder.java:164) at org.apache.padaf.xmpbox.parser.pdfaextentionschemapreprocessor.process(pdfaextentionschemapreprocessor.java:42) at org.apache.padaf.xmpbox.parser.xmpdocumentbuilder.parse(xmpdocumentbuilder.java:124) at org.apache.padaf.preflight.helpers.metadatavalidationhelper.innervalidate(metadatavalidationhelper.java:122) at org.apache.padaf.preflight.helpers.abstractvalidationhelper.validate(abstractvalidationhelper.java:91) at org.apache.padaf.preflight.abstractvalidator.runvalidation(abstractvalidator.java:122) at org.apache.padaf.preflight.pdfa1bvalidator.validate(pdfa1bvalidator.java:97) at org.apache.padaf.preflight.validator_a1b.validate(validator_a1b.java:182) at org.apache.padaf.preflight.validator_a1b.<init>(validator_a1b.java:86) at org.apache.padaf.preflight.validator_a1b.main(validator_a1b.java:80) /home/fausser/weirdorigflattenedpdfa.pdf is not valid, error(s) : 3.1.3: invalid font definition, the fontfile2 is invalid 3.1.3:invalid font definition, the fontfile2 is invalid 2.4.3: invalid color space, destoutputprofile is missing",
        "label": 3
    },
    {
        "text": "cannot decrypt aes256 encrypted files with nonseq parser it is not possible to open the attached file (password: 1234567890abcdefghijk1234567890abcdefghijk ) with the nonseq parser: warnung: verification of permissions failed (-64 != -3392) nov 06, 2014 7:54:35 am org.apache.pdfbox.pdfparser.baseparser parsecosarray warnung: corrupt object reference at offset 123 nov 06, 2014 7:54:35 am org.apache.pdfbox.pdfparser.baseparser parsecosarray warnung: corrupt object reference at offset 151 nov 06, 2014 7:54:35 am org.apache.pdfbox.filter.flatefilter decode schwerwiegend: flatefilter: stop reading corrupt stream due to a dataformatexception",
        "label": 1
    },
    {
        "text": "can't load pdf file which has attachment pdfbox throws exeception when parsing some pdf files with attachment. those pdf files can be opened by acrobat reader successfully. the exception messages are not the same, different file has different message. one of the message is: invalid dictionary, found: 'u' but expected: '/' i've checked latest version, it still happen.",
        "label": 1
    },
    {
        "text": "dpi always i'm trying to convert a 1 page pdf report to an image using converttoimage. my used command goes as follows: bufferedimage bi=page.converttoimage(bufferedimage.type_int_rgb, 300); no matter how much i change the resolution (300 in the example), the dpi stays the same, even though the quality and the dimensions of the picture change. adding a comparison between a 96 resolution picture and what should be a 300 resolution picture (notice the dpi) http://i58.tinypic.com/9sv339.png",
        "label": 11
    },
    {
        "text": "malformed document causes npe in pdnametreenode getvalue if a nametreenode has neither a names or kids item, then getvalue crashes with a null pointer exception. fix: eclipse workspace patch 1.0 #p pdfbox index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/pdnametreenode.java =================================================================== pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/pdnametreenode.java (revision 1026306) +++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/pdnametreenode.java (working copy) @@ -147,13 +147,15 @@ else { list kids = getkids(); for( int i=0; i<kids.size() && retval == null; i++ ) { pdnametreenode childnode = (pdnametreenode)kids.get( i ); if( childnode.getlowerlimit().compareto( name ) <= 0 && childnode.getupperlimit().compareto( name ) >= 0 ) + if (kids != null) { + for( int i=0; i<kids.size() && retval == null; i++ ) { retval = childnode.getvalue( name ); + pdnametreenode childnode = (pdnametreenode)kids.get( i ); + if( childnode.getlowerlimit().compareto( name ) <= 0 && + childnode.getupperlimit().compareto( name ) >= 0 ) + { + retval = childnode.getvalue( name ); + } } } }",
        "label": 0
    },
    {
        "text": "npe in sanitizetype in org apache pdfbox pdmodel pdpagetree hello pdfbox developers, the attached file produces the follow npe opening the pdf file: [20.11.2017 12:54:41.183] [thread id: 74] severe: [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: doinbackground() java.lang.nullpointerexception org.apache.pdfbox.pdmodel.pdpagetree sanitizetype: 219 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: org.apache.pdfbox.pdmodel.pdpagetree get: 211 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: org.apache.pdfbox.pdmodel.pddocument getpage: 1391 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: org.apache.pdfbox.rendering.pdfrenderer renderimage: 108 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: org.apache.pdfbox.rendering.pdfrenderer renderimagewithdpi: 94 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: vlh.tools.pdf.pdfboxutil generateimage: 789 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: vlh.notes.bstarchive.file.pdf.pdffileextend generatepreviewimage: 164 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: vlh.notes.bstarchive.file.filedialog.imageconversionworker doinbackground: 175 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: vlh.notes.bstarchive.file.filedialog.imageconversionworker doinbackground: 1 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: javax.swing.swingworker$1 call: 288 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: java.util.concurrent.futuretask$sync innerrun: 314 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: java.util.concurrent.futuretask run: 149 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: javax.swing.swingworker run: 327 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: java.util.concurrent.threadpoolexecutor$worker runtask: 939 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: java.util.concurrent.threadpoolexecutor$worker run: 963 [20.11.2017 12:54:41.183] [thread id: 74] [vlh.notes.bstarchive.file.filedialog.imageconversionworker]: java.lang.thread run: 767 the error started occuring with pdfbox release 2.0.8! the pdf has been generated by an older samsung scan software. adobe reader and foxit are able to open the file correctly.",
        "label": 1
    },
    {
        "text": "change some modifiers from private to protected in pdftextstripper class hi, i am parsing a very complicated pdf for which text extraction is not in proper sequence, so i had to enable setsortbyposition = true. now i want to access each textposition element and do some processing with them, normally i would override processtextposition method and do my stuff there, but since i have enabled setsortbyposition, the code that sorts before extracting text is invoked after processtextposition, so i can not override processtextposition to get text according to their position. i did some research and found that overriding writeline method of pdftextstripper can be useful for me because it processes each textposition after they are sorted according to their position. so i have done a poc in my personal computer by doing following changes in pdftextstripper class 1 - 'private' void writeline() changed to 'protected' 2 - 'private' static final class wordwithtextpositions changed to 'protected' after this everything works as per my expectation, i think these changes are also going to help other people who use this library. i can contribute this code myself, if you suggest, let me know, thanks and regards praveer",
        "label": 11
    },
    {
        "text": "support quadpoints in link annotations ",
        "label": 11
    },
    {
        "text": "create testsymmetrickeyencryption java similarly to org.apache.pdfbox.encryption.testpublickeyencryption, also test password based encryption 1) 128bit 2) 256bit aes pdfbox-1594",
        "label": 11
    },
    {
        "text": "dublincoreschema getdates always returns empty list creating and empty document and adding a dates to the dublincore schema. getdates() won't read the previously saved values.",
        "label": 11
    },
    {
        "text": "invalidated signature signing pdf twice a customer sent us a pdf that has this problem: when it is signed twice by pdfbox 1.8.x the second signature invalidates the first one. if we apply the same procedure using pdfbox 2.0.x the problem doesn't occur, but the customer required java 1.5 so we can't switch to the new version in this case. for privacy purposes we had anonymized the original pdf file by editing 3 stream inside the pdf, without altering the original structure. so the file \"92752146_nosign_anonymous.pdf\" you can find in attachement has not the original text/image streams, but reproduces the problem as the original one. thank you in advance  ",
        "label": 11
    },
    {
        "text": "avoid npe when encountering null pdcomplexfilespecification in some pdfs in the wild, pdcomplexfilespecification can be null. it would be great if we could skip those files that don't have any contents and not throw an npe.",
        "label": 6
    },
    {
        "text": "i cant able to get list of fields i have a pdf template contains textboxes. i need textbox value but its not displayed properly. i am getting null pointer exception. here i mentioned my code .... try { pddocument pdf = pddocument.load(\"c:\\\\documents and settings\\\\manikandan.n\\\\desktop\\\\mytemplate\\\\1.pdf\" ); pddocumentcatalog doccatalog = pdf.getdocumentcatalog(); pdacroform acroform = doccatalog.getacroform(); acroform.setcachefields(true); pdfield field = acroform.getfield(\"client_name\"); field.setvalue(\"smith\"); system.out.println(\"sample::::::\"+field.getvalue()); pdf.save( \"c:\\\\documents and settings\\\\manikandan.n\\\\desktop\\\\mytemplate\\\\2.pdf\" );*/ } catch(exception e) { system.out.println(\"error::::\"+e); }",
        "label": 8
    },
    {
        "text": "unable to print the pdf with acrobat shrink to fit print could you please create an enhancement for pdfbox 2.0 to make the default scaling to actual size. current default is shrink to fix and its not matching with the acrobat shrink to fit print, pdfbox one is too small than adobe acrobat.",
        "label": 6
    },
    {
        "text": "first page and last page navigation with keyboard shortcuts in pdfreader for navigating first page and last pages of a pdf file, there is no keyboard shortcut like other pdf readers. it's a simple yet intuitive functionality for any pdf reader. generally ctrl+end, end are used to jump to the last page while ctrl+home, home are used to jump to the first page. i've written a patch for this. in view menu, two new entry is added i.e \"first page\", \"last page\" along with keyboard shortcuts. and view menu items are made responsive e.g. when i'm in the first page \"previous page\" and \"first page\" menu entries are disabled.",
        "label": 11
    },
    {
        "text": "pdfimagewriter should use logging instead of system out println the pdfimagewriter writes to system.out. it's annoying to suppress/redirect it in a wrapper script.",
        "label": 1
    },
    {
        "text": "nullpointerexception in dateconverter toiso8601 dateconverter java  i tried to add metadata as shown in addmetadatafromdocinfo.java. there's also the line basicschema.setmodifydate( info.getmodificationdate() ); but i get a nullpointerexception at this line: java.lang.nullpointerexception at org.apache.jempbox.impl.dateconverter.toiso8601(dateconverter.java:221) at org.apache.jempbox.xmp.xmpschema.setdateproperty(xmpschema.java:249) at org.apache.jempbox.xmp.xmpschemabasic.setmodifydate(xmpschemabasic.java:266) because the info.getmodificationdate() returns null. it would be better to catch null parameters in the metadata set methods. workaround: if (pddi.getmodificationdate() != null) { basicschema.setmodifydate(pddi.getmodificationdate()); } //else: avoid npe",
        "label": 1
    },
    {
        "text": "arrayindexoutofboundsexception in pdftextstripper processtextposition  reported by andrew m. in the user mailing list: exception in thread \"main\" java.lang.arrayindexoutofboundsexception: array index out of range: 3  at java.util.vector.get(vector.java:744)  at org.apache.pdfbox.text.pdftextstripper.processtextposition(pdftextstripper.java:903)  at org.apache.pdfbox.text.pdftextstripperbyarea.processtextposition(pdftextstripperbyarea.java:132)  at org.apache.pdfbox.text.pdftextstreamengine.showglyph(pdftextstreamengine.java:229)  at org.apache.pdfbox.contentstream.pdfstreamengine.showtext(pdfstreamengine.java:717)  at org.apache.pdfbox.contentstream.pdfstreamengine.showtextstrings(pdfstreamengine.java:627)  at org.apache.pdfbox.contentstream.operator.text.showtextadjusted.process(showtextadjusted.java:38)  at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:829)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:490)  at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:456)  at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:167)  at org.apache.pdfbox.text.pdftextstreamengine.processpage(pdftextstreamengine.java:117)  at org.apache.pdfbox.text.pdftextstripper.processpage(pdftextstripper.java:347)  at org.apache.pdfbox.text.pdftextstripperbyarea.extractregions(pdftextstripperbyarea.java:113)  at testpdfbox20.extracttexterror.textfrombox(extracttexterror.java:25)  at testpdfbox20.extracttexterror.main(extracttexterror.java:45) public class extracttexterror {     static string textfrombox(pddocument doc, int x, int y, int w, int h, int page)             throws ioexception     {         pdftextstripperbyarea stripper = new pdftextstripperbyarea();         rectangle rect = new rectangle(x, y - h, w, h);         stripper.addregion(\"region\", rect);         int pagecount = doc.getdocumentcatalog().getpages().getcount();         system.out.println(\"getting text from page #\" + page + \" of \" + pagecount + \" in doc.\");         if (page <= pagecount)         {             pdpage pp = doc.getdocumentcatalog().getpages().get(page - 1);             stripper.extractregions(pp);             string text = stripper.gettextforregion(\"region\");             system.out.println(\"text=\" + text);             return text;         }         else         {             return \"no page #\" + page;         }     }     public static void main(string[] args) throws ioexception     {         pddocument doc = pddocument.load(new file(\"jaf-1-150219.pdf\"));         textfrombox(doc, 33, 159, 216, 43, 1);     } }",
        "label": 11
    },
    {
        "text": "regression  npe in preflightcontentstream works in 1.8 java -cp pdf-box-svn/preflight/target/preflight-2.0.0-snapshot.jar:pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar:pdf-box-svn/xmpbox/target/xmpbox-2.0.0-snapshot.jar org.apache.pdfbox.preflight.validator_a1b expected.pdf exception in thread \"main\" java.lang.nullpointerexception at org.apache.pdfbox.preflight.content.preflightcontentstream.validxobjcontentstream(preflightcontentstream.java:99)",
        "label": 6
    },
    {
        "text": "rendering linefeed  no unicode mapping for  notdef   printing of on pdf document does not occurs correctly: linefeed is also printed as a char \"without glyph\". org.apache.pdfbox.pdmodel.font.pdsimplefont tounicode warnung: no unicode mapping for .notdef (10) in font helvetica org.apache.pdfbox.rendering.ttfglyph2d getpathforgid warnung: no glyph for 10 in font helvetica attachments: pdf_sourcefile.pdf -> the pdf document to be printed pdf_linefeed_no_glyph.pdf -> the result of the issued printjob, printed by \"pdf creator printer\" (looks the same on a real printer) test_java_prog.txt -> java program to test it",
        "label": 11
    },
    {
        "text": "pdfbox image extraction fails with an arrayoutofboundsexception in pdpixelmap getrgbimage  the project that i'm working on has been using pdfbox for both text extraction and image extraction from pdf documents. we wrote a class, pdfimagestripper, which extends pdfstreamengine: public class pdfimagestripper extends pdfstreamengine public list<extractedimage> getimages(pddocument document, string documentfilename, file targetdirectory) throws ioexception { resetengine(); this.document = document; this.documentfilename = documentfilename; this.targetdirectory = targetdirectory; currentimagenumber = 1; images.clear(); writeimages(); return images; } private void writeimages() throws ioexception { list<pdpage> pages = (list<pdpage>) document.getdocumentcatalog().getallpages(); for (pdpage page : pages) { if (page != null) { processstream(page, page.findresources(), page.getcontents().getstream()); } } } the call chain is shown below: none.decode(byte[], byte[]) line: 57 pdpixelmap.getrgbimage() line: 182 pdpixelmap.write2outputstream(outputstream) line: 209 pdpixelmap(pdxobjectimage).write2file(file) line: 142 pdfimagestripper.saveimage(pdxobjectimage, string, file) line: 208 pdfimagestripper.processoperator(pdfoperator, list) line: 155 pdfimagestripper(pdfstreamengine).processsubstream(pdpage, pdresources, cosstream) line: 229 pdfimagestripper(pdfstreamengine).processstream(pdpage, pdresources, cosstream) line: 188 pdfimagestripper.writeimages() line: 113 there is an arrayoutofboundsexception in the decode method. the decode method is nothing more than a wrapper for a call to system.arraycopy(): public void decode(byte[] src, byte[] dest) { system.arraycopy(src,0,dest,0,src.length); } the problem is, the source array is larger than the destination array. this is show (from the eclipse debugger) below: src byte[455112] (id=171) dest byte[435456] (id=175) the code that seems to be causing the problem is shown below. the branch that this bug shows up on is the lzw_decode branch. note that in the other code branch, the code makes sure that there is no size problem. if( predictor < 10 || filters == null || !(filters.contains( cosname.lzw_decode.getname()) || filters.contains( cosname.flate_decode.getname()) ) ) { predictoralgorithm filter = predictoralgorithm.getfilter(predictor); filter.setwidth(width); filter.setheight(height); filter.setbpp((bpc * 3) / 8); filter.decode(array, bufferdata); } else { system.arraycopy( array, 0,bufferdata, 0, (array.length<bufferdata.length?array.length: bufferdata.length) ); } one fix may be to simply change the code as follows (again, recall that the \"decode\" method is nothing but a wrapper for system.arraycopy()): if( predictor < 10 || filters == null || !(filters.contains( cosname.lzw_decode.getname()) || filters.contains( cosname.flate_decode.getname()) ) ) { predictoralgorithm filter = predictoralgorithm.getfilter(predictor); filter.setwidth(width); filter.setheight(height); filter.setbpp((bpc * 3) / 8); } system.arraycopy( array, 0,bufferdata, 0, (array.length<bufferdata.length?array.length: bufferdata.length) ); if jira allows me to attach a file that causes this problem i will do so.",
        "label": 1
    },
    {
        "text": "pdftextstripper issue related to word positions not correctly being parsed i found in a pdf i was pulling text from by using a custom pdftextstripper subclass that overrides writestring(string text, list<textposition> textpositions) that i was getting the wrong textpositions that were not lined up with the text. i found that the test position of all \u201cwords\u201d in a line always come over as the \u201clast\u201d text positions of the last word in the line. i found the issue in the pdftextstripper class so here is the code issue: /** used within {@link #normalize(list, boolean, boolean)} to handle a {@link textposition}. * @return the stringbuilder that must be used when calling this method. */ private stringbuilder normalizeadd(linkedlist<wordwithtextpositions> normalized, stringbuilder linebuilder, list<textposition> wordpositions, textposition text) { if (text instanceof wordseparator) { normalized.add(createword(linebuilder.tostring(), wordpositions)); linebuilder = new stringbuilder(); wordpositions.clear(); } else { linebuilder.append(text.getcharacter()); wordpositions.add(text); } return linebuilder; } when the normalizeadd method, you create a new word passing the wordpositions. a reference to the wordpositions is stored in the new wordwithtextpositions in the normalized linked list, but in the next line, you clear(). since the last wordpositions was passed as a reference, the wordpositions is cleared in the wordwithtextpositions you just created. soo, i would suggest you do the following: /** * used within {@link #normalize(list, boolean, boolean)} to handle a {@link textposition} . @return the stringbuilder that must be used when calling this method. */ private stringbuilder normalizeadd(linkedlist<wordwithtextpositions> normalized, stringbuilder linebuilder, list<textposition> wordpositions, textposition text) unknown macro: { if (text instanceof wordseparator) { normalized.add(createword(linebuilder.tostring(), new arraylist<textposition>(wordpositions))); linebuilder = new stringbuilder(); wordpositions.clear(); } else { linebuilder.append(text.getcharacter()); wordpositions.add(text); } return linebuilder; }",
        "label": 1
    },
    {
        "text": "converting pdf to png image is scrammbled code below image does not match the pdf:     try (pddocument document = pddocument.load(attachedfile)) {             pdpage page = (pdpage) document.getdocumentcatalog().getallpages().get(0);             file imagefile = file.createtempfile(\"test1\", \".png\");             imagefile.deleteonexit();             bufferedimage image = page.converttoimage();             imageio.write(image, \"png\", imagefile);             // image file is a mess         }",
        "label": 11
    },
    {
        "text": "need help for inserting image in a textbox hi sir, i had a requirement in a existing pdf,i have a textbox ,in that text box i need to add a image ,but how i need how to get coordinates of a text box and to add image based upon that coordinates i am using pdfbox java.",
        "label": 1
    },
    {
        "text": "pddocument save double closes stream causing exceptions with well behaving streams this might be a duplicate of pdfbox-273, although closed, it is clearly not fixed. pddocument save (through coswriter) closes the output, and to make things worse, it closes it twice. also, it is generally not good practice to close streams, unless you opened them yourself, so i think the streams should just be left alone, and instead the references should be cleared. the critical code in pddocument.save(outputstream output) is: coswriter writer = new coswriter(output); try {     writer.write(this); } finally {     writer.close(); } with coswriter.close() being: public void close() throws ioexception {     if (getstandardoutput() != null)     {       getstandardoutput().close();     }     if (getoutput() != null)     {         getoutput().close();     }     if (incrementaloutput != null)     {         incrementaloutput.close();     } } the problem here is that standardoutput in this case wraps  output, thus causing a double close() on output (as filteroutputstream already closes the stream it wraps). double closing itself might not have been a problem, but again filteroutputstream.close() invokes flush() in its standard implementation,  and you cannot flush a closed stream... example stack trace: exception in thread \"main\" java.io.ioexception: stream already closed at com.twelvemonkeys.imageio.util.iiooutputstreamadapter.assertopen(iiooutputstreamadapter.java:80) at com.twelvemonkeys.imageio.util.iiooutputstreamadapter.flush(iiooutputstreamadapter.java:75) at java.io.bufferedoutputstream.flush(unknown source) at java.io.filteroutputstream.close(unknown source) at org.apache.pdfbox.pdfwriter.coswriter.close(coswriter.java:315) at org.apache.pdfbox.pdmodel.pddocument.save(pddocument.java:1236) at com.twelvemonkeys.imageio.plugins.pdf.pdfimagewriter.endwritesequence(pdfimagewriter.java:83) at com.twelvemonkeys.imageio.plugins.pdf.pdfimagewriter.main(pdfimagewriter.java:183) i tagged the issue with 2.0.4 and 2.0.9 as those are the versions i tested, but i assume the problem is there even before 2.0.4.",
        "label": 11
    },
    {
        "text": "regression  box color missing pdf from pdfbox-372 java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-snapshot.jar pdftoimage webmail02.pdf",
        "label": 6
    },
    {
        "text": " patch  cosstream loses contents in setfilters  when the setfilters method of cosstream is called when no decoding has been done before, the stream contents are lost.",
        "label": 11
    },
    {
        "text": "width of space character is calculated wrong pdfstreamengine calculates width of space (line 357): spacewidthtext = (font.getfontwidth( space_bytes, 0, 1 )*glyphspacetotextspacefactor); in some cases the result is 0. problem is that getfontwidth requires code number of \" \". if there is \"tounicode\" mapping for that font that it is necessary to lookup cmap for code number and not to use 0x20 (space) as it is in souce code.",
        "label": 1
    },
    {
        "text": "patch for arrayindexoutofbound exception this document opens fine in adobe reader.while extracting page labels from getlabelsbypageindices() i got the below exception java.lang.arrayindexoutofboundsexception: 3 at org.apache.pdfbox.pdmodel.common.pdpagelabels$2.newlabel(pdpagelabels.java:218) at org.apache.pdfbox.pdmodel.common.pdpagelabels.computelabels(pdpagelabels.java:252) at org.apache.pdfbox.pdmodel.common.pdpagelabels.getlabelsbypageindices(pdpagelabels.java:214) original code in pdpagelabels.java public string[] getlabelsbypageindices() { final string[] map = new string[doc.getnumberofpages()]; computelabels(new labelhandler() { public void newlabel(int pageindex, string label) { map[pageindex] = label; } }); return map; } it works fine with the below modified code in pdpagelabels.java modified code in pdpagelabels.java public string[] getlabelsbypageindices() { final string[] map = new string[doc.getnumberofpages()]; computelabels(new labelhandler() { public void newlabel(int pageindex, string label) { if(pageindex < doc.getnumberofpages()) { map[pageindex] = label; } } }); return map; }",
        "label": 1
    },
    {
        "text": "aes decryption with bouncycastle throws nullpointerexception using aes-encryption with pdfbox and bouncycastle yields a null pointer. when jce is used everything works nicely: com.sun.crypt.provider.aescipher returns an empty byte array for the last 16 bytes of the metadata dictionary. bouncycastle returns a null reference. demo.java public class demo {     public static void main(string[] args) throws ioexception, nosuchalgorithmexception, nosuchpaddingexception {         string password = \"pw\";         string cipherstring = \"aes/cbc/pkcs5padding\";         string testfilename = \"test.pdf\";         pddocument document = new pddocument();         accesspermission ap = new accesspermission();         ap.setreadonly();         standardprotectionpolicy policy = new standardprotectionpolicy(password, password, ap);         policy.setencryptionkeylength(128);         policy.setpreferaes(true);         document.protect(policy);         document.getdocumentinformation().setauthor(\"author\");         document.save(testfilename);         document.close();         // decryption with sunjce works         cipher cipher = cipher.getinstance(cipherstring);         system.out.printf(\"provider to use for %s decryption: %s\\n\", cipherstring, cipher.getprovider());         document = pddocument.load(new file(testfilename), password);         security.removeprovider(\"sunjce\");         // decryption with bouncycastle fails with npe         cipher = cipher.getinstance(cipherstring);         system.out.printf(\"provider to use for %s decryption: %s\\n\", cipherstring, cipher.getprovider());         document = pddocument.load(new file(testfilename), password);     } } output with stacktrace provider to use for aes/cbc/pkcs5padding decryption: sunjce version 1.8 provider to use for aes/cbc/pkcs5padding decryption: bc version 1.54 exception in thread \"main\" java.lang.nullpointerexception  at java.io.outputstream.write(outputstream.java:75)  at org.apache.pdfbox.pdmodel.encryption.securityhandler.encryptdataaesother(securityhandler.java:269)  at org.apache.pdfbox.pdmodel.encryption.securityhandler.encryptdata(securityhandler.java:152)  at org.apache.pdfbox.pdmodel.encryption.securityhandler.decryptstring(securityhandler.java:532)  at org.apache.pdfbox.pdmodel.encryption.securityhandler.decrypt(securityhandler.java:391)  at org.apache.pdfbox.pdmodel.encryption.securityhandler.decryptdictionary(securityhandler.java:512)  at org.apache.pdfbox.pdmodel.encryption.securityhandler.decrypt(securityhandler.java:399)  at org.apache.pdfbox.pdfparser.cosparser.parsefileobject(cosparser.java:798)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:726)  at org.apache.pdfbox.pdfparser.cosparser.parseobjectdynamically(cosparser.java:657)  at org.apache.pdfbox.pdfparser.cosparser.parsetrailervaluesdynamically(cosparser.java:2092)  at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:201)  at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:249)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:891)  at org.apache.pdfbox.pdmodel.pddocument.load(pddocument.java:831) this could possibly be fixed with a null check in the securityhandler before writing to the outputstream.",
        "label": 11
    },
    {
        "text": "error while extracting text while extracting text from pdf getting error info: unsupported/disabled operator: ei",
        "label": 1
    },
    {
        "text": "possible errors in truetype table 'name' parsing  accidentally noticed a possible bug in parsing name records: 1) class namingtable.java, line 165: for (int i = 4; i <= 0; i--) this loop is never entered, thus, unicode strings are not considered. 2) class namingtable.java, line 106: string string = data.readstring(nr.getstringlength(), charset); for platform == 0 (unicode), strings are read in iso-8859-1 charset, but most likely it should be utf16 charset. this may affect values of the fontfamily and fontsubfamily fields.",
        "label": 1
    },
    {
        "text": "problems with image extraction from pdf pdbbox don't extract images from pdf document correctly",
        "label": 1
    },
    {
        "text": "nullpointer exception in pdfxrefstreamparser parse with some pdf, an nullpointer is sent during the parsing here is the trace : caused by: java.lang.nullpointerexception at org.apache.pdfbox.pdfparser.pdfxrefstreamparser.parse(pdfxrefstreamparser.java:91) at org.apache.pdfbox.pdfparser.cosparser.parsexrefstream(cosparser.java:1836) at org.apache.pdfbox.pdfparser.cosparser.parsexrefobjstream(cosparser.java:320) at org.apache.pdfbox.pdfparser.cosparser.parsexref(cosparser.java:280) at org.apache.pdfbox.pdfparser.pdfparser.initialparse(pdfparser.java:314) at org.apache.pdfbox.pdfparser.pdfparser.parse(pdfparser.java:373) at ch.ge.afc.ael.commun.piecejointe.utipdf.loaddocument(utipdf.java:439)",
        "label": 11
    },
    {
        "text": "make securityhandlerfactory uses a genenic provider i would like to be able to use my own provider to sign encrypted files. indeed, org.apache.pdfbox.pdmodel.encryption.securityhandlerfactory forces the use of org.bouncycastle.jce.provider.bouncycastleprovider. a solution is to make securityhandlerfactory uses a java.security.provider instead. thank you.",
        "label": 1
    },
    {
        "text": "digitally sign pdfs without file system access hi i'm using pdfbox-1.8.1 to digitally sign pdfs. i find the sample below to handle it. but in this example i have to use a fileinputstream however i want to do it only through streams (without any file system access). i tried to extends fileinputstream to deal with it but i failed. any tips for me about that problem ? thanks. file outputdocument = new file(\"resources/signed\" + document.getname()); fileinputstream fis = new fileinputstream(document); fileoutputstream fos = new fileoutputstream(outputdocument); int c; while ((c = fis.read(buffer)) != -1) { fos.write(buffer, 0, c); } fis.close(); fis = new fileinputstream(outputdocument); // load document pddocument doc = pddocument.load(document); // create signature dictionary pdsignature signature = new pdsignature(); signature.setfilter(pdsignature.filter_adobe_ppklite); // default filter // subfilter for basic and pades part 2 signatures signature.setsubfilter(pdsignature.subfilter_adbe_pkcs7_detached); signature.setname(\"signer name\"); signature.setlocation(\"signer location\"); signature.setreason(\"reason for signature\"); // the signing date, needed for valid signature signature.setsigndate(calendar.getinstance()); // register signature dictionary and sign interface doc.addsignature(signature, this); // write incremental (only for signing purpose) doc.saveincremental(fis, fos);",
        "label": 10
    },
    {
        "text": "nonsequentialpdfparser cannot recover from spurious closing brackets the nonsequentialpdfparser fails if an object has a spurious closing tag (for example, a pdfarray with two closing brackets). in lenient mode, it would be good to at least attempt recovering from that. the attached patch, instead of throwing an exception in case the endobject string is not \"endobj\" or \" obj\", skips a character (the spurious character) and tries reading a string. it continues until either the file ends or an \"endobj\" is found. i have a document where this worked but i am not allowed to upload it, unfortunately. in any case the patch cannot make things worse, since it replaces throwing an exception with at least attempting to recover from it.",
        "label": 11
    },
    {
        "text": "characters in wrong order the attached pdf file (which is page 3 of https://jp.mathworks.com/tagteam/89688_93050v00_jp_machine_learning_section1_ebook.pdf) shows multiple problems when reading with pdfbox in standard settings. this bug report in particular is about the katakana \u30fc being misplaced. in the text block on the left, the second line starts with \u30bf\u30fc\u30f3. pdftextstripper.gettext returns text starting with \u30bf \u30f3\u30fc (i.e., adding a space after the first character and swapping the second and third one). this effect also happens at other places in the (complete) file. the pdf itself at this point has [<03bb>43.9 <0294>156 <03ef>-24.5 ...]tj, listing the characters in the proper order. copy&paste using apple's preview.app also preserves that order.",
        "label": 11
    },
    {
        "text": "cff font blue values and other delta encoded lists read incorrectly the attached test compares the values retrieved via cffparser from an opentype font with the expected values as seen in fontforge (go to element->font info->ps private). the font neosans black.otf can be found at https://www.wfonts.com/font/neosans the cff font specification explaining the encoding of the entries which are incorrectly parsed by fontbox cffparser can be found here https://typekit.files.wordpress.com/2013/05/5176.cff.pdf we use fontbox to read the font when we need to embed it into an pdf which we produce via our apache fop based software. adobe validator complains about incorrect \"blue values\" sorting then.",
        "label": 11
    },
    {
        "text": "ttfsubfont generates bug prone ttf sub fonts screwing some printers the extracted ttf fonts generated by ttfsubfont do not conform to the truetype standard. most notably, the font checksum is calculated to an invalid value among other more subtle issues. users may experience a screwed up firmware of minolta printers when such a file is printed via adobe reader and the windows postscript printer driver. with the help of microsoft's font validator tool, i have already been able to fix most of these problems in my original code: http://www.microsoft.com/typography/fontvalidator.mspx a port of my patch to pdfbox is on the way, but it's quite cumbersome to port the patch to the pdfbox code. (tab vs. space, testcases needed...)",
        "label": 1
    },
    {
        "text": "illegalargumentexception  use pdtype1cfont for fontfile3 i get this exception with the attached file: exception in thread \"main\" java.lang.illegalargumentexception: use pdtype1cfont for fontfile3  at org.apache.pdfbox.pdmodel.font.pdtype1font.<init>(pdtype1font.java:210)  at org.apache.pdfbox.pdmodel.font.pdmmtype1font.<init>(pdmmtype1font.java:37)  at org.apache.pdfbox.pdmodel.font.pdfontfactory.createfont(pdfontfactory.java:69)  at org.apache.pdfbox.pdmodel.pdresources.getfonts(pdresources.java:171)  at org.apache.pdfbox.util.pdfstreamengine.getfonts(pdfstreamengine.java:554)  at org.apache.pdfbox.util.operator.text.settextfont.process(settextfont.java:48) the troublesome font is the mmtype1 font expontomm. john hewson should the font_file3 handling that is done in pdfontfactory.createfont() also be done for mm_type1? i get a correct rendering with that solution.",
        "label": 11
    },
    {
        "text": "pdfbox hangs indefinately when rendering certain files there seems to be an issue with pdfbox when rendering certain pdf files, when calling renderimagewithdpi; the call seems to hang indefinitely. my jar file is ruunning with the parameter: -dsun.java2d.cmm=sun.java2d.cmm.kcms.kcmsserviceprovider i noticed this issue on this file:[ https://1drv.ms/b/s!av-yk52r4yupvcuezfuesnxfh6_pxw] here is the call to renderimagewithdpi: pddocument doc = pddocument.load(file); pdfrenderer renderer = new pdfrenderer(doc); bufferedimage img = renderer.renderimagewithdpi(0, 300.0f, imagetype.rgb); checking the stack trace using jstack gives me the following: \"pool-3-thread-1\" #14 prio=5 os_prio=0 tid=0x00007f0bd41d2000 nid=0x76d4 runnable [0x00007f0bb44db000] java.lang.thread.state: runnable at org.apache.log4j.category.geteffectivelevel(category.java:442) at org.apache.log4j.category.log(category.java:855) at org.slf4j.impl.log4jloggeradapter.log(log4jloggeradapter.java:595) at org.apache.commons.logging.impl.slf4jlocationawarelog.warn(slf4jlocationawarelog.java:179) at org.apache.pdfbox.pdmodel.graphics.shading.type4shadingcontext.collecttriangles(type4shadingcontext.java:152) at org.apache.pdfbox.pdmodel.graphics.shading.type4shadingcontext.<init>(type4shadingcontext.java:64) at org.apache.pdfbox.pdmodel.graphics.shading.type4shadingpaint.createcontext(type4shadingpaint.java:66) at sun.java2d.pipe.alphapaintpipe.startsequence(alphapaintpipe.java:84) at sun.java2d.pipe.aashapepipe.rendertiles(aashapepipe.java:168) at sun.java2d.pipe.aashapepipe.renderpath(aashapepipe.java:159) at sun.java2d.pipe.aashapepipe.fill(aashapepipe.java:68) at sun.java2d.pipe.pixeltoparallelogramconverter.fill(pixeltoparallelogramconverter.java:164) at sun.java2d.pipe.validatepipe.fill(validatepipe.java:160) at sun.java2d.sungraphics2d.fill(sungraphics2d.java:2527) at org.apache.pdfbox.rendering.pagedrawer.shadingfill(pagedrawer.java:933) at org.apache.pdfbox.contentstream.operator.graphics.shadingfill.process(shadingfill.java:41) at org.apache.pdfbox.contentstream.pdfstreamengine.processoperator(pdfstreamengine.java:815) at org.apache.pdfbox.contentstream.pdfstreamengine.processstreamoperators(pdfstreamengine.java:472) at org.apache.pdfbox.contentstream.pdfstreamengine.processstream(pdfstreamengine.java:446) at org.apache.pdfbox.contentstream.pdfstreamengine.processpage(pdfstreamengine.java:149) at org.apache.pdfbox.rendering.pagedrawer.drawpage(pagedrawer.java:189) at org.apache.pdfbox.rendering.pdfrenderer.renderimage(pdfrenderer.java:145) at org.apache.pdfbox.rendering.pdfrenderer.renderimagewithdpi(pdfrenderer.java:94) at com.documentconverter.pdfmanager_box.getthumbpdf(pdfmanager_box.java:58) i left my application running over the weekend to see if the call will eventually return, three days later and still the application is at the same spot.",
        "label": 11
    },
    {
        "text": "maven pom's do not include source artifacts for pdfbox, fontbox, and jempbox i have added the following lines to my pom's. this way when eclipse adds them to my classpath it also picks up the source. essentially the following lines tell maven that when running a maven:install to also jar up the source files and include those in the distribution. <plugins> <plugin> <groupid>org.apache.maven.plugins</groupid> <artifactid>maven-source-plugin</artifactid> <executions> <execution> <id>attach-sources</id> <goals> <goal>jar</goal> </goals> </execution> </executions> </plugin> </plugins>",
        "label": 7
    },
    {
        "text": "org apache pdfbox filter flatefilter decode severe  stop reading corrupt stream error \"org.apache.pdfbox.filter.flatefilter decode severe: stop reading corrupt stream\" thrown when extracting text. the error is thrown at: page 397 if the page loop starts at zero \u2013 for (int i = 0; i < allpages.size(); i++) page 790 if the loop starts at 395 (that would make it approx. 397 pages from the beggining of the loop) page 848 if the loop starts at 450 (that would make it aprox. 397 pages from the beggining of the loop) the error is not thrown if: the loop starts at page 452 or later the loop starts at 0 and ends before 396 the loop starts at 200 and ends before 595 therefore i suspect that a loop spanning more than 396 pages will throw an error. is that an indication of a memory leak of some sort? full code is below. note that the result is the same when instantiating a single pdftextstripperbyarea outside the page loop and invoking resetengine() on the stripper inside the page loop. import java.awt.geom.rectangle2d; import java.io.ioexception; import java.util.list; import org.apache.pdfbox.exceptions.cosvisitorexception; import org.apache.pdfbox.exceptions.cryptographyexception; import org.apache.pdfbox.exceptions.invalidpasswordexception; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.pdpage; import org.apache.pdfbox.util.pdftextstripperbyarea; public class main { public static void main(string[] args) throws ioexception, cosvisitorexception, cryptographyexception { pddocument document = null; try { document = pddocument.load(\"/users/ilijapavlic/desktop/iataunitedstates.pdf\"); if (document.isencrypted()) { try { document.decrypt(\"\"); } catch (invalidpasswordexception e) { system.err.println(\"error: document is encrypted with a password.\"); system.exit(1); } } float x = 55f; float y = 40f; float width = 168.5f; float height = 689f; float evenoffset = -10f; list allpages = document.getdocumentcatalog().getallpages(); for (int i = 0; i < allpages.size(); i++) { system.out.println(\"page \" + i); pdpage page = (pdpage) allpages.get; pdftextstripperbyarea stripper = new pdftextstripperbyarea(); stripper.setsortbyposition(true); for (int j = 0; j < 3; j++) { if (i % 2 == 0) { rectangle2d.float region = new rectangle2d.float(x, y, width*3, height); stripper.addregion(\"region\", region); } else { rectangle2d.float region = new rectangle2d.float(x + evenoffset, y, width*3, height); stripper.addregion(\"region\", region); } } stripper.extractregions(page); for (string regionname : stripper.getregions()) { stripper.gettextforregion(regionname); } } } catch(exception e) { e.printstacktrace(); } finally { if (document != null) { document.close(); } } } }",
        "label": 1
    },
    {
        "text": "improved pdf text extraction that notes paragraph boundaries the current behavior of the org.apache.pdfbox.util.pdftextstripper class is to ignore paragraph demarcation in the text. it basically just renders each line of text as it discovers it, separating each line equally with the same line separator. this makes it difficult to identify paragraph (or even page) starts and stops in the extracted text. this is often necessary for text processing that needs to work with logical 'chunks' of text. further, rendering into other formats (such as html or xml) is facilitated by resolving the document into more discrete logical text chunks. the request here is for improved text extraction that provides more discrete instrumentation of the parsing, allowing one to identify / tag paragraph starts and stops.",
        "label": 1
    },
    {
        "text": "illegalargumentexception  resourcedictionary is null in pdfmerger this was first mentioned on the user mailing list by gilad denneboom: when merging the pdf 1.7 spec with another pdf file this exception appears: exception in thread \"main\" java.lang.illegalargumentexception: resourcedictionary is null  at org.apache.pdfbox.pdmodel.pdresources.<init>(pdresources.java:68)  at org.apache.pdfbox.util.pdfmergerutility.appenddocument(pdfmergerutility.java:448)  at org.apache.pdfbox.util.pdfmergerutility.mergedocuments(pdfmergerutility.java:190)  at org.apache.pdfbox.tools.pdfmerger.merge(pdfmerger.java:70)  at org.apache.pdfbox.tools.pdfmerger.main(pdfmerger.java:46)  at org.apache.pdfbox.tools.pdfbox.main(pdfbox.java:76) i did some debugging, it happens on the very first page. the resources is indeed null, but it exists when viewing with pdfdebugger.",
        "label": 6
    },
    {
        "text": "pdfbox rc2 and earlier snapshot versions print performance is poor with systems having low ram   3gb and lower number of fonts  pdfbox 2.0.0-rc1, snapshots and rc2 versions print takes 15+ seconds. steps to reproduce -------------------------- use windows system with < 3 gb ram use systems with less number of fonts or without specific fonts in pdf file to be printed. printing pdf file took 14 to 20 seconds in system with 3 gb ram which had 522 foints took 24 to 34 seconds in system with 2 gb ram which had 90 fonts took only 2.5 seconds in system with 8 gb ram which had 1025 fonts. doubt -------- not browsed the code, but following is the doubt as causing performance issue. though the code caches fonts by storing fonts in local .pdfbox.cache file first time and caching fonts for subsequent times. not clear whether the code updates the pdfbox fonts cache file if new fonts are found in new pdf file to be printed, while printing subsequent times. if the fonts in pdf file to be printed is not available in the .pdfbox.cache file stored in local system/local system what is the behaviour? will the code download fonts and update cache for subsequent times or is it limited by fonts available in local system? looks like later is the case and performance got hit either due to ram or not constantly updating fonts cache or due to un availability of fonts in local system.",
        "label": 6
    },
    {
        "text": "encapsulate outputstream into bufferedoutputstream in pddocument save  i recognized very slow performance of pddocument.save() with a fileoutputstream over a vpn connection. i did some testing and found out that using pddocument.save(file file) solved the issue. so the bufferedinputstream makes the difference. since my document api uses streams i encapsulate the outputstream in a bufferedoutputstream if neccessary: if (!(outputstream instanceof bufferedoutputstream)) { outputstream = new bufferedoutputstream(outputstream); } pddocument.save(outputstream); pddocument.load() already does that with the inputstream. so i wonder if that would be an improvement for save(), too?",
        "label": 11
    },
    {
        "text": "quote glyphs  quoteright  quotedblright  etc  not mapped to the right unicode character i have an example pdf (will attach) that uses a right-single-quote character, but extracts incorrectly from pdfbox (using extracttext). if i copy/paste, the text is correct (i get u+2019 for the right quote). search for \"cashier\" in the pdf, on page 1 to see it; that right quote is supposed to come through as u+2019 i think. i looked at the pdf in pdfdebugger, and i see this fragment in the \"contents\" for page 1: (bring the voucher handout to the cashier\\325s office (10-180))tj so somehow this \\325 escape fails to map to the quoteright glyph. the font is partial embedded font bpolko+timesnewromanpsmt, and i can see in the charset (under fontdescriptor, for font f1) that it references this glyph. i also see a [correct] entry in glyphlist.txt, mapping to u+2019, so that's not the problem. not sure what's going wrong... maybe somehow \\325 fails to map to quoteright? there are other glyphs (quotedblright, quotedblleft) that are also not converted correctly, eg search for project review on page 2.",
        "label": 1
    },
    {
        "text": "classcastexception in pdcidfont readverticaldisplacements  pdfbox throws exception when load the attached pdf file.",
        "label": 11
    },
    {
        "text": "pdfsplit  split is set to one if no  split argument present wiki http://pdfbox.apache.org/commandlineutilities/pdfsplit.html says that command pdfsplit -startpage 5 -endpage 10 sample_with_13_pages.pdf will provide a pdf containing all pages from 5 to 10 of the source pdf. instead it provides 5 pdf, each one page long. from other point local variable startendpageset in org.apache.pdfbox.pdfsplit is never set.",
        "label": 1
    },
    {
        "text": "calendar values are parsed with unknown timezones example of calendar instance parsed from document: java.util.simpletimezone[id=unknown,offset=7200000,dstsavings=3600000,usedaylight=false,startyear=0,startmode=0,startmonth=0,startday=0,startdayofweek=0,starttime=0,starttimemode=0,endmode=0,endmonth=0,endday=0,enddayofweek=0,endtime=0,endtimemode=0] although calling e.g. timezone.getdisplayname() shows correclty 'gmt+02:00', timezone.tozoneid() fails with following stack trace: java.time.zone.zonerulesexception: unknown time-zone id: unknown  at java.time.zone.zonerulesprovider.getprovider(zonerulesprovider.java:272)  at java.time.zone.zonerulesprovider.getrules(zonerulesprovider.java:227)  at java.time.zoneregion.ofid(zoneregion.java:120)  at java.time.zoneid.of(zoneid.java:411)  at java.time.zoneid.of(zoneid.java:359)  at java.time.zoneid.of(zoneid.java:315)  at java.util.timezone.tozoneid(timezone.java:556)         ... this is fixed in pdfbox-1633 but although the fixversion is 1.8.3, i couldn't find the commit on 1.8 branch (only on 2.0)",
        "label": 11
    },
    {
        "text": "pdf with parsing ioexception when extract a content from a pdf file, after getting this error, the process hang! java.io.ioexception: error: could not find font(cosname {fabc21} ) in map= {fabc19=org.apache.pdfbox.pdmodel.font.pdtruetypefont@a0dcd9, fabc2=org.apache.pdfbox.pdmodel.font.pdtype1font@1d5550d, fabc3=org.apache.pdfbox.pdmodel.font.pdtruetypefont@c21495, fabc1=org.apache.pdfbox.pdmodel.font.pdtruetypefont@14b7453} at org.apache.pdfbox.util.operator.settextfont.process(settextfont.java:57) at org.apache.pdfbox.util.pdfstreamengine.processoperator(pdfstreamengine.java:529) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:258) at org.apache.pdfbox.util.pdfstreamengine.processsubstream(pdfstreamengine.java:225) at org.apache.pdfbox.util.pdfstreamengine.processstream(pdfstreamengine.java:205) at org.apache.pdfbox.util.pdftextstripper.processpage(pdftextstripper.java:455) at org.apache.pdfbox.util.pdftextstripper.processpages(pdftextstripper.java:379) at org.apache.pdfbox.util.pdftextstripper.writetext(pdftextstripper.java:335)",
        "label": 1
    },
    {
        "text": "attempting to render to bmp  wbmp or gif causes illegalstateexception attempting to render pdf to either bmp, wbmp or gif causes illegalstateexception while rendering to jpg, jpeg or png works. all of these image formats are reported as being present and available via call: imageio.getwriterformatnames() the issue seems to be with this code in pdfimagewriter if( writerparams.canwritecompressed() ) { writerparams.setcompressionmode(imagewriteparam.mode_explicit); writerparams.setcompressionquality(1.0f); // <== exception here } where a call to setcompressiontype should precede setcompressionquality for the failing image types listed above. [looks like junit test cases only tests png ....] start of stack trace is this: java.lang.illegalstateexception: no compression type set! at javax.imageio.imagewriteparam.setcompressionquality(imagewriteparam.java:1230) at org.apache.pdfbox.util.pdfimagewriter.writeimage(pdfimagewriter.java:151) ......",
        "label": 1
    },
    {
        "text": "unsupported extracttext  force option still appears in online docs the pdfbox 2.0 command line documentation still lists the -force option for the extracttext command; however, that option doesn't appear to be supported anymore (see, e.g., pdfbox-1151)",
        "label": 8
    },
    {
        "text": "pdfontdescriptor doesn't contain method getcidset  hello! is there any reason why pdfontdescriptor contains method setcidset(), but not getcidset()? attached a patch with this method if it should be there.",
        "label": 11
    },
    {
        "text": "shfill operator needs implementation i have a pdf file (for which i do not yet have release permission) that uses the \"sh\" operator, equivalent to postscript's shfill (per pdf spec 1.7 page 987). adobe provides implementation guidance in a 78-page document at http://www.adobe.com/devnet/postscript/pdfs/tn5600.smoothshading.pdf#17 i will be trying to add this functionality this week, but if anyone has hints, suggestions, etc. they are most certainly welcome!",
        "label": 1
    },
    {
        "text": "right now pdfbox does not permit to sign multiple files while calling an external signing service  since to sign a pdf you forced the implementation of the signatureinterface interface, is not possible to prepare n hashes from n pdf files and then send them to a signing service that accepts multiple hashes with a single signon. for example if i use an otp signing service. what would be nice to have is to separate the hash calculation from the signing. instead to implement the interface i would like to have something like this: 1) calculate hash from document with the new signature dictionary bytes 2) sign the hash 3) insert the signature into pdf this way i could achieve to sign for example 100 pdf files calling the service once. right now must ask the user to sign in 100 times. thanks in advance. andrea.",
        "label": 11
    },
    {
        "text": "security manager fails for  pdfbox cache caused by: java.security.accesscontrolexception: access denied (\"java.io.filepermission\" \"/home/simon/.pdfbox.cache\" \"read\") at java.security.accesscontrolcontext.checkpermission(accesscontrolcontext.java:457) at java.security.accesscontroller.checkpermission(accesscontroller.java:884) at java.lang.securitymanager.checkpermission(securitymanager.java:549) at java.lang.securitymanager.checkread(securitymanager.java:888) at java.io.file.exists(file.java:814) at org.apache.pdfbox.pdmodel.font.filesystemfontprovider.loaddiskcache(filesystemfontprovider.java:357)",
        "label": 6
    },
    {
        "text": "localization in xref generation results in unusable pdfs pdfbox appears to be using a localized number formatter when encoding the xref table. depending on locale settings, this can result in unicode characters being used, which prevents pdfbox from loading the pdf. the following code demonstrates this: import java.io.file; import java.io.fileinputstream; import java.io.fileoutputstream; import java.util.locale; import org.apache.pdfbox.pdmodel.pddocument; import org.apache.pdfbox.pdmodel.pdpage; import org.apache.pdfbox.pdmodel.common.pdrectangle; class example {   public static void main(string [] args) throws exception {     file tempfile = file.createtempfile(\"example\", \".pdf\");     locale arabiclocale = new locale.builder().setlanguagetag(\"ar-eg-u-nu-arab\").build();     locale.setdefault(arabiclocale);     try (fileoutputstream out = new fileoutputstream(tempfile)) {       pddocument doc = new pddocument();       doc.addpage(new pdpage(pdrectangle.letter));       doc.save(out);       doc.close();     }     try (fileinputstream in = new fileinputstream(tempfile)) {       pddocument doc = pddocument.load(in);       // this will throw.       doc.getpage(0);     }   } }",
        "label": 11
    },
    {
        "text": "overlay  data black   white after import after overlaying two documents, everything in the source is black & white only. i uploaded a screenshot to https://oc.evopark.de/public.php?service=files&t=0d7e4e172c30c23b260d3c96cc4986b5 may relate to pdfbox-2401. some more details: i'm doing everything in-memory, not operating on files. this is the sample code:     public static byte[] mergeontoletterhead(byte[] originalpdf) throws ioexception, cosvisitorexception {         pddocument pdf = pddocument.load(new bytearrayinputstream(originalpdf));         if (pdf.getnumberofpages() == 0) {             return originalpdf;         }         pddocument template = readtemplate();         if (null != template) {             overlay overlay = new overlay();             pdf = overlay.overlay(template, pdf);         } else {             logger.error(\"could not load letterhead pdf\");             return originalpdf;         }         bytearrayoutputstream outputstream = new bytearrayoutputstream();         pdf.save(outputstream);         return outputstream.tobytearray();     }",
        "label": 1
    },
    {
        "text": "how to identify cell in pdf hi team, i need your help.i reading pdf. while reading there are data in cells. problem: 1)how to identify cell 2)how to identify color cell 2)how to identify data in cell if data is available if not i want make seperater | . 3)how to identify space between cells. pease find attached doc and pdf. please help me on this.",
        "label": 1
    },
    {
        "text": "different fallback font rendering first and second time the file from pdfbox-2563 looks different depending on whether the cache exists, because a different fallback font is used: after deleting .pdfbox.cache: using fallback font batang for cid-keyed truetype font ???? second run with existing cache: using fallback font arialunicodems for cid-keyed truetype font ????",
        "label": 1
    }
]