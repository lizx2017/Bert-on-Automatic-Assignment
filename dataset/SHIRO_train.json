[
    {
        "text": "invalid expires date format with non english default locale there is a problem with the \"rememberme\" cookie feature. a cookie is sent to the user to store the rememberme data, but the expiration date used for the formating is the system default one. in my case, expiration date are formated in french and the browser cannot correctly handle it (so rememberme cookie will automatically be removed when the browser is closed) a fix could be done in the class : org.apache.shiro.web.servlet.simplecookie around line 330 : private static string tocookiedate(date date) { timezone tz = timezone.gettimezone(gmt_time_zone_id); dateformat fmt = new simpledateformat(cookie_date_format_string); // here, simpledateformat use default locale fmt.settimezone(tz); return fmt.format(date); } replace with : private static string tocookiedate(date date) { timezone tz = timezone.gettimezone(gmt_time_zone_id); dateformat fmt = new simpledateformat(cookie_date_format_string, locale.english); // force english locale fmt.settimezone(tz); return fmt.format(date); } \u2014 a workaround is to replace the default local when calling the login() method : locale systemlocale = locale.getdefault(); locale.setdefault(locale.english); currentuser.login(token); locale.setdefault(systemlocale);",
        "label": 4
    },
    {
        "text": "connect to a ssl secured ldap configuration for connecting the shiro framework with a ssl secured ldap (ldapv2 & ldapv3 on sslv3 port) fails. parameters for ldap in the shiro.ini file: [main] ... ldaprealm.contextfactory.environment[java.naming.security.protocol] = ssl ldaprealm.contextfactory.environment[com.sun.jndi.ldap.connect.pool.protocol] = plain ssl ldaprealm.contextfactory.environment[com.sun.jndi.ldap.connect.pool] = true these entries lead to following error message: org.apache.shiro.config.configurationexception: map property value [ssl] contained key-value pair token [ssl] that does not properly split to a single key and pair. this must be the case for all map entries.",
        "label": 5
    },
    {
        "text": "sample spring application   webstart won't launch this is due to the necessary .jars not being in the .war file in the right place. maybe the assembly plugin will be required to make sure .jars are accessible to be downloaded (/web-inf/lib is not accessible).",
        "label": 4
    },
    {
        "text": "after logout  a getsubject  call still honors remember me this cropped up for me because spring's frameworkservlet calls request.getusername() by default, which under the hood will call jsecurity's getsubject(). this causes a new subject to be created that honors the remember me cookie. instead - this new subject should be created without a remember me cookie being honored. one way we could work around this problem is by setting a request attribute when you logout that tells the remembermemanager that it shouldn't honor the remember me cookie for the remainder of this request.",
        "label": 5
    },
    {
        "text": "modularrealmauthorizer setrealms needs to call applyrolepermissionresolvertorealms when updating the list of realms in modularrealmauthorizer.setrealms() applyrolepermissionresolvertorealms() was not called so this worked if you didn't change your realms. attached patch contains single line fix, and an updated test",
        "label": 4
    },
    {
        "text": "create jndiobjectfactory to allow jndi object acquisition during configuration during configuration, it would be nice to acquire objects from jndi and use the returned objects as properties on other configured objects (e.g. in ini config). there is a jndirealmfactory that already supports looking up entire realms from jndi, but it is more likely that lower-level objects would be acquired from jndi instead (e.g. datasources) and the realms would be configured in ini and use those objects. this would be pretty easy to support: there is already a shiro factory interface and an abstractfactory class. a new jndiobjectfactory subclass could be created that uses a jndilocator to look up and acquire objects. the reflectionbuilder implementation would need to be changed to handle encountering factory objects - if an object in configuration specifies a factory as a property, the builder needs to call the factory's getinstance method instead of using the factory directly. i think this could be done in the reflectionbuilder#resolvereference method without touching any other code.",
        "label": 3
    },
    {
        "text": "login logout login scenario consider following code (used in junit test): subject currentuser = securityutils.getsubject(); //login as user with some permissions currentuser.login(new usernamepasswordtoken(\"empl1\", \"pass1\")); //call some protected function currentuser.logout(); // now use user without required premissions currentuser.login(new usernamepasswordtoken(\"testuser\", \"blah\")); //call protected method - should throw unaauthorizedexception this code looks ok, but it will not work. it will throw npe on the line with second login() call. this is beacuse logout() method will clear the securitymanager field in currentuser object, and the next login() call will call the method on this securitymanager, rising npe. it would be better if we allow somehow for such scenario - open question is how? at this moment the currentuser object after logout() method becomes completely useless. (current workaround: after calling logout() and before second call to login() you have to replace currentuser object: currentuser = securityutils.getsubject();",
        "label": 5
    },
    {
        "text": "push push  javadoc jar and  sources jar into the maven repository maven aware ides (think eclipse or idea) would be able to automatically download sources and show javadocs. user would not have to download and bind sources to project separately. those who do not use ides would be able to use mvn eclipse:eclipse -ddownloadsources command to get the same thing.",
        "label": 5
    },
    {
        "text": "change logging level from trace to warning in modularrealmauthenticator when a realm throws an exception in modularrealmauthenticator.domultirealmauthentication(...) when a realm throws an exception in getauthenticationtoken(...) it is logged with trace level. at the time of this issue creation (svn rev. 916946), it's at line 257. i wish this to be changed to warning level for convenience purpose when writing a custom realm and because i feel that's more appropriate. wdyt ? /paul",
        "label": 5
    },
    {
        "text": "would like to be able to put shiro ini in the web inf directory with other web configuration files  would like to be able to put shiro.ini in the web-inf directory with other web configuration files. there is no way to do this via file: or classpath: at the moment. it makes sense for shiro.ini to be in the web-inf folder.",
        "label": 5
    },
    {
        "text": "rememberme cookie value is sometimes sent without appropriate base64 padding i experienced this issue this morning (easily visible with firebug). i am supplying a patch with a fix and unit test. it might be better to be safe to encode the remember me cookie value as ascii hex instead of base64 instead.",
        "label": 5
    },
    {
        "text": "aspecjt integration for annotation base authorization here's the code i'm donating to the shiro project to use aspectj as the aop kit to perform authorization of method invocation based on the defined shiro's annotation. the zip files contains the following: java/src: source files to adapt an aspectj joint point to a shiro method invocation java/test: unit test classes conf: configuration file for the test cases to compile and run properly, the code requires the following: junit jar shiro jar aspectj jars (i used ajdt within eclipse, so everything was integrated)",
        "label": 4
    },
    {
        "text": "upgrade 3rd party dependencies to latest stable versions our current dependency on ehcache (1.4.1) and the servlet api (2.4) are out of date and are causing dependency problems on many projects (ehcache 1.4.1 is from 2004: 6.5 years old!). our next release should change all 3rd party dependencies (not only ehcache and the servlet api) to the latest stable versions of each.",
        "label": 5
    },
    {
        "text": "provide servletcontextlistener for initializing shiro securitymanager currently in a webapp, the shiro securitymanager is initialized in the shirofilter. this makes it difficult to share, and other context listeners don't have access to the securitymanager.",
        "label": 5
    },
    {
        "text": "call permissionresolver directly in authorizingrealm see attached patch",
        "label": 1
    },
    {
        "text": "improve set of permission and role checks both the shiro tag library and tapestry-security have seen fit to extend the permissions and role checks. it would be nice to have a complete set of annotations and permissions checks as follows: right now, shiro supports: @requiresroles(string) @requirespermissions(string) these have the additionally issue that multiple values are separated by commas, which conflicts with commas in the permission strings. i would like to suggest the following more complete, and specific set: @requiresallroles(string[] ) <-- same as current requiresroles, except the and is specified, and the roles can be done via: @requiresallroles( {\"role1\", \"role2\"} ) @requiresanyroles(string[] ) <--- the or version, runs if any role is implied. @requiresallpermissions(string[] ) @requiresanypermissions(string[] ) securitycheck(allroles, anyroles, allpermissions, anypermissions) <--- all in one with one annotation",
        "label": 4
    },
    {
        "text": "filter configs cannot contain commas in ini format consider this configuration: [urls] /test/** = roles[guest, admin] the above won't work at the moment because pathmatchingfilter splits the right-hand value into 'roles[guest' and 'admin]'. commas inside square brackets should be ignored when splitting the path value.",
        "label": 5
    },
    {
        "text": "break circular dependency between subjectfactory and defaultsecuritymanager discussed at http://n2.nabble.com/architectural-review-of-early-jan-14-commits-td2157161.html and http://n2.nabble.com/circular-dependency-between-subjectfactory-and-defaultsecuritymanager-td3989601.html, the latter describing how the circular dependency could be refactored out",
        "label": 5
    },
    {
        "text": "improve  meta title  tags on pages for seo front page should stay as is with only a small change. instead of \"apache shiro - java security framework\" it should be \"apache shiro | java security framework\" for consistency with other pages. all other pages should have \"[page title] | apache shiro\"",
        "label": 5
    },
    {
        "text": "typo fixes the patch that i'm attaching is against current head / master (as mirrored to http://github.com/apache/shiro/).",
        "label": 1
    },
    {
        "text": "change any remaining usages of stringbuffer to stringbuilder where possible ",
        "label": 4
    },
    {
        "text": "simplesession cannot be deserialized org.apache.shiro.session.mgt.simplesession fails deserialization with the following error: at java.io.objectinputstream$blockdatainputstream.readbyte(objectinputstream.java:2666) at java.io.objectinputstream$blockdatainputstream.readutfchar(objectinputstream.java:3058) at java.io.objectinputstream$blockdatainputstream.readutfbody(objectinputstream.java:2955) at java.io.objectinputstream$blockdatainputstream.readutf(objectinputstream.java:2764) at java.io.objectinputstream.readutf(objectinputstream.java:1032) at org.apache.shiro.session.mgt.simplesession.readobject(simplesession.java:481) there is a problem with the way the 'expired' flag is managed. in writeobject the 'expired' flag is written if it's set: if (expired) { out.writeboolean(expired); } but, in getalteredfieldsbitmask, the bit in the bit mask is only set when the 'exprired' flag is not set: bitmask = !expired ? bitmask | expired_bit_mask : bitmask; a short test: simplesession session = new simplesession(\"localhost\"); // this doesn't work either // session.setexpired(true); bytearrayoutputstream serialized = new bytearrayoutputstream(); objectoutputstream serializer = new objectoutputstream(serialized); serializer.writeobject(session); serializer.close(); new objectinputstream(new bytearrayinputstream(serialized.tobytearray())).readobject();",
        "label": 4
    },
    {
        "text": "memorysessiondao should be propably abstract please consider different default configuration for caching of session. today i have spent a plenty of time trying to find the reason why i'm loosing my sessions. (i'm using native mode) finally i have found that session were garbage-collected from that soft cache. which is default configuration for native mode. so i have configured my security manager to use org.apache.shiro.cache.hashtablecachemanager which actually replaces the caching by simple memory persistence. i think this can be better default. anyway,please consider moving out from such thing as default wiring (made by/in constructors). personally speaking i think it is that is better to leave the decision on developer , what caching or other dependencies will he use. i also know that requires higher understanding of your product, but at least forces lean persons ( like me) to do that. the configuration can be made by spring, so all dependencies can be injected easily. there can/should be made some reasonable scenarios for configuration depending on deployment like: -single node clustered node . service -etc. sincerely, peter.",
        "label": 5
    },
    {
        "text": "upgrade to owasp dependency check maven plugin ",
        "label": 2
    },
    {
        "text": "typo in inishirofilter javadoc inishirofilter makes inconsistent references to \"some.pkg\" and \"example.pkg\".",
        "label": 4
    },
    {
        "text": "delegatingsubjecttest testrunas null pointer exception when all the tests are run, the test delegatingsubjecttest#testrunas throws null pointer exception java.lang.nullpointerexception at org.apache.shiro.mgt.sessionssecuritymanager.start(sessionssecuritymanager.java:121) at org.apache.shiro.subject.support.delegatingsubject.getsession(delegatingsubject.java:306) at org.apache.shiro.subject.support.delegatingsubject.getsession(delegatingsubject.java:295) at org.apache.shiro.mgt.defaultsecuritymanager.bind(defaultsecuritymanager.java:163) at org.apache.shiro.mgt.defaultsecuritymanager.login(defaultsecuritymanager.java:284) at org.apache.shiro.subject.support.delegatingsubject.login(delegatingsubject.java:247) at org.apache.shiro.subject.delegatingsubjecttest.testrunas(delegatingsubjecttest.java:157) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) if only delegatingsubjecttest class tests are run, everything is ok. note: point 3 of https://issues.apache.org/jira/browse/shiro-208 mentions similar issue.",
        "label": 5
    },
    {
        "text": "missing org jsecurity cache ehcache ehcachemanager we seem to be missing org.jsecurity.cache.ehcache.ehcachemanager. the cachingsecuritymanager seems to need it. for time time being i have commented out the code in anticipation to you fixing the problem.",
        "label": 5
    },
    {
        "text": "password and hash management sometimes secure hashes are long lived. i usually will hash something but prefix the string to be hashed with a secret password; i will usually add a bit of salt too. often i will need to change the password to that hash on a periodic basis. sometimes i find out that a particular hash algorithm is no longer secure and need to change my hash. what do i do with the old hashes? how can i tell them apart from the new ones? what i do is store the hashes as tuples which contain enough information my code to figure out what hash to use. all of this applies to encryption as well. i'm wondering is if we should provide some kind of manager to manage all this.",
        "label": 5
    },
    {
        "text": "environmentloaderlistener crashes if custom filters are configured  custom filters are initialized in init method of inishirofilter. environmentloaderlistener runs before filters and is unable to access custom filters. how to reproduce it: define and use custom filter in shiro.ini of samples-web application: [main] shiro.loginurl = /login.jsp create custom filter filter=org.apache.shiro.web.filter.authc.formauthenticationfilter ... [urls] use custom filter defined above /login.jsp = filter /logout = logout /account/** = filter /remoting/** = filter, roles[b2bclient], perms[\"remote:invoke:lan,wan\"] /** = filter exception thrown on application start-up: java.lang.illegalargumentexception: there is no filter with name 'filter' to apply to chain [/login.jsp] in the pool of available filters. ensure a filter with that name/path has first been registered with the addfilter method(s). at org.apache.shiro.web.filter.mgt.defaultfilterchainmanager.addtochain(defaultfilterchainmanager.java:185) at org.apache.shiro.web.filter.mgt.defaultfilterchainmanager.createchain(defaultfilterchainmanager.java:158) at org.apache.shiro.web.config.inifilterchainresolverfactory.createchains(inifilterchainresolverfactory.java:186) at org.apache.shiro.web.config.inifilterchainresolverfactory.buildchains(inifilterchainresolverfactory.java:127) at org.apache.shiro.web.config.inifilterchainresolverfactory.createinstance(inifilterchainresolverfactory.java:80) at org.apache.shiro.web.config.inifilterchainresolverfactory.createinstance(inifilterchainresolverfactory.java:1) at org.apache.shiro.config.inifactorysupport.createinstance(inifactorysupport.java:123) at org.apache.shiro.util.abstractfactory.getinstance(abstractfactory.java:47) at org.apache.shiro.web.env.iniwebenvironment.createfilterchainresolver(iniwebenvironment.java:187) at org.apache.shiro.web.env.iniwebenvironment.configure(iniwebenvironment.java:102) at org.apache.shiro.web.env.iniwebenvironment.init(iniwebenvironment.java:92) at org.apache.shiro.util.lifecycleutils.init(lifecycleutils.java:45) at org.apache.shiro.util.lifecycleutils.init(lifecycleutils.java:40) at org.apache.shiro.web.env.environmentloader.createenvironment(environmentloader.java:226) at org.apache.shiro.web.env.environmentloader.initenvironment(environmentloader.java:138) at org.apache.shiro.web.env.environmentloaderlistener.contextinitialized(environmentloaderlistener.java:58) at org.mortbay.jetty.handler.contexthandler.startcontext(contexthandler.java:548) at org.mortbay.jetty.servlet.context.startcontext(context.java:136) at org.mortbay.jetty.webapp.webappcontext.startcontext(webappcontext.java:1250) at org.mortbay.jetty.handler.contexthandler.dostart(contexthandler.java:517) at org.mortbay.jetty.webapp.webappcontext.dostart(webappcontext.java:467) at org.mortbay.component.abstractlifecycle.start(abstractlifecycle.java:50) at org.mortbay.jetty.handler.handlerwrapper.dostart(handlerwrapper.java:130) at org.mortbay.jetty.server.dostart(server.java:224) at org.mortbay.component.abstractlifecycle.start(abstractlifecycle.java:50) at org.apache.shiro.test.abstractcontainertest.startcontainer(abstractcontainertest.java:47) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(unknown source) at sun.reflect.delegatingmethodaccessorimpl.invoke(unknown source) at java.lang.reflect.method.invoke(unknown source) at org.junit.runners.model.frameworkmethod$1.runreflectivecall(frameworkmethod.java:44) at org.junit.internal.runners.model.reflectivecallable.run(reflectivecallable.java:15) at org.junit.runners.model.frameworkmethod.invokeexplosively(frameworkmethod.java:41) at org.junit.internal.runners.statements.runbefores.evaluate(runbefores.java:27) at org.junit.runners.parentrunner.run(parentrunner.java:236) at org.eclipse.jdt.internal.junit4.runner.junit4testreference.run(junit4testreference.java:49) at org.eclipse.jdt.internal.junit.runner.testexecution.run(testexecution.java:38) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:467) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.runtests(remotetestrunner.java:683) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.run(remotetestrunner.java:390) at org.eclipse.jdt.internal.junit.runner.remotetestrunner.main(remotetestrunner.java:197)",
        "label": 5
    },
    {
        "text": "upgrade dependencies on trunk here is a patch to upgrade some dependencies on trunk. note that the slf4j upgrade contains a significant performance improvement.",
        "label": 2
    },
    {
        "text": "make the httpmethodpermissionfilter as the 'rest' filter in the pool of default filters add to the defaultfilter enum to ensure it is added to the pool of default filters available to apps in their [urls] configuration.",
        "label": 4
    },
    {
        "text": "simpleauthenticationinfo merge does not merge principals if its internal principal collection is not mutable in simpleauthenticationinfo.merge(authenticationinfo), there is the following code:         if (this.principals == null) {             this.principals = info.getprincipals();         } else {             if (this.principals instanceof mutableprincipalcollection) {                 ((mutableprincipalcollection) this.principals).addall(info.getprincipals());             } else {                 this.principals = new simpleprincipalcollection(this.principals);             }         } the logic in the nested else block appears incorrect. if the current \"principals\" collection is not mutableprincipalcollection, a new simpleprincipalcollection, which is mutable, is constructed from it. however, it does not copy the principals from other.getprincipals(), which by that point in the method is known to be non-null and non-empty, after it makes a mutable principal collection.",
        "label": 4
    },
    {
        "text": "verify all samples deploy run successfully ensure that the sample applications deploy and run succesfully now that the modular build has re-enabled them.",
        "label": 0
    },
    {
        "text": "do not create new session when response is committed  maybe grails specific  i experienced an issue with the rememberme cookie inside grails with the jsecurity plugin when attempting to logout through securityutils.getsubject().logout() if there is no jsessionid and a rememberme cookie and the response is committed, securityutils.getsubject() still tries to create a new session and causes the following stacktrace in tomcat. whatever the reason (maybe a grails bug), it would be better if jsecurity didn't try to create a new session if the response is committed. i am submitting a simple patch and unit test for this. i replaced the jsecurity jar in my grails app with the patched jar and the issue went away and the user is correctly logged out. [99105] 0-snapshot].[grails] servlet.service() for servlet grails threw exception java.lang.illegalstateexception: cannot create a session after the response has been committed at org.apache.catalina.connector.request.dogetsession(request.java:2221)if at org.apache.catalina.connector.request.getsession(request.java:2031) at org.apache.catalina.connector.requestfacade.getsession(requestfacade.java:832) at javax.servlet.http.httpservletrequestwrapper.getsession(httpservletrequestwrapper.java:216) at org.apache.catalina.core.applicationhttprequest.getsession(applicationhttprequest.java:545) at javax.servlet.http.httpservletrequestwrapper.getsession(httpservletrequestwrapper.java:216) at org.jsecurity.web.servlet.jsecurityhttpservletrequest.getsession(jsecurityhttpservletrequest.java:143) at org.jsecurity.web.servlet.jsecurityhttpservletrequest.getsession(jsecurityhttpservletrequest.java:165) at org.jsecurity.web.session.servletcontainersessionmanager.createsession(servletcontainersessionmanager.java:78) at org.jsecurity.session.mgt.abstractsessionmanager.start(abstractsessionmanager.java:62) at org.jsecurity.mgt.sessionssecuritymanager.start(sessionssecuritymanager.java:178) at org.jsecurity.subject.delegatingsubject.getsession(delegatingsubject.java:284) at org.jsecurity.subject.delegatingsubject.getsession(delegatingsubject.java:272) at org.jsecurity.web.defaultwebsecuritymanager.bind(defaultwebsecuritymanager.java:242) at org.jsecurity.web.defaultwebsecuritymanager.bind(defaultwebsecuritymanager.java:235) at org.jsecurity.mgt.defaultsecuritymanager.getsubject(defaultsecuritymanager.java:418) at org.jsecurity.mgt.defaultsecuritymanager.getsubject(defaultsecuritymanager.java:424) at org.jsecurity.securityutils.getsubject(securityutils.java:53) at org.jsecurity.web.servlet.jsecurityhttpservletrequest.getsubject(jsecurityhttpservletrequest.java:88) at org.jsecurity.web.servlet.jsecurityhttpservletrequest.getsubjectprincipal(jsecurityhttpservletrequest.java:93) at org.jsecurity.web.servlet.jsecurityhttpservletrequest.getuserprincipal(jsecurityhttpservletrequest.java:111) at org.springframework.web.servlet.frameworkservlet.getusernameforrequest(frameworkservlet.java:615) at org.springframework.web.servlet.frameworkservlet.processrequest(frameworkservlet.java:596) at org.springframework.web.servlet.frameworkservlet.doget(frameworkservlet.java:501) at javax.servlet.http.httpservlet.service(httpservlet.java:627) at javax.servlet.http.httpservlet.service(httpservlet.java:729) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:269) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:188) at org.apache.catalina.core.applicationdispatcher.invoke(applicationdispatcher.java:679) at org.apache.catalina.core.applicationdispatcher.processrequest(applicationdispatcher.java:461) at org.apache.catalina.core.applicationdispatcher.doforward(applicationdispatcher.java:399) at org.apache.catalina.core.applicationdispatcher.forward(applicationdispatcher.java:301) at org.codehaus.groovy.grails.web.util.webutils.forwardrequestforurlmappinginfo(webutils.java:231) at org.codehaus.groovy.grails.web.util.webutils.forwardrequestforurlmappinginfo(webutils.java:208) at org.codehaus.groovy.grails.web.mapping.filter.urlmappingsfilter.dofilterinternal(urlmappingsfilter.java:165) at org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:76) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:215) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:188) at org.codehaus.groovy.grails.web.sitemesh.grailspagefilter.parsepage(grailspagefilter.java:122) at org.codehaus.groovy.grails.web.sitemesh.grailspagefilter.dofilter(grailspagefilter.java:85) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:215) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:188) at org.jsecurity.web.servlet.jsecurityfilter.dofilterinternal(jsecurityfilter.java:382) at org.jsecurity.web.servlet.onceperrequestfilter.dofilter(onceperrequestfilter.java:180) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:215) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:188) at org.codehaus.groovy.grails.web.servlet.mvc.grailswebrequestfilter.dofilterinternal(grailswebrequestfilter.java:65) at org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:76) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:215) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:188) at org.springframework.web.filter.characterencodingfilter.dofilterinternal(characterencodingfilter.java:96) at org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:76) at org.springframework.web.filter.delegatingfilterproxy.invokedelegate(delegatingfilterproxy.java:236) at org.springframework.web.filter.delegatingfilterproxy.dofilter(delegatingfilterproxy.java:167) at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:215) at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:188) at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:213) at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:172) at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:127) at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:117) at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:108) at com.balsamiq.tomcat.crosssubdomainsessionvalve.invoke(crosssubdomainsessionvalve.java:94) at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:174) at org.apache.coyote.http11.http11processor.process(http11processor.java:875) at org.apache.coyote.http11.http11baseprotocol$http11connectionhandler.processconnection(http11baseprotocol.java:665) at org.apache.tomcat.util.net.pooltcpendpoint.processsocket(pooltcpendpoint.java:528) at org.apache.tomcat.util.net.leaderfollowerworkerthread.runit(leaderfollowerworkerthread.java:81) at org.apache.tomcat.util.threads.threadpool$controlrunnable.run(threadpool.java:689) at java.lang.thread.run(thread.java:636)",
        "label": 5
    },
    {
        "text": "getservletcontext allways return null with conf via spring  native mode  hi, i am using shiro rev. 945078, with configuration which uses native sessions filter is configured via springframework - delegatingfilterproxy (here is the snippet from web.xml) <filter> <filter-name>shirofilter</filter-name> <filter-class>org.springframework.web.filter.delegatingfilterproxy</filter-class> </filter> (and here from spring conf. xml) <bean id=\"shirofilter\" class=\"org.apache.shiro.spring.web.shirofilterfactorybean\"> <property name=\"securitymanager\" ref=\"securitymanager\"/> </bean> <bean id=\"securitymanager\" class=\"org.apache.shiro.web.defaultwebsecuritymanager\"> <property name=\"realm\" ref=\"trustrealm\" /> <property name=\"subjectfactory\" ref=\"trustsubjectfactory\" /> <property name=\"sessionmode\" value=\"native\" /> <property name=\"sessionmanager\" ref=\"trustsessionmanager\" /> <property name=\"cachemanager\"> <bean class=\"org.apache.shiro.cache.memoryconstrainedcachemanager\" /> </property> </bean> the problem i have is that the method httpservletrequest.getsession().getservletcontext() always return null, (i was wondering why and i found that the servletcontext is set to abstractfilter only in init(filterconfig) method. but this method is never called in configuration via spring-delegatingfilterproxy. i know that specifying the \"targetfilterlifecycle\" filter init-param as \"true\" will enforce invocation of the filter.init. but this way my definitions will be overrided.)",
        "label": 5
    },
    {
        "text": "methodinvocation is missing a getthis   or equivalent  method the current (r896125) revision of methodinvocation does not expose a method for accessing the object on which the method is being invoked. in the aop world, i think this is the joinpoint.getthis() method. in any case, such a method is necessary to test permissions at the instance level (e.g.: \"lightsaber:wield:blue\", where \"blue\" is obtained from the instance on which the \"wield()\" method of the \"lightsaber\" class is called.)",
        "label": 4
    },
    {
        "text": "create maven poms to build code base create maven poms to build code base",
        "label": 5
    },
    {
        "text": "adding  relativepath  to the  parent  element to avoid maven x issue where parent is not in local repo yet  add <relativepath> to the <parent> declaration in the pom.xml files to workaround issue with maven 3.0.x where the parent is not in the local repo (eg when you built from scratch in developer machine) you will get error \"non-resolvable parent pom: could not find artifact \" like this: the project org.apache.shiro:shiro-spring:1.2.0-snapshot (/users/hsaputra/shiro/trunk/support/spring/pom.xml) has 1 error [error] non-resolvable parent pom: could not find artifact org.apache.shiro:shiro-root:pom:1.2.0-snapshot and 'parent.relativepath' points at wrong local pom @ line 22, column 13 -> [help 2] adding relative path element to the parent element seems to fix this.",
        "label": 4
    },
    {
        "text": "problem with webremembermemanager i executed the following code to see if i needed to get the current user again after logging out: subject currentuser; currentuser = securityutils.getsubject(); // < --no exception currentuser = securityutils.getsubject(); // < --no exception currentuser.logout(); // < --no exception currentuser = securityutils.getsubject(); // < --exception resulting in the application throwing a nullpointerexception from webremembermemanager. here is the stack trace: (i'm currently trying to learn how to install and use junit) 32046 [btpool0-1] warn org.apache.shiro.mgt.defaultsecuritymanager - delegate remembermemanager instance of type [org.apache.shiro.web.webremembermemanager] threw an exception during getrememberedprincipals(). java.lang.nullpointerexception at org.apache.shiro.web.attr.cookieattribute.getcookie(cookieattribute.java:262) at org.apache.shiro.web.attr.cookieattribute.removevalue(cookieattribute.java:357) at org.apache.shiro.web.webremembermemanager.forgetidentity(webremembermemanager.java:320) at org.apache.shiro.web.webremembermemanager.forgetidentity(webremembermemanager.java:316) at org.apache.shiro.mgt.abstractremembermemanager.onrememberedprincipalfailure(abstractremembermemanager.java:547) at org.apache.shiro.mgt.abstractremembermemanager.getrememberedprincipals(abstractremembermemanager.java:488) at org.apache.shiro.mgt.defaultsecuritymanager.getrememberedidentity(defaultsecuritymanager.java:598) at org.apache.shiro.mgt.defaultsecuritymanager.resolveprincipals(defaultsecuritymanager.java:486) at org.apache.shiro.mgt.defaultsecuritymanager.createsubject(defaultsecuritymanager.java:363) at org.apache.shiro.subject.subject$builder.buildsubject(subject.java:751) at org.apache.shiro.securityutils.getsubject(securityutils.java:57) at burp_erp_t1.testshiroservlet.login(testshiroservlet.java:43) at burp_erp_t1.testshiroservlet.dopost(testshiroservlet.java:24) at javax.servlet.http.httpservlet.service(httpservlet.java:713) at javax.servlet.http.httpservlet.service(httpservlet.java:806) at org.mortbay.jetty.servlet.servletholder.handle(servletholder.java:487) at org.mortbay.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1093) at org.apache.shiro.web.servlet.abstractshirofilter.executechain(abstractshirofilter.java:373) at org.apache.shiro.web.servlet.abstractshirofilter.dofilterinternal(abstractshirofilter.java:306) at org.apache.shiro.web.servlet.onceperrequestfilter.dofilter(onceperrequestfilter.java:81) at org.mortbay.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1084) at com.google.appengine.api.blobstore.dev.serveblobfilter.dofilter(serveblobfilter.java:51) at org.mortbay.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1084) at com.google.apphosting.utils.servlet.transactioncleanupfilter.dofilter(transactioncleanupfilter.java:43) at org.mortbay.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1084) at com.google.appengine.tools.development.staticfilefilter.dofilter(staticfilefilter.java:121) at org.mortbay.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1084) at org.mortbay.jetty.servlet.servlethandler.handle(servlethandler.java:360) at org.mortbay.jetty.security.securityhandler.handle(securityhandler.java:216) at org.mortbay.jetty.servlet.sessionhandler.handle(sessionhandler.java:181) at org.mortbay.jetty.handler.contexthandler.handle(contexthandler.java:712) at org.mortbay.jetty.webapp.webappcontext.handle(webappcontext.java:405) at com.google.apphosting.utils.jetty.devappenginewebappcontext.handle(devappenginewebappcontext.java:70) at org.mortbay.jetty.handler.handlerwrapper.handle(handlerwrapper.java:139) at com.google.appengine.tools.development.jettycontainerservice$apiproxyhandler.handle(jettycontainerservice.java:352) at org.mortbay.jetty.handler.handlerwrapper.handle(handlerwrapper.java:139) at org.mortbay.jetty.server.handle(server.java:313) at org.mortbay.jetty.httpconnection.handlerequest(httpconnection.java:506) at org.mortbay.jetty.httpconnection$requesthandler.content(httpconnection.java:844) at org.mortbay.jetty.httpparser.parsenext(httpparser.java:644) at org.mortbay.jetty.httpparser.parseavailable(httpparser.java:211) at org.mortbay.jetty.httpconnection.handle(httpconnection.java:381) at org.mortbay.io.nio.selectchannelendpoint.run(selectchannelendpoint.java:396) at org.mortbay.thread.boundedthreadpool$poolthread.run(boundedthreadpool.java:442)",
        "label": 5
    },
    {
        "text": "switch all usages of commons logging to slf4j ",
        "label": 5
    },
    {
        "text": "complete and realistic webapplication example  but without spring  please create a complete webapplication as an usable and realistic example (but without spring) that would show the various uses and features of shiro in action. the actual examples are just too \"hello world\" like .",
        "label": 4
    },
    {
        "text": "filter chain definitions should match on request method as well as request path  rest support  to support rest environments, it would be nice to specify a filter chain definition based on not only the request path, but also the request method (put, get, post, delete) to support rest environments. for example: /data/stocks/**:post = authc, roles[admin] /data/stocks/** = authc",
        "label": 5
    },
    {
        "text": "add an aes cipher for projects requiring aes encryption, we need to add an aes cipher.",
        "label": 5
    },
    {
        "text": "change all stringbuffer usages to stringbuilder for a minor performance improvement",
        "label": 4
    },
    {
        "text": "refactor realm implementations to favor delegation over inheritance currently most people need to subclass realm implementations to perform role and/or permission checks. this is not very scalable when more than a few realms exist, or people need to re-use realms across applications. instead, it would be much nicer to allow developers to configure components that did most of the common realm logic, regardless of data store. for example, perhaps a rolepermissionresolver could be introduced: rolepermissionresolver.getpermissions( string rolename ); this could be injected across multiple realms across applications instead of needing to subclass realm implementations - a little nicer approach. also, we might want to look at uses of the strategy design pattern for checking logic.",
        "label": 4
    },
    {
        "text": "activedirectoryrealm might by vulnerable to ldap search code injection when searching for a username within getrolenamesforuser, the search filter is built by inserting the literal value from username. two potential problems might arise: username might contain (deliberately crafted) ldap syntax elements that could be used to affect the search. permissible user principal names within ad (e.g. \"a(1\") might be rejected due to syntax problems (even some microsoft software packages appear to be quick-and-dirty here - see note at bottom of http://technet.microsoft.com/en-us/library/cc730634(ws.10).aspx) . this potential vulnerability can easily be fixed by using search parameters instead of literals (which should be considered good style anyway). the actual chance for an exploit appears to be very remote, but hackers are so creative // vulnerable to injection string searchfilter = \"(&(objectclass=*)(userprincipalname=\" + userprincipalname + \"))\"; // vulnerable to injection namingenumeration answer = ldapcontext.search(searchbase, searchfilter, searchctls); string searchfilter = \"(&(objectclass=*)(userprincipalname= {0} ))\"; object[] searcharguments = new object[] {userprincipalname} ; namingenumeration answer = ldapcontext.search(searchbase, searchfilter, searcharguments, searchctls);",
        "label": 5
    },
    {
        "text": "overriding permissionresolver has no effect on implicit inirealm currently, the implicit inirealm processes its role and permissions strings to early. overriding the permissionresolver and or rolepermissionresolver has no effect. the realm is constructed by calling new inirealm(ini) (inisecuritymanagerfactory.java:254) this constructor then calls processdefinition(ini) right away (inirealm.java:60) this fills in the roles and users maps in simpleaccountrealm, but it will use the default permissionresolver to do so because getpermissionresolver() (textconfigurationrealm.java:144) will return the default instance. inirealm should probably not do any initialisation code (processdefinition) before init is called. it overrides oninit() but tests whether the roles and users collections are empty before doing any processing (and it will only initialise if it was constructed with a resourcepath)...",
        "label": 5
    },
    {
        "text": "spring boot registers shiro filter only on request dispatcher when errorpagefilter of spring forwards to error url, shiro filter is not part of filter chain so the user is logout",
        "label": 2
    },
    {
        "text": "caused by  java lang noclassdeffounderror  lcom google inject internal util immutablelist  i tried shiro with guice 4.0-snapshot it does not work, below is stack trace. 27-aug-2014 09:27:15.957 severe [localhost-startstop-1] org.apache.catalina.core.standardcontext.listenerstart exception sending context initialized event to listener instance of class com.sun.faces.config.configurelistener java.lang.runtimeexception: java.lang.noclassdeffounderror: lcom/google/inject/internal/util/$immutablelist; at com.sun.faces.config.configurelistener.contextinitialized(configurelistener.java:280) at org.apache.catalina.core.standardcontext.listenerstart(standardcontext.java:4738) at org.apache.catalina.core.standardcontext.startinternal(standardcontext.java:5158) at org.apache.catalina.util.lifecyclebase.start(lifecyclebase.java:150) at org.apache.catalina.core.containerbase.addchildinternal(containerbase.java:726) at org.apache.catalina.core.containerbase.addchild(containerbase.java:702) at org.apache.catalina.core.standardhost.addchild(standardhost.java:697) at org.apache.catalina.startup.hostconfig.deploydescriptor(hostconfig.java:579) at org.apache.catalina.startup.hostconfig$deploydescriptor.run(hostconfig.java:1744) at java.util.concurrent.executors$runnableadapter.call(executors.java:511) at java.util.concurrent.futuretask.run(futuretask.java:266) at java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) at java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) at java.lang.thread.run(thread.java:745) caused by: java.lang.noclassdeffounderror: lcom/google/inject/internal/util/$immutablelist; at java.lang.class.getdeclaredfields0(native method) at java.lang.class.privategetdeclaredfields(class.java:2570) at java.lang.class.getdeclaredfields(class.java:1903) at com.google.inject.spi.injectionpoint.getinjectionpoints(injectionpoint.java:661) at com.google.inject.spi.injectionpoint.forinstancemethodsandfields(injectionpoint.java:366) at com.google.inject.spi.injectionpoint.forinstancemethodsandfields(injectionpoint.java:385) at com.google.inject.internal.bindingbuilder.toprovider(bindingbuilder.java:110) at com.google.inject.internal.bindingbuilder.toprovider(bindingbuilder.java:100) at com.google.inject.internal.bindingbuilder.toprovider(bindingbuilder.java:43) at com.google.inject.multibindings.multibinder$realmultibinder.configure(multibinder.java:269) at com.google.inject.spi.elements$recordingbinder.install(elements.java:253) at com.google.inject.multibindings.multibinder.newsetbinder(multibinder.java:136) at com.google.inject.multibindings.mapbinder.newmapbinder(mapbinder.java:154) at com.google.inject.multibindings.mapbinder.newmapbinder(mapbinder.java:168) at org.apache.shiro.guice.beantypelistener.beantypemapbinding(beantypelistener.java:130) at org.apache.shiro.guice.beantypelistener.bindbeantype(beantypelistener.java:126) at org.apache.shiro.guice.shiromodule.bindbeantype(shiromodule.java:151) at org.apache.shiro.guice.web.shirowebmodule.configureshiro(shirowebmodule.java:119) at org.apache.shiro.guice.shiromodule.configure(shiromodule.java:73) at com.google.inject.privatemodule.configure(privatemodule.java:100) at com.google.inject.spi.elements$recordingbinder.install(elements.java:253) at com.google.inject.spi.elements.getelements(elements.java:108) at com.google.inject.internal.injectorshell$builder.build(injectorshell.java:135) at com.google.inject.internal.internalinjectorcreator.build(internalinjectorcreator.java:104) at com.google.inject.guice.createinjector(guice.java:99) at com.google.inject.guice.createinjector(guice.java:73) at com.google.inject.guice.createinjector(guice.java:62) at com.thjug.bgile.guice.guiceinjectorfactory.<clinit>(guiceinjectorfactory.java:37) at com.thjug.bgile.guice.guiceinjectionprovider.<clinit>(guiceinjectionprovider.java:18) at java.lang.class.forname0(native method) at java.lang.class.forname(class.java:340) at com.sun.faces.util.util.loadclass(util.java:325) at com.sun.faces.spi.injectionproviderfactory.getproviderinstance(injectionproviderfactory.java:149) at com.sun.faces.spi.injectionproviderfactory.createinstance(injectionproviderfactory.java:117) at com.sun.faces.config.configmanager.initialize(configmanager.java:361) at com.sun.faces.config.configurelistener.contextinitialized(configurelistener.java:221) ... 13 more caused by: java.lang.classnotfoundexception: com.google.inject.internal.util.$immutablelist at org.apache.catalina.loader.webappclassloader.loadclass(webappclassloader.java:1284) at org.apache.catalina.loader.webappclassloader.loadclass(webappclassloader.java:1132) ... 49 more",
        "label": 4
    },
    {
        "text": "when method is unauthorized  please include method info in stack trace we are using shiro's annotation-based method authorization support, to enforce security checks on remotely invoked services. the problem is that when we get an authorizationexception, it doesn't include any information about which particular method failed. looks like it would be really easy to include this in authorizingannotationmethodinterceptor.assertauthorized() as follows: public void assertauthorized(methodinvocation method) throws authorizationexception { try { ((authorizingannotationhandler)gethandler()).assertauthorized(getannotation(mi)); } catch(authorizationexception ae) { throw new authorizationexception(\"method not authorized: \" + method.getmethod(), ae); } }",
        "label": 4
    },
    {
        "text": "nullpointer error at permission check when no permissionresolver is set in class authorizingrealm, the ispermitted( ... checks never look if the the permissionresolver are set but allways will query them in case a permission reqeust os asked for. solutions: 1. catch empty/ null permissionresolver in authorizingrealm 2. force that all derived authorizingrealms have a permissionresolver by making this required in the constructor 3. defaultset the current only implementation (wildcardpermissionresolver) into the getpermissionresolver method so either this one is used or it has to be overwritten i would suggest 2. as its most clean and will fail/ force to be cared with at compiletime already. ps: this is the issue described in my mailing to list http://mail-archives.apache.org/mod_mbox/shiro-user/201012.mbox/browser",
        "label": 4
    },
    {
        "text": "defaultserializer does not load classes from the contextclassloader  causing rememberme to not work rememberme functionality does not work because shiro is in a different class loader than the rememberme serializable class, the only thing that needs to change is the resolveclass() function, and it should use thread.currentthread().getcontextclassloader().loadclass() to load the class, as that works in all cases and all class loader configurations. i fixed this in my code by overriding defaultserializer, but this should be the default behavior: private static class serialize<t> extends defaultserializer<t> { @override public t deserialize(byte[] serialized) throws serializationexception { if (serialized == null) { string msg = \"argument cannot be null.\"; throw new illegalargumentexception(msg); } bytearrayinputstream bais = new bytearrayinputstream(serialized); bufferedinputstream bis = new bufferedinputstream(bais); try { objectinputstream ois = new objectinputstream(bis) { @override public class resolveclass(objectstreamclass desc) throws classnotfoundexception { // ************ this is the line that was changed ******************** return thread.currentthread().getcontextclassloader().loadclass(desc.getname()); } }; @suppresswarnings( {\"unchecked\"} ) t deserialized = (t) ois.readobject(); ois.close(); return deserialized; } catch (exception e) { string msg = \"unable to deserialze argument byte array.\"; throw new serializationexception(msg, e); } } }",
        "label": 5
    },
    {
        "text": "leak in getpermissions method of jdbcrealm it appears that the jdbcrealm.getpermissions is leaking preparedstatements and resultsets. these are both created inside a for loop, but the finally block with close statements is outside of the loop.",
        "label": 4
    },
    {
        "text": "cipher refactoring the cipher interface should be refactored to have two methods: byte[] encrypt( byte[] raw); and byte[] decrypt( byte[] encrypted); since almost all usages of ciphers in jsecurity don't expect the key to change across method invocations. but for the few cases that do require such a requirement, we need to move the existing two methods into a new interface: variablekeycipher or dynamickeycipher that contains the existing two methods: byte[] encrypt( byte[] raw, byte[] encryptionkey); and byte[] decrypt( byte[] encrypted, byte[] decryptionkey);",
        "label": 5
    },
    {
        "text": "integration with cas as i wanted to test shiro with cas, i created a cas filter, a cas token and a cas realm. i'm new to shiro so maybe i was mistaken on some points. i have a demo webapp with these files : index.jsp error.jsp protected/index.jsp the idea is to protect the /protected folder. i have this shiro.ini configuration : [main] authcas = org.apache.shiro.cas.casfilter authcas.failureurl = /demo2/error.jsp defaultrealm = com.jle.demo2.realm.defaultrealm defaultrealm.name = demo2 defaultrealm.casserverurlprefix = http://localhost:11380/cas/ defaultrealm.casservice = http://localhost:11380/demo2/shiro-cas roles.loginurl = http://localhost:11380/cas/login?service=http://localhost:11380/demo2/shiro-cas [urls] /protected/** = roles[role_user] /shiro-cas = authcas /** = anon the protection on /protected/** implies to have the role role_user, if it is not the case, the user is redirected to the cas server according to the property loginurl of roles : http://localhost:11380/cas/login?service=http://localhost:11380/demo2/shiro-cas. after authentication on cas server, the user is redirected (cas works like this) to the service url : http://localhost:11380/demo2/shiro-cas. on this url, there is the authcas filter defined as the defaultrealm which inherits from casrealm : public class defaultrealm extends casrealm { @override protected authorizationinfo dogetauthorizationinfo(principalcollection principals) { set<string> roles = new hashset<string>(); roles.add(\"role_user\"); return new simpleauthorizationinfo(roles); } } the defaultrealm always grants the authenticated user the role_user role to access to the /protected folder. the casfilter is configured on a specific url corresponding to the cas url service : http://localhost:11380/demo2/shiro-cas, it gets the service parameter in url and create a castoken with it. the casrealm uses the castoken to authenticate the user, it gets the service ticket, uses the cas20serviceticketvalidator (from cas client) to call the cas server and validates the ticket granted by cas. if the ticket is validated, the user is authenticated and redirected to the original protected url (/protected/index.jsp). if the validation fails, the user is redirected to the cas error page (error.jsp = authcas.failureurl). to add casfilter, castoken and casrealm to the trunk, i created a cas module inside support. casrealm : i didn't find how to set the remember me to the subject : i know if the user is in rememberme mode from cas depending on a specific attribute from the assertion object but i didn't know how to pass this information to the subject (there is a todo). during the cas service ticket validation, i get the object assertion and all the attributes of the user populated by cas are in the \"attributes\" property : i don't know what to do with these attributes. during the cas service ticket validation, i choose not to throw an authenticationexception, but returns null instead : is it the good way to do ? casfilter : i'm not sure i respect the spirit of shiro because my filter authcas is always the last one. i add on the onloginfailure a test, if the user is already authenticated, it doesn't failed but redirects to default success url. i didn't know how to add my authcas filter as a default filter without configuring it in the shiro.ini file. i have no test yet. i join the svn patch. hope it works well for you. don't hesitate to come back to me.",
        "label": 5
    },
    {
        "text": "remove hard dedepency of ehcache on core api per this thread: http://markmail.org/message/szkvpl2vxlj6zwno we'd like to ensure hard dependencies on ehcache are removed from the core api, perhaps defaulting to a standalone memory-based cachemanager that is suitable for production environments.",
        "label": 5
    },
    {
        "text": "add ability to set system properties in shiro ini shiro should be able to inject values from system properties into the ini key value pairs. http://shiro-user.582556.n2.nabble.com/system-properties-in-shiro-ini-td7579627.html",
        "label": 1
    },
    {
        "text": "org jsecurity web savedrequest is not serializable tomcat complains about non serializable attribute: severe: servlet.service() for servlet default threw exception java.lang.illegalargumentexception: setattribute: non-serializable attribute at org.apache.catalina.session.standardsession.setattribute(standardsession.java:1295) at org.apache.catalina.session.standardsession.setattribute(standardsession.java:1256) at org.apache.catalina.session.standardsessionfacade.setattribute(standardsessionfacade.java:130) at org.jsecurity.web.session.websession.setattribute(websession.java:154) at org.jsecurity.session.mgt.abstractsessionmanager.setattribute(abstractsessionmanager.java:167) at org.jsecurity.session.mgt.delegatingsession.setattribute(delegatingsession.java:190) at org.jsecurity.session.proxiedsession.setattribute(proxiedsession.java:149) at org.jsecurity.web.webutils.saverequest(webutils.java:530) at org.jsecurity.web.filter.accesscontrolfilter.saverequest(accesscontrolfilter.java:191) at org.jsecurity.web.filter.accesscontrolfilter.saverequestandredirecttologin(accesscontrolfilter.java:174) at org.jsecurity.web.filter.authc.formauthenticationfilter.onaccessdenied(formauthenticationfilter.java:164) at org.jsecurity.web.filter.accesscontrolfilter.onprehandle(accesscontrolfilter.java:145) at org.jsecurity.web.filter.pathmatchingfilter.prehandle(pathmatchingfilter.java:175) at org.jsecurity.web.servlet.advicefilter.dofilterinternal(advicefilter.java:129) at org.jsecurity.web.servlet.onceperrequestfilter.dofilter(onceperrequestfilter.java:183) at org.jsecurity.web.servlet.proxiedfilterchain.dofilter(proxiedfilterchain.java:59) at org.jsecurity.web.servlet.jsecurityfilter.dofilterinternal(jsecurityfilter.java:384) at org.jsecurity.web.servlet.onceperrequestfilter.dofilter(onceperrequestfilter.java:183)",
        "label": 5
    },
    {
        "text": "apache karaf features file apache karaf is a small osgi based runtime which provides a lightweight container onto which various components and applications can be deployed. the following patch provides a features.xml which can be used in to install apache shiro easily in apache karaf. to test the patch download apache karaf 2.2.0-snapshot (because of the used obr resolver not backward-compatible to 2.1.x; but we're going to release karaf-2.2.0 very soon anyway...) here [1] or here [2], unizp/untar; now start karaf: pieber@coprime [04:18:58] [~/apache-karaf-2.1.99-snapshot]  -> % ./bin/karaf          __ __                  ____              / //_/____ __________ _/ __/             / ,<  / __ `/ ___/ __ `/ /_              / /| |/ /_/ / /  / /_/ / __/             /_/ |_|\\__,_/_/   \\__,_/_/            apache karaf (2.1.99-snapshot) hit '<tab>' for a list of available commands and '[cmd] --help' for help on a specific command. hit '<ctrl-d>' or 'osgi:shutdown' to shutdown karaf. afterwards add the new shiro features file: karaf@root> features:addurl mvn:org.apache.shiro/shiro-features/1.2.0-snapshot/xml/features now we can install the features... karaf@root> features:install shiro-web shiro-ehcache shiro-quartz shiro-spring shiro-aspectj ... and check if everything was installed correctly karaf@root> list start level 100 , list threshold: 50    id   state         blueprint      level  name [  42] [active     ] [            ] [   60] apache shiro :: core (1.2.0.snapshot) [  43] [active     ] [            ] [   60] geronimo-servlet_2.5_spec (1.1.2) [  44] [active     ] [            ] [   60] jetty :: utilities (7.2.2.v20101205) [  45] [active     ] [            ] [   60] jetty :: io utility (7.2.2.v20101205) [  46] [active     ] [            ] [   60] jetty :: http utility (7.2.2.v20101205) [  47] [active     ] [            ] [   60] jetty :: continuation (7.2.2.v20101205) [  48] [active     ] [            ] [   60] jetty :: server core (7.2.2.v20101205) [  49] [active     ] [            ] [   60] jetty :: security (7.2.2.v20101205) [  50] [active     ] [            ] [   60] jetty :: servlet handling (7.2.2.v20101205) [  51] [active     ] [            ] [   60] jetty :: xml utilities (7.2.2.v20101205) [  52] [active     ] [            ] [   60] ops4j pax web - api (1.0.1) [  53] [active     ] [            ] [   60] ops4j pax web - service spi (1.0.1) [  54] [active     ] [            ] [   60] ops4j pax web - runtime (1.0.1) [  55] [active     ] [            ] [   60] ops4j pax web - jetty (1.0.1) [  57] [active     ] [            ] [   60] ops4j pax web - jsp support (1.0.1) [  58] [active     ] [            ] [   60] ops4j pax web - extender - war (1.0.1) [  59] [active     ] [            ] [   60] ops4j pax web - extender - whiteboard (1.0.1) [  60] [active     ] [            ] [   60] ops4j pax web - fileinstall deployer (1.0.1) [  61] [active     ] [            ] [   60] ops4j pax url - war:, war-i: (1.2.5) [  62] [active     ] [            ] [   60] apache shiro :: web (1.2.0.snapshot) [  63] [active     ] [            ] [   60] apache servicemix :: bundles :: ehcache (2.3.0.1) [  64] [active     ] [            ] [   60] apache shiro :: support :: ehcache (1.2.0.snapshot) [  65] [active     ] [            ] [   60] commons collections (3.2.1) [  66] [active     ] [            ] [   60] apache servicemix bundles: quartz-1.6.1 (1.6.1.1) [  67] [active     ] [            ] [   60] apache shiro :: support :: quartz (1.2.0.snapshot) [  68] [active     ] [            ] [   60] apache servicemix :: bundles :: aopalliance (1.0.0.4) [  69] [active     ] [            ] [   60] spring core (3.0.5.release) [  70] [active     ] [            ] [   60] spring asm (3.0.5.release) [  71] [active     ] [            ] [   60] spring expression language (3.0.5.release) [  72] [active     ] [            ] [   60] spring beans (3.0.5.release) [  73] [active     ] [            ] [   60] spring aop (3.0.5.release) [  74] [active     ] [            ] [   60] spring context (3.0.5.release) [  75] [active     ] [            ] [   60] spring context support (3.0.5.release) [  76] [active     ] [            ] [   60] apache shiro :: support :: spring (1.2.0.snapshot) [  77] [active     ] [            ] [   60] apache servicemix :: bundles :: aspectj (1.6.8.1) [  78] [active     ] [            ] [   60] apache shiro :: support :: aspectj (1.2.0.snapshot) [1] http://repository.apache.org/snapshots/org/apache/karaf/assemblies/apache-karaf/apache-karaf/2.1.99-snapshot/apache-karaf-2.1.99-snapshot.tar.gz [2] http://repository.apache.org/snapshots/org/apache/karaf/assemblies/apache-karaf/apache-karaf/2.1.99-snapshot/apache-karaf-2.1.99-snapshot.zip",
        "label": 5
    },
    {
        "text": "checkroles string  roles  is unimplemented the fact that this method in delegatingsubject is unimplemented kinda sucks especially since the other checkroles method is broken too. (shiro-234) public void checkroles(string... roleidentifiers) throws authorizationexception { }",
        "label": 5
    },
    {
        "text": "shiro jax rs is not an osgi bundle the shiro project provides its various binaries as osgi bundles so that they can be used in an osgi environment. for some reason the shiro-jaxrs artifact is not an osgi bundle, and must therefore be repackaged to be used in osgi.",
        "label": 2
    },
    {
        "text": "svnignores for support groovy does not exclude eclipse files ",
        "label": 4
    },
    {
        "text": "error in doap the doap contains the following entries: <category rdf:resource=\"http://projects.apache.org/category/library\" /> <category rdf:resource=\"http://www.apache.org/category/web-framework\"/> only the first one has the correct url; please can you correct the other one to the following: <category rdf:resource=\"http://projects.apache.org/category/web-framework\"/> unfortunately there was an error on the page that described the categories (now fixed in svn). however the doap creation form was correct.",
        "label": 5
    },
    {
        "text": "atlassian crowd realm add a atlassian crowd realm",
        "label": 4
    },
    {
        "text": "wildcardpermission  tostring  equals and hashcode it would be nice if wildcardpermission implemented tostring equals and hashcode. the tostring method would make debugging and logging easier, and equals/hashcode can help to eliminate duplicate permissions and thus the number of security checks. i have attached a patch for this issue.",
        "label": 5
    },
    {
        "text": "remove empty support groovy project since the support/groovy project is empty it should be removed for the moment and recreated if actually needed.",
        "label": 5
    },
    {
        "text": "initialize shiro using a  listener  in web xml for a webapp, shiro is initialized during web.xml's <filter> initialization. before this, the <listeners> are initialized and that is the recommended place for app initialization because, for one thing, they can be gracefully aborted. it would be nice if shiro would support initialization in a listener's contextinitialized() method. perhaps a new class like shiroservletcontextlistener could be added. please see the following discussion: http://shiro-user.582556.n2.nabble.com/webapp-initialization-happens-before-shiro-initialization-td6345903.html",
        "label": 5
    },
    {
        "text": "infinite loop   defaultwebsecuritymanager  jsecurityhttpservletrequest  non http sessions infinite loop when using defaultwebsecuritymanager and non-http sessions. createsubject():204, defaultwebsecuritymanager calls createsubject():208, defaultwebsecuritymanager calls getsession():71, servletcontainersessionmanager calls getsession():149, jsecurityhttpservletrequest calls getsubject():90, jsecurityhttpservletrequest calls getsubject():53, securityutils calls getsubject():426, defaultsecuritymanager calls, getsubject():419, defaultsecuritymanager calls, createsubject():204, defaultwebsecuritymanager then loops again...",
        "label": 5
    },
    {
        "text": "session less suject factory   support for web services security  this use case is connected to ws security. i would like to use shiro in session less mode . the reason for that is that each ws request will be issued with own security ctx (principals and credential),which are part of soap header and therefor no session management is needed/wanted at all. what is needed is a filter that will do the subject unbinding from threadlocal as complement to passwordvalidationcallback.passwordvalidator where the actual binding can be done. but what i'm missing is the session less factory for subject creation.",
        "label": 5
    },
    {
        "text": "wron simplecookie expires locale simplecookie.tocookiedate method to format cookie uses default locale. my default locale ru_ru. when browser receive cookie with expires formatted in non en_us locale, browser set cookie expires=session. resolutiojon of this trouble is: private static string tocookiedate(date date) { timezone tz = timezone.gettimezone(gmt_time_zone_id); dateformat fmt = new simpledateformat(cookie_date_format_string, locale.us); fmt.settimezone(tz); return fmt.format(date); }",
        "label": 4
    },
    {
        "text": "problems building shiro on openjdk on current debian stable   stretch  shiro master head currently doesn't build on openjdk-8. the \"mvn clean install\" command fails with the following error message: [error] failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project shiro-crypto-core: execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test failed: the forked vm terminated without properly saying goodbye. vm crash or system.exit called? [error] command was /bin/sh -c cd /home/sb/workspaces/shiro/shiro/crypto/core && /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java -javaagent:/home/sb/.m2/repository/org/jacoco/org.jacoco.agent/0.7.7.201606060606/org.jacoco.agent-0.7.7.201606060606-runtime.jar=destfile=/home/sb/workspaces/shiro/shiro/crypto/core/target/jacoco.exec -jar /home/sb/workspaces/shiro/shiro/crypto/core/target/surefire/surefirebooter5674279985738901440.jar /home/sb/workspaces/shiro/shiro/crypto/core/target/surefire/surefire1414141480594227705tmp /home/sb/workspaces/shiro/shiro/crypto/core/target/surefire/surefire_02190721174349612856tmp this is a known openjdk-8 issue https://stackoverflow.com/a/53016532 and is fixed in 8u191 but will fail on the current debian stable wich has 8u181.",
        "label": 2
    },
    {
        "text": "set up autoexport of shiro documentation to the appropriate location in order to post documentation on the shiro site, the documentation has to be exported onto some online space where the main site can link to it. further, it needs to be set up such that the documentation is auto-exported with every build so that the shiro site is automatically kept up to date. here is the email thread from the dev list that covers the issue in more detail: on wed, sep 9, 2009 at 4:43 pm, les hazlewood <les@hazlewood.com> wrote: there we go - the 'incubator www site' is what i'm missing. it looks like this is what we need to know: http://www.apache.org/dev/project-site.html on wed, sep 9, 2009 at 1:26 pm, kalle korhonen <kalle.o.korhonen@gmail.com> wrote: > just a few examples of maven-generated apache project sites (many of > them are maven-powered): > http://commons.apache.org/lang/ > http://logging.apache.org/log4j/ > http://tapestry.apache.org/tapestry5/ > http://incubator.apache.org/chemistry/ > > note the last one is an incubator project. i suppose you just need a > directory on the incubator www site to publish the contents to. > > kalle > > > on wed, sep 9, 2009 at 10:15 am, les hazlewood<lhazlewood@apache.org> wrote: >> +1 >> >> mentors, how would we go about this process? >> >> i'm not familiar with where the generated site would be uploaded. >> i'm assuming after it is uploaded (by the build), that our wiki would >> just link to that location? >> >> thanks, >> >> les >> >> on tue, sep 8, 2009 at 6:56 pm, kalle korhonen >> <kalle.o.korhonen@gmail.com> wrote: >>> i've always maintained that the best option is to combine aspects of >>> both a static (maven) site and a wiki. actually i managed to do >>> exactly that for trails project, seamlessly mixing maven site and >>> confluence content with the help of codehaus' clever site layout >>> renderer and a heavily customized maven site skin. basically codehaus' >>> site renderer pulls content snippets out of confluence and puts them >>> together as one page (sort of a smart server-side include). however, >>> shiro's not a codehaus project and maven 3 is not here yet. in the >>> meantime, i agree that confluence space is probably easier to use as >>> the main site, but nevertheless we need a maven site destination to >>> publish the javadocs and the rest of useful generated content (data >>> pulled from pom, quality reports, etc.) and that we can do in the >>> short term. agree? >>> >>> kalle >>> >>> >>> 2009/9/8 tam\u00e1s cserven\u00e1k <tamas@cservenak.net>: >>>> yup, >>>> especially if you consider the upcoming maven3, and how it will >>>> redefine the site plugin... the site plugin as is now \u2013 in maven >>>> 2.x line \u2013 was generally a mistake. it is too coupled to core (or >>>> core is coupled to site plugin because of reporting, depends on how >>>> you look at it), and did not left place for any alternative >>>> reporting engine. this is what will change in >>>> maven3 regarding to this plugin. >>>> >>>> t >>>> >>>> on tue, sep 8, 2009 at 5:57 am, craig l russell <craig.russell@sun.com>wrote: >>>> >>>>> hi, >>>>> >>>>> i am inclined to agree with tamas. >>>>> >>>>> from my experience, maven is great for getting something going >>>>> pretty quickly but i haven't seen it to be flexible enough to run the entire site. >>>>> confluence is both easy to use and powerful and allows for some >>>>> pretty nice customizations of the look and feel of the site. >>>>> >>>>> craig >>>>> >>>>> >>>>> on sep 7, 2009, at 12:14 pm, tam\u00e1s cserven\u00e1k wrote: >>>>> >>>>> hi, >>>>>> >>>>>> i would not recommend using (and tying to) maven-site-plugin.... >>>>>> you have plenty of better alternatives: >>>>>> http://xsite.codehaus.org/ or confluence (either publishing it >>>>>> directly or for authoring only, and exporting + post-processing pages), etc. >>>>>> maven site plugin is generally good to have reports (javadoc, >>>>>> coverage, >>>>>> etc) >>>>>> generated, but using it for main site is something i would not recommend. >>>>>> >>>>>> thanks, >>>>>> t >>>>>> >>>>>> >>>>>> on mon, sep 7, 2009 at 6:05 pm, salazar, alexander < >>>>>> salazar_alex@gsb.stanford.edu> wrote: >>>>>> >>>>>> i'd like to get an opinion on this maven site how you'd like to >>>>>> move >>>>>>> forward so that i can starting working on the shiro site and web >>>>>>> documentation. >>>>>>> >>>>>>> since i'm new to maven, i took sometime this weekend to play >>>>>>> with it and its site plugin. not sure if this project ever used >>>>>>> it before but its impressive how easy it makes building documentation into a site. >>>>>>> >>>>>>> though i'm still not sure of the pros and cons for a wiki >>>>>>> primary site, i built out a basic maven-based primary site for >>>>>>> shiro and submit to you these pros/cons. >>>>>>> >>>>>>> pros >>>>>>> 1. build many of the pages needed directly from your pom 2. easy >>>>>>> to keep documentation linked and synced 3. all the content would >>>>>>> be in your src directory under site-- it would all be in one >>>>>>> place 4. templates/skins are easy to build (kinda) and easy to >>>>>>> apply throughout the site 5. easy to layout like other apache >>>>>>> projects which will lend easy-of-navigation and more credibility >>>>>>> to the site. >>>>>>> >>>>>>> cons >>>>>>> 1. unique formatting sytanx for pages and skins (apt, fml, >>>>>>> velocity, etc) 2. not as malleable as html and css 3. not as >>>>>>> easy to edit content as a wiki 4. to see any change to the site, >>>>>>> the whole thing needs to be rebuilt-- >>>>>>> or >>>>>>> so it seems. >>>>>>> >>>>>>> attached's a screenshot of the basic site using the basic skin. >>>>>>> >>>>>>> -alex >>>>>>> >>>>>>> ----original message---- >>>>>>> from: salazar, alexander salazar_alex@gsb.stanford.edu >>>>>>> sent: friday, september 04, 2009 2:10 pm >>>>>>> to: shiro-dev@incubator.apache.org >>>>>>> subject: re: shiro api documentation >>>>>>> >>>>>>> i'd be happy to help with the site but i'm not clear on the >>>>>>> value of a maven site compared to the wiki as the main site. >>>>>>> >>>>>>> ----original message---- >>>>>>> from: les.hazlewood@anjinllc.com >>>>>>> les.hazlewood@anjinllc.com on behalf of les hazlewood >>>>>>> sent: friday, september 04, 2009 11:59 am >>>>>>> to: shiro-dev@incubator.apache.org >>>>>>> subject: re: shiro api documentation >>>>>>> >>>>>>> i personally like the idea of using the wiki as our primary >>>>>>> content mechanism, but i would like it to look better. i >>>>>>> understand that's not difficult to do - we'd just need to apply >>>>>>> a site template. alex, is this something you'd be interested in helping with? >>>>>>> >>>>>>> but let's say that we have the wiki exporting properly - what is >>>>>>> the best way to reference build artifacts and static resources >>>>>>> from within the wiki (like the javadocs)? would we just export >>>>>>> the site wherever we want and then link to it from within the >>>>>>> wiki? where would the physical files reside? >>>>>>> >>>>>>> - les >>>>>>> >>>>>>> on fri, sep 4, 2009 at 1:59 pm, craig l russell >>>>>>> <craig.russell@sun.com> >>>>>>> wrote: >>>>>>> >>>>>>>> >>>>>>>> on sep 4, 2009, at 7:26 am, les hazlewood wrote: >>>>>>>> >>>>>>>> sure, i think that's a good idea. >>>>>>>>> >>>>>>>>> mentors - where can this site be hosted and how do we automate >>>>>>>>> the push to that location? >>>>>>>>> >>>>>>>> >>>>>>>> the project needs to decide whether to publish the >>>>>>>> maven-generated site >>>>>>>> >>>>>>> as >>>>>>> >>>>>>>> \"the shiro site\", or whether to use the confluence wiki as the >>>>>>>> official site. >>>>>>>> >>>>>>>> the place to publish the result is >>>>>>>> http://incubator.apache.org/shiro >>>>>>>> >>>>>>>> look at http://incubator.apache.org/ki/ for what is currently >>>>>>>> being >>>>>>>> >>>>>>> done. >>>>>>> >>>>>>>> >>>>>>>> once the project decides on the strategy for generating >>>>>>>> content, infrastructure can help with the mechanical details of >>>>>>>> automatically generating and pushing the site live. >>>>>>>> >>>>>>>> craig >>>>>>>> >>>>>>>>> >>>>>>>>> thanks, >>>>>>>>> >>>>>>>>> les >>>>>>>>> >>>>>>>>> on fri, sep 4, 2009 at 10:17 am, kalle korhonen >>>>>>>>> <kalle.o.korhonen@gmail.com> wrote: >>>>>>>>> >>>>>>>>>> >>>>>>>>>> on fri, sep 4, 2009 at 12:23 am, salazar, >>>>>>>>>> alexander<salazar_alex@gsb.stanford.edu> wrote: >>>>>>>>>> >>>>>>>>>>> >>>>>>>>>>> even though a 1.0 has not yet been released, i think it >>>>>>>>>>> would be >>>>>>>>>>> >>>>>>>>>> helpful >>>>>>> >>>>>>>> to get to-date shiro api documentation online and available. >>>>>>>>>>> according to les, \"maven auto-generates not just the api >>>>>>>>>>> >>>>>>>>>> documentation, >>>>>>> >>>>>>>> but an entire site. however, we've only been using the wiki thus far. >>>>>>>>>>> >>>>>>>>>> we >>>>>>> >>>>>>>> would have to get the auto-export of this generated >>>>>>>> documentation set >>>>>>>>>>> >>>>>>>>>> up >>>>>>> >>>>>>>> based on the automated build process.\" >>>>>>>>>>> >>>>>>>>>>> what would be the best way to go about this? do you agree >>>>>>>>>>> that it >>>>>>>>>>> >>>>>>>>>> would >>>>>>> >>>>>>>> be valuable prior to the 1.0 release? >>>>>>>>>>> >>>>>>>>>> >>>>>>>>>> the best way would be to publish the maven site (it includes >>>>>>>>>> the javadocs by default). i already had a thread on this >>>>>>>>>> topic, see \"plans to publish javadocs & maven site >>>>>>>>>> continuously/nightly?\". the question les had whether there >>>>>>>>>> were any guidelines regarding publishing the documentation >>>>>>>>>> while a project is still in incubator but no responses >>>>>>>>>> (though i know at least cxf was publishing all docs while in >>>>>>>>>> incubator so i don't think it's an issue). once we know >>>>>>>>>> where we could publish the site, we could set up a hudson job and then incrementally improve the contents. >>>>>>>>>> >>>>>>>>>> kalle >>>>>>>>>> >>>>>>>>>> >>>>>>>> craig l russell >>>>>>>> architect, sun java enterprise system http://db.apache.org/jdo >>>>>>>> 408 276-5638 craig.russell@sun.com p.s. a good jdo? o, >>>>>>>> gasp! >>>>>>>> >>>>>>>> >>>>>>>> >>>>>>> >>>>> craig l russell >>>>> architect, sun java enterprise system http://db.apache.org/jdo >>>>> 408 276-5638 craig.russell@sun.com p.s. a good jdo? o, >>>>> gasp! >>>>> >>>>> >>>> >>> >> >",
        "label": 4
    },
    {
        "text": "servletcontainersessionmanager does not honor web xml's session timeout value instead of just calling request.getsession(), the implementation looks at the parent class's 'globalsessiontimeout' value and explicitly sets the session timeout to be that value. however, when the servletcontainersessionmanager is configured, it is expected to defer to the servlet container for all session-related configuration. the current implementation should not be overriding the session timeout value.",
        "label": 5
    },
    {
        "text": "no securitymanager accessible to the calling code the security context is not bound to the thread context. the application uses an ajax periodical updater to often refresh some zones. but the user is enabled to interact with the application, so it happens, that two simultaneous requests arrives at the application server. this often produces error 2010-05-15 23:33:08,030 (securitymodule.java:253) - error handling securityexception org.apache.shiro.unavailablesecuritymanagerexception: no securitymanager accessible to the calling code, either bound to the org.apache.shiro.util.threadcontext or as a vm static singleton. this is an invalid application configuration. at org.apache.shiro.securityutils.getsecuritymanager(securityutils.java:124) at org.apache.shiro.subject.subject$builder.<init>(subject.java:616) at org.apache.shiro.securityutils.getsubject(securityutils.java:57) at org.tynamo.security.services.impl.securityserviceimpl.getsubject(securityserviceimpl.java:37) at org.tynamo.security.services.impl.securityserviceimpl.isauthenticated(securityserviceimpl.java:42) at $securityservice_1289de25571.isauthenticated($securityservice_1289de25571.java) at org.tynamo.security.shiroexceptionhandler.handle(shiroexceptionhandler.java:74) at org.tynamo.security.services.securitymodule$3.advise(securitymodule.java:250)",
        "label": 4
    },
    {
        "text": "fix  ki  in the apache incubator status page 1. http://incubator.apache.org/projects/shiro.html still refers to ki and has all ki-based links and info 2. http://incubator.apache.org/ki still works and goes to the ki wiki 3. http://incubator.apache.org/shiro does not work here is an email from les with the latest on the topic ----original message---- from: les.hazlewood@anjinllc.com les.hazlewood@anjinllc.com on behalf of les hazlewood sent: monday, september 14, 2009 11:36 am to: shiro-dev@incubator.apache.org subject: incubator shiro status html page http://incubator.apache.org/projects/shiro.html still has 'ki' references. if i edit this file directly on people.apache.org, is this ok? the status file in svn already reflects the correct names. i just want to ensure that if i change a text file on the people.a.o server that i'm editing the master copy - not some file that might have been pulled from another source. thanks, les",
        "label": 4
    },
    {
        "text": "the request response pair should be available at all times to web related components according to les, for web-initiated interaction, you should not be seeing these messages: debug - defaultwebsessionmanager - no request or response bound to the thread. session id cookie cannot be removed. this could occur in a web application that also services non web clients (e.g. rmi remoting). debug - defaultwebsessionmanager - request or response object is not bound to the thread. assuming this session start activity is due to a non web request (possible in a web application that also services non web clients. full thread available here, with logs: http://shiro-user.582556.n2.nabble.com/intermittent-problems-with-securityutils-getsubject-getprincipal-td5067869.html#a5068081",
        "label": 5
    },
    {
        "text": "update shiro guice dependency guice-integration depends on guava r09 - lastest version is 16.+ pls update. as a workaround in gradle i'm using: compile('org.apache.shiro:shiro-guice:' + '1.2.+') { // old version (r09) exclude module: 'guava' } compile group: 'com.google.guava', name: 'guava', version: '16.+'",
        "label": 4
    },
    {
        "text": "defaultsecuritymanager 'globalsessiontimeout' property a 'globalsessiontimeout' property should be accessible on the defaultsecuritymanager implementation so that its setting could propagate down to the defaultsessionmanager implementation. this is a convenience feature so the end-user doesn't have to configure a sessionmanager implementation and then inject it into the securitymanager implementation. instead, they can set a single property: sessionmanager.globalsessiontimeout = blah",
        "label": 5
    },
    {
        "text": "delegatingsubject class cannot be serialized  i am attempting to send a instance of delegatingsubject over a jms topic via serialization, however when i send the object through jms i get this exception java.lang.runtimeexception: org.apache.shiro.subject.support.delegatingsubject$stoppingawareproxiedsession at org.apache.activemq.command.activemqobjectmessage.storecontent(activemqobjectmessage.java:111) ~[activemq-all-5.6-snapshot.jar:5.6-snapshot] at org.apache.activemq.command.activemqobjectmessage.setobject(activemqobjectmessage.java:162) ~[activemq-all-5.6-snapshot.jar:5.6-snapshot] at com.xmlnamespace.panel.server.core.communication.event.eventmanager.dosendmessage(eventmanager.java:233) ~[com.xmlnamespace.panel.server.core/:na] at com.xmlnamespace.panel.server.core.communication.event.eventmanager.sendmessage(eventmanager.java:208) ~[com.xmlnamespace.panel.server.core/:na] at com.xmlnamespace.panel.server.core.communication.mtl.modeldispatcher.add(modeldispatcher.java:122) ~[com.xmlnamespace.panel.server.core/:na] at com.xmlnamespace.panel.server.core.communication.mtl.modeldispatcher.collectionchange(modeldispatcher.java:181) ~[com.xmlnamespace.panel.server.core/:na] at com.xmlnamespace.panel.core.shared.communication.mtl.api.collectionchangesupport.dofirecollectionchange(collectionchangesupport.java:182) ~[shared-objects.jar:na] at com.xmlnamespace.panel.core.shared.communication.mtl.api.collectionchangesupport.firecollectionchange(collectionchangesupport.java:47) ~[shared-objects.jar:na] at com.xmlnamespace.panel.core.shared.user.model.internal.usermodelimpl.adduserlogin(usermodelimpl.java:96) ~[shared-objects.jar:na] at com.xmlnamespace.panel.server.core.login.loginmanager.authenticateconnection(loginmanager.java:1013) ~[com.xmlnamespace.panel.server.core/:na] at com.xmlnamespace.panel.server.core.communication.broker.brokerauthenticationfilter.addconnection(brokerauthenticationfilter.java:69) ~[com.xmlnamespace.panel.server.core/:na] at org.apache.activemq.broker.mutablebrokerfilter.addconnection(mutablebrokerfilter.java:91) [activemq-all-5.6-snapshot.jar:5.6-snapshot] at org.apache.activemq.broker.transportconnection.processaddconnection(transportconnection.java:705) [activemq-all-5.6-snapshot.jar:5.6-snapshot] at org.apache.activemq.broker.jmx.managedtransportconnection.processaddconnection(managedtransportconnection.java:83) [activemq-all-5.6-snapshot.jar:5.6-snapshot] at org.apache.activemq.command.connectioninfo.visit(connectioninfo.java:139) [activemq-all-5.6-snapshot.jar:5.6-snapshot] at org.apache.activemq.broker.transportconnection.service(transportconnection.java:316) [activemq-all-5.6-snapshot.jar:5.6-snapshot] at org.apache.activemq.broker.transportconnection$1.oncommand(transportconnection.java:180) [activemq-all-5.6-snapshot.jar:5.6-snapshot] at org.apache.activemq.transport.transportfilter.oncommand(transportfilter.java:69) [activemq-all-5.6-snapshot.jar:5.6-snapshot] at org.apache.activemq.transport.wireformatnegotiator.oncommand(wireformatnegotiator.java:113) [activemq-all-5.6-snapshot.jar:5.6-snapshot] at org.apache.activemq.transport.inactivitymonitor.oncommand(inactivitymonitor.java:227) [activemq-all-5.6-snapshot.jar:5.6-snapshot] at org.apache.activemq.transport.transportsupport.doconsume(transportsupport.java:83) [activemq-all-5.6-snapshot.jar:5.6-snapshot] at org.apache.activemq.transport.tcp.ssltransport.doconsume(ssltransport.java:91) [activemq-all-5.6-snapshot.jar:5.6-snapshot] at org.apache.activemq.transport.tcp.tcptransport.dorun(tcptransport.java:217) [activemq-all-5.6-snapshot.jar:5.6-snapshot] at org.apache.activemq.transport.tcp.tcptransport.run(tcptransport.java:199) [activemq-all-5.6-snapshot.jar:5.6-snapshot] at java.lang.thread.run(thread.java:662) [na:1.6.0_26] caused by: java.io.notserializableexception: org.apache.shiro.subject.support.delegatingsubject$stoppingawareproxiedsession at java.io.objectoutputstream.writeobject0(objectoutputstream.java:1164) ~[na:1.6.0_26] at java.io.objectoutputstream.defaultwritefields(objectoutputstream.java:1518) ~[na:1.6.0_26] at java.io.objectoutputstream.writeserialdata(objectoutputstream.java:1483) ~[na:1.6.0_26] at java.io.objectoutputstream.writeordinaryobject(objectoutputstream.java:1400) ~[na:1.6.0_26] at java.io.objectoutputstream.writeobject0(objectoutputstream.java:1158) ~[na:1.6.0_26] at java.io.objectoutputstream.defaultwritefields(objectoutputstream.java:1518) ~[na:1.6.0_26] at java.io.objectoutputstream.writeserialdata(objectoutputstream.java:1483) ~[na:1.6.0_26] at java.io.objectoutputstream.writeordinaryobject(objectoutputstream.java:1400) ~[na:1.6.0_26] at java.io.objectoutputstream.writeobject0(objectoutputstream.java:1158) ~[na:1.6.0_26] at java.io.objectoutputstream.writeobject(objectoutputstream.java:330) ~[na:1.6.0_26] at org.apache.activemq.command.activemqobjectmessage.storecontent(activemqobjectmessage.java:105) ~[activemq-all-5.6-snapshot.jar:5.6-snapshot] ... 24 common frames omitted i assume that delegatingsubject is meant to be serialized since it does implement serializable. i noticed that the class inner class stoppingawareproxiedsession is the culprit. would the issue be resolved by simply making the session interface, proxiedsession class, and stoppingawareproxiedsession serializable?",
        "label": 5
    },
    {
        "text": "fix simpleaccountrealm to not rely on caching the current implementation relies on caching being enabled. this should be fixed to work w/out caching being enabled.",
        "label": 5
    },
    {
        "text": "remove the default realm default realms are dangerous. the user should have to specify something, even if we make it extremely easy. (e.g. setting a single property to enable the default realm)",
        "label": 5
    },
    {
        "text": "specifying my own cache in shirofilter not working when i specify my own cachemanager and cache object in my shirofilter, the default cache manager is being used anyway. see thread \"need help pluggin in my own session cache\" in august and september 2009 archives of the shiro mailing list for details. this is another order-of-operations issue.",
        "label": 5
    },
    {
        "text": "threadlocal is not cleared upon the unloading of the webapp and the shiro servlet tomcat 6.0.26 reports a severe error when unloading a web app that uses org.apache.shiro.web.servlet.inishirofilter severe: a web application created a threadlocal with key of type [null] (value [org.apache.shiro.util.threadcontext$1@c0c66a]) and a value of type [java.util.hashmap] (value [{}]) but failed to remove it when the web application was stopped. to prevent a memory leak, the threadlocal has been forcibly removed. may 13, 2010 9:29:51 pm org.apache.catalina.loader.webappclassloader clearthreadlocalmap",
        "label": 5
    },
    {
        "text": "logout filter shiro should come bundled with the ability to perform a proper logout and redirect if a certain url pattern is hit.",
        "label": 5
    },
    {
        "text": "subjectawareexecutorservice in shiro core does not compile the method invokeany in subjectawareexecutorservice has wrong type. subjectawareexecutorservice implements executorservice interface. executorservice: <t> t invokeany(collection<callable<t>> tasks) subjectawareexecutorservice: public <t> t invokeany(collection<? extends callable<t>> tasks) throws interruptedexception, executionexception { reason: it is not possible to override collection<callable<t>> tasks with collection<? extends callable<t>> tasks. such override would not be typesafe.",
        "label": 4
    },
    {
        "text": "change instance variables from private to protected currently most instance variables are private, which limits options when the classes are extended. we are standardizing on protected from now on, but the existing classes should be updated.",
        "label": 5
    },
    {
        "text": "jetty throws an illegalstateexception after redirect in authorizationfilter jetty throws an illegalstateexception because if onaccessdenied you send an http error code and after that you redirect to \"unauthorized url\". it is not allowed to write twice to the response buffer.",
        "label": 5
    },
    {
        "text": "add more information about how to setup jsecurityfilter in javadoc from post on jsecurity mailing list: please note that the javadoc for jsecurityfilter was not helpful [when trying to figure out how to configure the jsecurityfilter in web.xml]. no where in that javadoc does it mention specifying the realm that should be created and that will then be injected into securitymanager. from les hazlewood in response - \"please enter a jira issue for this for us to clear up the filter documentation. that javadoc has evolved over time and you're absolutely right - it has not been updated properly to explain the 'poor man's dependency injection' that it is capable of. come hell or high water, i will absolutely work on that this weekend - i definitely recognize that it needs to be much clearer than what the existing javadoc provides.\"",
        "label": 5
    },
    {
        "text": "realmfactory not working properly im trying to use a realmfactory to register a realm. the config is quite simple: [main] realmfactory = se.example.init.myrealmfactory authc.loginurl = / after debugging the problem i stumbled upon the following lines in org.apache.shiro.config.inisecuritymanagerfactory (line 173 in version 1.1.0) private void addtorealms(collection<realm> realms, realmfactory factory) { lifecycleutils.init(factory); collection<realm> factoryrealms = factory.getrealms(); if (!collectionutils.isempty(realms)) { realms.addall(factoryrealms); } } changing if (!collectionutils.isempty(realms)) { to if (!collectionutils.isempty(factoryrealms)) { solves the problem.",
        "label": 5
    },
    {
        "text": "session timeout   unconditional the simplesession class is expiring sessions unconditionally after the default timeout of 30 minutes, regardless of any reads or writes to the session. this issue is caused by the lastaccesstime field of the simplesession class not being updated when a session attribute is read or written. since session expiration is dependent on the lastaccesstime value, this field needs to be updated each time a session attribute is read or written to the session. the fix for this issue would be to call the touch() method of the simplesession class each time an attribute is read or written to the session. since the touch() method updates the lastaccesstime field with the current time, this call is sufficient to perform the update that is required.",
        "label": 0
    }
]