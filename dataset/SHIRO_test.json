[
    {
        "text": "shiro cas feature should not depend on shiro cas in the features.xml it contains this block <feature name=\"shiro-cas\" version=\"1.2.0\" resolver=\"(obr)\"> <feature version=\"1.2.0\">shiro-cas</feature> <!-- is there a cas client osgi bundle somewhere? <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.aspectj/${casclient.bundle.version}</bundle> --> <bundle>mvn:org.apache.shiro/shiro-cas/1.2.0</bundle> </feature> it indicates that shiro-cas depends on shiro-cas, installing this feature on karaf will yield a stackoverflow error.",
        "label": 3
    },
    {
        "text": "remove org apache shiro mgt subjectbinder and its usages this was introduced in 1.0 development and can be easily removed before 1.0 final - it is not referenced in the public-facing api and is used for implementation support only. this needs to be done as the securitymanager will no longer need to maintain thread state (making it 100% stateless) since subject.builder or its end-users would be responsible for that.",
        "label": 4
    },
    {
        "text": "hostauthenticationtoken does not extend authenticationtoken the hostauthenticationtoken interface by name has a strong relationship with authenticationtoken. however, it does not extend that interface. by contrast, remembermeauthenticationtoken does extend authenticationtoken. this seems like an oversight in this interface's definition. note: i realize this is very trivial; i'm just opening this issue to track that this may need to be changed.",
        "label": 5
    },
    {
        "text": "defaultsecuritymanager setsessionmanager can get out of sync with defaultsecuritymanager setsessionmode so, i've run into a bit of a pickle with defaultwebsecuritymanager and native vs http sessions. the defaultwebsecuritymanager exposes two methods, ostensibly for the purposes of determining how sessions are managed: setsessionmanager(sessionmanager) and setsessionmode(string) however, it would appear that if i call: setsessionmanager(new mycustomsessionmanager()) and then setsessionmode(\"native\") the sessionmanager is overridden. this is a bit of a gotcha, but can be easily avoided by not calling setsessionmode. (calling them in the reverse order seems contrary to the nature of setters) the problem with not calling setsessionmode is that it appears to actually matter - if i leave it to it's default (http), but set a defaultwebsessionmanager, then things break horribly (apparently due to the use of ishttpsessionmode by abstractshirofilter for redirect rewriting). sessions get forgotten, etc. this also seems contrary to the nature of setters.",
        "label": 5
    },
    {
        "text": "shirofilter does not work with proxied security manager the shirofilter.ishttpsessions() method does an instanceof check on the security manager, checking whether it's an instance of defaultwebsecuritymanager. this doesn't work when the security manager is a jdk proxy to a defaultwebsecuritymanager because the proxy implements the securitymanager interface, which doesn't have the ishttpsessions() method. perhaps we should have a websecuritymanager interface with the ishttpsessions() method defined on it?",
        "label": 6
    },
    {
        "text": "fix links to issue tracker the links for the shiro issue tracker are not working on the http://shiro.apache.org/how-to-contribute.html page. they are currently pointing to: https://cwiki.apache.org/confluence/pages/createpage.action?spacekey=shiro&title=issue%20tracker&linkcreation=true&frompageid=5964195 but they should instead point to: https://issues.apache.org/jira/browse/shiro",
        "label": 4
    },
    {
        "text": "default sessionmanager in web environment for guice support differs from the otherwise  using ini setup, or simple construction, the default session manager for a web environment uses servlet container sessions. it appears that i overlooked this when adding the guice integration and made the default for a guice web environment native sessions. nothing inherently wrong with this other than the glaring inconsistency that i would expect to trip folks up. i am attaching a patch for this to this ticket.",
        "label": 3
    },
    {
        "text": "defaulthasher does not generate random salt extract from defaulthasher javadoc: when a salt is not specified in a request, this implementation generates secure random salts via its {@link #setrandomnumbergenerator(org.apache.shiro.crypto.randomnumbergenerator) randomnumbergenerator} property. random salt is generated, but never assigned (line 155): if (publicsaltbytes == null) { getrandomnumbergenerator().nextbytes().getbytes(); }",
        "label": 4
    },
    {
        "text": "integrating jsecurity with guice /* licensed to the apache software foundation (asf) under one or more contributor license agreements. see the notice file distributed with this work for additional information regarding copyright ownership. the asf licenses this file to you under the apache license, version 2.0 (the \"license\"); you may not use this file except in compliance with the license. you may obtain a copy of the license at * http://www.apache.org/licenses/license-2.0 * unless required by applicable law or agreed to in writing, software distributed under the license is distributed on an \"as is\" basis, without warranties or conditions of any kind, either express or implied. see the license for the specific language governing permissions and limitations under the license. */ package com.akube.framework.jsecurity.filter; import com.google.inject.injector; import org.apache.commons.logging.log; import org.apache.commons.logging.logfactory; import org.jsecurity.jsecurityexception; import org.jsecurity.securityutils; import org.jsecurity.mgt.securitymanager; import org.jsecurity.web.config.iniwebconfiguration; import java.lang.reflect.invocationtargetexception; import java.lang.reflect.method; import java.util.map; /** <p>jsecurity configuration that relies on guice to define and initialize the jsecurity securitymanager instance (and all of its dependencies) and makes it avaialble to this filter by performing a guice injection. the url/filter behavior is still loaded according to the behavior of the parent class {@link org.jsecurity.web.config.iniwebconfiguration} <p/> <p> the web.xml will need an entry like the following <filter> <filter-name>jsecurityfilter</filter-name> <filter-class>org.jsecurity.guice.guicejsecurityfilter</filter-class> <init-param> <param-name>config</param-name> <param-value> </param-value> </init-param> <init-param> <param-name>injectorfactoryclass</param-name> <param-value>app.bootstrap.guice.injectorfactory</param-value> </init-param> <init-param> <param-name>injectorfactorymethod</param-name> <param-value>getinjector</param-value> </init-param> </filter> the injector factory class - > injector factory method is called to obtain a guice injector </p> * @author animesh jain @see iniwebconfiguration @since 0.9 */ public class guicewebconfiguration extends iniwebconfiguration { public static final string injector_factory_class = \"injectorfactoryclass\"; public static final string injector_factory_method = \"injectorfactorymethod\"; private static final log log = logfactory.getlog(guicewebconfiguration.class); protected injector injector; public injector getinjector() { return injector; } public void setinjector(injector injector) { this.injector = injector; } public guicewebconfiguration() { } @override public void init() throws jsecurityexception { string classname = getfilterconfig().getinitparameter(injector_factory_class); string methodname = getfilterconfig().getinitparameter(injector_factory_method); system.out.println(\"*************** guicewebconfiguration init() ***************\"); system.out.println(\"injector class = \"+classname); system.out.println(\"injector method = \"+methodname); /* get injector from a class which holds an instance for this application. i had a static method in a class that returns the injector. i've put the class name and method name in filter init params. */ try { class clazz = class.forname(classname); method method = clazz.getmethod(methodname); injector injector = (injector) method.invoke(null); system.out.println(\"injector instantiated = \"+injector); setinjector(injector); } catch (classnotfoundexception e) { log.error(\"injector factory class not found - \"+classname, e); throw new jsecurityexception(\"injector factory class not found - \"+classname, e); } catch (nosuchmethodexception e) { log.error(\"injector factory method not found - \"+methodname+\" in class \"+classname, e); throw new jsecurityexception(\"injector factory method not found - \"+methodname+\" in class \"+classname, e); } catch (invocationtargetexception e) { log.error(\"invocationtargetexception when trying to invoke - \"+methodname+\" in class \"+classname, e); throw new jsecurityexception(\"invocationtargetexception when trying to invoke - \"+methodname+\" in class \"+classname, e); } catch (illegalaccessexception e) { log.error(\"illegalaccessexception when trying to invoke - \"+methodname+\" in class \"+classname, e); throw new jsecurityexception(\"illegalaccessexception when trying to invoke - \"+methodname+\" in class \"+classname, e); } super.init(); } @override protected securitymanager createdefaultsecuritymanager() { return createsecuritymanager(null); } @override protected securitymanager createsecuritymanager(map<string, map<string, string>> sections) { return getorcreatesecuritymanager(injector, sections); } protected securitymanager getorcreatesecuritymanager(injector injector, map<string, map<string, string>> sections) { system.out.println(\"trying to create security manager\"); securitymanager securitymanager = null; if (injector != null) { /* the security manager is obtained using the guice injector. typically one will have to use a custom provider and bind it to the defaultwebsecuritymanager class this is the way guice handles external configuration */ securitymanager = injector.getinstance(defaultwebsecuritymanagerprovider.class).get(); securityutils.setsecuritymanager(securitymanager); } else { throw new jsecurityexception(\"injector is null. cannot instantiate security manager\"); } return securitymanager; } } ---------------------------------------------------------------------------------------------------------------------------- the filter class can be - /** <p>extension of jsecurityfilter that uses {@link guicewebconfiguration} to configure the jsecurity instance.</p> * @author animesh jain */ public class guicejsecurityfilter extends jsecurityfilter { public guicejsecurityfilter() { this.configclassname = guicewebconfiguration.class.getname(); } } ---------------------------------------------------------------------------------------------------------------------------- the guice module can be public class jsecuritymodule extends abstractmodule { protected void configure() { // the defaultwebsecuritymanagerprovider class provides a custom configured securitymanager if needed bind(defaultwebsecuritymanagerprovider.class).aseagersingleton(); bindinterceptor(any(), annotatedwith(requiresroles.class), new aopallianceannotationsauthorizingmethodinterceptor()); } } ---------------------------------------------------------------------------------------------------------------------------- in my own project i've somewhat tried to abstract out a few classes to make things easily configurable with guice + jsecurity + hibernate + stripes.. so i can share that project scaffold if needed.",
        "label": 4
    },
    {
        "text": "automatically shut down the session validation thread shiro automatically starts a background thread for session validation. this thread never shuts down without invoking destroy. if shiro starts threads automatically, it should probably stop them automatically. forum thread: http://n2.nabble.com/shutting-down-shiro-tp4471207p4471207.html",
        "label": 4
    },
    {
        "text": "shiro core has an undesirable runtime osgi dependency to spring beans the manifest.mf of the shiro-core jar has a runtime dependency on org.apache.commons.configuration2.interpol, the org.apache.commons.configuration2.interpol package is provided by         <dependency>             <groupid>org.apache.commons</groupid>             <artifactid>commons-configuration2</artifactid>             <version>2.1</version>             <scope>compile</scope>         </dependency> and this bundle (it is a bundle with an osgi manifest.mf) has springframework package requirements in the import-package header: org.springframework.beans.factory, org.springframework.core.env, org.springframework.core.io, org.springframework.util it should be possible to fix this by bumping the config-configurations2 dependency to to 2.2, for in that version of the bundle, the springframework packages are made optional (and the runtime requirement goes away).",
        "label": 2
    },
    {
        "text": "unable to correctly extract the initialization vector or ciphertext i obtain following exception while entering the secure page: [java] 101637 [http-8080-1] warn org.apache.shiro.mgt.defaultsecuritymanager - delegate remembermemanager instance of type [org.apache.shiro.web.mgt.cookieremembermemanager] threw an exception during getrememberedprincipals(). [java] org.apache.shiro.crypto.cryptoexception: unable to correctly extract the initialization vector or ciphertext. [java] at org.apache.shiro.crypto.jcacipherservice.decrypt(jcacipherservice.java:381) [java] at org.apache.shiro.mgt.abstractremembermemanager.decrypt(abstractremembermemanager.java:491) [java] at org.apache.shiro.mgt.abstractremembermemanager.convertbytestoprincipals(abstractremembermemanager.java:431) [java] at org.apache.shiro.mgt.abstractremembermemanager.getrememberedprincipals(abstractremembermemanager.java:398) [java] at org.apache.shiro.mgt.defaultsecuritymanager.getrememberedidentity(defaultsecuritymanager.java:567) [java] at org.apache.shiro.mgt.defaultsecuritymanager.resolveprincipals(defaultsecuritymanager.java:434) [java] at org.apache.shiro.mgt.defaultsecuritymanager.createsubject(defaultsecuritymanager.java:335) [java] at org.apache.shiro.subject.subject$builder.buildsubject(subject.java:819) [java] at org.apache.shiro.web.subject.websubject$builder.buildwebsubject(websubject.java:149) [java] at org.apache.shiro.web.servlet.abstractshirofilter.createsubject(abstractshirofilter.java:202) [java] at org.apache.shiro.web.servlet.abstractshirofilter.dofilterinternal(abstractshirofilter.java:269) [java] at org.apache.shiro.web.servlet.onceperrequestfilter.dofilter(onceperrequestfilter.java:83) [java] at org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:235) [java] at org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:206) [java] at org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:233) [java] at org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:191) [java] at org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:127) [java] at org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:102) [java] at org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:109) [java] at org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:298) [java] at org.apache.coyote.http11.http11processor.process(http11processor.java:852) [java] at org.apache.coyote.http11.http11protocol$http11connectionhandler.process(http11protocol.java:588) [java] at org.apache.tomcat.util.net.jioendpoint$worker.run(jioendpoint.java:489) [java] at java.lang.thread.run(thread.java:619) [java] caused by: java.lang.arrayindexoutofboundsexception [java] at java.lang.system.arraycopy(native method) [java] at org.apache.shiro.crypto.jcacipherservice.decrypt(jcacipherservice.java:373) [java] ... 23 more of course i have set the \"securitymanager.remembermemanager.cipherkey\" in shiro.ini but it did not help. kind regards.",
        "label": 4
    },
    {
        "text": "ignore eclipse folders   files and mvn target folders from svn easier to create patches and commit if eclipse configuration files and folders (for eclipse) and mvn target folders are ignored. the following patch will ignore them in all sub modules, place in trunk.",
        "label": 5
    },
    {
        "text": "remember me cookie path wrong if servlet context path is root   if a web application is installed in the root context of a servlet container, the remember-me cookie defaults to a value of \"\" (because that's what request.getcontextpath() returns). unfortunately, this appears to attach the cookie to the current request's url rather than the required root, \"/\". the offending code is in org.jsecurity.web.attr.cookieattribute where the onstorevalue() method does this: string path = getpath() != null ? getpath() : request.getcontextpath() we should either always append '/' to the context path or set the cookie path to \"/\" if the request context path is an empty string.",
        "label": 5
    },
    {
        "text": "remembermemanager npe when clicking the 'logout' button in wicket-shiro, i see this error: warn - defaultsecuritymanager - delegate remembermemanager instance of type [org.apache.shiro.web.webremembermemanager] threw an exception during getrememberedprincipals(). java.lang.nullpointerexception at org.apache.shiro.web.attr.cookieattribute.getcookie(cookieattribute.java:262) at org.apache.shiro.web.attr.cookieattribute.removevalue(cookieattribute.java:357) at org.apache.shiro.web.webremembermemanager.forgetidentity(webremembermemanager.java:320) at org.apache.shiro.web.webremembermemanager.forgetidentity(webremembermemanager.java:316) at org.apache.shiro.mgt.abstractremembermemanager.onrememberedprincipalfailure(abstractremembermemanager.java:547) at org.apache.shiro.mgt.abstractremembermemanager.getrememberedprincipals(abstractremembermemanager.java:488) at org.apache.shiro.mgt.defaultsecuritymanager.getrememberedidentity(defaultsecuritymanager.java:610) at org.apache.shiro.mgt.defaultsecuritymanager.resolveprincipals(defaultsecuritymanager.java:486) at org.apache.shiro.mgt.defaultsecuritymanager.createsubject(defaultsecuritymanager.java:363) at org.apache.shiro.mgt.defaultsecuritymanager.createsubject(defaultsecuritymanager.java:197) at org.apache.shiro.mgt.defaultsecuritymanager.login(defaultsecuritymanager.java:315) at org.apache.shiro.subject.delegatingsubject.login(delegatingsubject.java:249) at voyager.security.wicket.component.loginpanel.login(loginpanel.java:189) at voyager.security.wicket.component.loginpanel$2.onsubmit(loginpanel.java:83) at org.apache.wicket.markup.html.form.form.delegatesubmit(form.java:1538) at org.apache.wicket.markup.html.form.form.process(form.java:934) at org.apache.wicket.markup.html.form.form.onformsubmitted(form.java:896) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(unknown source) at sun.reflect.delegatingmethodaccessorimpl.invoke(unknown source) at java.lang.reflect.method.invoke(unknown source)",
        "label": 5
    },
    {
        "text": "aliases in the ini configuration builder do not work correctly aliases in the ini configuration builder do not work correctly. when one gets updated the aliases do not. this can cause problems if one is explicitly creating a security manager and it gets overwritten by the default created and added w/ the \"alias\" sm. in this case the default replaces the explicitly created security manager.",
        "label": 0
    },
    {
        "text": "guice integration causes a warning from guice servlet we see this: aug 5, 2011 12:28:49 pm com.google.inject.servlet.internalservletmodule$backwardscompatibleservletcontextprovider get warning: you are attempting to use a deprecated api (specifically, attempting to @inject servletcontext inside an eagerly created singleton. while we allow this for backwards compatibility, be warned that this may have unexpected behavior if you have more than one injector (with servletmodule) running in the same jvm. please consult the guice documentation at http://code.google.com/p/google-guice/wiki/servlets for more information.",
        "label": 3
    },
    {
        "text": "missing svn properties many files in svn don't have the correct properties. see patch script to follow (derived from http://svn.apache.org/repos/asf/incubator/shiro/tags/shiro-root-1.0.0-incubating/)",
        "label": 0
    },
    {
        "text": "update javadoc for return type of securityutils getsubject  from javadoc for securityutils.getsubject() it is not clear what returns this method if nobody is logged in. does it return null? or some default subject? from subject class documentation (getprincipal method) i would expect that securityutils.getsubject() returns some default subject, but simple tests shows that it is not true - it returns null. so i would change it like this: @return the currently accessible <tt>subject</tt> accessible to the calling code or null if .... (actually when?)",
        "label": 5
    },
    {
        "text": "update shiro's project description in jira the current description still references incubator.shiro.org and should instead reference shiro.apache.org i propose we update the description to remove the mention of jsecurity since shiro is now tpl and much bigger on its own.",
        "label": 5
    },
    {
        "text": "add authentication caching to authenticatingrealm stateless clients would benefit from an authentication cache. for example if a stateless client may make several authentication requests within a few seconds. ideally the cache timeouts would be different. for example i might want to sent the authentication cache to 30 seconds, but the authorization cache to longer. (from previous email to les) i created a realm that authenticates against a url, if the user has access. the problem is that we have a stateless client [maven2] that connects to our server[nexus], and needs to authenticate each time. this means the same user needs to authenticate 9+ times in a few seconds (for a single task).",
        "label": 5
    },
    {
        "text": "shiro features jar missing on the download page we are trying to use shiro in apache felix but are not able to find the osgi bundle for it. the link provided on the download page: http://shiro.apache.org/download.html shiro-features is pointing to an xml and not a bundle/jar http://repo1.maven.org/maven2/org/apache/shiro/shiro-features/1.2.3/shiro-features-1.2.3-features.xml where can i find the osgi bundle for shiro?",
        "label": 2
    },
    {
        "text": "accesscontrolexception exception on gae with grails hi! i was doing the following: ---- snip ------ export classpath=\"\" grails create-app myapp cd myapp grails install-plugin app-engine (choosing jdo) grails uninstall-plugin tomcat grails set-version 1 grails install-plugin shiro grails quick-start grails app-engine package $appengine_sdk/bin/appcfg.sh update target/war ---- snip ------ i use the following version: grails 1.2.0 app-engine plugin 0.8.8 shiro plugin 1.0.1 appengine java sdk 1.3.0 checking the app engine logs gives me the following exception and stacktrace: ---- snip ------ javax.servlet.servletcontext log: initializing spring root webapplicationcontext [runtime network thread] error servlet.abstractfilter - unable to start filter: [access denied (java.lang.runtimepermission getclassloader)]. java.security.accesscontrolexception: access denied (java.lang.runtimepermission getclassloader) at java.security.accesscontrolcontext.checkpermission(accesscontrolcontext.java:355) at java.security.accesscontroller.checkpermission(accesscontroller.java:567) at java.lang.securitymanager.checkpermission(unknown source) at com.google.apphosting.runtime.security.customsecuritymanager.checkpermission(customsecuritymanager.java:45) at java.lang.classloader.getsystemclassloader(unknown source) at org.apache.shiro.util.classutils.getresourceasstream(classutils.java:73) at org.apache.shiro.io.resourceutils.loadfromclasspath(resourceutils.java:158) at org.apache.shiro.io.resourceutils.getinputstreamforpath(resourceutils.java:122) at org.apache.shiro.io.resourceutils.resourceexists(resourceutils.java:92) at org.apache.shiro.config.iniconfiguration.init(iniconfiguration.java:101) at org.apache.shiro.spring.springiniwebconfiguration.init(springiniwebconfiguration.java:96) at org.apache.shiro.util.lifecycleutils.init(lifecycleutils.java:47) at org.apache.shiro.util.lifecycleutils.init(lifecycleutils.java:41) at org.apache.shiro.web.servlet.shirofilter.configure(shirofilter.java:353) at org.apache.shiro.web.servlet.shirofilter.onfilterconfigset(shirofilter.java:287) at org.apache.shiro.web.servlet.abstractfilter.init(abstractfilter.java:94) at org.mortbay.jetty.servlet.filterholder.dostart(filterholder.java:99) at org.mortbay.component.abstractlifecycle.start(abstractlifecycle.java:40) at org.mortbay.jetty.servlet.servlethandler.initialize(servlethandler.java:589) ---- snip ------ after putting debug 'org.apache.shiro.io' into the log-section of config.groovy i get the additional log line: [runtime network thread] debug io.resourceutils - opening resource from class path [shiro.ini] just before the error.",
        "label": 5
    }
]